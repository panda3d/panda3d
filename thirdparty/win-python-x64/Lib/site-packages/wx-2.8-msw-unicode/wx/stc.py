# This file was created automatically by SWIG 1.3.29.
# Don't modify this file, modify the SWIG interface instead.

"""
The `StyledTextCtrl` provides a text editor that can used as a syntax
highlighting source code editor, or similar.  Lexers for several programming
languages are built-in.
"""

import _stc
import new
new_instancemethod = new.instancemethod
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import _core
import _misc
wx = _core 
__docfilter__ = wx.__DocFilter(globals()) 
STC_USE_DND = _stc.STC_USE_DND
STC_USE_POPUP = _stc.STC_USE_POPUP
STC_INVALID_POSITION = _stc.STC_INVALID_POSITION
STC_START = _stc.STC_START
STC_OPTIONAL_START = _stc.STC_OPTIONAL_START
STC_LEXER_START = _stc.STC_LEXER_START
STC_WS_INVISIBLE = _stc.STC_WS_INVISIBLE
STC_WS_VISIBLEALWAYS = _stc.STC_WS_VISIBLEALWAYS
STC_WS_VISIBLEAFTERINDENT = _stc.STC_WS_VISIBLEAFTERINDENT
STC_EOL_CRLF = _stc.STC_EOL_CRLF
STC_EOL_CR = _stc.STC_EOL_CR
STC_EOL_LF = _stc.STC_EOL_LF
STC_CP_UTF8 = _stc.STC_CP_UTF8
STC_CP_DBCS = _stc.STC_CP_DBCS
STC_MARKER_MAX = _stc.STC_MARKER_MAX
STC_MARK_CIRCLE = _stc.STC_MARK_CIRCLE
STC_MARK_ROUNDRECT = _stc.STC_MARK_ROUNDRECT
STC_MARK_ARROW = _stc.STC_MARK_ARROW
STC_MARK_SMALLRECT = _stc.STC_MARK_SMALLRECT
STC_MARK_SHORTARROW = _stc.STC_MARK_SHORTARROW
STC_MARK_EMPTY = _stc.STC_MARK_EMPTY
STC_MARK_ARROWDOWN = _stc.STC_MARK_ARROWDOWN
STC_MARK_MINUS = _stc.STC_MARK_MINUS
STC_MARK_PLUS = _stc.STC_MARK_PLUS
STC_MARK_VLINE = _stc.STC_MARK_VLINE
STC_MARK_LCORNER = _stc.STC_MARK_LCORNER
STC_MARK_TCORNER = _stc.STC_MARK_TCORNER
STC_MARK_BOXPLUS = _stc.STC_MARK_BOXPLUS
STC_MARK_BOXPLUSCONNECTED = _stc.STC_MARK_BOXPLUSCONNECTED
STC_MARK_BOXMINUS = _stc.STC_MARK_BOXMINUS
STC_MARK_BOXMINUSCONNECTED = _stc.STC_MARK_BOXMINUSCONNECTED
STC_MARK_LCORNERCURVE = _stc.STC_MARK_LCORNERCURVE
STC_MARK_TCORNERCURVE = _stc.STC_MARK_TCORNERCURVE
STC_MARK_CIRCLEPLUS = _stc.STC_MARK_CIRCLEPLUS
STC_MARK_CIRCLEPLUSCONNECTED = _stc.STC_MARK_CIRCLEPLUSCONNECTED
STC_MARK_CIRCLEMINUS = _stc.STC_MARK_CIRCLEMINUS
STC_MARK_CIRCLEMINUSCONNECTED = _stc.STC_MARK_CIRCLEMINUSCONNECTED
STC_MARK_BACKGROUND = _stc.STC_MARK_BACKGROUND
STC_MARK_DOTDOTDOT = _stc.STC_MARK_DOTDOTDOT
STC_MARK_ARROWS = _stc.STC_MARK_ARROWS
STC_MARK_PIXMAP = _stc.STC_MARK_PIXMAP
STC_MARK_FULLRECT = _stc.STC_MARK_FULLRECT
STC_MARK_CHARACTER = _stc.STC_MARK_CHARACTER
STC_MARKNUM_FOLDEREND = _stc.STC_MARKNUM_FOLDEREND
STC_MARKNUM_FOLDEROPENMID = _stc.STC_MARKNUM_FOLDEROPENMID
STC_MARKNUM_FOLDERMIDTAIL = _stc.STC_MARKNUM_FOLDERMIDTAIL
STC_MARKNUM_FOLDERTAIL = _stc.STC_MARKNUM_FOLDERTAIL
STC_MARKNUM_FOLDERSUB = _stc.STC_MARKNUM_FOLDERSUB
STC_MARKNUM_FOLDER = _stc.STC_MARKNUM_FOLDER
STC_MARKNUM_FOLDEROPEN = _stc.STC_MARKNUM_FOLDEROPEN
STC_MASK_FOLDERS = _stc.STC_MASK_FOLDERS
STC_MARGIN_SYMBOL = _stc.STC_MARGIN_SYMBOL
STC_MARGIN_NUMBER = _stc.STC_MARGIN_NUMBER
STC_MARGIN_BACK = _stc.STC_MARGIN_BACK
STC_MARGIN_FORE = _stc.STC_MARGIN_FORE
STC_STYLE_DEFAULT = _stc.STC_STYLE_DEFAULT
STC_STYLE_LINENUMBER = _stc.STC_STYLE_LINENUMBER
STC_STYLE_BRACELIGHT = _stc.STC_STYLE_BRACELIGHT
STC_STYLE_BRACEBAD = _stc.STC_STYLE_BRACEBAD
STC_STYLE_CONTROLCHAR = _stc.STC_STYLE_CONTROLCHAR
STC_STYLE_INDENTGUIDE = _stc.STC_STYLE_INDENTGUIDE
STC_STYLE_CALLTIP = _stc.STC_STYLE_CALLTIP
STC_STYLE_LASTPREDEFINED = _stc.STC_STYLE_LASTPREDEFINED
STC_STYLE_MAX = _stc.STC_STYLE_MAX
STC_CHARSET_ANSI = _stc.STC_CHARSET_ANSI
STC_CHARSET_DEFAULT = _stc.STC_CHARSET_DEFAULT
STC_CHARSET_BALTIC = _stc.STC_CHARSET_BALTIC
STC_CHARSET_CHINESEBIG5 = _stc.STC_CHARSET_CHINESEBIG5
STC_CHARSET_EASTEUROPE = _stc.STC_CHARSET_EASTEUROPE
STC_CHARSET_GB2312 = _stc.STC_CHARSET_GB2312
STC_CHARSET_GREEK = _stc.STC_CHARSET_GREEK
STC_CHARSET_HANGUL = _stc.STC_CHARSET_HANGUL
STC_CHARSET_MAC = _stc.STC_CHARSET_MAC
STC_CHARSET_OEM = _stc.STC_CHARSET_OEM
STC_CHARSET_RUSSIAN = _stc.STC_CHARSET_RUSSIAN
STC_CHARSET_CYRILLIC = _stc.STC_CHARSET_CYRILLIC
STC_CHARSET_SHIFTJIS = _stc.STC_CHARSET_SHIFTJIS
STC_CHARSET_SYMBOL = _stc.STC_CHARSET_SYMBOL
STC_CHARSET_TURKISH = _stc.STC_CHARSET_TURKISH
STC_CHARSET_JOHAB = _stc.STC_CHARSET_JOHAB
STC_CHARSET_HEBREW = _stc.STC_CHARSET_HEBREW
STC_CHARSET_ARABIC = _stc.STC_CHARSET_ARABIC
STC_CHARSET_VIETNAMESE = _stc.STC_CHARSET_VIETNAMESE
STC_CHARSET_THAI = _stc.STC_CHARSET_THAI
STC_CHARSET_8859_15 = _stc.STC_CHARSET_8859_15
STC_CASE_MIXED = _stc.STC_CASE_MIXED
STC_CASE_UPPER = _stc.STC_CASE_UPPER
STC_CASE_LOWER = _stc.STC_CASE_LOWER
STC_INDIC_MAX = _stc.STC_INDIC_MAX
STC_INDIC_PLAIN = _stc.STC_INDIC_PLAIN
STC_INDIC_SQUIGGLE = _stc.STC_INDIC_SQUIGGLE
STC_INDIC_TT = _stc.STC_INDIC_TT
STC_INDIC_DIAGONAL = _stc.STC_INDIC_DIAGONAL
STC_INDIC_STRIKE = _stc.STC_INDIC_STRIKE
STC_INDIC_HIDDEN = _stc.STC_INDIC_HIDDEN
STC_INDIC_BOX = _stc.STC_INDIC_BOX
STC_INDIC_ROUNDBOX = _stc.STC_INDIC_ROUNDBOX
STC_INDIC0_MASK = _stc.STC_INDIC0_MASK
STC_INDIC1_MASK = _stc.STC_INDIC1_MASK
STC_INDIC2_MASK = _stc.STC_INDIC2_MASK
STC_INDICS_MASK = _stc.STC_INDICS_MASK
STC_PRINT_NORMAL = _stc.STC_PRINT_NORMAL
STC_PRINT_INVERTLIGHT = _stc.STC_PRINT_INVERTLIGHT
STC_PRINT_BLACKONWHITE = _stc.STC_PRINT_BLACKONWHITE
STC_PRINT_COLOURONWHITE = _stc.STC_PRINT_COLOURONWHITE
STC_PRINT_COLOURONWHITEDEFAULTBG = _stc.STC_PRINT_COLOURONWHITEDEFAULTBG
STC_FIND_WHOLEWORD = _stc.STC_FIND_WHOLEWORD
STC_FIND_MATCHCASE = _stc.STC_FIND_MATCHCASE
STC_FIND_WORDSTART = _stc.STC_FIND_WORDSTART
STC_FIND_REGEXP = _stc.STC_FIND_REGEXP
STC_FIND_POSIX = _stc.STC_FIND_POSIX
STC_FOLDLEVELBASE = _stc.STC_FOLDLEVELBASE
STC_FOLDLEVELWHITEFLAG = _stc.STC_FOLDLEVELWHITEFLAG
STC_FOLDLEVELHEADERFLAG = _stc.STC_FOLDLEVELHEADERFLAG
STC_FOLDLEVELBOXHEADERFLAG = _stc.STC_FOLDLEVELBOXHEADERFLAG
STC_FOLDLEVELBOXFOOTERFLAG = _stc.STC_FOLDLEVELBOXFOOTERFLAG
STC_FOLDLEVELCONTRACTED = _stc.STC_FOLDLEVELCONTRACTED
STC_FOLDLEVELUNINDENT = _stc.STC_FOLDLEVELUNINDENT
STC_FOLDLEVELNUMBERMASK = _stc.STC_FOLDLEVELNUMBERMASK
STC_FOLDFLAG_LINEBEFORE_EXPANDED = _stc.STC_FOLDFLAG_LINEBEFORE_EXPANDED
STC_FOLDFLAG_LINEBEFORE_CONTRACTED = _stc.STC_FOLDFLAG_LINEBEFORE_CONTRACTED
STC_FOLDFLAG_LINEAFTER_EXPANDED = _stc.STC_FOLDFLAG_LINEAFTER_EXPANDED
STC_FOLDFLAG_LINEAFTER_CONTRACTED = _stc.STC_FOLDFLAG_LINEAFTER_CONTRACTED
STC_FOLDFLAG_LEVELNUMBERS = _stc.STC_FOLDFLAG_LEVELNUMBERS
STC_FOLDFLAG_BOX = _stc.STC_FOLDFLAG_BOX
STC_TIME_FOREVER = _stc.STC_TIME_FOREVER
STC_WRAP_NONE = _stc.STC_WRAP_NONE
STC_WRAP_WORD = _stc.STC_WRAP_WORD
STC_WRAP_CHAR = _stc.STC_WRAP_CHAR
STC_WRAPVISUALFLAG_NONE = _stc.STC_WRAPVISUALFLAG_NONE
STC_WRAPVISUALFLAG_END = _stc.STC_WRAPVISUALFLAG_END
STC_WRAPVISUALFLAG_START = _stc.STC_WRAPVISUALFLAG_START
STC_WRAPVISUALFLAGLOC_DEFAULT = _stc.STC_WRAPVISUALFLAGLOC_DEFAULT
STC_WRAPVISUALFLAGLOC_END_BY_TEXT = _stc.STC_WRAPVISUALFLAGLOC_END_BY_TEXT
STC_WRAPVISUALFLAGLOC_START_BY_TEXT = _stc.STC_WRAPVISUALFLAGLOC_START_BY_TEXT
STC_CACHE_NONE = _stc.STC_CACHE_NONE
STC_CACHE_CARET = _stc.STC_CACHE_CARET
STC_CACHE_PAGE = _stc.STC_CACHE_PAGE
STC_CACHE_DOCUMENT = _stc.STC_CACHE_DOCUMENT
STC_EDGE_NONE = _stc.STC_EDGE_NONE
STC_EDGE_LINE = _stc.STC_EDGE_LINE
STC_EDGE_BACKGROUND = _stc.STC_EDGE_BACKGROUND
STC_CURSORNORMAL = _stc.STC_CURSORNORMAL
STC_CURSORWAIT = _stc.STC_CURSORWAIT
STC_VISIBLE_SLOP = _stc.STC_VISIBLE_SLOP
STC_VISIBLE_STRICT = _stc.STC_VISIBLE_STRICT
STC_CARET_SLOP = _stc.STC_CARET_SLOP
STC_CARET_STRICT = _stc.STC_CARET_STRICT
STC_CARET_JUMPS = _stc.STC_CARET_JUMPS
STC_CARET_EVEN = _stc.STC_CARET_EVEN
STC_SEL_STREAM = _stc.STC_SEL_STREAM
STC_SEL_RECTANGLE = _stc.STC_SEL_RECTANGLE
STC_SEL_LINES = _stc.STC_SEL_LINES
STC_ALPHA_TRANSPARENT = _stc.STC_ALPHA_TRANSPARENT
STC_ALPHA_OPAQUE = _stc.STC_ALPHA_OPAQUE
STC_ALPHA_NOALPHA = _stc.STC_ALPHA_NOALPHA
STC_KEYWORDSET_MAX = _stc.STC_KEYWORDSET_MAX
STC_MOD_INSERTTEXT = _stc.STC_MOD_INSERTTEXT
STC_MOD_DELETETEXT = _stc.STC_MOD_DELETETEXT
STC_MOD_CHANGESTYLE = _stc.STC_MOD_CHANGESTYLE
STC_MOD_CHANGEFOLD = _stc.STC_MOD_CHANGEFOLD
STC_PERFORMED_USER = _stc.STC_PERFORMED_USER
STC_PERFORMED_UNDO = _stc.STC_PERFORMED_UNDO
STC_PERFORMED_REDO = _stc.STC_PERFORMED_REDO
STC_MULTISTEPUNDOREDO = _stc.STC_MULTISTEPUNDOREDO
STC_LASTSTEPINUNDOREDO = _stc.STC_LASTSTEPINUNDOREDO
STC_MOD_CHANGEMARKER = _stc.STC_MOD_CHANGEMARKER
STC_MOD_BEFOREINSERT = _stc.STC_MOD_BEFOREINSERT
STC_MOD_BEFOREDELETE = _stc.STC_MOD_BEFOREDELETE
STC_MULTILINEUNDOREDO = _stc.STC_MULTILINEUNDOREDO
STC_MODEVENTMASKALL = _stc.STC_MODEVENTMASKALL
STC_KEY_DOWN = _stc.STC_KEY_DOWN
STC_KEY_UP = _stc.STC_KEY_UP
STC_KEY_LEFT = _stc.STC_KEY_LEFT
STC_KEY_RIGHT = _stc.STC_KEY_RIGHT
STC_KEY_HOME = _stc.STC_KEY_HOME
STC_KEY_END = _stc.STC_KEY_END
STC_KEY_PRIOR = _stc.STC_KEY_PRIOR
STC_KEY_NEXT = _stc.STC_KEY_NEXT
STC_KEY_DELETE = _stc.STC_KEY_DELETE
STC_KEY_INSERT = _stc.STC_KEY_INSERT
STC_KEY_ESCAPE = _stc.STC_KEY_ESCAPE
STC_KEY_BACK = _stc.STC_KEY_BACK
STC_KEY_TAB = _stc.STC_KEY_TAB
STC_KEY_RETURN = _stc.STC_KEY_RETURN
STC_KEY_ADD = _stc.STC_KEY_ADD
STC_KEY_SUBTRACT = _stc.STC_KEY_SUBTRACT
STC_KEY_DIVIDE = _stc.STC_KEY_DIVIDE
STC_SCMOD_NORM = _stc.STC_SCMOD_NORM
STC_SCMOD_SHIFT = _stc.STC_SCMOD_SHIFT
STC_SCMOD_CTRL = _stc.STC_SCMOD_CTRL
STC_SCMOD_ALT = _stc.STC_SCMOD_ALT
STC_LEX_CONTAINER = _stc.STC_LEX_CONTAINER
STC_LEX_NULL = _stc.STC_LEX_NULL
STC_LEX_PYTHON = _stc.STC_LEX_PYTHON
STC_LEX_CPP = _stc.STC_LEX_CPP
STC_LEX_HTML = _stc.STC_LEX_HTML
STC_LEX_XML = _stc.STC_LEX_XML
STC_LEX_PERL = _stc.STC_LEX_PERL
STC_LEX_SQL = _stc.STC_LEX_SQL
STC_LEX_VB = _stc.STC_LEX_VB
STC_LEX_PROPERTIES = _stc.STC_LEX_PROPERTIES
STC_LEX_ERRORLIST = _stc.STC_LEX_ERRORLIST
STC_LEX_MAKEFILE = _stc.STC_LEX_MAKEFILE
STC_LEX_BATCH = _stc.STC_LEX_BATCH
STC_LEX_XCODE = _stc.STC_LEX_XCODE
STC_LEX_LATEX = _stc.STC_LEX_LATEX
STC_LEX_LUA = _stc.STC_LEX_LUA
STC_LEX_DIFF = _stc.STC_LEX_DIFF
STC_LEX_CONF = _stc.STC_LEX_CONF
STC_LEX_PASCAL = _stc.STC_LEX_PASCAL
STC_LEX_AVE = _stc.STC_LEX_AVE
STC_LEX_ADA = _stc.STC_LEX_ADA
STC_LEX_LISP = _stc.STC_LEX_LISP
STC_LEX_RUBY = _stc.STC_LEX_RUBY
STC_LEX_EIFFEL = _stc.STC_LEX_EIFFEL
STC_LEX_EIFFELKW = _stc.STC_LEX_EIFFELKW
STC_LEX_TCL = _stc.STC_LEX_TCL
STC_LEX_NNCRONTAB = _stc.STC_LEX_NNCRONTAB
STC_LEX_BULLANT = _stc.STC_LEX_BULLANT
STC_LEX_VBSCRIPT = _stc.STC_LEX_VBSCRIPT
STC_LEX_BAAN = _stc.STC_LEX_BAAN
STC_LEX_MATLAB = _stc.STC_LEX_MATLAB
STC_LEX_SCRIPTOL = _stc.STC_LEX_SCRIPTOL
STC_LEX_ASM = _stc.STC_LEX_ASM
STC_LEX_CPPNOCASE = _stc.STC_LEX_CPPNOCASE
STC_LEX_FORTRAN = _stc.STC_LEX_FORTRAN
STC_LEX_F77 = _stc.STC_LEX_F77
STC_LEX_CSS = _stc.STC_LEX_CSS
STC_LEX_POV = _stc.STC_LEX_POV
STC_LEX_LOUT = _stc.STC_LEX_LOUT
STC_LEX_ESCRIPT = _stc.STC_LEX_ESCRIPT
STC_LEX_PS = _stc.STC_LEX_PS
STC_LEX_NSIS = _stc.STC_LEX_NSIS
STC_LEX_MMIXAL = _stc.STC_LEX_MMIXAL
STC_LEX_CLW = _stc.STC_LEX_CLW
STC_LEX_CLWNOCASE = _stc.STC_LEX_CLWNOCASE
STC_LEX_LOT = _stc.STC_LEX_LOT
STC_LEX_YAML = _stc.STC_LEX_YAML
STC_LEX_TEX = _stc.STC_LEX_TEX
STC_LEX_METAPOST = _stc.STC_LEX_METAPOST
STC_LEX_POWERBASIC = _stc.STC_LEX_POWERBASIC
STC_LEX_FORTH = _stc.STC_LEX_FORTH
STC_LEX_ERLANG = _stc.STC_LEX_ERLANG
STC_LEX_OCTAVE = _stc.STC_LEX_OCTAVE
STC_LEX_MSSQL = _stc.STC_LEX_MSSQL
STC_LEX_VERILOG = _stc.STC_LEX_VERILOG
STC_LEX_KIX = _stc.STC_LEX_KIX
STC_LEX_GUI4CLI = _stc.STC_LEX_GUI4CLI
STC_LEX_SPECMAN = _stc.STC_LEX_SPECMAN
STC_LEX_AU3 = _stc.STC_LEX_AU3
STC_LEX_APDL = _stc.STC_LEX_APDL
STC_LEX_BASH = _stc.STC_LEX_BASH
STC_LEX_ASN1 = _stc.STC_LEX_ASN1
STC_LEX_VHDL = _stc.STC_LEX_VHDL
STC_LEX_CAML = _stc.STC_LEX_CAML
STC_LEX_BLITZBASIC = _stc.STC_LEX_BLITZBASIC
STC_LEX_PUREBASIC = _stc.STC_LEX_PUREBASIC
STC_LEX_HASKELL = _stc.STC_LEX_HASKELL
STC_LEX_PHPSCRIPT = _stc.STC_LEX_PHPSCRIPT
STC_LEX_TADS3 = _stc.STC_LEX_TADS3
STC_LEX_REBOL = _stc.STC_LEX_REBOL
STC_LEX_SMALLTALK = _stc.STC_LEX_SMALLTALK
STC_LEX_FLAGSHIP = _stc.STC_LEX_FLAGSHIP
STC_LEX_CSOUND = _stc.STC_LEX_CSOUND
STC_LEX_FREEBASIC = _stc.STC_LEX_FREEBASIC
STC_LEX_INNOSETUP = _stc.STC_LEX_INNOSETUP
STC_LEX_OPAL = _stc.STC_LEX_OPAL
STC_LEX_SPICE = _stc.STC_LEX_SPICE
STC_LEX_AUTOMATIC = _stc.STC_LEX_AUTOMATIC
STC_P_DEFAULT = _stc.STC_P_DEFAULT
STC_P_COMMENTLINE = _stc.STC_P_COMMENTLINE
STC_P_NUMBER = _stc.STC_P_NUMBER
STC_P_STRING = _stc.STC_P_STRING
STC_P_CHARACTER = _stc.STC_P_CHARACTER
STC_P_WORD = _stc.STC_P_WORD
STC_P_TRIPLE = _stc.STC_P_TRIPLE
STC_P_TRIPLEDOUBLE = _stc.STC_P_TRIPLEDOUBLE
STC_P_CLASSNAME = _stc.STC_P_CLASSNAME
STC_P_DEFNAME = _stc.STC_P_DEFNAME
STC_P_OPERATOR = _stc.STC_P_OPERATOR
STC_P_IDENTIFIER = _stc.STC_P_IDENTIFIER
STC_P_COMMENTBLOCK = _stc.STC_P_COMMENTBLOCK
STC_P_STRINGEOL = _stc.STC_P_STRINGEOL
STC_P_WORD2 = _stc.STC_P_WORD2
STC_P_DECORATOR = _stc.STC_P_DECORATOR
STC_C_DEFAULT = _stc.STC_C_DEFAULT
STC_C_COMMENT = _stc.STC_C_COMMENT
STC_C_COMMENTLINE = _stc.STC_C_COMMENTLINE
STC_C_COMMENTDOC = _stc.STC_C_COMMENTDOC
STC_C_NUMBER = _stc.STC_C_NUMBER
STC_C_WORD = _stc.STC_C_WORD
STC_C_STRING = _stc.STC_C_STRING
STC_C_CHARACTER = _stc.STC_C_CHARACTER
STC_C_UUID = _stc.STC_C_UUID
STC_C_PREPROCESSOR = _stc.STC_C_PREPROCESSOR
STC_C_OPERATOR = _stc.STC_C_OPERATOR
STC_C_IDENTIFIER = _stc.STC_C_IDENTIFIER
STC_C_STRINGEOL = _stc.STC_C_STRINGEOL
STC_C_VERBATIM = _stc.STC_C_VERBATIM
STC_C_REGEX = _stc.STC_C_REGEX
STC_C_COMMENTLINEDOC = _stc.STC_C_COMMENTLINEDOC
STC_C_WORD2 = _stc.STC_C_WORD2
STC_C_COMMENTDOCKEYWORD = _stc.STC_C_COMMENTDOCKEYWORD
STC_C_COMMENTDOCKEYWORDERROR = _stc.STC_C_COMMENTDOCKEYWORDERROR
STC_C_GLOBALCLASS = _stc.STC_C_GLOBALCLASS
STC_TCL_DEFAULT = _stc.STC_TCL_DEFAULT
STC_TCL_COMMENT = _stc.STC_TCL_COMMENT
STC_TCL_COMMENTLINE = _stc.STC_TCL_COMMENTLINE
STC_TCL_NUMBER = _stc.STC_TCL_NUMBER
STC_TCL_WORD_IN_QUOTE = _stc.STC_TCL_WORD_IN_QUOTE
STC_TCL_IN_QUOTE = _stc.STC_TCL_IN_QUOTE
STC_TCL_OPERATOR = _stc.STC_TCL_OPERATOR
STC_TCL_IDENTIFIER = _stc.STC_TCL_IDENTIFIER
STC_TCL_SUBSTITUTION = _stc.STC_TCL_SUBSTITUTION
STC_TCL_SUB_BRACE = _stc.STC_TCL_SUB_BRACE
STC_TCL_MODIFIER = _stc.STC_TCL_MODIFIER
STC_TCL_EXPAND = _stc.STC_TCL_EXPAND
STC_TCL_WORD = _stc.STC_TCL_WORD
STC_TCL_WORD2 = _stc.STC_TCL_WORD2
STC_TCL_WORD3 = _stc.STC_TCL_WORD3
STC_TCL_WORD4 = _stc.STC_TCL_WORD4
STC_TCL_WORD5 = _stc.STC_TCL_WORD5
STC_TCL_WORD6 = _stc.STC_TCL_WORD6
STC_TCL_WORD7 = _stc.STC_TCL_WORD7
STC_TCL_WORD8 = _stc.STC_TCL_WORD8
STC_TCL_COMMENT_BOX = _stc.STC_TCL_COMMENT_BOX
STC_TCL_BLOCK_COMMENT = _stc.STC_TCL_BLOCK_COMMENT
STC_H_DEFAULT = _stc.STC_H_DEFAULT
STC_H_TAG = _stc.STC_H_TAG
STC_H_TAGUNKNOWN = _stc.STC_H_TAGUNKNOWN
STC_H_ATTRIBUTE = _stc.STC_H_ATTRIBUTE
STC_H_ATTRIBUTEUNKNOWN = _stc.STC_H_ATTRIBUTEUNKNOWN
STC_H_NUMBER = _stc.STC_H_NUMBER
STC_H_DOUBLESTRING = _stc.STC_H_DOUBLESTRING
STC_H_SINGLESTRING = _stc.STC_H_SINGLESTRING
STC_H_OTHER = _stc.STC_H_OTHER
STC_H_COMMENT = _stc.STC_H_COMMENT
STC_H_ENTITY = _stc.STC_H_ENTITY
STC_H_TAGEND = _stc.STC_H_TAGEND
STC_H_XMLSTART = _stc.STC_H_XMLSTART
STC_H_XMLEND = _stc.STC_H_XMLEND
STC_H_SCRIPT = _stc.STC_H_SCRIPT
STC_H_ASP = _stc.STC_H_ASP
STC_H_ASPAT = _stc.STC_H_ASPAT
STC_H_CDATA = _stc.STC_H_CDATA
STC_H_QUESTION = _stc.STC_H_QUESTION
STC_H_VALUE = _stc.STC_H_VALUE
STC_H_XCCOMMENT = _stc.STC_H_XCCOMMENT
STC_H_SGML_DEFAULT = _stc.STC_H_SGML_DEFAULT
STC_H_SGML_COMMAND = _stc.STC_H_SGML_COMMAND
STC_H_SGML_1ST_PARAM = _stc.STC_H_SGML_1ST_PARAM
STC_H_SGML_DOUBLESTRING = _stc.STC_H_SGML_DOUBLESTRING
STC_H_SGML_SIMPLESTRING = _stc.STC_H_SGML_SIMPLESTRING
STC_H_SGML_ERROR = _stc.STC_H_SGML_ERROR
STC_H_SGML_SPECIAL = _stc.STC_H_SGML_SPECIAL
STC_H_SGML_ENTITY = _stc.STC_H_SGML_ENTITY
STC_H_SGML_COMMENT = _stc.STC_H_SGML_COMMENT
STC_H_SGML_1ST_PARAM_COMMENT = _stc.STC_H_SGML_1ST_PARAM_COMMENT
STC_H_SGML_BLOCK_DEFAULT = _stc.STC_H_SGML_BLOCK_DEFAULT
STC_HJ_START = _stc.STC_HJ_START
STC_HJ_DEFAULT = _stc.STC_HJ_DEFAULT
STC_HJ_COMMENT = _stc.STC_HJ_COMMENT
STC_HJ_COMMENTLINE = _stc.STC_HJ_COMMENTLINE
STC_HJ_COMMENTDOC = _stc.STC_HJ_COMMENTDOC
STC_HJ_NUMBER = _stc.STC_HJ_NUMBER
STC_HJ_WORD = _stc.STC_HJ_WORD
STC_HJ_KEYWORD = _stc.STC_HJ_KEYWORD
STC_HJ_DOUBLESTRING = _stc.STC_HJ_DOUBLESTRING
STC_HJ_SINGLESTRING = _stc.STC_HJ_SINGLESTRING
STC_HJ_SYMBOLS = _stc.STC_HJ_SYMBOLS
STC_HJ_STRINGEOL = _stc.STC_HJ_STRINGEOL
STC_HJ_REGEX = _stc.STC_HJ_REGEX
STC_HJA_START = _stc.STC_HJA_START
STC_HJA_DEFAULT = _stc.STC_HJA_DEFAULT
STC_HJA_COMMENT = _stc.STC_HJA_COMMENT
STC_HJA_COMMENTLINE = _stc.STC_HJA_COMMENTLINE
STC_HJA_COMMENTDOC = _stc.STC_HJA_COMMENTDOC
STC_HJA_NUMBER = _stc.STC_HJA_NUMBER
STC_HJA_WORD = _stc.STC_HJA_WORD
STC_HJA_KEYWORD = _stc.STC_HJA_KEYWORD
STC_HJA_DOUBLESTRING = _stc.STC_HJA_DOUBLESTRING
STC_HJA_SINGLESTRING = _stc.STC_HJA_SINGLESTRING
STC_HJA_SYMBOLS = _stc.STC_HJA_SYMBOLS
STC_HJA_STRINGEOL = _stc.STC_HJA_STRINGEOL
STC_HJA_REGEX = _stc.STC_HJA_REGEX
STC_HB_START = _stc.STC_HB_START
STC_HB_DEFAULT = _stc.STC_HB_DEFAULT
STC_HB_COMMENTLINE = _stc.STC_HB_COMMENTLINE
STC_HB_NUMBER = _stc.STC_HB_NUMBER
STC_HB_WORD = _stc.STC_HB_WORD
STC_HB_STRING = _stc.STC_HB_STRING
STC_HB_IDENTIFIER = _stc.STC_HB_IDENTIFIER
STC_HB_STRINGEOL = _stc.STC_HB_STRINGEOL
STC_HBA_START = _stc.STC_HBA_START
STC_HBA_DEFAULT = _stc.STC_HBA_DEFAULT
STC_HBA_COMMENTLINE = _stc.STC_HBA_COMMENTLINE
STC_HBA_NUMBER = _stc.STC_HBA_NUMBER
STC_HBA_WORD = _stc.STC_HBA_WORD
STC_HBA_STRING = _stc.STC_HBA_STRING
STC_HBA_IDENTIFIER = _stc.STC_HBA_IDENTIFIER
STC_HBA_STRINGEOL = _stc.STC_HBA_STRINGEOL
STC_HP_START = _stc.STC_HP_START
STC_HP_DEFAULT = _stc.STC_HP_DEFAULT
STC_HP_COMMENTLINE = _stc.STC_HP_COMMENTLINE
STC_HP_NUMBER = _stc.STC_HP_NUMBER
STC_HP_STRING = _stc.STC_HP_STRING
STC_HP_CHARACTER = _stc.STC_HP_CHARACTER
STC_HP_WORD = _stc.STC_HP_WORD
STC_HP_TRIPLE = _stc.STC_HP_TRIPLE
STC_HP_TRIPLEDOUBLE = _stc.STC_HP_TRIPLEDOUBLE
STC_HP_CLASSNAME = _stc.STC_HP_CLASSNAME
STC_HP_DEFNAME = _stc.STC_HP_DEFNAME
STC_HP_OPERATOR = _stc.STC_HP_OPERATOR
STC_HP_IDENTIFIER = _stc.STC_HP_IDENTIFIER
STC_HPHP_COMPLEX_VARIABLE = _stc.STC_HPHP_COMPLEX_VARIABLE
STC_HPA_START = _stc.STC_HPA_START
STC_HPA_DEFAULT = _stc.STC_HPA_DEFAULT
STC_HPA_COMMENTLINE = _stc.STC_HPA_COMMENTLINE
STC_HPA_NUMBER = _stc.STC_HPA_NUMBER
STC_HPA_STRING = _stc.STC_HPA_STRING
STC_HPA_CHARACTER = _stc.STC_HPA_CHARACTER
STC_HPA_WORD = _stc.STC_HPA_WORD
STC_HPA_TRIPLE = _stc.STC_HPA_TRIPLE
STC_HPA_TRIPLEDOUBLE = _stc.STC_HPA_TRIPLEDOUBLE
STC_HPA_CLASSNAME = _stc.STC_HPA_CLASSNAME
STC_HPA_DEFNAME = _stc.STC_HPA_DEFNAME
STC_HPA_OPERATOR = _stc.STC_HPA_OPERATOR
STC_HPA_IDENTIFIER = _stc.STC_HPA_IDENTIFIER
STC_HPHP_DEFAULT = _stc.STC_HPHP_DEFAULT
STC_HPHP_HSTRING = _stc.STC_HPHP_HSTRING
STC_HPHP_SIMPLESTRING = _stc.STC_HPHP_SIMPLESTRING
STC_HPHP_WORD = _stc.STC_HPHP_WORD
STC_HPHP_NUMBER = _stc.STC_HPHP_NUMBER
STC_HPHP_VARIABLE = _stc.STC_HPHP_VARIABLE
STC_HPHP_COMMENT = _stc.STC_HPHP_COMMENT
STC_HPHP_COMMENTLINE = _stc.STC_HPHP_COMMENTLINE
STC_HPHP_HSTRING_VARIABLE = _stc.STC_HPHP_HSTRING_VARIABLE
STC_HPHP_OPERATOR = _stc.STC_HPHP_OPERATOR
STC_PL_DEFAULT = _stc.STC_PL_DEFAULT
STC_PL_ERROR = _stc.STC_PL_ERROR
STC_PL_COMMENTLINE = _stc.STC_PL_COMMENTLINE
STC_PL_POD = _stc.STC_PL_POD
STC_PL_NUMBER = _stc.STC_PL_NUMBER
STC_PL_WORD = _stc.STC_PL_WORD
STC_PL_STRING = _stc.STC_PL_STRING
STC_PL_CHARACTER = _stc.STC_PL_CHARACTER
STC_PL_PUNCTUATION = _stc.STC_PL_PUNCTUATION
STC_PL_PREPROCESSOR = _stc.STC_PL_PREPROCESSOR
STC_PL_OPERATOR = _stc.STC_PL_OPERATOR
STC_PL_IDENTIFIER = _stc.STC_PL_IDENTIFIER
STC_PL_SCALAR = _stc.STC_PL_SCALAR
STC_PL_ARRAY = _stc.STC_PL_ARRAY
STC_PL_HASH = _stc.STC_PL_HASH
STC_PL_SYMBOLTABLE = _stc.STC_PL_SYMBOLTABLE
STC_PL_VARIABLE_INDEXER = _stc.STC_PL_VARIABLE_INDEXER
STC_PL_REGEX = _stc.STC_PL_REGEX
STC_PL_REGSUBST = _stc.STC_PL_REGSUBST
STC_PL_LONGQUOTE = _stc.STC_PL_LONGQUOTE
STC_PL_BACKTICKS = _stc.STC_PL_BACKTICKS
STC_PL_DATASECTION = _stc.STC_PL_DATASECTION
STC_PL_HERE_DELIM = _stc.STC_PL_HERE_DELIM
STC_PL_HERE_Q = _stc.STC_PL_HERE_Q
STC_PL_HERE_QQ = _stc.STC_PL_HERE_QQ
STC_PL_HERE_QX = _stc.STC_PL_HERE_QX
STC_PL_STRING_Q = _stc.STC_PL_STRING_Q
STC_PL_STRING_QQ = _stc.STC_PL_STRING_QQ
STC_PL_STRING_QX = _stc.STC_PL_STRING_QX
STC_PL_STRING_QR = _stc.STC_PL_STRING_QR
STC_PL_STRING_QW = _stc.STC_PL_STRING_QW
STC_PL_POD_VERB = _stc.STC_PL_POD_VERB
STC_RB_DEFAULT = _stc.STC_RB_DEFAULT
STC_RB_ERROR = _stc.STC_RB_ERROR
STC_RB_COMMENTLINE = _stc.STC_RB_COMMENTLINE
STC_RB_POD = _stc.STC_RB_POD
STC_RB_NUMBER = _stc.STC_RB_NUMBER
STC_RB_WORD = _stc.STC_RB_WORD
STC_RB_STRING = _stc.STC_RB_STRING
STC_RB_CHARACTER = _stc.STC_RB_CHARACTER
STC_RB_CLASSNAME = _stc.STC_RB_CLASSNAME
STC_RB_DEFNAME = _stc.STC_RB_DEFNAME
STC_RB_OPERATOR = _stc.STC_RB_OPERATOR
STC_RB_IDENTIFIER = _stc.STC_RB_IDENTIFIER
STC_RB_REGEX = _stc.STC_RB_REGEX
STC_RB_GLOBAL = _stc.STC_RB_GLOBAL
STC_RB_SYMBOL = _stc.STC_RB_SYMBOL
STC_RB_MODULE_NAME = _stc.STC_RB_MODULE_NAME
STC_RB_INSTANCE_VAR = _stc.STC_RB_INSTANCE_VAR
STC_RB_CLASS_VAR = _stc.STC_RB_CLASS_VAR
STC_RB_BACKTICKS = _stc.STC_RB_BACKTICKS
STC_RB_DATASECTION = _stc.STC_RB_DATASECTION
STC_RB_HERE_DELIM = _stc.STC_RB_HERE_DELIM
STC_RB_HERE_Q = _stc.STC_RB_HERE_Q
STC_RB_HERE_QQ = _stc.STC_RB_HERE_QQ
STC_RB_HERE_QX = _stc.STC_RB_HERE_QX
STC_RB_STRING_Q = _stc.STC_RB_STRING_Q
STC_RB_STRING_QQ = _stc.STC_RB_STRING_QQ
STC_RB_STRING_QX = _stc.STC_RB_STRING_QX
STC_RB_STRING_QR = _stc.STC_RB_STRING_QR
STC_RB_STRING_QW = _stc.STC_RB_STRING_QW
STC_RB_WORD_DEMOTED = _stc.STC_RB_WORD_DEMOTED
STC_RB_STDIN = _stc.STC_RB_STDIN
STC_RB_STDOUT = _stc.STC_RB_STDOUT
STC_RB_STDERR = _stc.STC_RB_STDERR
STC_RB_UPPER_BOUND = _stc.STC_RB_UPPER_BOUND
STC_B_DEFAULT = _stc.STC_B_DEFAULT
STC_B_COMMENT = _stc.STC_B_COMMENT
STC_B_NUMBER = _stc.STC_B_NUMBER
STC_B_KEYWORD = _stc.STC_B_KEYWORD
STC_B_STRING = _stc.STC_B_STRING
STC_B_PREPROCESSOR = _stc.STC_B_PREPROCESSOR
STC_B_OPERATOR = _stc.STC_B_OPERATOR
STC_B_IDENTIFIER = _stc.STC_B_IDENTIFIER
STC_B_DATE = _stc.STC_B_DATE
STC_B_STRINGEOL = _stc.STC_B_STRINGEOL
STC_B_KEYWORD2 = _stc.STC_B_KEYWORD2
STC_B_KEYWORD3 = _stc.STC_B_KEYWORD3
STC_B_KEYWORD4 = _stc.STC_B_KEYWORD4
STC_B_CONSTANT = _stc.STC_B_CONSTANT
STC_B_ASM = _stc.STC_B_ASM
STC_B_LABEL = _stc.STC_B_LABEL
STC_B_ERROR = _stc.STC_B_ERROR
STC_B_HEXNUMBER = _stc.STC_B_HEXNUMBER
STC_B_BINNUMBER = _stc.STC_B_BINNUMBER
STC_PROPS_DEFAULT = _stc.STC_PROPS_DEFAULT
STC_PROPS_COMMENT = _stc.STC_PROPS_COMMENT
STC_PROPS_SECTION = _stc.STC_PROPS_SECTION
STC_PROPS_ASSIGNMENT = _stc.STC_PROPS_ASSIGNMENT
STC_PROPS_DEFVAL = _stc.STC_PROPS_DEFVAL
STC_PROPS_KEY = _stc.STC_PROPS_KEY
STC_L_DEFAULT = _stc.STC_L_DEFAULT
STC_L_COMMAND = _stc.STC_L_COMMAND
STC_L_TAG = _stc.STC_L_TAG
STC_L_MATH = _stc.STC_L_MATH
STC_L_COMMENT = _stc.STC_L_COMMENT
STC_LUA_DEFAULT = _stc.STC_LUA_DEFAULT
STC_LUA_COMMENT = _stc.STC_LUA_COMMENT
STC_LUA_COMMENTLINE = _stc.STC_LUA_COMMENTLINE
STC_LUA_COMMENTDOC = _stc.STC_LUA_COMMENTDOC
STC_LUA_NUMBER = _stc.STC_LUA_NUMBER
STC_LUA_WORD = _stc.STC_LUA_WORD
STC_LUA_STRING = _stc.STC_LUA_STRING
STC_LUA_CHARACTER = _stc.STC_LUA_CHARACTER
STC_LUA_LITERALSTRING = _stc.STC_LUA_LITERALSTRING
STC_LUA_PREPROCESSOR = _stc.STC_LUA_PREPROCESSOR
STC_LUA_OPERATOR = _stc.STC_LUA_OPERATOR
STC_LUA_IDENTIFIER = _stc.STC_LUA_IDENTIFIER
STC_LUA_STRINGEOL = _stc.STC_LUA_STRINGEOL
STC_LUA_WORD2 = _stc.STC_LUA_WORD2
STC_LUA_WORD3 = _stc.STC_LUA_WORD3
STC_LUA_WORD4 = _stc.STC_LUA_WORD4
STC_LUA_WORD5 = _stc.STC_LUA_WORD5
STC_LUA_WORD6 = _stc.STC_LUA_WORD6
STC_LUA_WORD7 = _stc.STC_LUA_WORD7
STC_LUA_WORD8 = _stc.STC_LUA_WORD8
STC_ERR_DEFAULT = _stc.STC_ERR_DEFAULT
STC_ERR_PYTHON = _stc.STC_ERR_PYTHON
STC_ERR_GCC = _stc.STC_ERR_GCC
STC_ERR_MS = _stc.STC_ERR_MS
STC_ERR_CMD = _stc.STC_ERR_CMD
STC_ERR_BORLAND = _stc.STC_ERR_BORLAND
STC_ERR_PERL = _stc.STC_ERR_PERL
STC_ERR_NET = _stc.STC_ERR_NET
STC_ERR_LUA = _stc.STC_ERR_LUA
STC_ERR_CTAG = _stc.STC_ERR_CTAG
STC_ERR_DIFF_CHANGED = _stc.STC_ERR_DIFF_CHANGED
STC_ERR_DIFF_ADDITION = _stc.STC_ERR_DIFF_ADDITION
STC_ERR_DIFF_DELETION = _stc.STC_ERR_DIFF_DELETION
STC_ERR_DIFF_MESSAGE = _stc.STC_ERR_DIFF_MESSAGE
STC_ERR_PHP = _stc.STC_ERR_PHP
STC_ERR_ELF = _stc.STC_ERR_ELF
STC_ERR_IFC = _stc.STC_ERR_IFC
STC_ERR_IFORT = _stc.STC_ERR_IFORT
STC_ERR_ABSF = _stc.STC_ERR_ABSF
STC_ERR_TIDY = _stc.STC_ERR_TIDY
STC_ERR_JAVA_STACK = _stc.STC_ERR_JAVA_STACK
STC_BAT_DEFAULT = _stc.STC_BAT_DEFAULT
STC_BAT_COMMENT = _stc.STC_BAT_COMMENT
STC_BAT_WORD = _stc.STC_BAT_WORD
STC_BAT_LABEL = _stc.STC_BAT_LABEL
STC_BAT_HIDE = _stc.STC_BAT_HIDE
STC_BAT_COMMAND = _stc.STC_BAT_COMMAND
STC_BAT_IDENTIFIER = _stc.STC_BAT_IDENTIFIER
STC_BAT_OPERATOR = _stc.STC_BAT_OPERATOR
STC_MAKE_DEFAULT = _stc.STC_MAKE_DEFAULT
STC_MAKE_COMMENT = _stc.STC_MAKE_COMMENT
STC_MAKE_PREPROCESSOR = _stc.STC_MAKE_PREPROCESSOR
STC_MAKE_IDENTIFIER = _stc.STC_MAKE_IDENTIFIER
STC_MAKE_OPERATOR = _stc.STC_MAKE_OPERATOR
STC_MAKE_TARGET = _stc.STC_MAKE_TARGET
STC_MAKE_IDEOL = _stc.STC_MAKE_IDEOL
STC_DIFF_DEFAULT = _stc.STC_DIFF_DEFAULT
STC_DIFF_COMMENT = _stc.STC_DIFF_COMMENT
STC_DIFF_COMMAND = _stc.STC_DIFF_COMMAND
STC_DIFF_HEADER = _stc.STC_DIFF_HEADER
STC_DIFF_POSITION = _stc.STC_DIFF_POSITION
STC_DIFF_DELETED = _stc.STC_DIFF_DELETED
STC_DIFF_ADDED = _stc.STC_DIFF_ADDED
STC_CONF_DEFAULT = _stc.STC_CONF_DEFAULT
STC_CONF_COMMENT = _stc.STC_CONF_COMMENT
STC_CONF_NUMBER = _stc.STC_CONF_NUMBER
STC_CONF_IDENTIFIER = _stc.STC_CONF_IDENTIFIER
STC_CONF_EXTENSION = _stc.STC_CONF_EXTENSION
STC_CONF_PARAMETER = _stc.STC_CONF_PARAMETER
STC_CONF_STRING = _stc.STC_CONF_STRING
STC_CONF_OPERATOR = _stc.STC_CONF_OPERATOR
STC_CONF_IP = _stc.STC_CONF_IP
STC_CONF_DIRECTIVE = _stc.STC_CONF_DIRECTIVE
STC_AVE_DEFAULT = _stc.STC_AVE_DEFAULT
STC_AVE_COMMENT = _stc.STC_AVE_COMMENT
STC_AVE_NUMBER = _stc.STC_AVE_NUMBER
STC_AVE_WORD = _stc.STC_AVE_WORD
STC_AVE_STRING = _stc.STC_AVE_STRING
STC_AVE_ENUM = _stc.STC_AVE_ENUM
STC_AVE_STRINGEOL = _stc.STC_AVE_STRINGEOL
STC_AVE_IDENTIFIER = _stc.STC_AVE_IDENTIFIER
STC_AVE_OPERATOR = _stc.STC_AVE_OPERATOR
STC_AVE_WORD1 = _stc.STC_AVE_WORD1
STC_AVE_WORD2 = _stc.STC_AVE_WORD2
STC_AVE_WORD3 = _stc.STC_AVE_WORD3
STC_AVE_WORD4 = _stc.STC_AVE_WORD4
STC_AVE_WORD5 = _stc.STC_AVE_WORD5
STC_AVE_WORD6 = _stc.STC_AVE_WORD6
STC_ADA_DEFAULT = _stc.STC_ADA_DEFAULT
STC_ADA_WORD = _stc.STC_ADA_WORD
STC_ADA_IDENTIFIER = _stc.STC_ADA_IDENTIFIER
STC_ADA_NUMBER = _stc.STC_ADA_NUMBER
STC_ADA_DELIMITER = _stc.STC_ADA_DELIMITER
STC_ADA_CHARACTER = _stc.STC_ADA_CHARACTER
STC_ADA_CHARACTEREOL = _stc.STC_ADA_CHARACTEREOL
STC_ADA_STRING = _stc.STC_ADA_STRING
STC_ADA_STRINGEOL = _stc.STC_ADA_STRINGEOL
STC_ADA_LABEL = _stc.STC_ADA_LABEL
STC_ADA_COMMENTLINE = _stc.STC_ADA_COMMENTLINE
STC_ADA_ILLEGAL = _stc.STC_ADA_ILLEGAL
STC_BAAN_DEFAULT = _stc.STC_BAAN_DEFAULT
STC_BAAN_COMMENT = _stc.STC_BAAN_COMMENT
STC_BAAN_COMMENTDOC = _stc.STC_BAAN_COMMENTDOC
STC_BAAN_NUMBER = _stc.STC_BAAN_NUMBER
STC_BAAN_WORD = _stc.STC_BAAN_WORD
STC_BAAN_STRING = _stc.STC_BAAN_STRING
STC_BAAN_PREPROCESSOR = _stc.STC_BAAN_PREPROCESSOR
STC_BAAN_OPERATOR = _stc.STC_BAAN_OPERATOR
STC_BAAN_IDENTIFIER = _stc.STC_BAAN_IDENTIFIER
STC_BAAN_STRINGEOL = _stc.STC_BAAN_STRINGEOL
STC_BAAN_WORD2 = _stc.STC_BAAN_WORD2
STC_LISP_DEFAULT = _stc.STC_LISP_DEFAULT
STC_LISP_COMMENT = _stc.STC_LISP_COMMENT
STC_LISP_NUMBER = _stc.STC_LISP_NUMBER
STC_LISP_KEYWORD = _stc.STC_LISP_KEYWORD
STC_LISP_KEYWORD_KW = _stc.STC_LISP_KEYWORD_KW
STC_LISP_SYMBOL = _stc.STC_LISP_SYMBOL
STC_LISP_STRING = _stc.STC_LISP_STRING
STC_LISP_STRINGEOL = _stc.STC_LISP_STRINGEOL
STC_LISP_IDENTIFIER = _stc.STC_LISP_IDENTIFIER
STC_LISP_OPERATOR = _stc.STC_LISP_OPERATOR
STC_LISP_SPECIAL = _stc.STC_LISP_SPECIAL
STC_LISP_MULTI_COMMENT = _stc.STC_LISP_MULTI_COMMENT
STC_EIFFEL_DEFAULT = _stc.STC_EIFFEL_DEFAULT
STC_EIFFEL_COMMENTLINE = _stc.STC_EIFFEL_COMMENTLINE
STC_EIFFEL_NUMBER = _stc.STC_EIFFEL_NUMBER
STC_EIFFEL_WORD = _stc.STC_EIFFEL_WORD
STC_EIFFEL_STRING = _stc.STC_EIFFEL_STRING
STC_EIFFEL_CHARACTER = _stc.STC_EIFFEL_CHARACTER
STC_EIFFEL_OPERATOR = _stc.STC_EIFFEL_OPERATOR
STC_EIFFEL_IDENTIFIER = _stc.STC_EIFFEL_IDENTIFIER
STC_EIFFEL_STRINGEOL = _stc.STC_EIFFEL_STRINGEOL
STC_NNCRONTAB_DEFAULT = _stc.STC_NNCRONTAB_DEFAULT
STC_NNCRONTAB_COMMENT = _stc.STC_NNCRONTAB_COMMENT
STC_NNCRONTAB_TASK = _stc.STC_NNCRONTAB_TASK
STC_NNCRONTAB_SECTION = _stc.STC_NNCRONTAB_SECTION
STC_NNCRONTAB_KEYWORD = _stc.STC_NNCRONTAB_KEYWORD
STC_NNCRONTAB_MODIFIER = _stc.STC_NNCRONTAB_MODIFIER
STC_NNCRONTAB_ASTERISK = _stc.STC_NNCRONTAB_ASTERISK
STC_NNCRONTAB_NUMBER = _stc.STC_NNCRONTAB_NUMBER
STC_NNCRONTAB_STRING = _stc.STC_NNCRONTAB_STRING
STC_NNCRONTAB_ENVIRONMENT = _stc.STC_NNCRONTAB_ENVIRONMENT
STC_NNCRONTAB_IDENTIFIER = _stc.STC_NNCRONTAB_IDENTIFIER
STC_FORTH_DEFAULT = _stc.STC_FORTH_DEFAULT
STC_FORTH_COMMENT = _stc.STC_FORTH_COMMENT
STC_FORTH_COMMENT_ML = _stc.STC_FORTH_COMMENT_ML
STC_FORTH_IDENTIFIER = _stc.STC_FORTH_IDENTIFIER
STC_FORTH_CONTROL = _stc.STC_FORTH_CONTROL
STC_FORTH_KEYWORD = _stc.STC_FORTH_KEYWORD
STC_FORTH_DEFWORD = _stc.STC_FORTH_DEFWORD
STC_FORTH_PREWORD1 = _stc.STC_FORTH_PREWORD1
STC_FORTH_PREWORD2 = _stc.STC_FORTH_PREWORD2
STC_FORTH_NUMBER = _stc.STC_FORTH_NUMBER
STC_FORTH_STRING = _stc.STC_FORTH_STRING
STC_FORTH_LOCALE = _stc.STC_FORTH_LOCALE
STC_MATLAB_DEFAULT = _stc.STC_MATLAB_DEFAULT
STC_MATLAB_COMMENT = _stc.STC_MATLAB_COMMENT
STC_MATLAB_COMMAND = _stc.STC_MATLAB_COMMAND
STC_MATLAB_NUMBER = _stc.STC_MATLAB_NUMBER
STC_MATLAB_KEYWORD = _stc.STC_MATLAB_KEYWORD
STC_MATLAB_STRING = _stc.STC_MATLAB_STRING
STC_MATLAB_OPERATOR = _stc.STC_MATLAB_OPERATOR
STC_MATLAB_IDENTIFIER = _stc.STC_MATLAB_IDENTIFIER
STC_MATLAB_DOUBLEQUOTESTRING = _stc.STC_MATLAB_DOUBLEQUOTESTRING
STC_SCRIPTOL_DEFAULT = _stc.STC_SCRIPTOL_DEFAULT
STC_SCRIPTOL_WHITE = _stc.STC_SCRIPTOL_WHITE
STC_SCRIPTOL_COMMENTLINE = _stc.STC_SCRIPTOL_COMMENTLINE
STC_SCRIPTOL_PERSISTENT = _stc.STC_SCRIPTOL_PERSISTENT
STC_SCRIPTOL_CSTYLE = _stc.STC_SCRIPTOL_CSTYLE
STC_SCRIPTOL_COMMENTBLOCK = _stc.STC_SCRIPTOL_COMMENTBLOCK
STC_SCRIPTOL_NUMBER = _stc.STC_SCRIPTOL_NUMBER
STC_SCRIPTOL_STRING = _stc.STC_SCRIPTOL_STRING
STC_SCRIPTOL_CHARACTER = _stc.STC_SCRIPTOL_CHARACTER
STC_SCRIPTOL_STRINGEOL = _stc.STC_SCRIPTOL_STRINGEOL
STC_SCRIPTOL_KEYWORD = _stc.STC_SCRIPTOL_KEYWORD
STC_SCRIPTOL_OPERATOR = _stc.STC_SCRIPTOL_OPERATOR
STC_SCRIPTOL_IDENTIFIER = _stc.STC_SCRIPTOL_IDENTIFIER
STC_SCRIPTOL_TRIPLE = _stc.STC_SCRIPTOL_TRIPLE
STC_SCRIPTOL_CLASSNAME = _stc.STC_SCRIPTOL_CLASSNAME
STC_SCRIPTOL_PREPROCESSOR = _stc.STC_SCRIPTOL_PREPROCESSOR
STC_ASM_DEFAULT = _stc.STC_ASM_DEFAULT
STC_ASM_COMMENT = _stc.STC_ASM_COMMENT
STC_ASM_NUMBER = _stc.STC_ASM_NUMBER
STC_ASM_STRING = _stc.STC_ASM_STRING
STC_ASM_OPERATOR = _stc.STC_ASM_OPERATOR
STC_ASM_IDENTIFIER = _stc.STC_ASM_IDENTIFIER
STC_ASM_CPUINSTRUCTION = _stc.STC_ASM_CPUINSTRUCTION
STC_ASM_MATHINSTRUCTION = _stc.STC_ASM_MATHINSTRUCTION
STC_ASM_REGISTER = _stc.STC_ASM_REGISTER
STC_ASM_DIRECTIVE = _stc.STC_ASM_DIRECTIVE
STC_ASM_DIRECTIVEOPERAND = _stc.STC_ASM_DIRECTIVEOPERAND
STC_ASM_COMMENTBLOCK = _stc.STC_ASM_COMMENTBLOCK
STC_ASM_CHARACTER = _stc.STC_ASM_CHARACTER
STC_ASM_STRINGEOL = _stc.STC_ASM_STRINGEOL
STC_ASM_EXTINSTRUCTION = _stc.STC_ASM_EXTINSTRUCTION
STC_F_DEFAULT = _stc.STC_F_DEFAULT
STC_F_COMMENT = _stc.STC_F_COMMENT
STC_F_NUMBER = _stc.STC_F_NUMBER
STC_F_STRING1 = _stc.STC_F_STRING1
STC_F_STRING2 = _stc.STC_F_STRING2
STC_F_STRINGEOL = _stc.STC_F_STRINGEOL
STC_F_OPERATOR = _stc.STC_F_OPERATOR
STC_F_IDENTIFIER = _stc.STC_F_IDENTIFIER
STC_F_WORD = _stc.STC_F_WORD
STC_F_WORD2 = _stc.STC_F_WORD2
STC_F_WORD3 = _stc.STC_F_WORD3
STC_F_PREPROCESSOR = _stc.STC_F_PREPROCESSOR
STC_F_OPERATOR2 = _stc.STC_F_OPERATOR2
STC_F_LABEL = _stc.STC_F_LABEL
STC_F_CONTINUATION = _stc.STC_F_CONTINUATION
STC_CSS_DEFAULT = _stc.STC_CSS_DEFAULT
STC_CSS_TAG = _stc.STC_CSS_TAG
STC_CSS_CLASS = _stc.STC_CSS_CLASS
STC_CSS_PSEUDOCLASS = _stc.STC_CSS_PSEUDOCLASS
STC_CSS_UNKNOWN_PSEUDOCLASS = _stc.STC_CSS_UNKNOWN_PSEUDOCLASS
STC_CSS_OPERATOR = _stc.STC_CSS_OPERATOR
STC_CSS_IDENTIFIER = _stc.STC_CSS_IDENTIFIER
STC_CSS_UNKNOWN_IDENTIFIER = _stc.STC_CSS_UNKNOWN_IDENTIFIER
STC_CSS_VALUE = _stc.STC_CSS_VALUE
STC_CSS_COMMENT = _stc.STC_CSS_COMMENT
STC_CSS_ID = _stc.STC_CSS_ID
STC_CSS_IMPORTANT = _stc.STC_CSS_IMPORTANT
STC_CSS_DIRECTIVE = _stc.STC_CSS_DIRECTIVE
STC_CSS_DOUBLESTRING = _stc.STC_CSS_DOUBLESTRING
STC_CSS_SINGLESTRING = _stc.STC_CSS_SINGLESTRING
STC_CSS_IDENTIFIER2 = _stc.STC_CSS_IDENTIFIER2
STC_CSS_ATTRIBUTE = _stc.STC_CSS_ATTRIBUTE
STC_POV_DEFAULT = _stc.STC_POV_DEFAULT
STC_POV_COMMENT = _stc.STC_POV_COMMENT
STC_POV_COMMENTLINE = _stc.STC_POV_COMMENTLINE
STC_POV_NUMBER = _stc.STC_POV_NUMBER
STC_POV_OPERATOR = _stc.STC_POV_OPERATOR
STC_POV_IDENTIFIER = _stc.STC_POV_IDENTIFIER
STC_POV_STRING = _stc.STC_POV_STRING
STC_POV_STRINGEOL = _stc.STC_POV_STRINGEOL
STC_POV_DIRECTIVE = _stc.STC_POV_DIRECTIVE
STC_POV_BADDIRECTIVE = _stc.STC_POV_BADDIRECTIVE
STC_POV_WORD2 = _stc.STC_POV_WORD2
STC_POV_WORD3 = _stc.STC_POV_WORD3
STC_POV_WORD4 = _stc.STC_POV_WORD4
STC_POV_WORD5 = _stc.STC_POV_WORD5
STC_POV_WORD6 = _stc.STC_POV_WORD6
STC_POV_WORD7 = _stc.STC_POV_WORD7
STC_POV_WORD8 = _stc.STC_POV_WORD8
STC_LOUT_DEFAULT = _stc.STC_LOUT_DEFAULT
STC_LOUT_COMMENT = _stc.STC_LOUT_COMMENT
STC_LOUT_NUMBER = _stc.STC_LOUT_NUMBER
STC_LOUT_WORD = _stc.STC_LOUT_WORD
STC_LOUT_WORD2 = _stc.STC_LOUT_WORD2
STC_LOUT_WORD3 = _stc.STC_LOUT_WORD3
STC_LOUT_WORD4 = _stc.STC_LOUT_WORD4
STC_LOUT_STRING = _stc.STC_LOUT_STRING
STC_LOUT_OPERATOR = _stc.STC_LOUT_OPERATOR
STC_LOUT_IDENTIFIER = _stc.STC_LOUT_IDENTIFIER
STC_LOUT_STRINGEOL = _stc.STC_LOUT_STRINGEOL
STC_ESCRIPT_DEFAULT = _stc.STC_ESCRIPT_DEFAULT
STC_ESCRIPT_COMMENT = _stc.STC_ESCRIPT_COMMENT
STC_ESCRIPT_COMMENTLINE = _stc.STC_ESCRIPT_COMMENTLINE
STC_ESCRIPT_COMMENTDOC = _stc.STC_ESCRIPT_COMMENTDOC
STC_ESCRIPT_NUMBER = _stc.STC_ESCRIPT_NUMBER
STC_ESCRIPT_WORD = _stc.STC_ESCRIPT_WORD
STC_ESCRIPT_STRING = _stc.STC_ESCRIPT_STRING
STC_ESCRIPT_OPERATOR = _stc.STC_ESCRIPT_OPERATOR
STC_ESCRIPT_IDENTIFIER = _stc.STC_ESCRIPT_IDENTIFIER
STC_ESCRIPT_BRACE = _stc.STC_ESCRIPT_BRACE
STC_ESCRIPT_WORD2 = _stc.STC_ESCRIPT_WORD2
STC_ESCRIPT_WORD3 = _stc.STC_ESCRIPT_WORD3
STC_PS_DEFAULT = _stc.STC_PS_DEFAULT
STC_PS_COMMENT = _stc.STC_PS_COMMENT
STC_PS_DSC_COMMENT = _stc.STC_PS_DSC_COMMENT
STC_PS_DSC_VALUE = _stc.STC_PS_DSC_VALUE
STC_PS_NUMBER = _stc.STC_PS_NUMBER
STC_PS_NAME = _stc.STC_PS_NAME
STC_PS_KEYWORD = _stc.STC_PS_KEYWORD
STC_PS_LITERAL = _stc.STC_PS_LITERAL
STC_PS_IMMEVAL = _stc.STC_PS_IMMEVAL
STC_PS_PAREN_ARRAY = _stc.STC_PS_PAREN_ARRAY
STC_PS_PAREN_DICT = _stc.STC_PS_PAREN_DICT
STC_PS_PAREN_PROC = _stc.STC_PS_PAREN_PROC
STC_PS_TEXT = _stc.STC_PS_TEXT
STC_PS_HEXSTRING = _stc.STC_PS_HEXSTRING
STC_PS_BASE85STRING = _stc.STC_PS_BASE85STRING
STC_PS_BADSTRINGCHAR = _stc.STC_PS_BADSTRINGCHAR
STC_NSIS_DEFAULT = _stc.STC_NSIS_DEFAULT
STC_NSIS_COMMENT = _stc.STC_NSIS_COMMENT
STC_NSIS_STRINGDQ = _stc.STC_NSIS_STRINGDQ
STC_NSIS_STRINGLQ = _stc.STC_NSIS_STRINGLQ
STC_NSIS_STRINGRQ = _stc.STC_NSIS_STRINGRQ
STC_NSIS_FUNCTION = _stc.STC_NSIS_FUNCTION
STC_NSIS_VARIABLE = _stc.STC_NSIS_VARIABLE
STC_NSIS_LABEL = _stc.STC_NSIS_LABEL
STC_NSIS_USERDEFINED = _stc.STC_NSIS_USERDEFINED
STC_NSIS_SECTIONDEF = _stc.STC_NSIS_SECTIONDEF
STC_NSIS_SUBSECTIONDEF = _stc.STC_NSIS_SUBSECTIONDEF
STC_NSIS_IFDEFINEDEF = _stc.STC_NSIS_IFDEFINEDEF
STC_NSIS_MACRODEF = _stc.STC_NSIS_MACRODEF
STC_NSIS_STRINGVAR = _stc.STC_NSIS_STRINGVAR
STC_NSIS_NUMBER = _stc.STC_NSIS_NUMBER
STC_NSIS_SECTIONGROUP = _stc.STC_NSIS_SECTIONGROUP
STC_NSIS_PAGEEX = _stc.STC_NSIS_PAGEEX
STC_NSIS_FUNCTIONDEF = _stc.STC_NSIS_FUNCTIONDEF
STC_NSIS_COMMENTBOX = _stc.STC_NSIS_COMMENTBOX
STC_MMIXAL_LEADWS = _stc.STC_MMIXAL_LEADWS
STC_MMIXAL_COMMENT = _stc.STC_MMIXAL_COMMENT
STC_MMIXAL_LABEL = _stc.STC_MMIXAL_LABEL
STC_MMIXAL_OPCODE = _stc.STC_MMIXAL_OPCODE
STC_MMIXAL_OPCODE_PRE = _stc.STC_MMIXAL_OPCODE_PRE
STC_MMIXAL_OPCODE_VALID = _stc.STC_MMIXAL_OPCODE_VALID
STC_MMIXAL_OPCODE_UNKNOWN = _stc.STC_MMIXAL_OPCODE_UNKNOWN
STC_MMIXAL_OPCODE_POST = _stc.STC_MMIXAL_OPCODE_POST
STC_MMIXAL_OPERANDS = _stc.STC_MMIXAL_OPERANDS
STC_MMIXAL_NUMBER = _stc.STC_MMIXAL_NUMBER
STC_MMIXAL_REF = _stc.STC_MMIXAL_REF
STC_MMIXAL_CHAR = _stc.STC_MMIXAL_CHAR
STC_MMIXAL_STRING = _stc.STC_MMIXAL_STRING
STC_MMIXAL_REGISTER = _stc.STC_MMIXAL_REGISTER
STC_MMIXAL_HEX = _stc.STC_MMIXAL_HEX
STC_MMIXAL_OPERATOR = _stc.STC_MMIXAL_OPERATOR
STC_MMIXAL_SYMBOL = _stc.STC_MMIXAL_SYMBOL
STC_MMIXAL_INCLUDE = _stc.STC_MMIXAL_INCLUDE
STC_CLW_DEFAULT = _stc.STC_CLW_DEFAULT
STC_CLW_LABEL = _stc.STC_CLW_LABEL
STC_CLW_COMMENT = _stc.STC_CLW_COMMENT
STC_CLW_STRING = _stc.STC_CLW_STRING
STC_CLW_USER_IDENTIFIER = _stc.STC_CLW_USER_IDENTIFIER
STC_CLW_INTEGER_CONSTANT = _stc.STC_CLW_INTEGER_CONSTANT
STC_CLW_REAL_CONSTANT = _stc.STC_CLW_REAL_CONSTANT
STC_CLW_PICTURE_STRING = _stc.STC_CLW_PICTURE_STRING
STC_CLW_KEYWORD = _stc.STC_CLW_KEYWORD
STC_CLW_COMPILER_DIRECTIVE = _stc.STC_CLW_COMPILER_DIRECTIVE
STC_CLW_RUNTIME_EXPRESSIONS = _stc.STC_CLW_RUNTIME_EXPRESSIONS
STC_CLW_BUILTIN_PROCEDURES_FUNCTION = _stc.STC_CLW_BUILTIN_PROCEDURES_FUNCTION
STC_CLW_STRUCTURE_DATA_TYPE = _stc.STC_CLW_STRUCTURE_DATA_TYPE
STC_CLW_ATTRIBUTE = _stc.STC_CLW_ATTRIBUTE
STC_CLW_STANDARD_EQUATE = _stc.STC_CLW_STANDARD_EQUATE
STC_CLW_ERROR = _stc.STC_CLW_ERROR
STC_CLW_DEPRECATED = _stc.STC_CLW_DEPRECATED
STC_LOT_DEFAULT = _stc.STC_LOT_DEFAULT
STC_LOT_HEADER = _stc.STC_LOT_HEADER
STC_LOT_BREAK = _stc.STC_LOT_BREAK
STC_LOT_SET = _stc.STC_LOT_SET
STC_LOT_PASS = _stc.STC_LOT_PASS
STC_LOT_FAIL = _stc.STC_LOT_FAIL
STC_LOT_ABORT = _stc.STC_LOT_ABORT
STC_YAML_DEFAULT = _stc.STC_YAML_DEFAULT
STC_YAML_COMMENT = _stc.STC_YAML_COMMENT
STC_YAML_IDENTIFIER = _stc.STC_YAML_IDENTIFIER
STC_YAML_KEYWORD = _stc.STC_YAML_KEYWORD
STC_YAML_NUMBER = _stc.STC_YAML_NUMBER
STC_YAML_REFERENCE = _stc.STC_YAML_REFERENCE
STC_YAML_DOCUMENT = _stc.STC_YAML_DOCUMENT
STC_YAML_TEXT = _stc.STC_YAML_TEXT
STC_YAML_ERROR = _stc.STC_YAML_ERROR
STC_TEX_DEFAULT = _stc.STC_TEX_DEFAULT
STC_TEX_SPECIAL = _stc.STC_TEX_SPECIAL
STC_TEX_GROUP = _stc.STC_TEX_GROUP
STC_TEX_SYMBOL = _stc.STC_TEX_SYMBOL
STC_TEX_COMMAND = _stc.STC_TEX_COMMAND
STC_TEX_TEXT = _stc.STC_TEX_TEXT
STC_METAPOST_DEFAULT = _stc.STC_METAPOST_DEFAULT
STC_METAPOST_SPECIAL = _stc.STC_METAPOST_SPECIAL
STC_METAPOST_GROUP = _stc.STC_METAPOST_GROUP
STC_METAPOST_SYMBOL = _stc.STC_METAPOST_SYMBOL
STC_METAPOST_COMMAND = _stc.STC_METAPOST_COMMAND
STC_METAPOST_TEXT = _stc.STC_METAPOST_TEXT
STC_METAPOST_EXTRA = _stc.STC_METAPOST_EXTRA
STC_ERLANG_DEFAULT = _stc.STC_ERLANG_DEFAULT
STC_ERLANG_COMMENT = _stc.STC_ERLANG_COMMENT
STC_ERLANG_VARIABLE = _stc.STC_ERLANG_VARIABLE
STC_ERLANG_NUMBER = _stc.STC_ERLANG_NUMBER
STC_ERLANG_KEYWORD = _stc.STC_ERLANG_KEYWORD
STC_ERLANG_STRING = _stc.STC_ERLANG_STRING
STC_ERLANG_OPERATOR = _stc.STC_ERLANG_OPERATOR
STC_ERLANG_ATOM = _stc.STC_ERLANG_ATOM
STC_ERLANG_FUNCTION_NAME = _stc.STC_ERLANG_FUNCTION_NAME
STC_ERLANG_CHARACTER = _stc.STC_ERLANG_CHARACTER
STC_ERLANG_MACRO = _stc.STC_ERLANG_MACRO
STC_ERLANG_RECORD = _stc.STC_ERLANG_RECORD
STC_ERLANG_SEPARATOR = _stc.STC_ERLANG_SEPARATOR
STC_ERLANG_NODE_NAME = _stc.STC_ERLANG_NODE_NAME
STC_ERLANG_UNKNOWN = _stc.STC_ERLANG_UNKNOWN
STC_MSSQL_DEFAULT = _stc.STC_MSSQL_DEFAULT
STC_MSSQL_COMMENT = _stc.STC_MSSQL_COMMENT
STC_MSSQL_LINE_COMMENT = _stc.STC_MSSQL_LINE_COMMENT
STC_MSSQL_NUMBER = _stc.STC_MSSQL_NUMBER
STC_MSSQL_STRING = _stc.STC_MSSQL_STRING
STC_MSSQL_OPERATOR = _stc.STC_MSSQL_OPERATOR
STC_MSSQL_IDENTIFIER = _stc.STC_MSSQL_IDENTIFIER
STC_MSSQL_VARIABLE = _stc.STC_MSSQL_VARIABLE
STC_MSSQL_COLUMN_NAME = _stc.STC_MSSQL_COLUMN_NAME
STC_MSSQL_STATEMENT = _stc.STC_MSSQL_STATEMENT
STC_MSSQL_DATATYPE = _stc.STC_MSSQL_DATATYPE
STC_MSSQL_SYSTABLE = _stc.STC_MSSQL_SYSTABLE
STC_MSSQL_GLOBAL_VARIABLE = _stc.STC_MSSQL_GLOBAL_VARIABLE
STC_MSSQL_FUNCTION = _stc.STC_MSSQL_FUNCTION
STC_MSSQL_STORED_PROCEDURE = _stc.STC_MSSQL_STORED_PROCEDURE
STC_MSSQL_DEFAULT_PREF_DATATYPE = _stc.STC_MSSQL_DEFAULT_PREF_DATATYPE
STC_MSSQL_COLUMN_NAME_2 = _stc.STC_MSSQL_COLUMN_NAME_2
STC_V_DEFAULT = _stc.STC_V_DEFAULT
STC_V_COMMENT = _stc.STC_V_COMMENT
STC_V_COMMENTLINE = _stc.STC_V_COMMENTLINE
STC_V_COMMENTLINEBANG = _stc.STC_V_COMMENTLINEBANG
STC_V_NUMBER = _stc.STC_V_NUMBER
STC_V_WORD = _stc.STC_V_WORD
STC_V_STRING = _stc.STC_V_STRING
STC_V_WORD2 = _stc.STC_V_WORD2
STC_V_WORD3 = _stc.STC_V_WORD3
STC_V_PREPROCESSOR = _stc.STC_V_PREPROCESSOR
STC_V_OPERATOR = _stc.STC_V_OPERATOR
STC_V_IDENTIFIER = _stc.STC_V_IDENTIFIER
STC_V_STRINGEOL = _stc.STC_V_STRINGEOL
STC_V_USER = _stc.STC_V_USER
STC_KIX_DEFAULT = _stc.STC_KIX_DEFAULT
STC_KIX_COMMENT = _stc.STC_KIX_COMMENT
STC_KIX_STRING1 = _stc.STC_KIX_STRING1
STC_KIX_STRING2 = _stc.STC_KIX_STRING2
STC_KIX_NUMBER = _stc.STC_KIX_NUMBER
STC_KIX_VAR = _stc.STC_KIX_VAR
STC_KIX_MACRO = _stc.STC_KIX_MACRO
STC_KIX_KEYWORD = _stc.STC_KIX_KEYWORD
STC_KIX_FUNCTIONS = _stc.STC_KIX_FUNCTIONS
STC_KIX_OPERATOR = _stc.STC_KIX_OPERATOR
STC_KIX_IDENTIFIER = _stc.STC_KIX_IDENTIFIER
STC_GC_DEFAULT = _stc.STC_GC_DEFAULT
STC_GC_COMMENTLINE = _stc.STC_GC_COMMENTLINE
STC_GC_COMMENTBLOCK = _stc.STC_GC_COMMENTBLOCK
STC_GC_GLOBAL = _stc.STC_GC_GLOBAL
STC_GC_EVENT = _stc.STC_GC_EVENT
STC_GC_ATTRIBUTE = _stc.STC_GC_ATTRIBUTE
STC_GC_CONTROL = _stc.STC_GC_CONTROL
STC_GC_COMMAND = _stc.STC_GC_COMMAND
STC_GC_STRING = _stc.STC_GC_STRING
STC_GC_OPERATOR = _stc.STC_GC_OPERATOR
STC_SN_DEFAULT = _stc.STC_SN_DEFAULT
STC_SN_CODE = _stc.STC_SN_CODE
STC_SN_COMMENTLINE = _stc.STC_SN_COMMENTLINE
STC_SN_COMMENTLINEBANG = _stc.STC_SN_COMMENTLINEBANG
STC_SN_NUMBER = _stc.STC_SN_NUMBER
STC_SN_WORD = _stc.STC_SN_WORD
STC_SN_STRING = _stc.STC_SN_STRING
STC_SN_WORD2 = _stc.STC_SN_WORD2
STC_SN_WORD3 = _stc.STC_SN_WORD3
STC_SN_PREPROCESSOR = _stc.STC_SN_PREPROCESSOR
STC_SN_OPERATOR = _stc.STC_SN_OPERATOR
STC_SN_IDENTIFIER = _stc.STC_SN_IDENTIFIER
STC_SN_STRINGEOL = _stc.STC_SN_STRINGEOL
STC_SN_REGEXTAG = _stc.STC_SN_REGEXTAG
STC_SN_SIGNAL = _stc.STC_SN_SIGNAL
STC_SN_USER = _stc.STC_SN_USER
STC_AU3_DEFAULT = _stc.STC_AU3_DEFAULT
STC_AU3_COMMENT = _stc.STC_AU3_COMMENT
STC_AU3_COMMENTBLOCK = _stc.STC_AU3_COMMENTBLOCK
STC_AU3_NUMBER = _stc.STC_AU3_NUMBER
STC_AU3_FUNCTION = _stc.STC_AU3_FUNCTION
STC_AU3_KEYWORD = _stc.STC_AU3_KEYWORD
STC_AU3_MACRO = _stc.STC_AU3_MACRO
STC_AU3_STRING = _stc.STC_AU3_STRING
STC_AU3_OPERATOR = _stc.STC_AU3_OPERATOR
STC_AU3_VARIABLE = _stc.STC_AU3_VARIABLE
STC_AU3_SENT = _stc.STC_AU3_SENT
STC_AU3_PREPROCESSOR = _stc.STC_AU3_PREPROCESSOR
STC_AU3_SPECIAL = _stc.STC_AU3_SPECIAL
STC_AU3_EXPAND = _stc.STC_AU3_EXPAND
STC_AU3_COMOBJ = _stc.STC_AU3_COMOBJ
STC_AU3_UDF = _stc.STC_AU3_UDF
STC_APDL_DEFAULT = _stc.STC_APDL_DEFAULT
STC_APDL_COMMENT = _stc.STC_APDL_COMMENT
STC_APDL_COMMENTBLOCK = _stc.STC_APDL_COMMENTBLOCK
STC_APDL_NUMBER = _stc.STC_APDL_NUMBER
STC_APDL_STRING = _stc.STC_APDL_STRING
STC_APDL_OPERATOR = _stc.STC_APDL_OPERATOR
STC_APDL_WORD = _stc.STC_APDL_WORD
STC_APDL_PROCESSOR = _stc.STC_APDL_PROCESSOR
STC_APDL_COMMAND = _stc.STC_APDL_COMMAND
STC_APDL_SLASHCOMMAND = _stc.STC_APDL_SLASHCOMMAND
STC_APDL_STARCOMMAND = _stc.STC_APDL_STARCOMMAND
STC_APDL_ARGUMENT = _stc.STC_APDL_ARGUMENT
STC_APDL_FUNCTION = _stc.STC_APDL_FUNCTION
STC_SH_DEFAULT = _stc.STC_SH_DEFAULT
STC_SH_ERROR = _stc.STC_SH_ERROR
STC_SH_COMMENTLINE = _stc.STC_SH_COMMENTLINE
STC_SH_NUMBER = _stc.STC_SH_NUMBER
STC_SH_WORD = _stc.STC_SH_WORD
STC_SH_STRING = _stc.STC_SH_STRING
STC_SH_CHARACTER = _stc.STC_SH_CHARACTER
STC_SH_OPERATOR = _stc.STC_SH_OPERATOR
STC_SH_IDENTIFIER = _stc.STC_SH_IDENTIFIER
STC_SH_SCALAR = _stc.STC_SH_SCALAR
STC_SH_PARAM = _stc.STC_SH_PARAM
STC_SH_BACKTICKS = _stc.STC_SH_BACKTICKS
STC_SH_HERE_DELIM = _stc.STC_SH_HERE_DELIM
STC_SH_HERE_Q = _stc.STC_SH_HERE_Q
STC_ASN1_DEFAULT = _stc.STC_ASN1_DEFAULT
STC_ASN1_COMMENT = _stc.STC_ASN1_COMMENT
STC_ASN1_IDENTIFIER = _stc.STC_ASN1_IDENTIFIER
STC_ASN1_STRING = _stc.STC_ASN1_STRING
STC_ASN1_OID = _stc.STC_ASN1_OID
STC_ASN1_SCALAR = _stc.STC_ASN1_SCALAR
STC_ASN1_KEYWORD = _stc.STC_ASN1_KEYWORD
STC_ASN1_ATTRIBUTE = _stc.STC_ASN1_ATTRIBUTE
STC_ASN1_DESCRIPTOR = _stc.STC_ASN1_DESCRIPTOR
STC_ASN1_TYPE = _stc.STC_ASN1_TYPE
STC_ASN1_OPERATOR = _stc.STC_ASN1_OPERATOR
STC_VHDL_DEFAULT = _stc.STC_VHDL_DEFAULT
STC_VHDL_COMMENT = _stc.STC_VHDL_COMMENT
STC_VHDL_COMMENTLINEBANG = _stc.STC_VHDL_COMMENTLINEBANG
STC_VHDL_NUMBER = _stc.STC_VHDL_NUMBER
STC_VHDL_STRING = _stc.STC_VHDL_STRING
STC_VHDL_OPERATOR = _stc.STC_VHDL_OPERATOR
STC_VHDL_IDENTIFIER = _stc.STC_VHDL_IDENTIFIER
STC_VHDL_STRINGEOL = _stc.STC_VHDL_STRINGEOL
STC_VHDL_KEYWORD = _stc.STC_VHDL_KEYWORD
STC_VHDL_STDOPERATOR = _stc.STC_VHDL_STDOPERATOR
STC_VHDL_ATTRIBUTE = _stc.STC_VHDL_ATTRIBUTE
STC_VHDL_STDFUNCTION = _stc.STC_VHDL_STDFUNCTION
STC_VHDL_STDPACKAGE = _stc.STC_VHDL_STDPACKAGE
STC_VHDL_STDTYPE = _stc.STC_VHDL_STDTYPE
STC_VHDL_USERWORD = _stc.STC_VHDL_USERWORD
STC_CAML_DEFAULT = _stc.STC_CAML_DEFAULT
STC_CAML_IDENTIFIER = _stc.STC_CAML_IDENTIFIER
STC_CAML_TAGNAME = _stc.STC_CAML_TAGNAME
STC_CAML_KEYWORD = _stc.STC_CAML_KEYWORD
STC_CAML_KEYWORD2 = _stc.STC_CAML_KEYWORD2
STC_CAML_KEYWORD3 = _stc.STC_CAML_KEYWORD3
STC_CAML_LINENUM = _stc.STC_CAML_LINENUM
STC_CAML_OPERATOR = _stc.STC_CAML_OPERATOR
STC_CAML_NUMBER = _stc.STC_CAML_NUMBER
STC_CAML_CHAR = _stc.STC_CAML_CHAR
STC_CAML_STRING = _stc.STC_CAML_STRING
STC_CAML_COMMENT = _stc.STC_CAML_COMMENT
STC_CAML_COMMENT1 = _stc.STC_CAML_COMMENT1
STC_CAML_COMMENT2 = _stc.STC_CAML_COMMENT2
STC_CAML_COMMENT3 = _stc.STC_CAML_COMMENT3
STC_HA_DEFAULT = _stc.STC_HA_DEFAULT
STC_HA_IDENTIFIER = _stc.STC_HA_IDENTIFIER
STC_HA_KEYWORD = _stc.STC_HA_KEYWORD
STC_HA_NUMBER = _stc.STC_HA_NUMBER
STC_HA_STRING = _stc.STC_HA_STRING
STC_HA_CHARACTER = _stc.STC_HA_CHARACTER
STC_HA_CLASS = _stc.STC_HA_CLASS
STC_HA_MODULE = _stc.STC_HA_MODULE
STC_HA_CAPITAL = _stc.STC_HA_CAPITAL
STC_HA_DATA = _stc.STC_HA_DATA
STC_HA_IMPORT = _stc.STC_HA_IMPORT
STC_HA_OPERATOR = _stc.STC_HA_OPERATOR
STC_HA_INSTANCE = _stc.STC_HA_INSTANCE
STC_HA_COMMENTLINE = _stc.STC_HA_COMMENTLINE
STC_HA_COMMENTBLOCK = _stc.STC_HA_COMMENTBLOCK
STC_HA_COMMENTBLOCK2 = _stc.STC_HA_COMMENTBLOCK2
STC_HA_COMMENTBLOCK3 = _stc.STC_HA_COMMENTBLOCK3
STC_T3_DEFAULT = _stc.STC_T3_DEFAULT
STC_T3_X_DEFAULT = _stc.STC_T3_X_DEFAULT
STC_T3_PREPROCESSOR = _stc.STC_T3_PREPROCESSOR
STC_T3_BLOCK_COMMENT = _stc.STC_T3_BLOCK_COMMENT
STC_T3_LINE_COMMENT = _stc.STC_T3_LINE_COMMENT
STC_T3_OPERATOR = _stc.STC_T3_OPERATOR
STC_T3_KEYWORD = _stc.STC_T3_KEYWORD
STC_T3_NUMBER = _stc.STC_T3_NUMBER
STC_T3_IDENTIFIER = _stc.STC_T3_IDENTIFIER
STC_T3_S_STRING = _stc.STC_T3_S_STRING
STC_T3_D_STRING = _stc.STC_T3_D_STRING
STC_T3_X_STRING = _stc.STC_T3_X_STRING
STC_T3_LIB_DIRECTIVE = _stc.STC_T3_LIB_DIRECTIVE
STC_T3_MSG_PARAM = _stc.STC_T3_MSG_PARAM
STC_T3_HTML_TAG = _stc.STC_T3_HTML_TAG
STC_T3_HTML_DEFAULT = _stc.STC_T3_HTML_DEFAULT
STC_T3_HTML_STRING = _stc.STC_T3_HTML_STRING
STC_T3_USER1 = _stc.STC_T3_USER1
STC_T3_USER2 = _stc.STC_T3_USER2
STC_T3_USER3 = _stc.STC_T3_USER3
STC_REBOL_DEFAULT = _stc.STC_REBOL_DEFAULT
STC_REBOL_COMMENTLINE = _stc.STC_REBOL_COMMENTLINE
STC_REBOL_COMMENTBLOCK = _stc.STC_REBOL_COMMENTBLOCK
STC_REBOL_PREFACE = _stc.STC_REBOL_PREFACE
STC_REBOL_OPERATOR = _stc.STC_REBOL_OPERATOR
STC_REBOL_CHARACTER = _stc.STC_REBOL_CHARACTER
STC_REBOL_QUOTEDSTRING = _stc.STC_REBOL_QUOTEDSTRING
STC_REBOL_BRACEDSTRING = _stc.STC_REBOL_BRACEDSTRING
STC_REBOL_NUMBER = _stc.STC_REBOL_NUMBER
STC_REBOL_PAIR = _stc.STC_REBOL_PAIR
STC_REBOL_TUPLE = _stc.STC_REBOL_TUPLE
STC_REBOL_BINARY = _stc.STC_REBOL_BINARY
STC_REBOL_MONEY = _stc.STC_REBOL_MONEY
STC_REBOL_ISSUE = _stc.STC_REBOL_ISSUE
STC_REBOL_TAG = _stc.STC_REBOL_TAG
STC_REBOL_FILE = _stc.STC_REBOL_FILE
STC_REBOL_EMAIL = _stc.STC_REBOL_EMAIL
STC_REBOL_URL = _stc.STC_REBOL_URL
STC_REBOL_DATE = _stc.STC_REBOL_DATE
STC_REBOL_TIME = _stc.STC_REBOL_TIME
STC_REBOL_IDENTIFIER = _stc.STC_REBOL_IDENTIFIER
STC_REBOL_WORD = _stc.STC_REBOL_WORD
STC_REBOL_WORD2 = _stc.STC_REBOL_WORD2
STC_REBOL_WORD3 = _stc.STC_REBOL_WORD3
STC_REBOL_WORD4 = _stc.STC_REBOL_WORD4
STC_REBOL_WORD5 = _stc.STC_REBOL_WORD5
STC_REBOL_WORD6 = _stc.STC_REBOL_WORD6
STC_REBOL_WORD7 = _stc.STC_REBOL_WORD7
STC_REBOL_WORD8 = _stc.STC_REBOL_WORD8
STC_SQL_DEFAULT = _stc.STC_SQL_DEFAULT
STC_SQL_COMMENT = _stc.STC_SQL_COMMENT
STC_SQL_COMMENTLINE = _stc.STC_SQL_COMMENTLINE
STC_SQL_COMMENTDOC = _stc.STC_SQL_COMMENTDOC
STC_SQL_NUMBER = _stc.STC_SQL_NUMBER
STC_SQL_WORD = _stc.STC_SQL_WORD
STC_SQL_STRING = _stc.STC_SQL_STRING
STC_SQL_CHARACTER = _stc.STC_SQL_CHARACTER
STC_SQL_SQLPLUS = _stc.STC_SQL_SQLPLUS
STC_SQL_SQLPLUS_PROMPT = _stc.STC_SQL_SQLPLUS_PROMPT
STC_SQL_OPERATOR = _stc.STC_SQL_OPERATOR
STC_SQL_IDENTIFIER = _stc.STC_SQL_IDENTIFIER
STC_SQL_SQLPLUS_COMMENT = _stc.STC_SQL_SQLPLUS_COMMENT
STC_SQL_COMMENTLINEDOC = _stc.STC_SQL_COMMENTLINEDOC
STC_SQL_WORD2 = _stc.STC_SQL_WORD2
STC_SQL_COMMENTDOCKEYWORD = _stc.STC_SQL_COMMENTDOCKEYWORD
STC_SQL_COMMENTDOCKEYWORDERROR = _stc.STC_SQL_COMMENTDOCKEYWORDERROR
STC_SQL_USER1 = _stc.STC_SQL_USER1
STC_SQL_USER2 = _stc.STC_SQL_USER2
STC_SQL_USER3 = _stc.STC_SQL_USER3
STC_SQL_USER4 = _stc.STC_SQL_USER4
STC_SQL_QUOTEDIDENTIFIER = _stc.STC_SQL_QUOTEDIDENTIFIER
STC_ST_DEFAULT = _stc.STC_ST_DEFAULT
STC_ST_STRING = _stc.STC_ST_STRING
STC_ST_NUMBER = _stc.STC_ST_NUMBER
STC_ST_COMMENT = _stc.STC_ST_COMMENT
STC_ST_SYMBOL = _stc.STC_ST_SYMBOL
STC_ST_BINARY = _stc.STC_ST_BINARY
STC_ST_BOOL = _stc.STC_ST_BOOL
STC_ST_SELF = _stc.STC_ST_SELF
STC_ST_SUPER = _stc.STC_ST_SUPER
STC_ST_NIL = _stc.STC_ST_NIL
STC_ST_GLOBAL = _stc.STC_ST_GLOBAL
STC_ST_RETURN = _stc.STC_ST_RETURN
STC_ST_SPECIAL = _stc.STC_ST_SPECIAL
STC_ST_KWSEND = _stc.STC_ST_KWSEND
STC_ST_ASSIGN = _stc.STC_ST_ASSIGN
STC_ST_CHARACTER = _stc.STC_ST_CHARACTER
STC_ST_SPEC_SEL = _stc.STC_ST_SPEC_SEL
STC_FS_DEFAULT = _stc.STC_FS_DEFAULT
STC_FS_COMMENT = _stc.STC_FS_COMMENT
STC_FS_COMMENTLINE = _stc.STC_FS_COMMENTLINE
STC_FS_COMMENTDOC = _stc.STC_FS_COMMENTDOC
STC_FS_COMMENTLINEDOC = _stc.STC_FS_COMMENTLINEDOC
STC_FS_COMMENTDOCKEYWORD = _stc.STC_FS_COMMENTDOCKEYWORD
STC_FS_COMMENTDOCKEYWORDERROR = _stc.STC_FS_COMMENTDOCKEYWORDERROR
STC_FS_KEYWORD = _stc.STC_FS_KEYWORD
STC_FS_KEYWORD2 = _stc.STC_FS_KEYWORD2
STC_FS_KEYWORD3 = _stc.STC_FS_KEYWORD3
STC_FS_KEYWORD4 = _stc.STC_FS_KEYWORD4
STC_FS_NUMBER = _stc.STC_FS_NUMBER
STC_FS_STRING = _stc.STC_FS_STRING
STC_FS_PREPROCESSOR = _stc.STC_FS_PREPROCESSOR
STC_FS_OPERATOR = _stc.STC_FS_OPERATOR
STC_FS_IDENTIFIER = _stc.STC_FS_IDENTIFIER
STC_FS_DATE = _stc.STC_FS_DATE
STC_FS_STRINGEOL = _stc.STC_FS_STRINGEOL
STC_FS_CONSTANT = _stc.STC_FS_CONSTANT
STC_FS_ASM = _stc.STC_FS_ASM
STC_FS_LABEL = _stc.STC_FS_LABEL
STC_FS_ERROR = _stc.STC_FS_ERROR
STC_FS_HEXNUMBER = _stc.STC_FS_HEXNUMBER
STC_FS_BINNUMBER = _stc.STC_FS_BINNUMBER
STC_CSOUND_DEFAULT = _stc.STC_CSOUND_DEFAULT
STC_CSOUND_COMMENT = _stc.STC_CSOUND_COMMENT
STC_CSOUND_NUMBER = _stc.STC_CSOUND_NUMBER
STC_CSOUND_OPERATOR = _stc.STC_CSOUND_OPERATOR
STC_CSOUND_INSTR = _stc.STC_CSOUND_INSTR
STC_CSOUND_IDENTIFIER = _stc.STC_CSOUND_IDENTIFIER
STC_CSOUND_OPCODE = _stc.STC_CSOUND_OPCODE
STC_CSOUND_HEADERSTMT = _stc.STC_CSOUND_HEADERSTMT
STC_CSOUND_USERKEYWORD = _stc.STC_CSOUND_USERKEYWORD
STC_CSOUND_COMMENTBLOCK = _stc.STC_CSOUND_COMMENTBLOCK
STC_CSOUND_PARAM = _stc.STC_CSOUND_PARAM
STC_CSOUND_ARATE_VAR = _stc.STC_CSOUND_ARATE_VAR
STC_CSOUND_KRATE_VAR = _stc.STC_CSOUND_KRATE_VAR
STC_CSOUND_IRATE_VAR = _stc.STC_CSOUND_IRATE_VAR
STC_CSOUND_GLOBAL_VAR = _stc.STC_CSOUND_GLOBAL_VAR
STC_CSOUND_STRINGEOL = _stc.STC_CSOUND_STRINGEOL
STC_INNO_DEFAULT = _stc.STC_INNO_DEFAULT
STC_INNO_COMMENT = _stc.STC_INNO_COMMENT
STC_INNO_KEYWORD = _stc.STC_INNO_KEYWORD
STC_INNO_PARAMETER = _stc.STC_INNO_PARAMETER
STC_INNO_SECTION = _stc.STC_INNO_SECTION
STC_INNO_PREPROC = _stc.STC_INNO_PREPROC
STC_INNO_PREPROC_INLINE = _stc.STC_INNO_PREPROC_INLINE
STC_INNO_COMMENT_PASCAL = _stc.STC_INNO_COMMENT_PASCAL
STC_INNO_KEYWORD_PASCAL = _stc.STC_INNO_KEYWORD_PASCAL
STC_INNO_KEYWORD_USER = _stc.STC_INNO_KEYWORD_USER
STC_INNO_STRING_DOUBLE = _stc.STC_INNO_STRING_DOUBLE
STC_INNO_STRING_SINGLE = _stc.STC_INNO_STRING_SINGLE
STC_INNO_IDENTIFIER = _stc.STC_INNO_IDENTIFIER
STC_OPAL_SPACE = _stc.STC_OPAL_SPACE
STC_OPAL_COMMENT_BLOCK = _stc.STC_OPAL_COMMENT_BLOCK
STC_OPAL_COMMENT_LINE = _stc.STC_OPAL_COMMENT_LINE
STC_OPAL_INTEGER = _stc.STC_OPAL_INTEGER
STC_OPAL_KEYWORD = _stc.STC_OPAL_KEYWORD
STC_OPAL_SORT = _stc.STC_OPAL_SORT
STC_OPAL_STRING = _stc.STC_OPAL_STRING
STC_OPAL_PAR = _stc.STC_OPAL_PAR
STC_OPAL_BOOL_CONST = _stc.STC_OPAL_BOOL_CONST
STC_OPAL_DEFAULT = _stc.STC_OPAL_DEFAULT
STC_SPICE_DEFAULT = _stc.STC_SPICE_DEFAULT
STC_SPICE_IDENTIFIER = _stc.STC_SPICE_IDENTIFIER
STC_SPICE_KEYWORD = _stc.STC_SPICE_KEYWORD
STC_SPICE_KEYWORD2 = _stc.STC_SPICE_KEYWORD2
STC_SPICE_KEYWORD3 = _stc.STC_SPICE_KEYWORD3
STC_SPICE_NUMBER = _stc.STC_SPICE_NUMBER
STC_SPICE_DELIMITER = _stc.STC_SPICE_DELIMITER
STC_SPICE_VALUE = _stc.STC_SPICE_VALUE
STC_SPICE_COMMENTLINE = _stc.STC_SPICE_COMMENTLINE
STC_CMD_REDO = _stc.STC_CMD_REDO
STC_CMD_SELECTALL = _stc.STC_CMD_SELECTALL
STC_CMD_UNDO = _stc.STC_CMD_UNDO
STC_CMD_CUT = _stc.STC_CMD_CUT
STC_CMD_COPY = _stc.STC_CMD_COPY
STC_CMD_PASTE = _stc.STC_CMD_PASTE
STC_CMD_CLEAR = _stc.STC_CMD_CLEAR
STC_CMD_LINEDOWN = _stc.STC_CMD_LINEDOWN
STC_CMD_LINEDOWNEXTEND = _stc.STC_CMD_LINEDOWNEXTEND
STC_CMD_LINEUP = _stc.STC_CMD_LINEUP
STC_CMD_LINEUPEXTEND = _stc.STC_CMD_LINEUPEXTEND
STC_CMD_CHARLEFT = _stc.STC_CMD_CHARLEFT
STC_CMD_CHARLEFTEXTEND = _stc.STC_CMD_CHARLEFTEXTEND
STC_CMD_CHARRIGHT = _stc.STC_CMD_CHARRIGHT
STC_CMD_CHARRIGHTEXTEND = _stc.STC_CMD_CHARRIGHTEXTEND
STC_CMD_WORDLEFT = _stc.STC_CMD_WORDLEFT
STC_CMD_WORDLEFTEXTEND = _stc.STC_CMD_WORDLEFTEXTEND
STC_CMD_WORDRIGHT = _stc.STC_CMD_WORDRIGHT
STC_CMD_WORDRIGHTEXTEND = _stc.STC_CMD_WORDRIGHTEXTEND
STC_CMD_HOME = _stc.STC_CMD_HOME
STC_CMD_HOMEEXTEND = _stc.STC_CMD_HOMEEXTEND
STC_CMD_LINEEND = _stc.STC_CMD_LINEEND
STC_CMD_LINEENDEXTEND = _stc.STC_CMD_LINEENDEXTEND
STC_CMD_DOCUMENTSTART = _stc.STC_CMD_DOCUMENTSTART
STC_CMD_DOCUMENTSTARTEXTEND = _stc.STC_CMD_DOCUMENTSTARTEXTEND
STC_CMD_DOCUMENTEND = _stc.STC_CMD_DOCUMENTEND
STC_CMD_DOCUMENTENDEXTEND = _stc.STC_CMD_DOCUMENTENDEXTEND
STC_CMD_PAGEUP = _stc.STC_CMD_PAGEUP
STC_CMD_PAGEUPEXTEND = _stc.STC_CMD_PAGEUPEXTEND
STC_CMD_PAGEDOWN = _stc.STC_CMD_PAGEDOWN
STC_CMD_PAGEDOWNEXTEND = _stc.STC_CMD_PAGEDOWNEXTEND
STC_CMD_EDITTOGGLEOVERTYPE = _stc.STC_CMD_EDITTOGGLEOVERTYPE
STC_CMD_CANCEL = _stc.STC_CMD_CANCEL
STC_CMD_DELETEBACK = _stc.STC_CMD_DELETEBACK
STC_CMD_TAB = _stc.STC_CMD_TAB
STC_CMD_BACKTAB = _stc.STC_CMD_BACKTAB
STC_CMD_NEWLINE = _stc.STC_CMD_NEWLINE
STC_CMD_FORMFEED = _stc.STC_CMD_FORMFEED
STC_CMD_VCHOME = _stc.STC_CMD_VCHOME
STC_CMD_VCHOMEEXTEND = _stc.STC_CMD_VCHOMEEXTEND
STC_CMD_ZOOMIN = _stc.STC_CMD_ZOOMIN
STC_CMD_ZOOMOUT = _stc.STC_CMD_ZOOMOUT
STC_CMD_DELWORDLEFT = _stc.STC_CMD_DELWORDLEFT
STC_CMD_DELWORDRIGHT = _stc.STC_CMD_DELWORDRIGHT
STC_CMD_LINECUT = _stc.STC_CMD_LINECUT
STC_CMD_LINEDELETE = _stc.STC_CMD_LINEDELETE
STC_CMD_LINETRANSPOSE = _stc.STC_CMD_LINETRANSPOSE
STC_CMD_LINEDUPLICATE = _stc.STC_CMD_LINEDUPLICATE
STC_CMD_LOWERCASE = _stc.STC_CMD_LOWERCASE
STC_CMD_UPPERCASE = _stc.STC_CMD_UPPERCASE
STC_CMD_LINESCROLLDOWN = _stc.STC_CMD_LINESCROLLDOWN
STC_CMD_LINESCROLLUP = _stc.STC_CMD_LINESCROLLUP
STC_CMD_DELETEBACKNOTLINE = _stc.STC_CMD_DELETEBACKNOTLINE
STC_CMD_HOMEDISPLAY = _stc.STC_CMD_HOMEDISPLAY
STC_CMD_HOMEDISPLAYEXTEND = _stc.STC_CMD_HOMEDISPLAYEXTEND
STC_CMD_LINEENDDISPLAY = _stc.STC_CMD_LINEENDDISPLAY
STC_CMD_LINEENDDISPLAYEXTEND = _stc.STC_CMD_LINEENDDISPLAYEXTEND
STC_CMD_HOMEWRAP = _stc.STC_CMD_HOMEWRAP
STC_CMD_HOMEWRAPEXTEND = _stc.STC_CMD_HOMEWRAPEXTEND
STC_CMD_LINEENDWRAP = _stc.STC_CMD_LINEENDWRAP
STC_CMD_LINEENDWRAPEXTEND = _stc.STC_CMD_LINEENDWRAPEXTEND
STC_CMD_VCHOMEWRAP = _stc.STC_CMD_VCHOMEWRAP
STC_CMD_VCHOMEWRAPEXTEND = _stc.STC_CMD_VCHOMEWRAPEXTEND
STC_CMD_LINECOPY = _stc.STC_CMD_LINECOPY
STC_CMD_WORDPARTLEFT = _stc.STC_CMD_WORDPARTLEFT
STC_CMD_WORDPARTLEFTEXTEND = _stc.STC_CMD_WORDPARTLEFTEXTEND
STC_CMD_WORDPARTRIGHT = _stc.STC_CMD_WORDPARTRIGHT
STC_CMD_WORDPARTRIGHTEXTEND = _stc.STC_CMD_WORDPARTRIGHTEXTEND
STC_CMD_DELLINELEFT = _stc.STC_CMD_DELLINELEFT
STC_CMD_DELLINERIGHT = _stc.STC_CMD_DELLINERIGHT
STC_CMD_PARADOWN = _stc.STC_CMD_PARADOWN
STC_CMD_PARADOWNEXTEND = _stc.STC_CMD_PARADOWNEXTEND
STC_CMD_PARAUP = _stc.STC_CMD_PARAUP
STC_CMD_PARAUPEXTEND = _stc.STC_CMD_PARAUPEXTEND
STC_CMD_LINEDOWNRECTEXTEND = _stc.STC_CMD_LINEDOWNRECTEXTEND
STC_CMD_LINEUPRECTEXTEND = _stc.STC_CMD_LINEUPRECTEXTEND
STC_CMD_CHARLEFTRECTEXTEND = _stc.STC_CMD_CHARLEFTRECTEXTEND
STC_CMD_CHARRIGHTRECTEXTEND = _stc.STC_CMD_CHARRIGHTRECTEXTEND
STC_CMD_HOMERECTEXTEND = _stc.STC_CMD_HOMERECTEXTEND
STC_CMD_VCHOMERECTEXTEND = _stc.STC_CMD_VCHOMERECTEXTEND
STC_CMD_LINEENDRECTEXTEND = _stc.STC_CMD_LINEENDRECTEXTEND
STC_CMD_PAGEUPRECTEXTEND = _stc.STC_CMD_PAGEUPRECTEXTEND
STC_CMD_PAGEDOWNRECTEXTEND = _stc.STC_CMD_PAGEDOWNRECTEXTEND
STC_CMD_STUTTEREDPAGEUP = _stc.STC_CMD_STUTTEREDPAGEUP
STC_CMD_STUTTEREDPAGEUPEXTEND = _stc.STC_CMD_STUTTEREDPAGEUPEXTEND
STC_CMD_STUTTEREDPAGEDOWN = _stc.STC_CMD_STUTTEREDPAGEDOWN
STC_CMD_STUTTEREDPAGEDOWNEXTEND = _stc.STC_CMD_STUTTEREDPAGEDOWNEXTEND
STC_CMD_WORDLEFTEND = _stc.STC_CMD_WORDLEFTEND
STC_CMD_WORDLEFTENDEXTEND = _stc.STC_CMD_WORDLEFTENDEXTEND
STC_CMD_WORDRIGHTEND = _stc.STC_CMD_WORDRIGHTEND
STC_CMD_WORDRIGHTENDEXTEND = _stc.STC_CMD_WORDRIGHTENDEXTEND
class StyledTextCtrl(_core.Control):
    """Proxy of C++ StyledTextCtrl class"""
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(self, Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
            Size size=DefaultSize, long style=0, String name=STCNameStr) -> StyledTextCtrl
        """
        _stc.StyledTextCtrl_swiginit(self,_stc.new_StyledTextCtrl(*args, **kwargs))
        self._setOORInfo(self)

    def Create(*args, **kwargs):
        """
        Create(self, Window parent, int id=ID_ANY, Point pos=DefaultPosition, 
            Size size=DefaultSize, long style=0, String name=wxSTCNameStr) -> bool
        """
        return _stc.StyledTextCtrl_Create(*args, **kwargs)

    def AddText(*args, **kwargs):
        """
        AddText(self, String text)

        Add text to the document at current position.
        """
        return _stc.StyledTextCtrl_AddText(*args, **kwargs)

    def AddStyledText(*args, **kwargs):
        """
        AddStyledText(self, wxMemoryBuffer data)

        Add array of cells to document.
        """
        return _stc.StyledTextCtrl_AddStyledText(*args, **kwargs)

    def InsertText(*args, **kwargs):
        """
        InsertText(self, int pos, String text)

        Insert string at a position.
        """
        return _stc.StyledTextCtrl_InsertText(*args, **kwargs)

    def ClearAll(*args, **kwargs):
        """
        ClearAll(self)

        Delete all text in the document.
        """
        return _stc.StyledTextCtrl_ClearAll(*args, **kwargs)

    def ClearDocumentStyle(*args, **kwargs):
        """
        ClearDocumentStyle(self)

        Set all style bytes to 0, remove all folding information.
        """
        return _stc.StyledTextCtrl_ClearDocumentStyle(*args, **kwargs)

    def GetLength(*args, **kwargs):
        """
        GetLength(self) -> int

        Returns the number of characters in the document.
        """
        return _stc.StyledTextCtrl_GetLength(*args, **kwargs)

    def GetCharAt(*args, **kwargs):
        """
        GetCharAt(self, int pos) -> int

        Returns the character byte at the position.
        """
        return _stc.StyledTextCtrl_GetCharAt(*args, **kwargs)

    def GetCurrentPos(*args, **kwargs):
        """
        GetCurrentPos(self) -> int

        Returns the position of the caret.
        """
        return _stc.StyledTextCtrl_GetCurrentPos(*args, **kwargs)

    def GetAnchor(*args, **kwargs):
        """
        GetAnchor(self) -> int

        Returns the position of the opposite end of the selection to the caret.
        """
        return _stc.StyledTextCtrl_GetAnchor(*args, **kwargs)

    def GetStyleAt(*args, **kwargs):
        """
        GetStyleAt(self, int pos) -> int

        Returns the style byte at the position.
        """
        return _stc.StyledTextCtrl_GetStyleAt(*args, **kwargs)

    def Redo(*args, **kwargs):
        """
        Redo(self)

        Redoes the next action on the undo history.
        """
        return _stc.StyledTextCtrl_Redo(*args, **kwargs)

    def SetUndoCollection(*args, **kwargs):
        """
        SetUndoCollection(self, bool collectUndo)

        Choose between collecting actions into the undo
        history and discarding them.
        """
        return _stc.StyledTextCtrl_SetUndoCollection(*args, **kwargs)

    def SelectAll(*args, **kwargs):
        """
        SelectAll(self)

        Select all the text in the document.
        """
        return _stc.StyledTextCtrl_SelectAll(*args, **kwargs)

    def SetSavePoint(*args, **kwargs):
        """
        SetSavePoint(self)

        Remember the current position in the undo history as the position
        at which the document was saved.
        """
        return _stc.StyledTextCtrl_SetSavePoint(*args, **kwargs)

    def GetStyledText(*args, **kwargs):
        """
        GetStyledText(self, int startPos, int endPos) -> wxMemoryBuffer

        Retrieve a buffer of cells.
        """
        return _stc.StyledTextCtrl_GetStyledText(*args, **kwargs)

    def CanRedo(*args, **kwargs):
        """
        CanRedo(self) -> bool

        Are there any redoable actions in the undo history?
        """
        return _stc.StyledTextCtrl_CanRedo(*args, **kwargs)

    def MarkerLineFromHandle(*args, **kwargs):
        """
        MarkerLineFromHandle(self, int handle) -> int

        Retrieve the line number at which a particular marker is located.
        """
        return _stc.StyledTextCtrl_MarkerLineFromHandle(*args, **kwargs)

    def MarkerDeleteHandle(*args, **kwargs):
        """
        MarkerDeleteHandle(self, int handle)

        Delete a marker.
        """
        return _stc.StyledTextCtrl_MarkerDeleteHandle(*args, **kwargs)

    def GetUndoCollection(*args, **kwargs):
        """
        GetUndoCollection(self) -> bool

        Is undo history being collected?
        """
        return _stc.StyledTextCtrl_GetUndoCollection(*args, **kwargs)

    def GetViewWhiteSpace(*args, **kwargs):
        """
        GetViewWhiteSpace(self) -> int

        Are white space characters currently visible?
        Returns one of SCWS_* constants.
        """
        return _stc.StyledTextCtrl_GetViewWhiteSpace(*args, **kwargs)

    def SetViewWhiteSpace(*args, **kwargs):
        """
        SetViewWhiteSpace(self, int viewWS)

        Make white space characters invisible, always visible or visible outside indentation.
        """
        return _stc.StyledTextCtrl_SetViewWhiteSpace(*args, **kwargs)

    def PositionFromPoint(*args, **kwargs):
        """
        PositionFromPoint(self, Point pt) -> int

        Find the position from a point within the window.
        """
        return _stc.StyledTextCtrl_PositionFromPoint(*args, **kwargs)

    def PositionFromPointClose(*args, **kwargs):
        """
        PositionFromPointClose(self, int x, int y) -> int

        Find the position from a point within the window but return
        INVALID_POSITION if not close to text.
        """
        return _stc.StyledTextCtrl_PositionFromPointClose(*args, **kwargs)

    def GotoLine(*args, **kwargs):
        """
        GotoLine(self, int line)

        Set caret to start of a line and ensure it is visible.
        """
        return _stc.StyledTextCtrl_GotoLine(*args, **kwargs)

    def GotoPos(*args, **kwargs):
        """
        GotoPos(self, int pos)

        Set caret to a position and ensure it is visible.
        """
        return _stc.StyledTextCtrl_GotoPos(*args, **kwargs)

    def SetAnchor(*args, **kwargs):
        """
        SetAnchor(self, int posAnchor)

        Set the selection anchor to a position. The anchor is the opposite
        end of the selection from the caret.
        """
        return _stc.StyledTextCtrl_SetAnchor(*args, **kwargs)

    def GetCurLine(*args, **kwargs):
        """
        GetCurLine(self) -> (text, pos)

        Retrieve the text of the line containing the caret, and also theindex
        of the caret on the line.
        """
        return _stc.StyledTextCtrl_GetCurLine(*args, **kwargs)

    def GetEndStyled(*args, **kwargs):
        """
        GetEndStyled(self) -> int

        Retrieve the position of the last correctly styled character.
        """
        return _stc.StyledTextCtrl_GetEndStyled(*args, **kwargs)

    def ConvertEOLs(*args, **kwargs):
        """
        ConvertEOLs(self, int eolMode)

        Convert all line endings in the document to one mode.
        """
        return _stc.StyledTextCtrl_ConvertEOLs(*args, **kwargs)

    def GetEOLMode(*args, **kwargs):
        """
        GetEOLMode(self) -> int

        Retrieve the current end of line mode - one of CRLF, CR, or LF.
        """
        return _stc.StyledTextCtrl_GetEOLMode(*args, **kwargs)

    def SetEOLMode(*args, **kwargs):
        """
        SetEOLMode(self, int eolMode)

        Set the current end of line mode.
        """
        return _stc.StyledTextCtrl_SetEOLMode(*args, **kwargs)

    def StartStyling(*args, **kwargs):
        """
        StartStyling(self, int pos, int mask)

        Set the current styling position to pos and the styling mask to mask.
        The styling mask can be used to protect some bits in each styling byte from modification.
        """
        return _stc.StyledTextCtrl_StartStyling(*args, **kwargs)

    def SetStyling(*args, **kwargs):
        """
        SetStyling(self, int length, int style)

        Change style from current styling position for length characters to a style
        and move the current styling position to after this newly styled segment.
        """
        return _stc.StyledTextCtrl_SetStyling(*args, **kwargs)

    def GetBufferedDraw(*args, **kwargs):
        """
        GetBufferedDraw(self) -> bool

        Is drawing done first into a buffer or direct to the screen?
        """
        return _stc.StyledTextCtrl_GetBufferedDraw(*args, **kwargs)

    def SetBufferedDraw(*args, **kwargs):
        """
        SetBufferedDraw(self, bool buffered)

        If drawing is buffered then each line of text is drawn into a bitmap buffer
        before drawing it to the screen to avoid flicker.
        """
        return _stc.StyledTextCtrl_SetBufferedDraw(*args, **kwargs)

    def SetTabWidth(*args, **kwargs):
        """
        SetTabWidth(self, int tabWidth)

        Change the visible size of a tab to be a multiple of the width of a space character.
        """
        return _stc.StyledTextCtrl_SetTabWidth(*args, **kwargs)

    def GetTabWidth(*args, **kwargs):
        """
        GetTabWidth(self) -> int

        Retrieve the visible size of a tab.
        """
        return _stc.StyledTextCtrl_GetTabWidth(*args, **kwargs)

    def SetCodePage(*args, **kwargs):
        """
        SetCodePage(self, int codePage)

        Set the code page used to interpret the bytes of the document as characters.
        """
        return _stc.StyledTextCtrl_SetCodePage(*args, **kwargs)

    def MarkerDefine(*args, **kwargs):
        """
        MarkerDefine(self, int markerNumber, int markerSymbol, Colour foreground=wxNullColour, 
            Colour background=wxNullColour)

        Set the symbol used for a particular marker number,
        and optionally the fore and background colours.
        """
        return _stc.StyledTextCtrl_MarkerDefine(*args, **kwargs)

    def MarkerSetForeground(*args, **kwargs):
        """
        MarkerSetForeground(self, int markerNumber, Colour fore)

        Set the foreground colour used for a particular marker number.
        """
        return _stc.StyledTextCtrl_MarkerSetForeground(*args, **kwargs)

    def MarkerSetBackground(*args, **kwargs):
        """
        MarkerSetBackground(self, int markerNumber, Colour back)

        Set the background colour used for a particular marker number.
        """
        return _stc.StyledTextCtrl_MarkerSetBackground(*args, **kwargs)

    def MarkerAdd(*args, **kwargs):
        """
        MarkerAdd(self, int line, int markerNumber) -> int

        Add a marker to a line, returning an ID which can be used to find or delete the marker.
        """
        return _stc.StyledTextCtrl_MarkerAdd(*args, **kwargs)

    def MarkerDelete(*args, **kwargs):
        """
        MarkerDelete(self, int line, int markerNumber)

        Delete a marker from a line.
        """
        return _stc.StyledTextCtrl_MarkerDelete(*args, **kwargs)

    def MarkerDeleteAll(*args, **kwargs):
        """
        MarkerDeleteAll(self, int markerNumber)

        Delete all markers with a particular number from all lines.
        """
        return _stc.StyledTextCtrl_MarkerDeleteAll(*args, **kwargs)

    def MarkerGet(*args, **kwargs):
        """
        MarkerGet(self, int line) -> int

        Get a bit mask of all the markers set on a line.
        """
        return _stc.StyledTextCtrl_MarkerGet(*args, **kwargs)

    def MarkerNext(*args, **kwargs):
        """
        MarkerNext(self, int lineStart, int markerMask) -> int

        Find the next line after lineStart that includes a marker in mask.
        """
        return _stc.StyledTextCtrl_MarkerNext(*args, **kwargs)

    def MarkerPrevious(*args, **kwargs):
        """
        MarkerPrevious(self, int lineStart, int markerMask) -> int

        Find the previous line before lineStart that includes a marker in mask.
        """
        return _stc.StyledTextCtrl_MarkerPrevious(*args, **kwargs)

    def MarkerDefineBitmap(*args, **kwargs):
        """
        MarkerDefineBitmap(self, int markerNumber, Bitmap bmp)

        Define a marker from a bitmap
        """
        return _stc.StyledTextCtrl_MarkerDefineBitmap(*args, **kwargs)

    def MarkerAddSet(*args, **kwargs):
        """
        MarkerAddSet(self, int line, int set)

        Add a set of markers to a line.
        """
        return _stc.StyledTextCtrl_MarkerAddSet(*args, **kwargs)

    def MarkerSetAlpha(*args, **kwargs):
        """
        MarkerSetAlpha(self, int markerNumber, int alpha)

        Set the alpha used for a marker that is drawn in the text area, not the margin.
        """
        return _stc.StyledTextCtrl_MarkerSetAlpha(*args, **kwargs)

    def SetMarginType(*args, **kwargs):
        """
        SetMarginType(self, int margin, int marginType)

        Set a margin to be either numeric or symbolic.
        """
        return _stc.StyledTextCtrl_SetMarginType(*args, **kwargs)

    def GetMarginType(*args, **kwargs):
        """
        GetMarginType(self, int margin) -> int

        Retrieve the type of a margin.
        """
        return _stc.StyledTextCtrl_GetMarginType(*args, **kwargs)

    def SetMarginWidth(*args, **kwargs):
        """
        SetMarginWidth(self, int margin, int pixelWidth)

        Set the width of a margin to a width expressed in pixels.
        """
        return _stc.StyledTextCtrl_SetMarginWidth(*args, **kwargs)

    def GetMarginWidth(*args, **kwargs):
        """
        GetMarginWidth(self, int margin) -> int

        Retrieve the width of a margin in pixels.
        """
        return _stc.StyledTextCtrl_GetMarginWidth(*args, **kwargs)

    def SetMarginMask(*args, **kwargs):
        """
        SetMarginMask(self, int margin, int mask)

        Set a mask that determines which markers are displayed in a margin.
        """
        return _stc.StyledTextCtrl_SetMarginMask(*args, **kwargs)

    def GetMarginMask(*args, **kwargs):
        """
        GetMarginMask(self, int margin) -> int

        Retrieve the marker mask of a margin.
        """
        return _stc.StyledTextCtrl_GetMarginMask(*args, **kwargs)

    def SetMarginSensitive(*args, **kwargs):
        """
        SetMarginSensitive(self, int margin, bool sensitive)

        Make a margin sensitive or insensitive to mouse clicks.
        """
        return _stc.StyledTextCtrl_SetMarginSensitive(*args, **kwargs)

    def GetMarginSensitive(*args, **kwargs):
        """
        GetMarginSensitive(self, int margin) -> bool

        Retrieve the mouse click sensitivity of a margin.
        """
        return _stc.StyledTextCtrl_GetMarginSensitive(*args, **kwargs)

    def StyleClearAll(*args, **kwargs):
        """
        StyleClearAll(self)

        Clear all the styles and make equivalent to the global default style.
        """
        return _stc.StyledTextCtrl_StyleClearAll(*args, **kwargs)

    def StyleSetForeground(*args, **kwargs):
        """
        StyleSetForeground(self, int style, Colour fore)

        Set the foreground colour of a style.
        """
        return _stc.StyledTextCtrl_StyleSetForeground(*args, **kwargs)

    def StyleSetBackground(*args, **kwargs):
        """
        StyleSetBackground(self, int style, Colour back)

        Set the background colour of a style.
        """
        return _stc.StyledTextCtrl_StyleSetBackground(*args, **kwargs)

    def StyleSetBold(*args, **kwargs):
        """
        StyleSetBold(self, int style, bool bold)

        Set a style to be bold or not.
        """
        return _stc.StyledTextCtrl_StyleSetBold(*args, **kwargs)

    def StyleSetItalic(*args, **kwargs):
        """
        StyleSetItalic(self, int style, bool italic)

        Set a style to be italic or not.
        """
        return _stc.StyledTextCtrl_StyleSetItalic(*args, **kwargs)

    def StyleSetSize(*args, **kwargs):
        """
        StyleSetSize(self, int style, int sizePoints)

        Set the size of characters of a style.
        """
        return _stc.StyledTextCtrl_StyleSetSize(*args, **kwargs)

    def StyleSetFaceName(*args, **kwargs):
        """
        StyleSetFaceName(self, int style, String fontName)

        Set the font of a style.
        """
        return _stc.StyledTextCtrl_StyleSetFaceName(*args, **kwargs)

    def StyleSetEOLFilled(*args, **kwargs):
        """
        StyleSetEOLFilled(self, int style, bool filled)

        Set a style to have its end of line filled or not.
        """
        return _stc.StyledTextCtrl_StyleSetEOLFilled(*args, **kwargs)

    def StyleResetDefault(*args, **kwargs):
        """
        StyleResetDefault(self)

        Reset the default style to its state at startup
        """
        return _stc.StyledTextCtrl_StyleResetDefault(*args, **kwargs)

    def StyleSetUnderline(*args, **kwargs):
        """
        StyleSetUnderline(self, int style, bool underline)

        Set a style to be underlined or not.
        """
        return _stc.StyledTextCtrl_StyleSetUnderline(*args, **kwargs)

    def StyleSetCase(*args, **kwargs):
        """
        StyleSetCase(self, int style, int caseForce)

        Set a style to be mixed case, or to force upper or lower case.
        """
        return _stc.StyledTextCtrl_StyleSetCase(*args, **kwargs)

    def StyleSetHotSpot(*args, **kwargs):
        """
        StyleSetHotSpot(self, int style, bool hotspot)

        Set a style to be a hotspot or not.
        """
        return _stc.StyledTextCtrl_StyleSetHotSpot(*args, **kwargs)

    def SetSelForeground(*args, **kwargs):
        """
        SetSelForeground(self, bool useSetting, Colour fore)

        Set the foreground colour of the selection and whether to use this setting.
        """
        return _stc.StyledTextCtrl_SetSelForeground(*args, **kwargs)

    def SetSelBackground(*args, **kwargs):
        """
        SetSelBackground(self, bool useSetting, Colour back)

        Set the background colour of the selection and whether to use this setting.
        """
        return _stc.StyledTextCtrl_SetSelBackground(*args, **kwargs)

    def GetSelAlpha(*args, **kwargs):
        """
        GetSelAlpha(self) -> int

        Get the alpha of the selection.
        """
        return _stc.StyledTextCtrl_GetSelAlpha(*args, **kwargs)

    def SetSelAlpha(*args, **kwargs):
        """
        SetSelAlpha(self, int alpha)

        Set the alpha of the selection.
        """
        return _stc.StyledTextCtrl_SetSelAlpha(*args, **kwargs)

    def SetCaretForeground(*args, **kwargs):
        """
        SetCaretForeground(self, Colour fore)

        Set the foreground colour of the caret.
        """
        return _stc.StyledTextCtrl_SetCaretForeground(*args, **kwargs)

    def CmdKeyAssign(*args, **kwargs):
        """
        CmdKeyAssign(self, int key, int modifiers, int cmd)

        When key+modifier combination km is pressed perform msg.
        """
        return _stc.StyledTextCtrl_CmdKeyAssign(*args, **kwargs)

    def CmdKeyClear(*args, **kwargs):
        """
        CmdKeyClear(self, int key, int modifiers)

        When key+modifier combination km is pressed do nothing.
        """
        return _stc.StyledTextCtrl_CmdKeyClear(*args, **kwargs)

    def CmdKeyClearAll(*args, **kwargs):
        """
        CmdKeyClearAll(self)

        Drop all key mappings.
        """
        return _stc.StyledTextCtrl_CmdKeyClearAll(*args, **kwargs)

    def SetStyleBytes(*args, **kwargs):
        """
        SetStyleBytes(self, int length, char styleBytes)

        Set the styles for a segment of the document.
        """
        return _stc.StyledTextCtrl_SetStyleBytes(*args, **kwargs)

    def StyleSetVisible(*args, **kwargs):
        """
        StyleSetVisible(self, int style, bool visible)

        Set a style to be visible or not.
        """
        return _stc.StyledTextCtrl_StyleSetVisible(*args, **kwargs)

    def GetCaretPeriod(*args, **kwargs):
        """
        GetCaretPeriod(self) -> int

        Get the time in milliseconds that the caret is on and off.
        """
        return _stc.StyledTextCtrl_GetCaretPeriod(*args, **kwargs)

    def SetCaretPeriod(*args, **kwargs):
        """
        SetCaretPeriod(self, int periodMilliseconds)

        Get the time in milliseconds that the caret is on and off. 0 = steady on.
        """
        return _stc.StyledTextCtrl_SetCaretPeriod(*args, **kwargs)

    def SetWordChars(*args, **kwargs):
        """
        SetWordChars(self, String characters)

        Set the set of characters making up words for when moving or selecting by word.
        First sets deaults like SetCharsDefault.
        """
        return _stc.StyledTextCtrl_SetWordChars(*args, **kwargs)

    def BeginUndoAction(*args, **kwargs):
        """
        BeginUndoAction(self)

        Start a sequence of actions that is undone and redone as a unit.
        May be nested.
        """
        return _stc.StyledTextCtrl_BeginUndoAction(*args, **kwargs)

    def EndUndoAction(*args, **kwargs):
        """
        EndUndoAction(self)

        End a sequence of actions that is undone and redone as a unit.
        """
        return _stc.StyledTextCtrl_EndUndoAction(*args, **kwargs)

    def IndicatorSetStyle(*args, **kwargs):
        """
        IndicatorSetStyle(self, int indic, int style)

        Set an indicator to plain, squiggle or TT.
        """
        return _stc.StyledTextCtrl_IndicatorSetStyle(*args, **kwargs)

    def IndicatorGetStyle(*args, **kwargs):
        """
        IndicatorGetStyle(self, int indic) -> int

        Retrieve the style of an indicator.
        """
        return _stc.StyledTextCtrl_IndicatorGetStyle(*args, **kwargs)

    def IndicatorSetForeground(*args, **kwargs):
        """
        IndicatorSetForeground(self, int indic, Colour fore)

        Set the foreground colour of an indicator.
        """
        return _stc.StyledTextCtrl_IndicatorSetForeground(*args, **kwargs)

    def IndicatorGetForeground(*args, **kwargs):
        """
        IndicatorGetForeground(self, int indic) -> Colour

        Retrieve the foreground colour of an indicator.
        """
        return _stc.StyledTextCtrl_IndicatorGetForeground(*args, **kwargs)

    def SetWhitespaceForeground(*args, **kwargs):
        """
        SetWhitespaceForeground(self, bool useSetting, Colour fore)

        Set the foreground colour of all whitespace and whether to use this setting.
        """
        return _stc.StyledTextCtrl_SetWhitespaceForeground(*args, **kwargs)

    def SetWhitespaceBackground(*args, **kwargs):
        """
        SetWhitespaceBackground(self, bool useSetting, Colour back)

        Set the background colour of all whitespace and whether to use this setting.
        """
        return _stc.StyledTextCtrl_SetWhitespaceBackground(*args, **kwargs)

    def SetStyleBits(*args, **kwargs):
        """
        SetStyleBits(self, int bits)

        Divide each styling byte into lexical class bits (default: 5) and indicator
        bits (default: 3). If a lexer requires more than 32 lexical states, then this
        is used to expand the possible states.
        """
        return _stc.StyledTextCtrl_SetStyleBits(*args, **kwargs)

    def GetStyleBits(*args, **kwargs):
        """
        GetStyleBits(self) -> int

        Retrieve number of bits in style bytes used to hold the lexical state.
        """
        return _stc.StyledTextCtrl_GetStyleBits(*args, **kwargs)

    def SetLineState(*args, **kwargs):
        """
        SetLineState(self, int line, int state)

        Used to hold extra styling information for each line.
        """
        return _stc.StyledTextCtrl_SetLineState(*args, **kwargs)

    def GetLineState(*args, **kwargs):
        """
        GetLineState(self, int line) -> int

        Retrieve the extra styling information for a line.
        """
        return _stc.StyledTextCtrl_GetLineState(*args, **kwargs)

    def GetMaxLineState(*args, **kwargs):
        """
        GetMaxLineState(self) -> int

        Retrieve the last line number that has line state.
        """
        return _stc.StyledTextCtrl_GetMaxLineState(*args, **kwargs)

    def GetCaretLineVisible(*args, **kwargs):
        """
        GetCaretLineVisible(self) -> bool

        Is the background of the line containing the caret in a different colour?
        """
        return _stc.StyledTextCtrl_GetCaretLineVisible(*args, **kwargs)

    def SetCaretLineVisible(*args, **kwargs):
        """
        SetCaretLineVisible(self, bool show)

        Display the background of the line containing the caret in a different colour.
        """
        return _stc.StyledTextCtrl_SetCaretLineVisible(*args, **kwargs)

    def GetCaretLineBackground(*args, **kwargs):
        """
        GetCaretLineBackground(self) -> Colour

        Get the colour of the background of the line containing the caret.
        """
        return _stc.StyledTextCtrl_GetCaretLineBackground(*args, **kwargs)

    def SetCaretLineBackground(*args, **kwargs):
        """
        SetCaretLineBackground(self, Colour back)

        Set the colour of the background of the line containing the caret.
        """
        return _stc.StyledTextCtrl_SetCaretLineBackground(*args, **kwargs)

    def StyleSetChangeable(*args, **kwargs):
        """
        StyleSetChangeable(self, int style, bool changeable)

        Set a style to be changeable or not (read only).
        Experimental feature, currently buggy.
        """
        return _stc.StyledTextCtrl_StyleSetChangeable(*args, **kwargs)

    def AutoCompShow(*args, **kwargs):
        """
        AutoCompShow(self, int lenEntered, String itemList)

        Display a auto-completion list.
        The lenEntered parameter indicates how many characters before
        the caret should be used to provide context.
        """
        return _stc.StyledTextCtrl_AutoCompShow(*args, **kwargs)

    def AutoCompCancel(*args, **kwargs):
        """
        AutoCompCancel(self)

        Remove the auto-completion list from the screen.
        """
        return _stc.StyledTextCtrl_AutoCompCancel(*args, **kwargs)

    def AutoCompActive(*args, **kwargs):
        """
        AutoCompActive(self) -> bool

        Is there an auto-completion list visible?
        """
        return _stc.StyledTextCtrl_AutoCompActive(*args, **kwargs)

    def AutoCompPosStart(*args, **kwargs):
        """
        AutoCompPosStart(self) -> int

        Retrieve the position of the caret when the auto-completion list was displayed.
        """
        return _stc.StyledTextCtrl_AutoCompPosStart(*args, **kwargs)

    def AutoCompComplete(*args, **kwargs):
        """
        AutoCompComplete(self)

        User has selected an item so remove the list and insert the selection.
        """
        return _stc.StyledTextCtrl_AutoCompComplete(*args, **kwargs)

    def AutoCompStops(*args, **kwargs):
        """
        AutoCompStops(self, String characterSet)

        Define a set of character that when typed cancel the auto-completion list.
        """
        return _stc.StyledTextCtrl_AutoCompStops(*args, **kwargs)

    def AutoCompSetSeparator(*args, **kwargs):
        """
        AutoCompSetSeparator(self, int separatorCharacter)

        Change the separator character in the string setting up an auto-completion list.
        Default is space but can be changed if items contain space.
        """
        return _stc.StyledTextCtrl_AutoCompSetSeparator(*args, **kwargs)

    def AutoCompGetSeparator(*args, **kwargs):
        """
        AutoCompGetSeparator(self) -> int

        Retrieve the auto-completion list separator character.
        """
        return _stc.StyledTextCtrl_AutoCompGetSeparator(*args, **kwargs)

    def AutoCompSelect(*args, **kwargs):
        """
        AutoCompSelect(self, String text)

        Select the item in the auto-completion list that starts with a string.
        """
        return _stc.StyledTextCtrl_AutoCompSelect(*args, **kwargs)

    def AutoCompSetCancelAtStart(*args, **kwargs):
        """
        AutoCompSetCancelAtStart(self, bool cancel)

        Should the auto-completion list be cancelled if the user backspaces to a
        position before where the box was created.
        """
        return _stc.StyledTextCtrl_AutoCompSetCancelAtStart(*args, **kwargs)

    def AutoCompGetCancelAtStart(*args, **kwargs):
        """
        AutoCompGetCancelAtStart(self) -> bool

        Retrieve whether auto-completion cancelled by backspacing before start.
        """
        return _stc.StyledTextCtrl_AutoCompGetCancelAtStart(*args, **kwargs)

    def AutoCompSetFillUps(*args, **kwargs):
        """
        AutoCompSetFillUps(self, String characterSet)

        Define a set of characters that when typed will cause the autocompletion to
        choose the selected item.
        """
        return _stc.StyledTextCtrl_AutoCompSetFillUps(*args, **kwargs)

    def AutoCompSetChooseSingle(*args, **kwargs):
        """
        AutoCompSetChooseSingle(self, bool chooseSingle)

        Should a single item auto-completion list automatically choose the item.
        """
        return _stc.StyledTextCtrl_AutoCompSetChooseSingle(*args, **kwargs)

    def AutoCompGetChooseSingle(*args, **kwargs):
        """
        AutoCompGetChooseSingle(self) -> bool

        Retrieve whether a single item auto-completion list automatically choose the item.
        """
        return _stc.StyledTextCtrl_AutoCompGetChooseSingle(*args, **kwargs)

    def AutoCompSetIgnoreCase(*args, **kwargs):
        """
        AutoCompSetIgnoreCase(self, bool ignoreCase)

        Set whether case is significant when performing auto-completion searches.
        """
        return _stc.StyledTextCtrl_AutoCompSetIgnoreCase(*args, **kwargs)

    def AutoCompGetIgnoreCase(*args, **kwargs):
        """
        AutoCompGetIgnoreCase(self) -> bool

        Retrieve state of ignore case flag.
        """
        return _stc.StyledTextCtrl_AutoCompGetIgnoreCase(*args, **kwargs)

    def UserListShow(*args, **kwargs):
        """
        UserListShow(self, int listType, String itemList)

        Display a list of strings and send notification when user chooses one.
        """
        return _stc.StyledTextCtrl_UserListShow(*args, **kwargs)

    def AutoCompSetAutoHide(*args, **kwargs):
        """
        AutoCompSetAutoHide(self, bool autoHide)

        Set whether or not autocompletion is hidden automatically when nothing matches.
        """
        return _stc.StyledTextCtrl_AutoCompSetAutoHide(*args, **kwargs)

    def AutoCompGetAutoHide(*args, **kwargs):
        """
        AutoCompGetAutoHide(self) -> bool

        Retrieve whether or not autocompletion is hidden automatically when nothing matches.
        """
        return _stc.StyledTextCtrl_AutoCompGetAutoHide(*args, **kwargs)

    def AutoCompSetDropRestOfWord(*args, **kwargs):
        """
        AutoCompSetDropRestOfWord(self, bool dropRestOfWord)

        Set whether or not autocompletion deletes any word characters
        after the inserted text upon completion.
        """
        return _stc.StyledTextCtrl_AutoCompSetDropRestOfWord(*args, **kwargs)

    def AutoCompGetDropRestOfWord(*args, **kwargs):
        """
        AutoCompGetDropRestOfWord(self) -> bool

        Retrieve whether or not autocompletion deletes any word characters
        after the inserted text upon completion.
        """
        return _stc.StyledTextCtrl_AutoCompGetDropRestOfWord(*args, **kwargs)

    def RegisterImage(*args, **kwargs):
        """
        RegisterImage(self, int type, Bitmap bmp)

        Register an image for use in autocompletion lists.
        """
        return _stc.StyledTextCtrl_RegisterImage(*args, **kwargs)

    def ClearRegisteredImages(*args, **kwargs):
        """
        ClearRegisteredImages(self)

        Clear all the registered images.
        """
        return _stc.StyledTextCtrl_ClearRegisteredImages(*args, **kwargs)

    def AutoCompGetTypeSeparator(*args, **kwargs):
        """
        AutoCompGetTypeSeparator(self) -> int

        Retrieve the auto-completion list type-separator character.
        """
        return _stc.StyledTextCtrl_AutoCompGetTypeSeparator(*args, **kwargs)

    def AutoCompSetTypeSeparator(*args, **kwargs):
        """
        AutoCompSetTypeSeparator(self, int separatorCharacter)

        Change the type-separator character in the string setting up an auto-completion list.
        Default is '?' but can be changed if items contain '?'.
        """
        return _stc.StyledTextCtrl_AutoCompSetTypeSeparator(*args, **kwargs)

    def AutoCompSetMaxWidth(*args, **kwargs):
        """
        AutoCompSetMaxWidth(self, int characterCount)

        Set the maximum width, in characters, of auto-completion and user lists.
        Set to 0 to autosize to fit longest item, which is the default.
        """
        return _stc.StyledTextCtrl_AutoCompSetMaxWidth(*args, **kwargs)

    def AutoCompGetMaxWidth(*args, **kwargs):
        """
        AutoCompGetMaxWidth(self) -> int

        Get the maximum width, in characters, of auto-completion and user lists.
        """
        return _stc.StyledTextCtrl_AutoCompGetMaxWidth(*args, **kwargs)

    def AutoCompSetMaxHeight(*args, **kwargs):
        """
        AutoCompSetMaxHeight(self, int rowCount)

        Set the maximum height, in rows, of auto-completion and user lists.
        The default is 5 rows.
        """
        return _stc.StyledTextCtrl_AutoCompSetMaxHeight(*args, **kwargs)

    def AutoCompGetMaxHeight(*args, **kwargs):
        """
        AutoCompGetMaxHeight(self) -> int

        Set the maximum height, in rows, of auto-completion and user lists.
        """
        return _stc.StyledTextCtrl_AutoCompGetMaxHeight(*args, **kwargs)

    def SetIndent(*args, **kwargs):
        """
        SetIndent(self, int indentSize)

        Set the number of spaces used for one level of indentation.
        """
        return _stc.StyledTextCtrl_SetIndent(*args, **kwargs)

    def GetIndent(*args, **kwargs):
        """
        GetIndent(self) -> int

        Retrieve indentation size.
        """
        return _stc.StyledTextCtrl_GetIndent(*args, **kwargs)

    def SetUseTabs(*args, **kwargs):
        """
        SetUseTabs(self, bool useTabs)

        Indentation will only use space characters if useTabs is false, otherwise
        it will use a combination of tabs and spaces.
        """
        return _stc.StyledTextCtrl_SetUseTabs(*args, **kwargs)

    def GetUseTabs(*args, **kwargs):
        """
        GetUseTabs(self) -> bool

        Retrieve whether tabs will be used in indentation.
        """
        return _stc.StyledTextCtrl_GetUseTabs(*args, **kwargs)

    def SetLineIndentation(*args, **kwargs):
        """
        SetLineIndentation(self, int line, int indentSize)

        Change the indentation of a line to a number of columns.
        """
        return _stc.StyledTextCtrl_SetLineIndentation(*args, **kwargs)

    def GetLineIndentation(*args, **kwargs):
        """
        GetLineIndentation(self, int line) -> int

        Retrieve the number of columns that a line is indented.
        """
        return _stc.StyledTextCtrl_GetLineIndentation(*args, **kwargs)

    def GetLineIndentPosition(*args, **kwargs):
        """
        GetLineIndentPosition(self, int line) -> int

        Retrieve the position before the first non indentation character on a line.
        """
        return _stc.StyledTextCtrl_GetLineIndentPosition(*args, **kwargs)

    def GetColumn(*args, **kwargs):
        """
        GetColumn(self, int pos) -> int

        Retrieve the column number of a position, taking tab width into account.
        """
        return _stc.StyledTextCtrl_GetColumn(*args, **kwargs)

    def SetUseHorizontalScrollBar(*args, **kwargs):
        """
        SetUseHorizontalScrollBar(self, bool show)

        Show or hide the horizontal scroll bar.
        """
        return _stc.StyledTextCtrl_SetUseHorizontalScrollBar(*args, **kwargs)

    def GetUseHorizontalScrollBar(*args, **kwargs):
        """
        GetUseHorizontalScrollBar(self) -> bool

        Is the horizontal scroll bar visible?
        """
        return _stc.StyledTextCtrl_GetUseHorizontalScrollBar(*args, **kwargs)

    def SetIndentationGuides(*args, **kwargs):
        """
        SetIndentationGuides(self, bool show)

        Show or hide indentation guides.
        """
        return _stc.StyledTextCtrl_SetIndentationGuides(*args, **kwargs)

    def GetIndentationGuides(*args, **kwargs):
        """
        GetIndentationGuides(self) -> bool

        Are the indentation guides visible?
        """
        return _stc.StyledTextCtrl_GetIndentationGuides(*args, **kwargs)

    def SetHighlightGuide(*args, **kwargs):
        """
        SetHighlightGuide(self, int column)

        Set the highlighted indentation guide column.
        0 = no highlighted guide.
        """
        return _stc.StyledTextCtrl_SetHighlightGuide(*args, **kwargs)

    def GetHighlightGuide(*args, **kwargs):
        """
        GetHighlightGuide(self) -> int

        Get the highlighted indentation guide column.
        """
        return _stc.StyledTextCtrl_GetHighlightGuide(*args, **kwargs)

    def GetLineEndPosition(*args, **kwargs):
        """
        GetLineEndPosition(self, int line) -> int

        Get the position after the last visible characters on a line.
        """
        return _stc.StyledTextCtrl_GetLineEndPosition(*args, **kwargs)

    def GetCodePage(*args, **kwargs):
        """
        GetCodePage(self) -> int

        Get the code page used to interpret the bytes of the document as characters.
        """
        return _stc.StyledTextCtrl_GetCodePage(*args, **kwargs)

    def GetCaretForeground(*args, **kwargs):
        """
        GetCaretForeground(self) -> Colour

        Get the foreground colour of the caret.
        """
        return _stc.StyledTextCtrl_GetCaretForeground(*args, **kwargs)

    def GetReadOnly(*args, **kwargs):
        """
        GetReadOnly(self) -> bool

        In read-only mode?
        """
        return _stc.StyledTextCtrl_GetReadOnly(*args, **kwargs)

    def SetCurrentPos(*args, **kwargs):
        """
        SetCurrentPos(self, int pos)

        Sets the position of the caret.
        """
        return _stc.StyledTextCtrl_SetCurrentPos(*args, **kwargs)

    def SetSelectionStart(*args, **kwargs):
        """
        SetSelectionStart(self, int pos)

        Sets the position that starts the selection - this becomes the anchor.
        """
        return _stc.StyledTextCtrl_SetSelectionStart(*args, **kwargs)

    def GetSelectionStart(*args, **kwargs):
        """
        GetSelectionStart(self) -> int

        Returns the position at the start of the selection.
        """
        return _stc.StyledTextCtrl_GetSelectionStart(*args, **kwargs)

    def SetSelectionEnd(*args, **kwargs):
        """
        SetSelectionEnd(self, int pos)

        Sets the position that ends the selection - this becomes the currentPosition.
        """
        return _stc.StyledTextCtrl_SetSelectionEnd(*args, **kwargs)

    def GetSelectionEnd(*args, **kwargs):
        """
        GetSelectionEnd(self) -> int

        Returns the position at the end of the selection.
        """
        return _stc.StyledTextCtrl_GetSelectionEnd(*args, **kwargs)

    def SetPrintMagnification(*args, **kwargs):
        """
        SetPrintMagnification(self, int magnification)

        Sets the print magnification added to the point size of each style for printing.
        """
        return _stc.StyledTextCtrl_SetPrintMagnification(*args, **kwargs)

    def GetPrintMagnification(*args, **kwargs):
        """
        GetPrintMagnification(self) -> int

        Returns the print magnification.
        """
        return _stc.StyledTextCtrl_GetPrintMagnification(*args, **kwargs)

    def SetPrintColourMode(*args, **kwargs):
        """
        SetPrintColourMode(self, int mode)

        Modify colours when printing for clearer printed text.
        """
        return _stc.StyledTextCtrl_SetPrintColourMode(*args, **kwargs)

    def GetPrintColourMode(*args, **kwargs):
        """
        GetPrintColourMode(self) -> int

        Returns the print colour mode.
        """
        return _stc.StyledTextCtrl_GetPrintColourMode(*args, **kwargs)

    def FindText(*args, **kwargs):
        """
        FindText(self, int minPos, int maxPos, String text, int flags=0) -> int

        Find some text in the document.
        """
        return _stc.StyledTextCtrl_FindText(*args, **kwargs)

    def FormatRange(*args, **kwargs):
        """
        FormatRange(self, bool doDraw, int startPos, int endPos, DC draw, DC target, 
            Rect renderRect, Rect pageRect) -> int

        On Windows, will draw the document into a display context such as a printer.
        """
        return _stc.StyledTextCtrl_FormatRange(*args, **kwargs)

    def GetFirstVisibleLine(*args, **kwargs):
        """
        GetFirstVisibleLine(self) -> int

        Retrieve the display line at the top of the display.
        """
        return _stc.StyledTextCtrl_GetFirstVisibleLine(*args, **kwargs)

    def GetLine(*args, **kwargs):
        """
        GetLine(self, int line) -> String

        Retrieve the contents of a line.
        """
        return _stc.StyledTextCtrl_GetLine(*args, **kwargs)

    def GetLineCount(*args, **kwargs):
        """
        GetLineCount(self) -> int

        Returns the number of lines in the document. There is always at least one.
        """
        return _stc.StyledTextCtrl_GetLineCount(*args, **kwargs)

    def SetMarginLeft(*args, **kwargs):
        """
        SetMarginLeft(self, int pixelWidth)

        Sets the size in pixels of the left margin.
        """
        return _stc.StyledTextCtrl_SetMarginLeft(*args, **kwargs)

    def GetMarginLeft(*args, **kwargs):
        """
        GetMarginLeft(self) -> int

        Returns the size in pixels of the left margin.
        """
        return _stc.StyledTextCtrl_GetMarginLeft(*args, **kwargs)

    def SetMarginRight(*args, **kwargs):
        """
        SetMarginRight(self, int pixelWidth)

        Sets the size in pixels of the right margin.
        """
        return _stc.StyledTextCtrl_SetMarginRight(*args, **kwargs)

    def GetMarginRight(*args, **kwargs):
        """
        GetMarginRight(self) -> int

        Returns the size in pixels of the right margin.
        """
        return _stc.StyledTextCtrl_GetMarginRight(*args, **kwargs)

    def GetModify(*args, **kwargs):
        """
        GetModify(self) -> bool

        Is the document different from when it was last saved?
        """
        return _stc.StyledTextCtrl_GetModify(*args, **kwargs)

    def SetSelection(*args, **kwargs):
        """
        SetSelection(self, int start, int end)

        Select a range of text.
        """
        return _stc.StyledTextCtrl_SetSelection(*args, **kwargs)

    def GetSelectedText(*args, **kwargs):
        """
        GetSelectedText(self) -> String

        Retrieve the selected text.
        """
        return _stc.StyledTextCtrl_GetSelectedText(*args, **kwargs)

    def GetTextRange(*args, **kwargs):
        """
        GetTextRange(self, int startPos, int endPos) -> String

        Retrieve a range of text.
        """
        return _stc.StyledTextCtrl_GetTextRange(*args, **kwargs)

    def HideSelection(*args, **kwargs):
        """
        HideSelection(self, bool normal)

        Draw the selection in normal style or with selection highlighted.
        """
        return _stc.StyledTextCtrl_HideSelection(*args, **kwargs)

    def LineFromPosition(*args, **kwargs):
        """
        LineFromPosition(self, int pos) -> int

        Retrieve the line containing a position.
        """
        return _stc.StyledTextCtrl_LineFromPosition(*args, **kwargs)

    def PositionFromLine(*args, **kwargs):
        """
        PositionFromLine(self, int line) -> int

        Retrieve the position at the start of a line.
        """
        return _stc.StyledTextCtrl_PositionFromLine(*args, **kwargs)

    def LineScroll(*args, **kwargs):
        """
        LineScroll(self, int columns, int lines)

        Scroll horizontally and vertically.
        """
        return _stc.StyledTextCtrl_LineScroll(*args, **kwargs)

    def EnsureCaretVisible(*args, **kwargs):
        """
        EnsureCaretVisible(self)

        Ensure the caret is visible.
        """
        return _stc.StyledTextCtrl_EnsureCaretVisible(*args, **kwargs)

    def ReplaceSelection(*args, **kwargs):
        """
        ReplaceSelection(self, String text)

        Replace the selected text with the argument text.
        """
        return _stc.StyledTextCtrl_ReplaceSelection(*args, **kwargs)

    def SetReadOnly(*args, **kwargs):
        """
        SetReadOnly(self, bool readOnly)

        Set to read only or read write.
        """
        return _stc.StyledTextCtrl_SetReadOnly(*args, **kwargs)

    def CanPaste(*args, **kwargs):
        """
        CanPaste(self) -> bool

        Will a paste succeed?
        """
        return _stc.StyledTextCtrl_CanPaste(*args, **kwargs)

    def CanUndo(*args, **kwargs):
        """
        CanUndo(self) -> bool

        Are there any undoable actions in the undo history?
        """
        return _stc.StyledTextCtrl_CanUndo(*args, **kwargs)

    def EmptyUndoBuffer(*args, **kwargs):
        """
        EmptyUndoBuffer(self)

        Delete the undo history.
        """
        return _stc.StyledTextCtrl_EmptyUndoBuffer(*args, **kwargs)

    def Undo(*args, **kwargs):
        """
        Undo(self)

        Undo one action in the undo history.
        """
        return _stc.StyledTextCtrl_Undo(*args, **kwargs)

    def Cut(*args, **kwargs):
        """
        Cut(self)

        Cut the selection to the clipboard.
        """
        return _stc.StyledTextCtrl_Cut(*args, **kwargs)

    def Copy(*args, **kwargs):
        """
        Copy(self)

        Copy the selection to the clipboard.
        """
        return _stc.StyledTextCtrl_Copy(*args, **kwargs)

    def Paste(*args, **kwargs):
        """
        Paste(self)

        Paste the contents of the clipboard into the document replacing the selection.
        """
        return _stc.StyledTextCtrl_Paste(*args, **kwargs)

    def Clear(*args, **kwargs):
        """
        Clear(self)

        Clear the selection.
        """
        return _stc.StyledTextCtrl_Clear(*args, **kwargs)

    def SetText(*args, **kwargs):
        """
        SetText(self, String text)

        Replace the contents of the document with the argument text.
        """
        return _stc.StyledTextCtrl_SetText(*args, **kwargs)

    def GetText(*args, **kwargs):
        """
        GetText(self) -> String

        Retrieve all the text in the document.
        """
        return _stc.StyledTextCtrl_GetText(*args, **kwargs)

    def GetTextLength(*args, **kwargs):
        """
        GetTextLength(self) -> int

        Retrieve the number of characters in the document.
        """
        return _stc.StyledTextCtrl_GetTextLength(*args, **kwargs)

    def SetOvertype(*args, **kwargs):
        """
        SetOvertype(self, bool overtype)

        Set to overtype (true) or insert mode.
        """
        return _stc.StyledTextCtrl_SetOvertype(*args, **kwargs)

    def GetOvertype(*args, **kwargs):
        """
        GetOvertype(self) -> bool

        Returns true if overtype mode is active otherwise false is returned.
        """
        return _stc.StyledTextCtrl_GetOvertype(*args, **kwargs)

    def SetCaretWidth(*args, **kwargs):
        """
        SetCaretWidth(self, int pixelWidth)

        Set the width of the insert mode caret.
        """
        return _stc.StyledTextCtrl_SetCaretWidth(*args, **kwargs)

    def GetCaretWidth(*args, **kwargs):
        """
        GetCaretWidth(self) -> int

        Returns the width of the insert mode caret.
        """
        return _stc.StyledTextCtrl_GetCaretWidth(*args, **kwargs)

    def SetTargetStart(*args, **kwargs):
        """
        SetTargetStart(self, int pos)

        Sets the position that starts the target which is used for updating the
        document without affecting the scroll position.
        """
        return _stc.StyledTextCtrl_SetTargetStart(*args, **kwargs)

    def GetTargetStart(*args, **kwargs):
        """
        GetTargetStart(self) -> int

        Get the position that starts the target.
        """
        return _stc.StyledTextCtrl_GetTargetStart(*args, **kwargs)

    def SetTargetEnd(*args, **kwargs):
        """
        SetTargetEnd(self, int pos)

        Sets the position that ends the target which is used for updating the
        document without affecting the scroll position.
        """
        return _stc.StyledTextCtrl_SetTargetEnd(*args, **kwargs)

    def GetTargetEnd(*args, **kwargs):
        """
        GetTargetEnd(self) -> int

        Get the position that ends the target.
        """
        return _stc.StyledTextCtrl_GetTargetEnd(*args, **kwargs)

    def ReplaceTarget(*args, **kwargs):
        """
        ReplaceTarget(self, String text) -> int

        Replace the target text with the argument text.
        Text is counted so it can contain NULs.
        Returns the length of the replacement text.
        """
        return _stc.StyledTextCtrl_ReplaceTarget(*args, **kwargs)

    def ReplaceTargetRE(*args, **kwargs):
        """
        ReplaceTargetRE(self, String text) -> int

        Replace the target text with the argument text after \d processing.
        Text is counted so it can contain NULs.
        Looks for \d where d is between 1 and 9 and replaces these with the strings
        matched in the last search operation which were surrounded by \( and \).
        Returns the length of the replacement text including any change
        caused by processing the \d patterns.
        """
        return _stc.StyledTextCtrl_ReplaceTargetRE(*args, **kwargs)

    def SearchInTarget(*args, **kwargs):
        """
        SearchInTarget(self, String text) -> int

        Search for a counted string in the target and set the target to the found
        range. Text is counted so it can contain NULs.
        Returns length of range or -1 for failure in which case target is not moved.
        """
        return _stc.StyledTextCtrl_SearchInTarget(*args, **kwargs)

    def SetSearchFlags(*args, **kwargs):
        """
        SetSearchFlags(self, int flags)

        Set the search flags used by SearchInTarget.
        """
        return _stc.StyledTextCtrl_SetSearchFlags(*args, **kwargs)

    def GetSearchFlags(*args, **kwargs):
        """
        GetSearchFlags(self) -> int

        Get the search flags used by SearchInTarget.
        """
        return _stc.StyledTextCtrl_GetSearchFlags(*args, **kwargs)

    def CallTipShow(*args, **kwargs):
        """
        CallTipShow(self, int pos, String definition)

        Show a call tip containing a definition near position pos.
        """
        return _stc.StyledTextCtrl_CallTipShow(*args, **kwargs)

    def CallTipCancel(*args, **kwargs):
        """
        CallTipCancel(self)

        Remove the call tip from the screen.
        """
        return _stc.StyledTextCtrl_CallTipCancel(*args, **kwargs)

    def CallTipActive(*args, **kwargs):
        """
        CallTipActive(self) -> bool

        Is there an active call tip?
        """
        return _stc.StyledTextCtrl_CallTipActive(*args, **kwargs)

    def CallTipPosAtStart(*args, **kwargs):
        """
        CallTipPosAtStart(self) -> int

        Retrieve the position where the caret was before displaying the call tip.
        """
        return _stc.StyledTextCtrl_CallTipPosAtStart(*args, **kwargs)

    def CallTipSetHighlight(*args, **kwargs):
        """
        CallTipSetHighlight(self, int start, int end)

        Highlight a segment of the definition.
        """
        return _stc.StyledTextCtrl_CallTipSetHighlight(*args, **kwargs)

    def CallTipSetBackground(*args, **kwargs):
        """
        CallTipSetBackground(self, Colour back)

        Set the background colour for the call tip.
        """
        return _stc.StyledTextCtrl_CallTipSetBackground(*args, **kwargs)

    def CallTipSetForeground(*args, **kwargs):
        """
        CallTipSetForeground(self, Colour fore)

        Set the foreground colour for the call tip.
        """
        return _stc.StyledTextCtrl_CallTipSetForeground(*args, **kwargs)

    def CallTipSetForegroundHighlight(*args, **kwargs):
        """
        CallTipSetForegroundHighlight(self, Colour fore)

        Set the foreground colour for the highlighted part of the call tip.
        """
        return _stc.StyledTextCtrl_CallTipSetForegroundHighlight(*args, **kwargs)

    def CallTipUseStyle(*args, **kwargs):
        """
        CallTipUseStyle(self, int tabSize)

        Enable use of STYLE_CALLTIP and set call tip tab size in pixels.
        """
        return _stc.StyledTextCtrl_CallTipUseStyle(*args, **kwargs)

    def VisibleFromDocLine(*args, **kwargs):
        """
        VisibleFromDocLine(self, int line) -> int

        Find the display line of a document line taking hidden lines into account.
        """
        return _stc.StyledTextCtrl_VisibleFromDocLine(*args, **kwargs)

    def DocLineFromVisible(*args, **kwargs):
        """
        DocLineFromVisible(self, int lineDisplay) -> int

        Find the document line of a display line taking hidden lines into account.
        """
        return _stc.StyledTextCtrl_DocLineFromVisible(*args, **kwargs)

    def WrapCount(*args, **kwargs):
        """
        WrapCount(self, int line) -> int

        The number of display lines needed to wrap a document line
        """
        return _stc.StyledTextCtrl_WrapCount(*args, **kwargs)

    def SetFoldLevel(*args, **kwargs):
        """
        SetFoldLevel(self, int line, int level)

        Set the fold level of a line.
        This encodes an integer level along with flags indicating whether the
        line is a header and whether it is effectively white space.
        """
        return _stc.StyledTextCtrl_SetFoldLevel(*args, **kwargs)

    def GetFoldLevel(*args, **kwargs):
        """
        GetFoldLevel(self, int line) -> int

        Retrieve the fold level of a line.
        """
        return _stc.StyledTextCtrl_GetFoldLevel(*args, **kwargs)

    def GetLastChild(*args, **kwargs):
        """
        GetLastChild(self, int line, int level) -> int

        Find the last child line of a header line.
        """
        return _stc.StyledTextCtrl_GetLastChild(*args, **kwargs)

    def GetFoldParent(*args, **kwargs):
        """
        GetFoldParent(self, int line) -> int

        Find the parent line of a child line.
        """
        return _stc.StyledTextCtrl_GetFoldParent(*args, **kwargs)

    def ShowLines(*args, **kwargs):
        """
        ShowLines(self, int lineStart, int lineEnd)

        Make a range of lines visible.
        """
        return _stc.StyledTextCtrl_ShowLines(*args, **kwargs)

    def HideLines(*args, **kwargs):
        """
        HideLines(self, int lineStart, int lineEnd)

        Make a range of lines invisible.
        """
        return _stc.StyledTextCtrl_HideLines(*args, **kwargs)

    def GetLineVisible(*args, **kwargs):
        """
        GetLineVisible(self, int line) -> bool

        Is a line visible?
        """
        return _stc.StyledTextCtrl_GetLineVisible(*args, **kwargs)

    def SetFoldExpanded(*args, **kwargs):
        """
        SetFoldExpanded(self, int line, bool expanded)

        Show the children of a header line.
        """
        return _stc.StyledTextCtrl_SetFoldExpanded(*args, **kwargs)

    def GetFoldExpanded(*args, **kwargs):
        """
        GetFoldExpanded(self, int line) -> bool

        Is a header line expanded?
        """
        return _stc.StyledTextCtrl_GetFoldExpanded(*args, **kwargs)

    def ToggleFold(*args, **kwargs):
        """
        ToggleFold(self, int line)

        Switch a header line between expanded and contracted.
        """
        return _stc.StyledTextCtrl_ToggleFold(*args, **kwargs)

    def EnsureVisible(*args, **kwargs):
        """
        EnsureVisible(self, int line)

        Ensure a particular line is visible by expanding any header line hiding it.
        """
        return _stc.StyledTextCtrl_EnsureVisible(*args, **kwargs)

    def SetFoldFlags(*args, **kwargs):
        """
        SetFoldFlags(self, int flags)

        Set some style options for folding.
        """
        return _stc.StyledTextCtrl_SetFoldFlags(*args, **kwargs)

    def EnsureVisibleEnforcePolicy(*args, **kwargs):
        """
        EnsureVisibleEnforcePolicy(self, int line)

        Ensure a particular line is visible by expanding any header line hiding it.
        Use the currently set visibility policy to determine which range to display.
        """
        return _stc.StyledTextCtrl_EnsureVisibleEnforcePolicy(*args, **kwargs)

    def SetTabIndents(*args, **kwargs):
        """
        SetTabIndents(self, bool tabIndents)

        Sets whether a tab pressed when caret is within indentation indents.
        """
        return _stc.StyledTextCtrl_SetTabIndents(*args, **kwargs)

    def GetTabIndents(*args, **kwargs):
        """
        GetTabIndents(self) -> bool

        Does a tab pressed when caret is within indentation indent?
        """
        return _stc.StyledTextCtrl_GetTabIndents(*args, **kwargs)

    def SetBackSpaceUnIndents(*args, **kwargs):
        """
        SetBackSpaceUnIndents(self, bool bsUnIndents)

        Sets whether a backspace pressed when caret is within indentation unindents.
        """
        return _stc.StyledTextCtrl_SetBackSpaceUnIndents(*args, **kwargs)

    def GetBackSpaceUnIndents(*args, **kwargs):
        """
        GetBackSpaceUnIndents(self) -> bool

        Does a backspace pressed when caret is within indentation unindent?
        """
        return _stc.StyledTextCtrl_GetBackSpaceUnIndents(*args, **kwargs)

    def SetMouseDwellTime(*args, **kwargs):
        """
        SetMouseDwellTime(self, int periodMilliseconds)

        Sets the time the mouse must sit still to generate a mouse dwell event.
        """
        return _stc.StyledTextCtrl_SetMouseDwellTime(*args, **kwargs)

    def GetMouseDwellTime(*args, **kwargs):
        """
        GetMouseDwellTime(self) -> int

        Retrieve the time the mouse must sit still to generate a mouse dwell event.
        """
        return _stc.StyledTextCtrl_GetMouseDwellTime(*args, **kwargs)

    def WordStartPosition(*args, **kwargs):
        """
        WordStartPosition(self, int pos, bool onlyWordCharacters) -> int

        Get position of start of word.
        """
        return _stc.StyledTextCtrl_WordStartPosition(*args, **kwargs)

    def WordEndPosition(*args, **kwargs):
        """
        WordEndPosition(self, int pos, bool onlyWordCharacters) -> int

        Get position of end of word.
        """
        return _stc.StyledTextCtrl_WordEndPosition(*args, **kwargs)

    def SetWrapMode(*args, **kwargs):
        """
        SetWrapMode(self, int mode)

        Sets whether text is word wrapped.
        """
        return _stc.StyledTextCtrl_SetWrapMode(*args, **kwargs)

    def GetWrapMode(*args, **kwargs):
        """
        GetWrapMode(self) -> int

        Retrieve whether text is word wrapped.
        """
        return _stc.StyledTextCtrl_GetWrapMode(*args, **kwargs)

    def SetWrapVisualFlags(*args, **kwargs):
        """
        SetWrapVisualFlags(self, int wrapVisualFlags)

        Set the display mode of visual flags for wrapped lines.
        """
        return _stc.StyledTextCtrl_SetWrapVisualFlags(*args, **kwargs)

    def GetWrapVisualFlags(*args, **kwargs):
        """
        GetWrapVisualFlags(self) -> int

        Retrive the display mode of visual flags for wrapped lines.
        """
        return _stc.StyledTextCtrl_GetWrapVisualFlags(*args, **kwargs)

    def SetWrapVisualFlagsLocation(*args, **kwargs):
        """
        SetWrapVisualFlagsLocation(self, int wrapVisualFlagsLocation)

        Set the location of visual flags for wrapped lines.
        """
        return _stc.StyledTextCtrl_SetWrapVisualFlagsLocation(*args, **kwargs)

    def GetWrapVisualFlagsLocation(*args, **kwargs):
        """
        GetWrapVisualFlagsLocation(self) -> int

        Retrive the location of visual flags for wrapped lines.
        """
        return _stc.StyledTextCtrl_GetWrapVisualFlagsLocation(*args, **kwargs)

    def SetWrapStartIndent(*args, **kwargs):
        """
        SetWrapStartIndent(self, int indent)

        Set the start indent for wrapped lines.
        """
        return _stc.StyledTextCtrl_SetWrapStartIndent(*args, **kwargs)

    def GetWrapStartIndent(*args, **kwargs):
        """
        GetWrapStartIndent(self) -> int

        Retrive the start indent for wrapped lines.
        """
        return _stc.StyledTextCtrl_GetWrapStartIndent(*args, **kwargs)

    def SetLayoutCache(*args, **kwargs):
        """
        SetLayoutCache(self, int mode)

        Sets the degree of caching of layout information.
        """
        return _stc.StyledTextCtrl_SetLayoutCache(*args, **kwargs)

    def GetLayoutCache(*args, **kwargs):
        """
        GetLayoutCache(self) -> int

        Retrieve the degree of caching of layout information.
        """
        return _stc.StyledTextCtrl_GetLayoutCache(*args, **kwargs)

    def SetScrollWidth(*args, **kwargs):
        """
        SetScrollWidth(self, int pixelWidth)

        Sets the document width assumed for scrolling.
        """
        return _stc.StyledTextCtrl_SetScrollWidth(*args, **kwargs)

    def GetScrollWidth(*args, **kwargs):
        """
        GetScrollWidth(self) -> int

        Retrieve the document width assumed for scrolling.
        """
        return _stc.StyledTextCtrl_GetScrollWidth(*args, **kwargs)

    def TextWidth(*args, **kwargs):
        """
        TextWidth(self, int style, String text) -> int

        Measure the pixel width of some text in a particular style.
        NUL terminated text argument.
        Does not handle tab or control characters.
        """
        return _stc.StyledTextCtrl_TextWidth(*args, **kwargs)

    def SetEndAtLastLine(*args, **kwargs):
        """
        SetEndAtLastLine(self, bool endAtLastLine)

        Sets the scroll range so that maximum scroll position has
        the last line at the bottom of the view (default).
        Setting this to false allows scrolling one page below the last line.
        """
        return _stc.StyledTextCtrl_SetEndAtLastLine(*args, **kwargs)

    def GetEndAtLastLine(*args, **kwargs):
        """
        GetEndAtLastLine(self) -> bool

        Retrieve whether the maximum scroll position has the last
        line at the bottom of the view.
        """
        return _stc.StyledTextCtrl_GetEndAtLastLine(*args, **kwargs)

    def TextHeight(*args, **kwargs):
        """
        TextHeight(self, int line) -> int

        Retrieve the height of a particular line of text in pixels.
        """
        return _stc.StyledTextCtrl_TextHeight(*args, **kwargs)

    def SetUseVerticalScrollBar(*args, **kwargs):
        """
        SetUseVerticalScrollBar(self, bool show)

        Show or hide the vertical scroll bar.
        """
        return _stc.StyledTextCtrl_SetUseVerticalScrollBar(*args, **kwargs)

    def GetUseVerticalScrollBar(*args, **kwargs):
        """
        GetUseVerticalScrollBar(self) -> bool

        Is the vertical scroll bar visible?
        """
        return _stc.StyledTextCtrl_GetUseVerticalScrollBar(*args, **kwargs)

    def AppendText(*args, **kwargs):
        """
        AppendText(self, String text)

        Append a string to the end of the document without changing the selection.
        """
        return _stc.StyledTextCtrl_AppendText(*args, **kwargs)

    def GetTwoPhaseDraw(*args, **kwargs):
        """
        GetTwoPhaseDraw(self) -> bool

        Is drawing done in two phases with backgrounds drawn before foregrounds?
        """
        return _stc.StyledTextCtrl_GetTwoPhaseDraw(*args, **kwargs)

    def SetTwoPhaseDraw(*args, **kwargs):
        """
        SetTwoPhaseDraw(self, bool twoPhase)

        In twoPhaseDraw mode, drawing is performed in two phases, first the background
        and then the foreground. This avoids chopping off characters that overlap the next run.
        """
        return _stc.StyledTextCtrl_SetTwoPhaseDraw(*args, **kwargs)

    def TargetFromSelection(*args, **kwargs):
        """
        TargetFromSelection(self)

        Make the target range start and end be the same as the selection range start and end.
        """
        return _stc.StyledTextCtrl_TargetFromSelection(*args, **kwargs)

    def LinesJoin(*args, **kwargs):
        """
        LinesJoin(self)

        Join the lines in the target.
        """
        return _stc.StyledTextCtrl_LinesJoin(*args, **kwargs)

    def LinesSplit(*args, **kwargs):
        """
        LinesSplit(self, int pixelWidth)

        Split the lines in the target into lines that are less wide than pixelWidth
        where possible.
        """
        return _stc.StyledTextCtrl_LinesSplit(*args, **kwargs)

    def SetFoldMarginColour(*args, **kwargs):
        """
        SetFoldMarginColour(self, bool useSetting, Colour back)

        Set the colours used as a chequerboard pattern in the fold margin
        """
        return _stc.StyledTextCtrl_SetFoldMarginColour(*args, **kwargs)

    def SetFoldMarginHiColour(*args, **kwargs):
        """SetFoldMarginHiColour(self, bool useSetting, Colour fore)"""
        return _stc.StyledTextCtrl_SetFoldMarginHiColour(*args, **kwargs)

    def LineDown(*args, **kwargs):
        """
        LineDown(self)

        Move caret down one line.
        """
        return _stc.StyledTextCtrl_LineDown(*args, **kwargs)


    def LineDownExtend(*args, **kwargs):
        """
        LineDownExtend(self)

        Move caret down one line extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_LineDownExtend(*args, **kwargs)

    def LineUp(*args, **kwargs):
        """
        LineUp(self)

        Move caret up one line.
        """
        return _stc.StyledTextCtrl_LineUp(*args, **kwargs)


    def LineUpExtend(*args, **kwargs):
        """
        LineUpExtend(self)

        Move caret up one line extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_LineUpExtend(*args, **kwargs)

    def CharLeft(*args, **kwargs):
        """
        CharLeft(self)

        Move caret left one character.
        """
        return _stc.StyledTextCtrl_CharLeft(*args, **kwargs)

    def CharLeftExtend(*args, **kwargs):
        """
        CharLeftExtend(self)

        Move caret left one character extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_CharLeftExtend(*args, **kwargs)

    def CharRight(*args, **kwargs):
        """
        CharRight(self)

        Move caret right one character.
        """
        return _stc.StyledTextCtrl_CharRight(*args, **kwargs)

    def CharRightExtend(*args, **kwargs):
        """
        CharRightExtend(self)

        Move caret right one character extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_CharRightExtend(*args, **kwargs)

    def WordLeft(*args, **kwargs):
        """
        WordLeft(self)

        Move caret left one word.
        """
        return _stc.StyledTextCtrl_WordLeft(*args, **kwargs)

    def WordLeftExtend(*args, **kwargs):
        """
        WordLeftExtend(self)

        Move caret left one word extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_WordLeftExtend(*args, **kwargs)

    def WordRight(*args, **kwargs):
        """
        WordRight(self)

        Move caret right one word.
        """
        return _stc.StyledTextCtrl_WordRight(*args, **kwargs)

    def WordRightExtend(*args, **kwargs):
        """
        WordRightExtend(self)

        Move caret right one word extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_WordRightExtend(*args, **kwargs)

    def Home(*args, **kwargs):
        """
        Home(self)

        Move caret to first position on line.
        """
        return _stc.StyledTextCtrl_Home(*args, **kwargs)

    def HomeExtend(*args, **kwargs):
        """
        HomeExtend(self)

        Move caret to first position on line extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_HomeExtend(*args, **kwargs)

    def LineEnd(*args, **kwargs):
        """
        LineEnd(self)

        Move caret to last position on line.
        """
        return _stc.StyledTextCtrl_LineEnd(*args, **kwargs)

    def LineEndExtend(*args, **kwargs):
        """
        LineEndExtend(self)

        Move caret to last position on line extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_LineEndExtend(*args, **kwargs)

    def DocumentStart(*args, **kwargs):
        """
        DocumentStart(self)

        Move caret to first position in document.
        """
        return _stc.StyledTextCtrl_DocumentStart(*args, **kwargs)

    def DocumentStartExtend(*args, **kwargs):
        """
        DocumentStartExtend(self)

        Move caret to first position in document extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_DocumentStartExtend(*args, **kwargs)

    def DocumentEnd(*args, **kwargs):
        """
        DocumentEnd(self)

        Move caret to last position in document.
        """
        return _stc.StyledTextCtrl_DocumentEnd(*args, **kwargs)

    def DocumentEndExtend(*args, **kwargs):
        """
        DocumentEndExtend(self)

        Move caret to last position in document extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_DocumentEndExtend(*args, **kwargs)

    def PageUp(*args, **kwargs):
        """
        PageUp(self)

        Move caret one page up.
        """
        return _stc.StyledTextCtrl_PageUp(*args, **kwargs)


    def PageUpExtend(*args, **kwargs):
        """
        PageUpExtend(self)

        Move caret one page up extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_PageUpExtend(*args, **kwargs)

    def PageDown(*args, **kwargs):
        """
        PageDown(self)

        Move caret one page down.
        """
        return _stc.StyledTextCtrl_PageDown(*args, **kwargs)


    def PageDownExtend(*args, **kwargs):
        """
        PageDownExtend(self)

        Move caret one page down extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_PageDownExtend(*args, **kwargs)

    def EditToggleOvertype(*args, **kwargs):
        """
        EditToggleOvertype(self)

        Switch from insert to overtype mode or the reverse.
        """
        return _stc.StyledTextCtrl_EditToggleOvertype(*args, **kwargs)

    def Cancel(*args, **kwargs):
        """
        Cancel(self)

        Cancel any modes such as call tip or auto-completion list display.
        """
        return _stc.StyledTextCtrl_Cancel(*args, **kwargs)

    def DeleteBack(*args, **kwargs):
        """
        DeleteBack(self)

        Delete the selection or if no selection, the character before the caret.
        """
        return _stc.StyledTextCtrl_DeleteBack(*args, **kwargs)

    def Tab(*args, **kwargs):
        """
        Tab(self)

        If selection is empty or all on one line replace the selection with a tab character.
        If more than one line selected, indent the lines.
        """
        return _stc.StyledTextCtrl_Tab(*args, **kwargs)

    def BackTab(*args, **kwargs):
        """
        BackTab(self)

        Dedent the selected lines.
        """
        return _stc.StyledTextCtrl_BackTab(*args, **kwargs)

    def NewLine(*args, **kwargs):
        """
        NewLine(self)

        Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
        """
        return _stc.StyledTextCtrl_NewLine(*args, **kwargs)

    def FormFeed(*args, **kwargs):
        """
        FormFeed(self)

        Insert a Form Feed character.
        """
        return _stc.StyledTextCtrl_FormFeed(*args, **kwargs)

    def VCHome(*args, **kwargs):
        """
        VCHome(self)

        Move caret to before first visible character on line.
        If already there move to first character on line.
        """
        return _stc.StyledTextCtrl_VCHome(*args, **kwargs)

    def VCHomeExtend(*args, **kwargs):
        """
        VCHomeExtend(self)

        Like VCHome but extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_VCHomeExtend(*args, **kwargs)

    def ZoomIn(*args, **kwargs):
        """
        ZoomIn(self)

        Magnify the displayed text by increasing the sizes by 1 point.
        """
        return _stc.StyledTextCtrl_ZoomIn(*args, **kwargs)

    def ZoomOut(*args, **kwargs):
        """
        ZoomOut(self)

        Make the displayed text smaller by decreasing the sizes by 1 point.
        """
        return _stc.StyledTextCtrl_ZoomOut(*args, **kwargs)

    def DelWordLeft(*args, **kwargs):
        """
        DelWordLeft(self)

        Delete the word to the left of the caret.
        """
        return _stc.StyledTextCtrl_DelWordLeft(*args, **kwargs)

    def DelWordRight(*args, **kwargs):
        """
        DelWordRight(self)

        Delete the word to the right of the caret.
        """
        return _stc.StyledTextCtrl_DelWordRight(*args, **kwargs)

    def LineCut(*args, **kwargs):
        """
        LineCut(self)

        Cut the line containing the caret.
        """
        return _stc.StyledTextCtrl_LineCut(*args, **kwargs)

    def LineDelete(*args, **kwargs):
        """
        LineDelete(self)

        Delete the line containing the caret.
        """
        return _stc.StyledTextCtrl_LineDelete(*args, **kwargs)

    def LineTranspose(*args, **kwargs):
        """
        LineTranspose(self)

        Switch the current line with the previous.
        """
        return _stc.StyledTextCtrl_LineTranspose(*args, **kwargs)

    def LineDuplicate(*args, **kwargs):
        """
        LineDuplicate(self)

        Duplicate the current line.
        """
        return _stc.StyledTextCtrl_LineDuplicate(*args, **kwargs)

    def LowerCase(*args, **kwargs):
        """
        LowerCase(self)

        Transform the selection to lower case.
        """
        return _stc.StyledTextCtrl_LowerCase(*args, **kwargs)

    def UpperCase(*args, **kwargs):
        """
        UpperCase(self)

        Transform the selection to upper case.
        """
        return _stc.StyledTextCtrl_UpperCase(*args, **kwargs)

    def LineScrollDown(*args, **kwargs):
        """
        LineScrollDown(self)

        Scroll the document down, keeping the caret visible.
        """
        return _stc.StyledTextCtrl_LineScrollDown(*args, **kwargs)

    def LineScrollUp(*args, **kwargs):
        """
        LineScrollUp(self)

        Scroll the document up, keeping the caret visible.
        """
        return _stc.StyledTextCtrl_LineScrollUp(*args, **kwargs)

    def DeleteBackNotLine(*args, **kwargs):
        """
        DeleteBackNotLine(self)

        Delete the selection or if no selection, the character before the caret.
        Will not delete the character before at the start of a line.
        """
        return _stc.StyledTextCtrl_DeleteBackNotLine(*args, **kwargs)

    def HomeDisplay(*args, **kwargs):
        """
        HomeDisplay(self)

        Move caret to first position on display line.
        """
        return _stc.StyledTextCtrl_HomeDisplay(*args, **kwargs)

    def HomeDisplayExtend(*args, **kwargs):
        """
        HomeDisplayExtend(self)

        Move caret to first position on display line extending selection to
        new caret position.
        """
        return _stc.StyledTextCtrl_HomeDisplayExtend(*args, **kwargs)

    def LineEndDisplay(*args, **kwargs):
        """
        LineEndDisplay(self)

        Move caret to last position on display line.
        """
        return _stc.StyledTextCtrl_LineEndDisplay(*args, **kwargs)

    def LineEndDisplayExtend(*args, **kwargs):
        """
        LineEndDisplayExtend(self)

        Move caret to last position on display line extending selection to new
        caret position.
        """
        return _stc.StyledTextCtrl_LineEndDisplayExtend(*args, **kwargs)

    def HomeWrap(*args, **kwargs):
        """
        HomeWrap(self)

        These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?
        except they behave differently when word-wrap is enabled:
        They go first to the start / end of the display line, like (Home|LineEnd)Display
        The difference is that, the cursor is already at the point, it goes on to the start
        or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.
        """
        return _stc.StyledTextCtrl_HomeWrap(*args, **kwargs)

    def HomeWrapExtend(*args, **kwargs):
        """HomeWrapExtend(self)"""
        return _stc.StyledTextCtrl_HomeWrapExtend(*args, **kwargs)

    def LineEndWrap(*args, **kwargs):
        """LineEndWrap(self)"""
        return _stc.StyledTextCtrl_LineEndWrap(*args, **kwargs)

    def LineEndWrapExtend(*args, **kwargs):
        """LineEndWrapExtend(self)"""
        return _stc.StyledTextCtrl_LineEndWrapExtend(*args, **kwargs)

    def VCHomeWrap(*args, **kwargs):
        """VCHomeWrap(self)"""
        return _stc.StyledTextCtrl_VCHomeWrap(*args, **kwargs)

    def VCHomeWrapExtend(*args, **kwargs):
        """VCHomeWrapExtend(self)"""
        return _stc.StyledTextCtrl_VCHomeWrapExtend(*args, **kwargs)

    def LineCopy(*args, **kwargs):
        """
        LineCopy(self)

        Copy the line containing the caret.
        """
        return _stc.StyledTextCtrl_LineCopy(*args, **kwargs)

    def MoveCaretInsideView(*args, **kwargs):
        """
        MoveCaretInsideView(self)

        Move the caret inside current view if it's not there already.
        """
        return _stc.StyledTextCtrl_MoveCaretInsideView(*args, **kwargs)

    def LineLength(*args, **kwargs):
        """
        LineLength(self, int line) -> int

        How many characters are on a line, not including end of line characters?
        """
        return _stc.StyledTextCtrl_LineLength(*args, **kwargs)

    def BraceHighlight(*args, **kwargs):
        """
        BraceHighlight(self, int pos1, int pos2)

        Highlight the characters at two positions.
        """
        return _stc.StyledTextCtrl_BraceHighlight(*args, **kwargs)

    def BraceBadLight(*args, **kwargs):
        """
        BraceBadLight(self, int pos)

        Highlight the character at a position indicating there is no matching brace.
        """
        return _stc.StyledTextCtrl_BraceBadLight(*args, **kwargs)

    def BraceMatch(*args, **kwargs):
        """
        BraceMatch(self, int pos) -> int

        Find the position of a matching brace or INVALID_POSITION if no match.
        """
        return _stc.StyledTextCtrl_BraceMatch(*args, **kwargs)

    def GetViewEOL(*args, **kwargs):
        """
        GetViewEOL(self) -> bool

        Are the end of line characters visible?
        """
        return _stc.StyledTextCtrl_GetViewEOL(*args, **kwargs)

    def SetViewEOL(*args, **kwargs):
        """
        SetViewEOL(self, bool visible)

        Make the end of line characters visible or invisible.
        """
        return _stc.StyledTextCtrl_SetViewEOL(*args, **kwargs)

    def GetDocPointer(*args, **kwargs):
        """
        GetDocPointer(self) -> void

        Retrieve a pointer to the document object.
        """
        return _stc.StyledTextCtrl_GetDocPointer(*args, **kwargs)

    def SetDocPointer(*args, **kwargs):
        """
        SetDocPointer(self, void docPointer)

        Change the document object used.
        """
        return _stc.StyledTextCtrl_SetDocPointer(*args, **kwargs)

    def SetModEventMask(*args, **kwargs):
        """
        SetModEventMask(self, int mask)

        Set which document modification events are sent to the container.
        """
        return _stc.StyledTextCtrl_SetModEventMask(*args, **kwargs)

    def GetEdgeColumn(*args, **kwargs):
        """
        GetEdgeColumn(self) -> int

        Retrieve the column number which text should be kept within.
        """
        return _stc.StyledTextCtrl_GetEdgeColumn(*args, **kwargs)

    def SetEdgeColumn(*args, **kwargs):
        """
        SetEdgeColumn(self, int column)

        Set the column number of the edge.
        If text goes past the edge then it is highlighted.
        """
        return _stc.StyledTextCtrl_SetEdgeColumn(*args, **kwargs)

    def GetEdgeMode(*args, **kwargs):
        """
        GetEdgeMode(self) -> int

        Retrieve the edge highlight mode.
        """
        return _stc.StyledTextCtrl_GetEdgeMode(*args, **kwargs)

    def SetEdgeMode(*args, **kwargs):
        """
        SetEdgeMode(self, int mode)

        The edge may be displayed by a line (EDGE_LINE) or by highlighting text that
        goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).
        """
        return _stc.StyledTextCtrl_SetEdgeMode(*args, **kwargs)

    def GetEdgeColour(*args, **kwargs):
        """
        GetEdgeColour(self) -> Colour

        Retrieve the colour used in edge indication.
        """
        return _stc.StyledTextCtrl_GetEdgeColour(*args, **kwargs)

    def SetEdgeColour(*args, **kwargs):
        """
        SetEdgeColour(self, Colour edgeColour)

        Change the colour used in edge indication.
        """
        return _stc.StyledTextCtrl_SetEdgeColour(*args, **kwargs)

    def SearchAnchor(*args, **kwargs):
        """
        SearchAnchor(self)

        Sets the current caret position to be the search anchor.
        """
        return _stc.StyledTextCtrl_SearchAnchor(*args, **kwargs)

    def SearchNext(*args, **kwargs):
        """
        SearchNext(self, int flags, String text) -> int

        Find some text starting at the search anchor.
        Does not ensure the selection is visible.
        """
        return _stc.StyledTextCtrl_SearchNext(*args, **kwargs)

    def SearchPrev(*args, **kwargs):
        """
        SearchPrev(self, int flags, String text) -> int

        Find some text starting at the search anchor and moving backwards.
        Does not ensure the selection is visible.
        """
        return _stc.StyledTextCtrl_SearchPrev(*args, **kwargs)

    def LinesOnScreen(*args, **kwargs):
        """
        LinesOnScreen(self) -> int

        Retrieves the number of lines completely visible.
        """
        return _stc.StyledTextCtrl_LinesOnScreen(*args, **kwargs)

    def UsePopUp(*args, **kwargs):
        """
        UsePopUp(self, bool allowPopUp)

        Set whether a pop up menu is displayed automatically when the user presses
        the wrong mouse button.
        """
        return _stc.StyledTextCtrl_UsePopUp(*args, **kwargs)

    def SelectionIsRectangle(*args, **kwargs):
        """
        SelectionIsRectangle(self) -> bool

        Is the selection rectangular? The alternative is the more common stream selection.
        """
        return _stc.StyledTextCtrl_SelectionIsRectangle(*args, **kwargs)

    def SetZoom(*args, **kwargs):
        """
        SetZoom(self, int zoom)

        Set the zoom level. This number of points is added to the size of all fonts.
        It may be positive to magnify or negative to reduce.
        """
        return _stc.StyledTextCtrl_SetZoom(*args, **kwargs)

    def GetZoom(*args, **kwargs):
        """
        GetZoom(self) -> int

        Retrieve the zoom level.
        """
        return _stc.StyledTextCtrl_GetZoom(*args, **kwargs)

    def CreateDocument(*args, **kwargs):
        """
        CreateDocument(self) -> void

        Create a new document object.
        Starts with reference count of 1 and not selected into editor.
        """
        return _stc.StyledTextCtrl_CreateDocument(*args, **kwargs)

    def AddRefDocument(*args, **kwargs):
        """
        AddRefDocument(self, void docPointer)

        Extend life of document.
        """
        return _stc.StyledTextCtrl_AddRefDocument(*args, **kwargs)

    def ReleaseDocument(*args, **kwargs):
        """
        ReleaseDocument(self, void docPointer)

        Release a reference to the document, deleting document if it fades to black.
        """
        return _stc.StyledTextCtrl_ReleaseDocument(*args, **kwargs)

    def GetModEventMask(*args, **kwargs):
        """
        GetModEventMask(self) -> int

        Get which document modification events are sent to the container.
        """
        return _stc.StyledTextCtrl_GetModEventMask(*args, **kwargs)

    def SetSTCFocus(*args, **kwargs):
        """
        SetSTCFocus(self, bool focus)

        Change internal focus flag.
        """
        return _stc.StyledTextCtrl_SetSTCFocus(*args, **kwargs)

    def GetSTCFocus(*args, **kwargs):
        """
        GetSTCFocus(self) -> bool

        Get internal focus flag.
        """
        return _stc.StyledTextCtrl_GetSTCFocus(*args, **kwargs)

    def SetStatus(*args, **kwargs):
        """
        SetStatus(self, int statusCode)

        Change error status - 0 = OK.
        """
        return _stc.StyledTextCtrl_SetStatus(*args, **kwargs)

    def GetStatus(*args, **kwargs):
        """
        GetStatus(self) -> int

        Get error status.
        """
        return _stc.StyledTextCtrl_GetStatus(*args, **kwargs)

    def SetMouseDownCaptures(*args, **kwargs):
        """
        SetMouseDownCaptures(self, bool captures)

        Set whether the mouse is captured when its button is pressed.
        """
        return _stc.StyledTextCtrl_SetMouseDownCaptures(*args, **kwargs)

    def GetMouseDownCaptures(*args, **kwargs):
        """
        GetMouseDownCaptures(self) -> bool

        Get whether mouse gets captured.
        """
        return _stc.StyledTextCtrl_GetMouseDownCaptures(*args, **kwargs)

    def SetSTCCursor(*args, **kwargs):
        """
        SetSTCCursor(self, int cursorType)

        Sets the cursor to one of the SC_CURSOR* values.
        """
        return _stc.StyledTextCtrl_SetSTCCursor(*args, **kwargs)

    def GetSTCCursor(*args, **kwargs):
        """
        GetSTCCursor(self) -> int

        Get cursor type.
        """
        return _stc.StyledTextCtrl_GetSTCCursor(*args, **kwargs)

    def SetControlCharSymbol(*args, **kwargs):
        """
        SetControlCharSymbol(self, int symbol)

        Change the way control characters are displayed:
        If symbol is < 32, keep the drawn way, else, use the given character.
        """
        return _stc.StyledTextCtrl_SetControlCharSymbol(*args, **kwargs)

    def GetControlCharSymbol(*args, **kwargs):
        """
        GetControlCharSymbol(self) -> int

        Get the way control characters are displayed.
        """
        return _stc.StyledTextCtrl_GetControlCharSymbol(*args, **kwargs)

    def WordPartLeft(*args, **kwargs):
        """
        WordPartLeft(self)

        Move to the previous change in capitalisation.
        """
        return _stc.StyledTextCtrl_WordPartLeft(*args, **kwargs)

    def WordPartLeftExtend(*args, **kwargs):
        """
        WordPartLeftExtend(self)

        Move to the previous change in capitalisation extending selection
        to new caret position.
        """
        return _stc.StyledTextCtrl_WordPartLeftExtend(*args, **kwargs)

    def WordPartRight(*args, **kwargs):
        """
        WordPartRight(self)

        Move to the change next in capitalisation.
        """
        return _stc.StyledTextCtrl_WordPartRight(*args, **kwargs)

    def WordPartRightExtend(*args, **kwargs):
        """
        WordPartRightExtend(self)

        Move to the next change in capitalisation extending selection
        to new caret position.
        """
        return _stc.StyledTextCtrl_WordPartRightExtend(*args, **kwargs)

    def SetVisiblePolicy(*args, **kwargs):
        """
        SetVisiblePolicy(self, int visiblePolicy, int visibleSlop)

        Set the way the display area is determined when a particular line
        is to be moved to by Find, FindNext, GotoLine, etc.
        """
        return _stc.StyledTextCtrl_SetVisiblePolicy(*args, **kwargs)

    def DelLineLeft(*args, **kwargs):
        """
        DelLineLeft(self)

        Delete back from the current position to the start of the line.
        """
        return _stc.StyledTextCtrl_DelLineLeft(*args, **kwargs)

    def DelLineRight(*args, **kwargs):
        """
        DelLineRight(self)

        Delete forwards from the current position to the end of the line.
        """
        return _stc.StyledTextCtrl_DelLineRight(*args, **kwargs)

    def SetXOffset(*args, **kwargs):
        """
        SetXOffset(self, int newOffset)

        Get and Set the xOffset (ie, horizonal scroll position).
        """
        return _stc.StyledTextCtrl_SetXOffset(*args, **kwargs)

    def GetXOffset(*args, **kwargs):
        """GetXOffset(self) -> int"""
        return _stc.StyledTextCtrl_GetXOffset(*args, **kwargs)

    def ChooseCaretX(*args, **kwargs):
        """
        ChooseCaretX(self)

        Set the last x chosen value to be the caret x position.
        """
        return _stc.StyledTextCtrl_ChooseCaretX(*args, **kwargs)

    def SetXCaretPolicy(*args, **kwargs):
        """
        SetXCaretPolicy(self, int caretPolicy, int caretSlop)

        Set the way the caret is kept visible when going sideway.
        The exclusion zone is given in pixels.
        """
        return _stc.StyledTextCtrl_SetXCaretPolicy(*args, **kwargs)

    def SetYCaretPolicy(*args, **kwargs):
        """
        SetYCaretPolicy(self, int caretPolicy, int caretSlop)

        Set the way the line the caret is on is kept visible.
        The exclusion zone is given in lines.
        """
        return _stc.StyledTextCtrl_SetYCaretPolicy(*args, **kwargs)

    def SetPrintWrapMode(*args, **kwargs):
        """
        SetPrintWrapMode(self, int mode)

        Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).
        """
        return _stc.StyledTextCtrl_SetPrintWrapMode(*args, **kwargs)

    def GetPrintWrapMode(*args, **kwargs):
        """
        GetPrintWrapMode(self) -> int

        Is printing line wrapped?
        """
        return _stc.StyledTextCtrl_GetPrintWrapMode(*args, **kwargs)

    def SetHotspotActiveForeground(*args, **kwargs):
        """
        SetHotspotActiveForeground(self, bool useSetting, Colour fore)

        Set a fore colour for active hotspots.
        """
        return _stc.StyledTextCtrl_SetHotspotActiveForeground(*args, **kwargs)

    def SetHotspotActiveBackground(*args, **kwargs):
        """
        SetHotspotActiveBackground(self, bool useSetting, Colour back)

        Set a back colour for active hotspots.
        """
        return _stc.StyledTextCtrl_SetHotspotActiveBackground(*args, **kwargs)

    def SetHotspotActiveUnderline(*args, **kwargs):
        """
        SetHotspotActiveUnderline(self, bool underline)

        Enable / Disable underlining active hotspots.
        """
        return _stc.StyledTextCtrl_SetHotspotActiveUnderline(*args, **kwargs)

    def SetHotspotSingleLine(*args, **kwargs):
        """
        SetHotspotSingleLine(self, bool singleLine)

        Limit hotspots to single line so hotspots on two lines don't merge.
        """
        return _stc.StyledTextCtrl_SetHotspotSingleLine(*args, **kwargs)

    def ParaDown(*args, **kwargs):
        """
        ParaDown(self)

        Move caret between paragraphs (delimited by empty lines).
        """
        return _stc.StyledTextCtrl_ParaDown(*args, **kwargs)

    def ParaDownExtend(*args, **kwargs):
        """ParaDownExtend(self)"""
        return _stc.StyledTextCtrl_ParaDownExtend(*args, **kwargs)

    def ParaUp(*args, **kwargs):
        """ParaUp(self)"""
        return _stc.StyledTextCtrl_ParaUp(*args, **kwargs)

    def ParaUpExtend(*args, **kwargs):
        """ParaUpExtend(self)"""
        return _stc.StyledTextCtrl_ParaUpExtend(*args, **kwargs)

    def PositionBefore(*args, **kwargs):
        """
        PositionBefore(self, int pos) -> int

        Given a valid document position, return the previous position taking code
        page into account. Returns 0 if passed 0.
        """
        return _stc.StyledTextCtrl_PositionBefore(*args, **kwargs)

    def PositionAfter(*args, **kwargs):
        """
        PositionAfter(self, int pos) -> int

        Given a valid document position, return the next position taking code
        page into account. Maximum value returned is the last position in the document.
        """
        return _stc.StyledTextCtrl_PositionAfter(*args, **kwargs)

    def CopyRange(*args, **kwargs):
        """
        CopyRange(self, int start, int end)

        Copy a range of text to the clipboard. Positions are clipped into the document.
        """
        return _stc.StyledTextCtrl_CopyRange(*args, **kwargs)

    def CopyText(*args, **kwargs):
        """
        CopyText(self, int length, String text)

        Copy argument text to the clipboard.
        """
        return _stc.StyledTextCtrl_CopyText(*args, **kwargs)

    def SetSelectionMode(*args, **kwargs):
        """
        SetSelectionMode(self, int mode)

        Set the selection mode to stream (SC_SEL_STREAM) or rectangular (SC_SEL_RECTANGLE) or
        by lines (SC_SEL_LINES).
        """
        return _stc.StyledTextCtrl_SetSelectionMode(*args, **kwargs)

    def GetSelectionMode(*args, **kwargs):
        """
        GetSelectionMode(self) -> int

        Get the mode of the current selection.
        """
        return _stc.StyledTextCtrl_GetSelectionMode(*args, **kwargs)

    def GetLineSelStartPosition(*args, **kwargs):
        """
        GetLineSelStartPosition(self, int line) -> int

        Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line).
        """
        return _stc.StyledTextCtrl_GetLineSelStartPosition(*args, **kwargs)

    def GetLineSelEndPosition(*args, **kwargs):
        """
        GetLineSelEndPosition(self, int line) -> int

        Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line).
        """
        return _stc.StyledTextCtrl_GetLineSelEndPosition(*args, **kwargs)

    def LineDownRectExtend(*args, **kwargs):
        """
        LineDownRectExtend(self)

        Move caret down one line, extending rectangular selection to new caret position.
        """
        return _stc.StyledTextCtrl_LineDownRectExtend(*args, **kwargs)

    def LineUpRectExtend(*args, **kwargs):
        """
        LineUpRectExtend(self)

        Move caret up one line, extending rectangular selection to new caret position.
        """
        return _stc.StyledTextCtrl_LineUpRectExtend(*args, **kwargs)

    def CharLeftRectExtend(*args, **kwargs):
        """
        CharLeftRectExtend(self)

        Move caret left one character, extending rectangular selection to new caret position.
        """
        return _stc.StyledTextCtrl_CharLeftRectExtend(*args, **kwargs)

    def CharRightRectExtend(*args, **kwargs):
        """
        CharRightRectExtend(self)

        Move caret right one character, extending rectangular selection to new caret position.
        """
        return _stc.StyledTextCtrl_CharRightRectExtend(*args, **kwargs)

    def HomeRectExtend(*args, **kwargs):
        """
        HomeRectExtend(self)

        Move caret to first position on line, extending rectangular selection to new caret position.
        """
        return _stc.StyledTextCtrl_HomeRectExtend(*args, **kwargs)

    def VCHomeRectExtend(*args, **kwargs):
        """
        VCHomeRectExtend(self)

        Move caret to before first visible character on line.
        If already there move to first character on line.
        In either case, extend rectangular selection to new caret position.
        """
        return _stc.StyledTextCtrl_VCHomeRectExtend(*args, **kwargs)

    def LineEndRectExtend(*args, **kwargs):
        """
        LineEndRectExtend(self)

        Move caret to last position on line, extending rectangular selection to new caret position.
        """
        return _stc.StyledTextCtrl_LineEndRectExtend(*args, **kwargs)

    def PageUpRectExtend(*args, **kwargs):
        """
        PageUpRectExtend(self)

        Move caret one page up, extending rectangular selection to new caret position.
        """
        return _stc.StyledTextCtrl_PageUpRectExtend(*args, **kwargs)

    def PageDownRectExtend(*args, **kwargs):
        """
        PageDownRectExtend(self)

        Move caret one page down, extending rectangular selection to new caret position.
        """
        return _stc.StyledTextCtrl_PageDownRectExtend(*args, **kwargs)

    def StutteredPageUp(*args, **kwargs):
        """
        StutteredPageUp(self)

        Move caret to top of page, or one page up if already at top of page.
        """
        return _stc.StyledTextCtrl_StutteredPageUp(*args, **kwargs)

    def StutteredPageUpExtend(*args, **kwargs):
        """
        StutteredPageUpExtend(self)

        Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_StutteredPageUpExtend(*args, **kwargs)

    def StutteredPageDown(*args, **kwargs):
        """
        StutteredPageDown(self)

        Move caret to bottom of page, or one page down if already at bottom of page.
        """
        return _stc.StyledTextCtrl_StutteredPageDown(*args, **kwargs)

    def StutteredPageDownExtend(*args, **kwargs):
        """
        StutteredPageDownExtend(self)

        Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_StutteredPageDownExtend(*args, **kwargs)

    def WordLeftEnd(*args, **kwargs):
        """
        WordLeftEnd(self)

        Move caret left one word, position cursor at end of word.
        """
        return _stc.StyledTextCtrl_WordLeftEnd(*args, **kwargs)

    def WordLeftEndExtend(*args, **kwargs):
        """
        WordLeftEndExtend(self)

        Move caret left one word, position cursor at end of word, extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_WordLeftEndExtend(*args, **kwargs)

    def WordRightEnd(*args, **kwargs):
        """
        WordRightEnd(self)

        Move caret right one word, position cursor at end of word.
        """
        return _stc.StyledTextCtrl_WordRightEnd(*args, **kwargs)

    def WordRightEndExtend(*args, **kwargs):
        """
        WordRightEndExtend(self)

        Move caret right one word, position cursor at end of word, extending selection to new caret position.
        """
        return _stc.StyledTextCtrl_WordRightEndExtend(*args, **kwargs)

    def SetWhitespaceChars(*args, **kwargs):
        """
        SetWhitespaceChars(self, String characters)

        Set the set of characters making up whitespace for when moving or selecting by word.
        Should be called after SetWordChars.
        """
        return _stc.StyledTextCtrl_SetWhitespaceChars(*args, **kwargs)

    def SetCharsDefault(*args, **kwargs):
        """
        SetCharsDefault(self)

        Reset the set of characters for whitespace and word characters to the defaults.
        """
        return _stc.StyledTextCtrl_SetCharsDefault(*args, **kwargs)

    def AutoCompGetCurrent(*args, **kwargs):
        """
        AutoCompGetCurrent(self) -> int

        Get currently selected item position in the auto-completion list
        """
        return _stc.StyledTextCtrl_AutoCompGetCurrent(*args, **kwargs)

    def Allocate(*args, **kwargs):
        """
        Allocate(self, int bytes)

        Enlarge the document to a particular size of text bytes.
        """
        return _stc.StyledTextCtrl_Allocate(*args, **kwargs)

    def FindColumn(*args, **kwargs):
        """
        FindColumn(self, int line, int column) -> int

        Find the position of a column on a line taking into account tabs and
        multi-byte characters. If beyond end of line, return line end position.
        """
        return _stc.StyledTextCtrl_FindColumn(*args, **kwargs)

    def GetCaretSticky(*args, **kwargs):
        """
        GetCaretSticky(self) -> bool

        Can the caret preferred x position only be changed by explicit movement commands?
        """
        return _stc.StyledTextCtrl_GetCaretSticky(*args, **kwargs)

    def SetCaretSticky(*args, **kwargs):
        """
        SetCaretSticky(self, bool useCaretStickyBehaviour)

        Stop the caret preferred x position changing when the user types.
        """
        return _stc.StyledTextCtrl_SetCaretSticky(*args, **kwargs)

    def ToggleCaretSticky(*args, **kwargs):
        """
        ToggleCaretSticky(self)

        Switch between sticky and non-sticky: meant to be bound to a key.
        """
        return _stc.StyledTextCtrl_ToggleCaretSticky(*args, **kwargs)

    def SetPasteConvertEndings(*args, **kwargs):
        """
        SetPasteConvertEndings(self, bool convert)

        Enable/Disable convert-on-paste for line endings
        """
        return _stc.StyledTextCtrl_SetPasteConvertEndings(*args, **kwargs)

    def GetPasteConvertEndings(*args, **kwargs):
        """
        GetPasteConvertEndings(self) -> bool

        Get convert-on-paste setting
        """
        return _stc.StyledTextCtrl_GetPasteConvertEndings(*args, **kwargs)

    def SelectionDuplicate(*args, **kwargs):
        """
        SelectionDuplicate(self)

        Duplicate the selection. If selection empty duplicate the line containing the caret.
        """
        return _stc.StyledTextCtrl_SelectionDuplicate(*args, **kwargs)

    def SetCaretLineBackAlpha(*args, **kwargs):
        """
        SetCaretLineBackAlpha(self, int alpha)

        Set background alpha of the caret line.
        """
        return _stc.StyledTextCtrl_SetCaretLineBackAlpha(*args, **kwargs)

    def GetCaretLineBackAlpha(*args, **kwargs):
        """
        GetCaretLineBackAlpha(self) -> int

        Get the background alpha of the caret line.
        """
        return _stc.StyledTextCtrl_GetCaretLineBackAlpha(*args, **kwargs)

    def StartRecord(*args, **kwargs):
        """
        StartRecord(self)

        Start notifying the container of all key presses and commands.
        """
        return _stc.StyledTextCtrl_StartRecord(*args, **kwargs)

    def StopRecord(*args, **kwargs):
        """
        StopRecord(self)

        Stop notifying the container of all key presses and commands.
        """
        return _stc.StyledTextCtrl_StopRecord(*args, **kwargs)

    def SetLexer(*args, **kwargs):
        """
        SetLexer(self, int lexer)

        Set the lexing language of the document.
        """
        return _stc.StyledTextCtrl_SetLexer(*args, **kwargs)

    def GetLexer(*args, **kwargs):
        """
        GetLexer(self) -> int

        Retrieve the lexing language of the document.
        """
        return _stc.StyledTextCtrl_GetLexer(*args, **kwargs)

    def Colourise(*args, **kwargs):
        """
        Colourise(self, int start, int end)

        Colourise a segment of the document using the current lexing language.
        """
        return _stc.StyledTextCtrl_Colourise(*args, **kwargs)

    def SetProperty(*args, **kwargs):
        """
        SetProperty(self, String key, String value)

        Set up a value that may be used by a lexer for some optional feature.
        """
        return _stc.StyledTextCtrl_SetProperty(*args, **kwargs)

    def SetKeyWords(*args, **kwargs):
        """
        SetKeyWords(self, int keywordSet, String keyWords)

        Set up the key words used by the lexer.
        """
        return _stc.StyledTextCtrl_SetKeyWords(*args, **kwargs)

    def SetLexerLanguage(*args, **kwargs):
        """
        SetLexerLanguage(self, String language)

        Set the lexing language of the document based on string name.
        """
        return _stc.StyledTextCtrl_SetLexerLanguage(*args, **kwargs)

    def GetProperty(*args, **kwargs):
        """
        GetProperty(self, String key) -> String

        Retrieve a 'property' value previously set with SetProperty.
        """
        return _stc.StyledTextCtrl_GetProperty(*args, **kwargs)

    def GetPropertyExpanded(*args, **kwargs):
        """
        GetPropertyExpanded(self, String key) -> String

        Retrieve a 'property' value previously set with SetProperty,
        with '$()' variable replacement on returned buffer.
        """
        return _stc.StyledTextCtrl_GetPropertyExpanded(*args, **kwargs)

    def GetPropertyInt(*args, **kwargs):
        """
        GetPropertyInt(self, String key) -> int

        Retrieve a 'property' value previously set with SetProperty,
        interpreted as an int AFTER any '$()' variable replacement.
        """
        return _stc.StyledTextCtrl_GetPropertyInt(*args, **kwargs)

    def GetStyleBitsNeeded(*args, **kwargs):
        """
        GetStyleBitsNeeded(self) -> int

        Retrieve the number of bits the current lexer needs for styling.
        """
        return _stc.StyledTextCtrl_GetStyleBitsNeeded(*args, **kwargs)

    def GetCurrentLine(*args, **kwargs):
        """
        GetCurrentLine(self) -> int

        Returns the line number of the line with the caret.
        """
        return _stc.StyledTextCtrl_GetCurrentLine(*args, **kwargs)

    def StyleSetSpec(*args, **kwargs):
        """
        StyleSetSpec(self, int styleNum, String spec)

        Extract style settings from a spec-string which is composed of one or
        more of the following comma separated elements::

             bold                    turns on bold
             italic                  turns on italics
             fore:[name or #RRGGBB]  sets the foreground colour
             back:[name or #RRGGBB]  sets the background colour
             face:[facename]         sets the font face name to use
             size:[num]              sets the font size in points
             eol                     turns on eol filling
             underline               turns on underlining

        """
        return _stc.StyledTextCtrl_StyleSetSpec(*args, **kwargs)

    def StyleSetFont(*args, **kwargs):
        """
        StyleSetFont(self, int styleNum, Font font)

        Set style size, face, bold, italic, and underline attributes from the
        attributes of a `wx.Font`.
        """
        return _stc.StyledTextCtrl_StyleSetFont(*args, **kwargs)

    def StyleSetFontAttr(*args, **kwargs):
        """
        StyleSetFontAttr(self, int styleNum, int size, String faceName, bool bold, 
            bool italic, bool underline, int encoding=wxFONTENCODING_DEFAULT)

        Set all font style attributes at once.
        """
        return _stc.StyledTextCtrl_StyleSetFontAttr(*args, **kwargs)

    def StyleSetCharacterSet(*args, **kwargs):
        """
        StyleSetCharacterSet(self, int style, int characterSet)

        Set the character set of the font in a style.  Converts the Scintilla
        wx.stc.STC_CHARSET_* set values to a wxFontEncoding.
        """
        return _stc.StyledTextCtrl_StyleSetCharacterSet(*args, **kwargs)

    def StyleSetFontEncoding(*args, **kwargs):
        """
        StyleSetFontEncoding(self, int style, int encoding)

        Set the font encoding to be used by a style.
        """
        return _stc.StyledTextCtrl_StyleSetFontEncoding(*args, **kwargs)

    def CmdKeyExecute(*args, **kwargs):
        """
        CmdKeyExecute(self, int cmd)

        Perform one of the operations defined by the wx.stc.STC_CMD_* constants.
        """
        return _stc.StyledTextCtrl_CmdKeyExecute(*args, **kwargs)

    def SetMargins(*args, **kwargs):
        """
        SetMargins(self, int left, int right)

        Set the left and right margin in the edit area, measured in pixels.
        """
        return _stc.StyledTextCtrl_SetMargins(*args, **kwargs)

    def GetSelection(*args, **kwargs):
        """
        GetSelection(self) -> (startPos, endPos)

        Retrieve the start and end positions of the current selection.
        """
        return _stc.StyledTextCtrl_GetSelection(*args, **kwargs)

    def PointFromPosition(*args, **kwargs):
        """
        PointFromPosition(self, int pos) -> Point

        Retrieve the point in the window where a position is displayed.
        """
        return _stc.StyledTextCtrl_PointFromPosition(*args, **kwargs)

    def ScrollToLine(*args, **kwargs):
        """
        ScrollToLine(self, int line)

        Scroll enough to make the given line visible.
        """
        return _stc.StyledTextCtrl_ScrollToLine(*args, **kwargs)

    def ScrollToColumn(*args, **kwargs):
        """
        ScrollToColumn(self, int column)

        Scroll enough to make the given column visible
        """
        return _stc.StyledTextCtrl_ScrollToColumn(*args, **kwargs)

    def SendMsg(*args, **kwargs):
        """
        SendMsg(self, int msg, UIntPtr wp=0, wxIntPtr lp=0) -> wxIntPtr

        Send a message to Scintilla.
        """
        return _stc.StyledTextCtrl_SendMsg(*args, **kwargs)

    def SetVScrollBar(*args, **kwargs):
        """
        SetVScrollBar(self, wxScrollBar bar)

        Set the vertical scrollbar to use instead of the one that's built-in.
        """
        return _stc.StyledTextCtrl_SetVScrollBar(*args, **kwargs)

    def SetHScrollBar(*args, **kwargs):
        """
        SetHScrollBar(self, wxScrollBar bar)

        Set the horizontal scrollbar to use instead of the ont that's built-in.
        """
        return _stc.StyledTextCtrl_SetHScrollBar(*args, **kwargs)

    def GetLastKeydownProcessed(*args, **kwargs):
        """GetLastKeydownProcessed(self) -> bool"""
        return _stc.StyledTextCtrl_GetLastKeydownProcessed(*args, **kwargs)

    def SetLastKeydownProcessed(*args, **kwargs):
        """SetLastKeydownProcessed(self, bool val)"""
        return _stc.StyledTextCtrl_SetLastKeydownProcessed(*args, **kwargs)

    def SaveFile(*args, **kwargs):
        """
        SaveFile(self, String filename) -> bool

        Write the contents of the editor to filename
        """
        return _stc.StyledTextCtrl_SaveFile(*args, **kwargs)

    def LoadFile(*args, **kwargs):
        """
        LoadFile(self, String filename) -> bool

        Load the contents of filename into the editor
        """
        return _stc.StyledTextCtrl_LoadFile(*args, **kwargs)

    def DoDragOver(*args, **kwargs):
        """
        DoDragOver(self, int x, int y, int def) -> int

        Allow for simulating a DnD DragOver.
        """
        return _stc.StyledTextCtrl_DoDragOver(*args, **kwargs)

    def DoDropText(*args, **kwargs):
        """
        DoDropText(self, long x, long y, String data) -> bool

        Allow for simulating a DnD DropText.
        """
        return _stc.StyledTextCtrl_DoDropText(*args, **kwargs)

    def SetUseAntiAliasing(*args, **kwargs):
        """
        SetUseAntiAliasing(self, bool useAA)

        Specify whether anti-aliased fonts should be used.  Will have no
        effect on some platforms, but on some (wxMac for example) can greatly
        improve performance.
        """
        return _stc.StyledTextCtrl_SetUseAntiAliasing(*args, **kwargs)

    def GetUseAntiAliasing(*args, **kwargs):
        """
        GetUseAntiAliasing(self) -> bool

        Returns the current UseAntiAliasing setting.
        """
        return _stc.StyledTextCtrl_GetUseAntiAliasing(*args, **kwargs)

    def AddTextRaw(*args, **kwargs):
        """
        AddTextRaw(self, char text)

        Add text to the document at current position.  The text should be
        utf-8 encoded on unicode builds of wxPython, or can be any 8-bit text
        in ansi builds.
        """
        return _stc.StyledTextCtrl_AddTextRaw(*args, **kwargs)

    def InsertTextRaw(*args, **kwargs):
        """
        InsertTextRaw(self, int pos, char text)

        Insert string at a position.  The text should be utf-8 encoded on
        unicode builds of wxPython, or can be any 8-bit text in ansi builds.
        """
        return _stc.StyledTextCtrl_InsertTextRaw(*args, **kwargs)

    def GetCurLineRaw(*args, **kwargs):
        """
        GetCurLineRaw() -> (text, index)

        Retrieve the text of the line containing the caret, and also the index
        of the caret on the line.  The returned value is a utf-8 encoded
        string in unicode builds of wxPython, or raw 8-bit text otherwise.
        """
        return _stc.StyledTextCtrl_GetCurLineRaw(*args, **kwargs)

    def GetLineRaw(*args, **kwargs):
        """
        GetLineRaw(self, int line) -> wxCharBuffer

        Retrieve the contents of a line.  The returned value is a utf-8
        encoded string in unicode builds of wxPython, or raw 8-bit text
        otherwise.
        """
        return _stc.StyledTextCtrl_GetLineRaw(*args, **kwargs)

    def GetSelectedTextRaw(*args, **kwargs):
        """
        GetSelectedTextRaw(self) -> wxCharBuffer

        Retrieve the selected text.  The returned value is a utf-8 encoded
        string in unicode builds of wxPython, or raw 8-bit text otherwise.
        """
        return _stc.StyledTextCtrl_GetSelectedTextRaw(*args, **kwargs)

    def GetTextRangeRaw(*args, **kwargs):
        """
        GetTextRangeRaw(self, int startPos, int endPos) -> wxCharBuffer

        Retrieve a range of text.    The returned value is a utf-8 encoded
        string in unicode builds of wxPython, or raw 8-bit text otherwise.
        """
        return _stc.StyledTextCtrl_GetTextRangeRaw(*args, **kwargs)

    def SetTextRaw(*args, **kwargs):
        """
        SetTextRaw(self, char text)

        Replace the contents of the document with the argument text.  The text
        should be utf-8 encoded on unicode builds of wxPython, or can be any
        8-bit text in ansi builds.
        """
        return _stc.StyledTextCtrl_SetTextRaw(*args, **kwargs)

    def GetTextRaw(*args, **kwargs):
        """
        GetTextRaw(self) -> wxCharBuffer

        Retrieve all the text in the document.  The returned value is a utf-8
        encoded string in unicode builds of wxPython, or raw 8-bit text
        otherwise.
        """
        return _stc.StyledTextCtrl_GetTextRaw(*args, **kwargs)

    def AppendTextRaw(*args, **kwargs):
        """
        AppendTextRaw(self, char text)

        Append a string to the end of the document without changing the
        selection.  The text should be utf-8 encoded on unicode builds of
        wxPython, or can be any 8-bit text in ansi builds.
        """
        return _stc.StyledTextCtrl_AppendTextRaw(*args, **kwargs)

    def AddTextUTF8(self, text):
        """
        Add UTF8 encoded text to the document at the current position.
        Works 'natively' in a unicode build of wxPython, and will also work
        in an ansi build if the UTF8 text is compatible with the current
        encoding.
        """
        if not wx.USE_UNICODE:
            u = text.decode('utf-8')
            text = u.encode(wx.GetDefaultPyEncoding())
        self.AddTextRaw(text)

        
    def InsertTextUTF8(self, pos, text):
        """
        Insert UTF8 encoded text at a position.  Works 'natively' in a
        unicode build of wxPython, and will also work in an ansi build if
        the UTF8 text is compatible with the current encoding.
        """
        if not wx.USE_UNICODE:
            u = text.decode('utf-8')
            text = u.encode(wx.GetDefaultPyEncoding())
        self.InsertTextRaw(pos, text)

        
    def GetCurLineUTF8(self):
        """
        Retrieve the UTF8 text of the line containing the caret, and also
        the index of the caret on the line.  In an ansi build of wxPython
        the text retrieved from the document is assumed to be in the
        current default encoding.
        """
        text, pos = self.GetCurLineRaw()
        if not wx.USE_UNICODE:
            u = text.decode(wx.GetDefaultPyEncoding())
            text = u.encode('utf-8')
        return text, pos

        
    def GetLineUTF8(self, line):
        """
        Retrieve the contents of a line as UTF8.  In an ansi build of wxPython
        the text retrieved from the document is assumed to be in the
        current default encoding.
        """
        text = self.GetLineRaw(line)
        if not wx.USE_UNICODE:
            u = text.decode(wx.GetDefaultPyEncoding())
            text = u.encode('utf-8')
        return text


    def GetSelectedTextUTF8(self):
        """
        Retrieve the selected text as UTF8.  In an ansi build of wxPython
        the text retrieved from the document is assumed to be in the
        current default encoding.
        """
        text = self.GetSelectedTextRaw()
        if not wx.USE_UNICODE:
            u = text.decode(wx.GetDefaultPyEncoding())
            text = u.encode('utf-8')
        return text


    def GetTextRangeUTF8(self, startPos, endPos):
        """
        Retrieve a range of text as UTF8.  In an ansi build of wxPython
        the text retrieved from the document is assumed to be in the
        current default encoding.
        """
        text = self.GetTextRangeRaw(startPos, endPos)
        if not wx.USE_UNICODE:
            u = text.decode(wx.GetDefaultPyEncoding())
            text = u.encode('utf-8')
        return text


    def SetTextUTF8(self, text):
        """
        Replace the contents of the document with the UTF8 text given.
        Works 'natively' in a unicode build of wxPython, and will also
        work in an ansi build if the UTF8 text is compatible with the
        current encoding.
        """
        if not wx.USE_UNICODE:
            u = text.decode('utf-8')
            text = u.encode(wx.GetDefaultPyEncoding())
        self.SetTextRaw(text)


    def GetTextUTF8(self):
        """
        Retrieve all the text in the document as UTF8.  In an ansi build
        of wxPython the text retrieved from the document is assumed to be
        in the current default encoding.
        """
        text = self.GetTextRaw()
        if not wx.USE_UNICODE:
            u = text.decode(wx.GetDefaultPyEncoding())
            text = u.encode('utf-8')
        return text


    def AppendTextUTF8(self, text):
        """
        Append a UTF8 string to the end of the document without changing
        the selection.  Works 'natively' in a unicode build of wxPython,
        and will also work in an ansi build if the UTF8 text is compatible
        with the current encoding.
        """
        if not wx.USE_UNICODE:
            u = text.decode('utf-8')
            text = u.encode(wx.GetDefaultPyEncoding())
        self.AppendTextRaw(text)


    GetCaretLineBack = GetCaretLineBackground
    SetCaretLineBack = SetCaretLineBackground

    Anchor = property(GetAnchor,SetAnchor,doc="See `GetAnchor` and `SetAnchor`") 
    BackSpaceUnIndents = property(GetBackSpaceUnIndents,SetBackSpaceUnIndents,doc="See `GetBackSpaceUnIndents` and `SetBackSpaceUnIndents`") 
    BufferedDraw = property(GetBufferedDraw,SetBufferedDraw,doc="See `GetBufferedDraw` and `SetBufferedDraw`") 
    CaretForeground = property(GetCaretForeground,SetCaretForeground,doc="See `GetCaretForeground` and `SetCaretForeground`") 
    CaretLineBack = property(GetCaretLineBack,SetCaretLineBack,doc="See `GetCaretLineBack` and `SetCaretLineBack`") 
    CaretLineBackAlpha = property(GetCaretLineBackAlpha,SetCaretLineBackAlpha,doc="See `GetCaretLineBackAlpha` and `SetCaretLineBackAlpha`") 
    CaretLineBackground = property(GetCaretLineBackground,SetCaretLineBackground,doc="See `GetCaretLineBackground` and `SetCaretLineBackground`") 
    CaretLineVisible = property(GetCaretLineVisible,SetCaretLineVisible,doc="See `GetCaretLineVisible` and `SetCaretLineVisible`") 
    CaretPeriod = property(GetCaretPeriod,SetCaretPeriod,doc="See `GetCaretPeriod` and `SetCaretPeriod`") 
    CaretSticky = property(GetCaretSticky,SetCaretSticky,doc="See `GetCaretSticky` and `SetCaretSticky`") 
    CaretWidth = property(GetCaretWidth,SetCaretWidth,doc="See `GetCaretWidth` and `SetCaretWidth`") 
    CodePage = property(GetCodePage,SetCodePage,doc="See `GetCodePage` and `SetCodePage`") 
    ControlCharSymbol = property(GetControlCharSymbol,SetControlCharSymbol,doc="See `GetControlCharSymbol` and `SetControlCharSymbol`") 
    CurLine = property(GetCurLine,doc="See `GetCurLine`") 
    CurLineRaw = property(GetCurLineRaw,doc="See `GetCurLineRaw`") 
    CurLineUTF8 = property(GetCurLineUTF8,doc="See `GetCurLineUTF8`") 
    CurrentLine = property(GetCurrentLine,doc="See `GetCurrentLine`") 
    CurrentPos = property(GetCurrentPos,SetCurrentPos,doc="See `GetCurrentPos` and `SetCurrentPos`") 
    DocPointer = property(GetDocPointer,SetDocPointer,doc="See `GetDocPointer` and `SetDocPointer`") 
    EOLMode = property(GetEOLMode,SetEOLMode,doc="See `GetEOLMode` and `SetEOLMode`") 
    EdgeColour = property(GetEdgeColour,SetEdgeColour,doc="See `GetEdgeColour` and `SetEdgeColour`") 
    EdgeColumn = property(GetEdgeColumn,SetEdgeColumn,doc="See `GetEdgeColumn` and `SetEdgeColumn`") 
    EdgeMode = property(GetEdgeMode,SetEdgeMode,doc="See `GetEdgeMode` and `SetEdgeMode`") 
    EndAtLastLine = property(GetEndAtLastLine,SetEndAtLastLine,doc="See `GetEndAtLastLine` and `SetEndAtLastLine`") 
    EndStyled = property(GetEndStyled,doc="See `GetEndStyled`") 
    FirstVisibleLine = property(GetFirstVisibleLine,doc="See `GetFirstVisibleLine`") 
    HighlightGuide = property(GetHighlightGuide,SetHighlightGuide,doc="See `GetHighlightGuide` and `SetHighlightGuide`") 
    Indent = property(GetIndent,SetIndent,doc="See `GetIndent` and `SetIndent`") 
    IndentationGuides = property(GetIndentationGuides,SetIndentationGuides,doc="See `GetIndentationGuides` and `SetIndentationGuides`") 
    LastKeydownProcessed = property(GetLastKeydownProcessed,SetLastKeydownProcessed,doc="See `GetLastKeydownProcessed` and `SetLastKeydownProcessed`") 
    LayoutCache = property(GetLayoutCache,SetLayoutCache,doc="See `GetLayoutCache` and `SetLayoutCache`") 
    Length = property(GetLength,doc="See `GetLength`") 
    Lexer = property(GetLexer,SetLexer,doc="See `GetLexer` and `SetLexer`") 
    LineCount = property(GetLineCount,doc="See `GetLineCount`") 
    MarginLeft = property(GetMarginLeft,SetMarginLeft,doc="See `GetMarginLeft` and `SetMarginLeft`") 
    MarginRight = property(GetMarginRight,SetMarginRight,doc="See `GetMarginRight` and `SetMarginRight`") 
    MaxLineState = property(GetMaxLineState,doc="See `GetMaxLineState`") 
    ModEventMask = property(GetModEventMask,SetModEventMask,doc="See `GetModEventMask` and `SetModEventMask`") 
    Modify = property(GetModify,doc="See `GetModify`") 
    MouseDownCaptures = property(GetMouseDownCaptures,SetMouseDownCaptures,doc="See `GetMouseDownCaptures` and `SetMouseDownCaptures`") 
    MouseDwellTime = property(GetMouseDwellTime,SetMouseDwellTime,doc="See `GetMouseDwellTime` and `SetMouseDwellTime`") 
    Overtype = property(GetOvertype,SetOvertype,doc="See `GetOvertype` and `SetOvertype`") 
    PasteConvertEndings = property(GetPasteConvertEndings,SetPasteConvertEndings,doc="See `GetPasteConvertEndings` and `SetPasteConvertEndings`") 
    PrintColourMode = property(GetPrintColourMode,SetPrintColourMode,doc="See `GetPrintColourMode` and `SetPrintColourMode`") 
    PrintMagnification = property(GetPrintMagnification,SetPrintMagnification,doc="See `GetPrintMagnification` and `SetPrintMagnification`") 
    PrintWrapMode = property(GetPrintWrapMode,SetPrintWrapMode,doc="See `GetPrintWrapMode` and `SetPrintWrapMode`") 
    ReadOnly = property(GetReadOnly,SetReadOnly,doc="See `GetReadOnly` and `SetReadOnly`") 
    STCCursor = property(GetSTCCursor,SetSTCCursor,doc="See `GetSTCCursor` and `SetSTCCursor`") 
    STCFocus = property(GetSTCFocus,SetSTCFocus,doc="See `GetSTCFocus` and `SetSTCFocus`") 
    ScrollWidth = property(GetScrollWidth,SetScrollWidth,doc="See `GetScrollWidth` and `SetScrollWidth`") 
    SearchFlags = property(GetSearchFlags,SetSearchFlags,doc="See `GetSearchFlags` and `SetSearchFlags`") 
    SelAlpha = property(GetSelAlpha,SetSelAlpha,doc="See `GetSelAlpha` and `SetSelAlpha`") 
    SelectedText = property(GetSelectedText,doc="See `GetSelectedText`") 
    SelectedTextRaw = property(GetSelectedTextRaw,doc="See `GetSelectedTextRaw`") 
    SelectedTextUTF8 = property(GetSelectedTextUTF8,doc="See `GetSelectedTextUTF8`") 
    Selection = property(GetSelection,doc="See `GetSelection`") 
    SelectionEnd = property(GetSelectionEnd,SetSelectionEnd,doc="See `GetSelectionEnd` and `SetSelectionEnd`") 
    SelectionMode = property(GetSelectionMode,SetSelectionMode,doc="See `GetSelectionMode` and `SetSelectionMode`") 
    SelectionStart = property(GetSelectionStart,SetSelectionStart,doc="See `GetSelectionStart` and `SetSelectionStart`") 
    Status = property(GetStatus,SetStatus,doc="See `GetStatus` and `SetStatus`") 
    StyleBits = property(GetStyleBits,SetStyleBits,doc="See `GetStyleBits` and `SetStyleBits`") 
    StyleBitsNeeded = property(GetStyleBitsNeeded,doc="See `GetStyleBitsNeeded`") 
    TabIndents = property(GetTabIndents,SetTabIndents,doc="See `GetTabIndents` and `SetTabIndents`") 
    TabWidth = property(GetTabWidth,SetTabWidth,doc="See `GetTabWidth` and `SetTabWidth`") 
    TargetEnd = property(GetTargetEnd,SetTargetEnd,doc="See `GetTargetEnd` and `SetTargetEnd`") 
    TargetStart = property(GetTargetStart,SetTargetStart,doc="See `GetTargetStart` and `SetTargetStart`") 
    Text = property(GetText,SetText,doc="See `GetText` and `SetText`") 
    TextLength = property(GetTextLength,doc="See `GetTextLength`") 
    TextRaw = property(GetTextRaw,SetTextRaw,doc="See `GetTextRaw` and `SetTextRaw`") 
    TextUTF8 = property(GetTextUTF8,SetTextUTF8,doc="See `GetTextUTF8` and `SetTextUTF8`") 
    TwoPhaseDraw = property(GetTwoPhaseDraw,SetTwoPhaseDraw,doc="See `GetTwoPhaseDraw` and `SetTwoPhaseDraw`") 
    UndoCollection = property(GetUndoCollection,SetUndoCollection,doc="See `GetUndoCollection` and `SetUndoCollection`") 
    UseAntiAliasing = property(GetUseAntiAliasing,SetUseAntiAliasing,doc="See `GetUseAntiAliasing` and `SetUseAntiAliasing`") 
    UseHorizontalScrollBar = property(GetUseHorizontalScrollBar,SetUseHorizontalScrollBar,doc="See `GetUseHorizontalScrollBar` and `SetUseHorizontalScrollBar`") 
    UseTabs = property(GetUseTabs,SetUseTabs,doc="See `GetUseTabs` and `SetUseTabs`") 
    UseVerticalScrollBar = property(GetUseVerticalScrollBar,SetUseVerticalScrollBar,doc="See `GetUseVerticalScrollBar` and `SetUseVerticalScrollBar`") 
    ViewEOL = property(GetViewEOL,SetViewEOL,doc="See `GetViewEOL` and `SetViewEOL`") 
    ViewWhiteSpace = property(GetViewWhiteSpace,SetViewWhiteSpace,doc="See `GetViewWhiteSpace` and `SetViewWhiteSpace`") 
    WrapMode = property(GetWrapMode,SetWrapMode,doc="See `GetWrapMode` and `SetWrapMode`") 
    WrapStartIndent = property(GetWrapStartIndent,SetWrapStartIndent,doc="See `GetWrapStartIndent` and `SetWrapStartIndent`") 
    WrapVisualFlags = property(GetWrapVisualFlags,SetWrapVisualFlags,doc="See `GetWrapVisualFlags` and `SetWrapVisualFlags`") 
    WrapVisualFlagsLocation = property(GetWrapVisualFlagsLocation,SetWrapVisualFlagsLocation,doc="See `GetWrapVisualFlagsLocation` and `SetWrapVisualFlagsLocation`") 
    XOffset = property(GetXOffset,SetXOffset,doc="See `GetXOffset` and `SetXOffset`") 
    Zoom = property(GetZoom,SetZoom,doc="See `GetZoom` and `SetZoom`") 
_stc.StyledTextCtrl_swigregister(StyledTextCtrl)
cvar = _stc.cvar
STCNameStr = cvar.STCNameStr

def PreStyledTextCtrl(*args, **kwargs):
    """PreStyledTextCtrl() -> StyledTextCtrl"""
    val = _stc.new_PreStyledTextCtrl(*args, **kwargs)
    return val

class StyledTextEvent(_core.CommandEvent):
    """Proxy of C++ StyledTextEvent class"""
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, EventType commandType=0, int id=0) -> StyledTextEvent"""
        _stc.StyledTextEvent_swiginit(self,_stc.new_StyledTextEvent(*args, **kwargs))
    __swig_destroy__ = _stc.delete_StyledTextEvent
    __del__ = lambda self : None;
    def SetPosition(*args, **kwargs):
        """SetPosition(self, int pos)"""
        return _stc.StyledTextEvent_SetPosition(*args, **kwargs)

    def SetKey(*args, **kwargs):
        """SetKey(self, int k)"""
        return _stc.StyledTextEvent_SetKey(*args, **kwargs)

    def SetModifiers(*args, **kwargs):
        """SetModifiers(self, int m)"""
        return _stc.StyledTextEvent_SetModifiers(*args, **kwargs)

    def SetModificationType(*args, **kwargs):
        """SetModificationType(self, int t)"""
        return _stc.StyledTextEvent_SetModificationType(*args, **kwargs)

    def SetText(*args, **kwargs):
        """SetText(self, String t)"""
        return _stc.StyledTextEvent_SetText(*args, **kwargs)

    def SetLength(*args, **kwargs):
        """SetLength(self, int len)"""
        return _stc.StyledTextEvent_SetLength(*args, **kwargs)

    def SetLinesAdded(*args, **kwargs):
        """SetLinesAdded(self, int num)"""
        return _stc.StyledTextEvent_SetLinesAdded(*args, **kwargs)

    def SetLine(*args, **kwargs):
        """SetLine(self, int val)"""
        return _stc.StyledTextEvent_SetLine(*args, **kwargs)

    def SetFoldLevelNow(*args, **kwargs):
        """SetFoldLevelNow(self, int val)"""
        return _stc.StyledTextEvent_SetFoldLevelNow(*args, **kwargs)

    def SetFoldLevelPrev(*args, **kwargs):
        """SetFoldLevelPrev(self, int val)"""
        return _stc.StyledTextEvent_SetFoldLevelPrev(*args, **kwargs)

    def SetMargin(*args, **kwargs):
        """SetMargin(self, int val)"""
        return _stc.StyledTextEvent_SetMargin(*args, **kwargs)

    def SetMessage(*args, **kwargs):
        """SetMessage(self, int val)"""
        return _stc.StyledTextEvent_SetMessage(*args, **kwargs)

    def SetWParam(*args, **kwargs):
        """SetWParam(self, int val)"""
        return _stc.StyledTextEvent_SetWParam(*args, **kwargs)

    def SetLParam(*args, **kwargs):
        """SetLParam(self, int val)"""
        return _stc.StyledTextEvent_SetLParam(*args, **kwargs)

    def SetListType(*args, **kwargs):
        """SetListType(self, int val)"""
        return _stc.StyledTextEvent_SetListType(*args, **kwargs)

    def SetX(*args, **kwargs):
        """SetX(self, int val)"""
        return _stc.StyledTextEvent_SetX(*args, **kwargs)

    def SetY(*args, **kwargs):
        """SetY(self, int val)"""
        return _stc.StyledTextEvent_SetY(*args, **kwargs)

    def SetDragText(*args, **kwargs):
        """SetDragText(self, String val)"""
        return _stc.StyledTextEvent_SetDragText(*args, **kwargs)

    def SetDragAllowMove(*args, **kwargs):
        """SetDragAllowMove(self, bool val)"""
        return _stc.StyledTextEvent_SetDragAllowMove(*args, **kwargs)

    def SetDragResult(*args, **kwargs):
        """SetDragResult(self, int val)"""
        return _stc.StyledTextEvent_SetDragResult(*args, **kwargs)

    def GetPosition(*args, **kwargs):
        """GetPosition(self) -> int"""
        return _stc.StyledTextEvent_GetPosition(*args, **kwargs)

    def GetKey(*args, **kwargs):
        """GetKey(self) -> int"""
        return _stc.StyledTextEvent_GetKey(*args, **kwargs)

    def GetModifiers(*args, **kwargs):
        """GetModifiers(self) -> int"""
        return _stc.StyledTextEvent_GetModifiers(*args, **kwargs)

    def GetModificationType(*args, **kwargs):
        """GetModificationType(self) -> int"""
        return _stc.StyledTextEvent_GetModificationType(*args, **kwargs)

    def GetText(*args, **kwargs):
        """GetText(self) -> String"""
        return _stc.StyledTextEvent_GetText(*args, **kwargs)

    def GetLength(*args, **kwargs):
        """GetLength(self) -> int"""
        return _stc.StyledTextEvent_GetLength(*args, **kwargs)

    def GetLinesAdded(*args, **kwargs):
        """GetLinesAdded(self) -> int"""
        return _stc.StyledTextEvent_GetLinesAdded(*args, **kwargs)

    def GetLine(*args, **kwargs):
        """GetLine(self) -> int"""
        return _stc.StyledTextEvent_GetLine(*args, **kwargs)

    def GetFoldLevelNow(*args, **kwargs):
        """GetFoldLevelNow(self) -> int"""
        return _stc.StyledTextEvent_GetFoldLevelNow(*args, **kwargs)

    def GetFoldLevelPrev(*args, **kwargs):
        """GetFoldLevelPrev(self) -> int"""
        return _stc.StyledTextEvent_GetFoldLevelPrev(*args, **kwargs)

    def GetMargin(*args, **kwargs):
        """GetMargin(self) -> int"""
        return _stc.StyledTextEvent_GetMargin(*args, **kwargs)

    def GetMessage(*args, **kwargs):
        """GetMessage(self) -> int"""
        return _stc.StyledTextEvent_GetMessage(*args, **kwargs)

    def GetWParam(*args, **kwargs):
        """GetWParam(self) -> int"""
        return _stc.StyledTextEvent_GetWParam(*args, **kwargs)

    def GetLParam(*args, **kwargs):
        """GetLParam(self) -> int"""
        return _stc.StyledTextEvent_GetLParam(*args, **kwargs)

    def GetListType(*args, **kwargs):
        """GetListType(self) -> int"""
        return _stc.StyledTextEvent_GetListType(*args, **kwargs)

    def GetX(*args, **kwargs):
        """GetX(self) -> int"""
        return _stc.StyledTextEvent_GetX(*args, **kwargs)

    def GetY(*args, **kwargs):
        """GetY(self) -> int"""
        return _stc.StyledTextEvent_GetY(*args, **kwargs)

    def GetDragText(*args, **kwargs):
        """GetDragText(self) -> String"""
        return _stc.StyledTextEvent_GetDragText(*args, **kwargs)

    def GetDragAllowMove(*args, **kwargs):
        """GetDragAllowMove(self) -> bool"""
        return _stc.StyledTextEvent_GetDragAllowMove(*args, **kwargs)

    def GetDragResult(*args, **kwargs):
        """GetDragResult(self) -> int"""
        return _stc.StyledTextEvent_GetDragResult(*args, **kwargs)

    def GetShift(*args, **kwargs):
        """GetShift(self) -> bool"""
        return _stc.StyledTextEvent_GetShift(*args, **kwargs)

    def GetControl(*args, **kwargs):
        """GetControl(self) -> bool"""
        return _stc.StyledTextEvent_GetControl(*args, **kwargs)

    def GetAlt(*args, **kwargs):
        """GetAlt(self) -> bool"""
        return _stc.StyledTextEvent_GetAlt(*args, **kwargs)

    Alt = property(GetAlt,doc="See `GetAlt`") 
    Control = property(GetControl,doc="See `GetControl`") 
    DragAllowMove = property(GetDragAllowMove,SetDragAllowMove,doc="See `GetDragAllowMove` and `SetDragAllowMove`") 
    DragResult = property(GetDragResult,SetDragResult,doc="See `GetDragResult` and `SetDragResult`") 
    DragText = property(GetDragText,SetDragText,doc="See `GetDragText` and `SetDragText`") 
    FoldLevelNow = property(GetFoldLevelNow,SetFoldLevelNow,doc="See `GetFoldLevelNow` and `SetFoldLevelNow`") 
    FoldLevelPrev = property(GetFoldLevelPrev,SetFoldLevelPrev,doc="See `GetFoldLevelPrev` and `SetFoldLevelPrev`") 
    Key = property(GetKey,SetKey,doc="See `GetKey` and `SetKey`") 
    LParam = property(GetLParam,SetLParam,doc="See `GetLParam` and `SetLParam`") 
    Length = property(GetLength,SetLength,doc="See `GetLength` and `SetLength`") 
    Line = property(GetLine,SetLine,doc="See `GetLine` and `SetLine`") 
    LinesAdded = property(GetLinesAdded,SetLinesAdded,doc="See `GetLinesAdded` and `SetLinesAdded`") 
    ListType = property(GetListType,SetListType,doc="See `GetListType` and `SetListType`") 
    Margin = property(GetMargin,SetMargin,doc="See `GetMargin` and `SetMargin`") 
    Message = property(GetMessage,SetMessage,doc="See `GetMessage` and `SetMessage`") 
    ModificationType = property(GetModificationType,SetModificationType,doc="See `GetModificationType` and `SetModificationType`") 
    Modifiers = property(GetModifiers,SetModifiers,doc="See `GetModifiers` and `SetModifiers`") 
    Position = property(GetPosition,SetPosition,doc="See `GetPosition` and `SetPosition`") 
    Shift = property(GetShift,doc="See `GetShift`") 
    Text = property(GetText,SetText,doc="See `GetText` and `SetText`") 
    WParam = property(GetWParam,SetWParam,doc="See `GetWParam` and `SetWParam`") 
    X = property(GetX,SetX,doc="See `GetX` and `SetX`") 
    Y = property(GetY,SetY,doc="See `GetY` and `SetY`") 
_stc.StyledTextEvent_swigregister(StyledTextEvent)

wxEVT_STC_CHANGE = _stc.wxEVT_STC_CHANGE
wxEVT_STC_STYLENEEDED = _stc.wxEVT_STC_STYLENEEDED
wxEVT_STC_CHARADDED = _stc.wxEVT_STC_CHARADDED
wxEVT_STC_SAVEPOINTREACHED = _stc.wxEVT_STC_SAVEPOINTREACHED
wxEVT_STC_SAVEPOINTLEFT = _stc.wxEVT_STC_SAVEPOINTLEFT
wxEVT_STC_ROMODIFYATTEMPT = _stc.wxEVT_STC_ROMODIFYATTEMPT
wxEVT_STC_KEY = _stc.wxEVT_STC_KEY
wxEVT_STC_DOUBLECLICK = _stc.wxEVT_STC_DOUBLECLICK
wxEVT_STC_UPDATEUI = _stc.wxEVT_STC_UPDATEUI
wxEVT_STC_MODIFIED = _stc.wxEVT_STC_MODIFIED
wxEVT_STC_MACRORECORD = _stc.wxEVT_STC_MACRORECORD
wxEVT_STC_MARGINCLICK = _stc.wxEVT_STC_MARGINCLICK
wxEVT_STC_NEEDSHOWN = _stc.wxEVT_STC_NEEDSHOWN
wxEVT_STC_PAINTED = _stc.wxEVT_STC_PAINTED
wxEVT_STC_USERLISTSELECTION = _stc.wxEVT_STC_USERLISTSELECTION
wxEVT_STC_URIDROPPED = _stc.wxEVT_STC_URIDROPPED
wxEVT_STC_DWELLSTART = _stc.wxEVT_STC_DWELLSTART
wxEVT_STC_DWELLEND = _stc.wxEVT_STC_DWELLEND
wxEVT_STC_START_DRAG = _stc.wxEVT_STC_START_DRAG
wxEVT_STC_DRAG_OVER = _stc.wxEVT_STC_DRAG_OVER
wxEVT_STC_DO_DROP = _stc.wxEVT_STC_DO_DROP
wxEVT_STC_ZOOM = _stc.wxEVT_STC_ZOOM
wxEVT_STC_HOTSPOT_CLICK = _stc.wxEVT_STC_HOTSPOT_CLICK
wxEVT_STC_HOTSPOT_DCLICK = _stc.wxEVT_STC_HOTSPOT_DCLICK
wxEVT_STC_CALLTIP_CLICK = _stc.wxEVT_STC_CALLTIP_CLICK
wxEVT_STC_AUTOCOMP_SELECTION = _stc.wxEVT_STC_AUTOCOMP_SELECTION
EVT_STC_CHANGE = wx.PyEventBinder( wxEVT_STC_CHANGE, 1 )
EVT_STC_STYLENEEDED = wx.PyEventBinder( wxEVT_STC_STYLENEEDED, 1 )
EVT_STC_CHARADDED = wx.PyEventBinder( wxEVT_STC_CHARADDED, 1 )
EVT_STC_SAVEPOINTREACHED = wx.PyEventBinder( wxEVT_STC_SAVEPOINTREACHED, 1 )
EVT_STC_SAVEPOINTLEFT = wx.PyEventBinder( wxEVT_STC_SAVEPOINTLEFT, 1 )
EVT_STC_ROMODIFYATTEMPT = wx.PyEventBinder( wxEVT_STC_ROMODIFYATTEMPT, 1 )
EVT_STC_KEY = wx.PyEventBinder( wxEVT_STC_KEY, 1 )
EVT_STC_DOUBLECLICK = wx.PyEventBinder( wxEVT_STC_DOUBLECLICK, 1 )
EVT_STC_UPDATEUI = wx.PyEventBinder( wxEVT_STC_UPDATEUI, 1 )
EVT_STC_MODIFIED = wx.PyEventBinder( wxEVT_STC_MODIFIED, 1 )
EVT_STC_MACRORECORD = wx.PyEventBinder( wxEVT_STC_MACRORECORD, 1 )
EVT_STC_MARGINCLICK = wx.PyEventBinder( wxEVT_STC_MARGINCLICK, 1 )
EVT_STC_NEEDSHOWN = wx.PyEventBinder( wxEVT_STC_NEEDSHOWN, 1 )
EVT_STC_PAINTED = wx.PyEventBinder( wxEVT_STC_PAINTED, 1 )
EVT_STC_USERLISTSELECTION = wx.PyEventBinder( wxEVT_STC_USERLISTSELECTION, 1 )
EVT_STC_URIDROPPED = wx.PyEventBinder( wxEVT_STC_URIDROPPED, 1 )
EVT_STC_DWELLSTART = wx.PyEventBinder( wxEVT_STC_DWELLSTART, 1 )
EVT_STC_DWELLEND = wx.PyEventBinder( wxEVT_STC_DWELLEND, 1 )
EVT_STC_START_DRAG = wx.PyEventBinder( wxEVT_STC_START_DRAG, 1 )
EVT_STC_DRAG_OVER = wx.PyEventBinder( wxEVT_STC_DRAG_OVER, 1 )
EVT_STC_DO_DROP = wx.PyEventBinder( wxEVT_STC_DO_DROP, 1 )
EVT_STC_ZOOM = wx.PyEventBinder( wxEVT_STC_ZOOM, 1 )
EVT_STC_HOTSPOT_CLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_CLICK, 1 )
EVT_STC_HOTSPOT_DCLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_DCLICK, 1 )
EVT_STC_CALLTIP_CLICK = wx.PyEventBinder( wxEVT_STC_CALLTIP_CLICK, 1 )
EVT_STC_AUTOCOMP_SELECTION = wx.PyEventBinder( wxEVT_STC_AUTOCOMP_SELECTION, 1 )



