.TH INTERROGATE_MODULE 1 "02 June 2015" "" Panda3D
.SH NAME
interrogate_module \- generate module-level code for interrogate
.SH SYNOPSIS
.B interrogate_module
[
.I opts
]
.I libname.in
[
.I libname.in ...
]
.SH DESCRIPTION
This program generates a module-level file for the
.BR interrogate (1) program.
This is a higher level than library, and groups several libraries
together.  In particular, the code generated by interrogate_module
typically includes a table of the classes that are to be exported
to Python.
.SH OPTIONS
.TP
.BI "\-oc " output.C
Specify the name of the file to which generated code will be written.
.TP
.BI "\-module " module_name
Defines the name of the module this data is associated with.  This
is strictly a code-organizational tool.  Conceptually, a module is
the highest level of grouping for interrogate data; a module may
contain several libraries.  If this is omitted, no module name is
specified.
.TP
.BI "\-library " library_name
Defines the name of the library this data is associated with.  This
is another code-organizational tool.  Typically, there will be one
invocation of interrogate for each library, and there will be
multiple libraries per module.  If this is omitted, no library name
is specified.
.TP
.B \-c
Generate function wrappers using the C calling convention.  Any
scripting language that can call a C function should be able to
make advantage of the interrogate database.
.TP
.B \-python
Generate function wrappers using the Python calling convention.
The shared library will be directly loadable as a Python module.
However, C++ objects and methods will be converted into an object
handle and a list of independent Python functions.
.TP
.B \-python\-obj
Generate Python function wrappers that convert C++ objects to true
python objects, with all methods converted to Python methods.  This
is currently experimental.
.TP
.B \-python\-native
Generate Python function wrappers that convert C++ objects to true
python objects, with all methods converted to Python methods.  This
is the recommended method for creating Python wrappers.
.PP
Any combination of \fB\-c\fP, \fB\-python\fP, or \fB\-python\-obj\fP
may be specified. If all are omitted, the default is \fB\-c\fP.
.TP
.B \-track\-interpreter
Generate code within each wrapper function to adjust the global
variable "in_interpreter" to indicated whether code is running
within the Panda C++ environment or within the high-level language.
.TP
.BI "\-import " module_name
Used to import an external dependency module.
.SH "SEE ALSO"
.BR interrogate (1),
.BR test_interrogate (1)
