/**
* PANDA 3D SOFTWARE
* Copyright (c) Carnegie Mellon University.  All rights reserved.
*
* All use of this software is subject to the terms of the revised BSD
* license.  You should have received a copy of this license along
* with this source code in a file named "LICENSE."
*
* @file inputDeviceNodeRecorder.h
* @author jb
* @date 2023-10-10
*/

#ifndef INPUTDEVICENODERECORDER_H
#define INPUTDEVICENODERECORDER_H

#include "recorderBase.h"
#include "dataNode.h"
#include "dataNodeTransmit.h"
#include "linmath_events.h"
#include "buttonEventList.h"
#include "axisEventList.h"
#include "inputDevice.h"

class FactoryParams;
class BamReader;
class BamWriter;
class InputDevice;

/**
 * This object records any data generated by a particular InputDeviceNode
 * node on the datagraph for a session for eventual playback via a
 * DataGraphPlayback (and a PlaybackController).  To use it, make it a child
 * of the node you wish to record.  It also serves as a pass-through, so that
 * additional child nodes may be parented directly to it.
 */
class EXPCL_PANDA_RECORDER InputDeviceNodeRecorder : public DataNode, public RecorderBase {
PUBLISHED:
  explicit InputDeviceNodeRecorder(const std::string &name, InputDevice *device);
  virtual ~InputDeviceNodeRecorder();

public:
  virtual void record_frame(BamWriter *manager, Datagram &dg);
  virtual void play_frame(DatagramIterator &scan, BamReader *manager);

public:
  virtual void output(std::ostream &out) const;
  virtual void write(std::ostream &out, int indent_level = 0) const;

protected:
  // Inherited from DataNode
  virtual void do_transmit_data(DataGraphTraverser *trav,
    const DataNodeTransmit &input,
    DataNodeTransmit &output);

private:
  // inputs
  int _button_events_input;
  int _axis_events_input;

  // outputs
  int _button_events_output;

  PT(ButtonEventList) _live_button_events;
  PT(ButtonEventList) _save_button_events;
  PT(AxisEventList) _live_axis_events;
  PT(AxisEventList) _save_axis_events;

  PT(InputDevice) _device;

public:
  static void register_with_read_factory();
  virtual void write_datagram(BamWriter *manager, Datagram &dg);
  virtual void write_recorder(BamWriter *manager, Datagram &dg);

  INLINE virtual int get_ref_count() const final { return ReferenceCount::get_ref_count(); };
  INLINE virtual void ref() const final { ReferenceCount::ref(); };
  INLINE virtual bool unref() const { return ReferenceCount::unref(); };

protected:
  static TypedWritable *make_from_bam(const FactoryParams &params);
  static RecorderBase *make_recorder(const FactoryParams &params);
  void fillin(DatagramIterator &scan, BamReader *manager);
  void fillin_recorder(DatagramIterator &scan, BamReader *manager);

public:
  static TypeHandle get_class_type() {
    return _type_handle;
  }
  static void init_type() {
    DataNode::init_type();
    RecorderBase::init_type();
    register_type(_type_handle, "InputDeviceNodeRecorder",
                  DataNode::get_class_type(),
                  RecorderBase::get_class_type());
  }
  virtual TypeHandle get_type() const {
    return get_class_type();
  }
  virtual TypeHandle force_init_type() {init_type(); return get_class_type();}

private:
  static TypeHandle _type_handle;
};

#endif
