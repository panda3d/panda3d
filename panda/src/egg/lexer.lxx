/**
 * @file lexer.lxx
 * @author drose
 * @date 1999-01-16
 */

%option reentrant bison-bridge bison-locations
%option noyywrap
%option case-insensitive

%{
#include "pandabase.h"
#include "lexerDefs.h"
#include "parserDefs.h"
#include "config_egg.h"
#include "parser.h"
#include "indent.h"
#include "pnotify.h"
#include "lightMutex.h"
#include "thread.h"
#include "pstrtod.h"

#include <math.h>

// These are declared by flex.
static int yyinput(yyscan_t yyscanner);
static EggLexerState *eggyyget_extra(yyscan_t scanner);

////////////////////////////////////////////////////////////////////
// Defining the interface to the lexer.
////////////////////////////////////////////////////////////////////

void
egg_init_lexer_state(EggLexerState &state, std::istream &in, const std::string &filename) {
  state._error_count = 0;
  state._warning_count = 0;
  state._input_p = &in;
  state._egg_filename = filename;
  state._initial_token = START_EGG;
}

void
egg_cleanup_lexer_state(EggLexerState &state) {
  state._input_p = nullptr;
  state._egg_filename.clear();
}

void
egg_start_group_body(EggLexerState &state) {
  /* Set the initial state to begin within a group_body context,
     instead of at the beginning of the egg file. */
  state._initial_token = START_GROUP_BODY;
}

void
egg_start_texture_body(EggLexerState &state) {
  state._initial_token = START_TEXTURE_BODY;
}

void
egg_start_primitive_body(EggLexerState &state) {
  state._initial_token = START_PRIMITIVE_BODY;
}

////////////////////////////////////////////////////////////////////
// Internal support functions.
////////////////////////////////////////////////////////////////////

void
eggyyerror(YYLTYPE *loc, yyscan_t scanner, const std::string &msg) {
  EggLexerState *lexer_state = eggyyget_extra(scanner);

  if (egg_cat.is_error()) {
    std::ostream &out = egg_cat.error(false);

    out << "\nError";
    if (!lexer_state->_egg_filename.empty()) {
      out << " in " << lexer_state->_egg_filename;
    }
    if (loc != nullptr) {
      out
        << " at line " << loc->first_line << ", column " << loc->first_column << ":\n"
        << std::setiosflags(Notify::get_literal_flag())
        << lexer_state->_current_line << "\n";
      indent(out, loc->first_column - 1)
        << "^";

      int last_column;
      if (loc->first_line == loc->last_line) {
        last_column = loc->last_column;
      } else {
        last_column = strlen(lexer_state->_current_line);
      }
      for (int i = loc->first_column; i < last_column; ++i) {
        out.put('~');
      }

      out
        << "\n" << msg << "\n\n"
        << std::resetiosflags(Notify::get_literal_flag()) << std::flush;
    }
    else {
      out  << ":\n" << msg << "\n\n" << std::flush;
    }
  }
  lexer_state->_error_count++;
}

void
eggyywarning(YYLTYPE *loc, yyscan_t scanner, const std::string &msg) {
  EggLexerState *lexer_state = eggyyget_extra(scanner);

  if (egg_cat.is_warning()) {
    std::ostream &out = egg_cat.warning(false);

    out << "\nWarning";
    if (!lexer_state->_egg_filename.empty()) {
      out << " in " << lexer_state->_egg_filename;
    }
    if (loc != nullptr) {
      out
        << " at line " << loc->first_line << ", column " << loc->first_column << ":\n"
        << std::setiosflags(Notify::get_literal_flag())
        << lexer_state->_current_line << "\n";
      indent(out, loc->first_column - 1)
        << "^";

      int last_column;
      if (loc->first_line == loc->last_line) {
        last_column = loc->last_column;
      } else {
        last_column = strlen(lexer_state->_current_line);
      }
      for (int i = loc->first_column; i < last_column; ++i) {
        out.put('~');
      }

      out
        << "\n" << msg << "\n\n"
        << std::resetiosflags(Notify::get_literal_flag()) << std::flush;
    }
    else {
      out  << ":\n" << msg << "\n\n" << std::flush;
    }
  }
  lexer_state->_warning_count++;
}

// Now define a function to take input from an istream instead of a
// stdio FILE pointer.  This is flex-specific.
static void
input_chars(YYLTYPE *yylloc, yyscan_t yyscanner, char *buffer, int &result, int max_size) {
  EggLexerState &state = *yyget_extra(yyscanner);

  nassertv(state._input_p != nullptr);
  if (*state._input_p) {
    state._input_p->read(buffer, max_size);
    result = state._input_p->gcount();

    if (yylloc->last_line == 0) {
      // This is a special case.  If we are reading the very first bit
      // from the stream, copy it into the _current_line array.  This
      // is because the \n.* rule below, which fills _current_line
      // normally, doesn't catch the first line.
      size_t length = std::min(egg_max_error_width, (size_t)result);
      strncpy(state._current_line, buffer, length);
      state._current_line[length] = '\0';
      yylloc->first_line = 1;
      yylloc->last_line = 1;
      yylloc->first_column = 0;
      yylloc->last_column = 0;

      // Truncate it at the newline.
      char *end = strchr(state._current_line, '\n');
      if (end != nullptr) {
        *end = '\0';
      }
    }

  } else {
    // End of file or I/O error.
    result = 0;
  }
  Thread::consider_yield();
}
#undef YY_INPUT

// Define this macro carefully, since different flex versions call it
// with a different type for result.
#define YY_INPUT(buffer, result, max_size) { \
  int int_result = 0; \
  input_chars(yylloc, yyscanner, (buffer), int_result, (max_size)); \
  (result) = int_result; \
}

// read_char reads and returns a single character, incrementing the
// supplied line and column numbers as appropriate.  A convenience
// function for the scanning functions below.
static int
read_char(yyscan_t yyscanner, int &line, int &col) {
  int c = yyinput(yyscanner);
  if (c == '\n') {
    line++;
    col = 0;
  } else {
    col++;
  }
  return c;
}

// scan_quoted_string reads a string delimited by quotation marks and
// returns it.
static std::string
scan_quoted_string(YYLTYPE *yylloc, yyscan_t yyscanner) {
  std::string result;

  int c;
  c = read_char(yyscanner, yylloc->last_line, yylloc->last_column);
  while (c != '"' && c != 0 && c != EOF) {
    result += c;
    c = read_char(yyscanner, yylloc->last_line, yylloc->last_column);
  }

  if (c == 0 || c == EOF) {
    eggyyerror(yylloc, yyscanner, "This quotation mark is unterminated.");
  }

  return result;
}

// eat_c_comment scans past all characters up until the first */
// encountered.
static void
eat_c_comment(YYLTYPE *yylloc, yyscan_t yyscanner) {
  int c, last_c;

  last_c = '\0';
  c = read_char(yyscanner, yylloc->last_line, yylloc->last_column);
  while (c != 0 && c != EOF && !(last_c == '*' && c == '/')) {
    if (last_c == '/' && c == '*') {
      std::ostringstream errmsg;
      errmsg << "This comment contains a nested /* symbol at line "
             << yylloc->last_line << ", column " << yylloc->last_column - 1
             << "--possibly unclosed?" << std::ends;
      eggyywarning(yylloc, yyscanner, errmsg.str());
    }
    last_c = c;
    c = read_char(yyscanner, yylloc->last_line, yylloc->last_column);
  }

  if (c == 0 || c == EOF) {
    eggyyerror(yylloc, yyscanner, "This comment marker is unclosed.");
  }
}


// accept() is called below as each piece is pulled off and
// accepted by the lexer; it increments the current column number.
#define accept() { \
  yylloc->first_line = yylloc->last_line; \
  yylloc->first_column = yylloc->last_column + 1; \
  yylloc->last_column += yyleng; \
}

%}

HEX             0x[0-9a-fA-F]*
BINARY          0b[01]*
NUMERIC         ([+-]?(([0-9]+[.]?)|([0-9]*[.][0-9]+))([eE][+-]?[0-9]+)?)

%%

%{
  if (yyextra->_initial_token != 0) {
    int t = yyextra->_initial_token;
    yyextra->_initial_token = 0;
    return t;
  }
%}

\n.* {
  // New line.  Save a copy of the line so we can print it out for the
  // benefit of the user in case we get an error.

  strncpy(yyextra->_current_line, yytext+1, egg_max_error_width);
  yyextra->_current_line[egg_max_error_width] = '\0';

  yylloc->first_line++;
  yylloc->last_line++;
  yylloc->first_column = 0;
  yylloc->last_column = 0;

  // Return the whole line to the lexer, except the newline character,
  // which we eat.
  yyless(1);
}

[ \t\r] {
  // Eat whitespace.
  accept();
}

"//".* {
  // Eat C++-style comments.
  accept();
}

"/*" {
  // Eat C-style comments.
  accept();
  eat_c_comment(yylloc, yyscanner);
}

[{}] {
  // Send curly braces as themselves.
  accept();
  return yytext[0];
}



"<ANIMPRELOAD>" {
  accept();
  return ANIMPRELOAD;
}
"<AUX>" {
  accept();
  return AUX;
}
"<BEZIERCURVE>" {
  accept();
  return BEZIERCURVE;
}
"<BFACE>" {
  accept();
  return BFACE;
}
"<BILLBOARD>" {
  accept();
  return BILLBOARD;
}
"<BILLBOARDCENTER>" {
  accept();
  return BILLBOARDCENTER;
}
"<BINORMAL>" {
  accept();
  return BINORMAL;
}
"<BUNDLE>" {
  accept();
  return BUNDLE;
}
"<CHAR*>" {
  accept();
  return SCALAR;
}
"<CLOSED>" {
  accept();
  return CLOSED;
}
"<COLLIDE>" {
  accept();
  return COLLIDE;
}
"<COMMENT>" {
  accept();
  return COMMENT;
}
"<COMPONENT>" {
  accept();
  return COMPONENT;
}
"<COORDINATESYSTEM>" {
  accept();
  return COORDSYSTEM;
}
"<CV>" {
  accept();
  return CV;
}
"<DART>" {
  accept();
  return DART;
}
"<DNORMAL>" {
  accept();
  return DNORMAL;
}
"<DRGBA>" {
  accept();
  return DRGBA;
}
"<DUV>" {
  accept();
  return DUV;
}
"<DXYZ>" {
  accept();
  return DXYZ;
}
"<DCS>" {
  accept();
  return DCS;
}
"<DISTANCE>" {
  accept();
  return DISTANCE;
}
"<DTREF>" {
  accept();
  return DTREF;
}
"<DYNAMICVERTEXPOOL>" {
  accept();
  return DYNAMICVERTEXPOOL;
}
"<FILE>" {
  accept();
  return EXTERNAL_FILE;
}
"<GROUP>" {
  accept();
  return GROUP;
}
"<DEFAULTPOSE>" {
  accept();
  return DEFAULTPOSE;
}
"<JOINT>" {
  accept();
  return JOINT;
}
"<KNOTS>" {
  accept();
  return KNOTS;
}
"<INCLUDE>" {
  accept();
  return INCLUDE;
}
"<INSTANCE>" {
  accept();
  return INSTANCE;
}
"<LINE>" {
  accept();
  return LINE;
}
"<LOOP>" {
  accept();
  return LOOP;
}
"<MATERIAL>" {
  accept();
  return MATERIAL;
}
"<MATRIX3>" {
  accept();
  return MATRIX3;
}
"<MATRIX4>" {
  accept();
  return MATRIX4;
}
"<MODEL>" {
  accept();
  return MODEL;
}
"<MREF>" {
  accept();
  return MREF;
}
"<NORMAL>" {
  accept();
  return NORMAL;
}
"<NURBSCURVE>" {
  accept();
  return NURBSCURVE;
}
"<NURBSSURFACE>" {
  accept();
  return NURBSSURFACE;
}
"<OBJECTTYPE>" {
  accept();
  return OBJECTTYPE;
}
"<ORDER>" {
  accept();
  return ORDER;
}
"<OUTTANGENT>" {
  accept();
  return OUTTANGENT;
}
"<PATCH>" {
  accept();
  return PATCH;
}
"<POINTLIGHT>" {
  accept();
  return POINTLIGHT;
}
"<POLYGON>" {
  accept();
  return POLYGON;
}
"<REF>" {
  accept();
  return REF;
}
"<RGBA>" {
  accept();
  return RGBA;
}
"<ROTATE>" {
  accept();
  return ROTATE;
}
"<ROTX>" {
  accept();
  return ROTX;
}
"<ROTY>" {
  accept();
  return ROTY;
}
"<ROTZ>" {
  accept();
  return ROTZ;
}
"<S$ANIM>" {
  accept();
  return SANIM;
}
"<SCALAR>" {
  accept();
  return SCALAR;
}
"<SCALE>" {
  accept();
  return SCALE;
}
"<SEQUENCE>" {
  accept();
  return SEQUENCE;
}
"<SHADING>" {
  accept();
  return SHADING;
}
"<SWITCH>" {
  accept();
  return SWITCH;
}
"<SWITCHCONDITION>" {
  accept();
  return SWITCHCONDITION;
}
"<TABLE>" {
  accept();
  return TABLE;
}
"<V>" {
  accept();
  return TABLE_V;
}
"<TAG>" {
  accept();
  return TAG;
}
"<TANGENT>" {
  accept();
  return TANGENT;
}
"<TEXLIST>" {
  accept();
  return TEXLIST;
}
"<TEXTURE>" {
  accept();
  return TEXTURE;
}
"<TLENGTHS>" {
  accept();
  return TLENGTHS;
}
"<TRANSFORM>" {
  accept();
  return TRANSFORM;
}
"<TRANSLATE>" {
  accept();
  return TRANSLATE;
}
"<TREF>" {
  accept();
  return TREF;
}
"<TRIANGLEFAN>" {
  accept();
  return TRIANGLEFAN;
}
"<TRIANGLESTRIP>" {
  accept();
  return TRIANGLESTRIP;
}
"<TRIM>" {
  accept();
  return TRIM;
}
"<TXT>" {
  accept();
  return TXT;
}
"<U-KNOTS>" {
  accept();
  return UKNOTS;
}
"<U_KNOTS>" {
  accept();
  return UKNOTS;
}
"<UV>" {
  accept();
  return UV;
}
"<V-KNOTS>" {
  accept();
  return VKNOTS;
}
"<V_KNOTS>" {
  accept();
  return VKNOTS;
}
"<VERTEX>" {
  accept();
  return VERTEX;
}
"<VERTEXANIM>" {
  accept();
  return VERTEXANIM;
}
"<VERTEXPOOL>" {
  accept();
  return VERTEXPOOL;
}
"<VERTEXREF>" {
  accept();
  return VERTEXREF;
}
"<XFM$ANIM>" {
  accept();
  return XFMANIM;
}
"<XFM$ANIM_S$>" {
  accept();
  return XFMSANIM;
}



{NUMERIC} {
  // An integer or floating-point number.
  accept();
  yylval->_number = patof(yytext);
  yylval->_string = yytext;
  return EGG_NUMBER;
}

{HEX} {
  // A hexadecimal integer number.
  accept();
  yylval->_ulong = strtoul(yytext+2, nullptr, 16);
  yylval->_string = yytext;
  return EGG_ULONG;
}

{BINARY} {
  // A binary integer number.
  accept();
  yylval->_ulong = strtoul(yytext+2, nullptr, 2);
  yylval->_string = yytext;
  return EGG_ULONG;
}

"nan"{HEX} {
  // not-a-number.  These sometimes show up in egg files accidentally.
  accept();
  memset(&yylval->_number, 0, sizeof(yylval->_number));
  *(unsigned long *)&yylval->_number = strtoul(yytext+3, nullptr, 0);
  yylval->_string = yytext;
  return EGG_NUMBER;
}

"inf" {
  // infinity.  As above.
  accept();
  yylval->_number = HUGE_VAL;
  yylval->_string = yytext;
  return EGG_NUMBER;
}

"-inf" {
  // minus infinity.  As above.
  accept();
  yylval->_number = -HUGE_VAL;
  yylval->_string = yytext;
  return EGG_NUMBER;
}

"1.#inf" {
  // infinity, on Win32.  As above.
  accept();
  yylval->_number = HUGE_VAL;
  yylval->_string = yytext;
  return EGG_NUMBER;
}

"-1.#inf" {
  // minus infinity, on Win32.  As above.
  accept();
  yylval->_number = -HUGE_VAL;
  yylval->_string = yytext;
  return EGG_NUMBER;
}


["] {
  // Quoted string.
  accept();
  yylval->_string = scan_quoted_string(yylloc, yyscanner);
  return EGG_STRING;
}

[^ \t\n\r{}"]+ {
  // Unquoted string.
  accept();
  yylval->_string = yytext;
  return EGG_STRING;
}
