#line 2 "lex.yy.c"

#line 4 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer eggyy_create_buffer
#define yy_delete_buffer eggyy_delete_buffer
#define yy_flex_debug eggyy_flex_debug
#define yy_init_buffer eggyy_init_buffer
#define yy_flush_buffer eggyy_flush_buffer
#define yy_load_buffer_state eggyy_load_buffer_state
#define yy_switch_to_buffer eggyy_switch_to_buffer
#define yyin eggyyin
#define yyleng eggyyleng
#define yylex eggyylex
#define yylineno eggyylineno
#define yyout eggyyout
#define yyrestart eggyyrestart
#define yytext eggyytext
#define yywrap eggyywrap
#define yyalloc eggyyalloc
#define yyrealloc eggyyrealloc
#define yyfree eggyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE eggyyrestart(eggyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int eggyyleng;

extern FILE *eggyyin, *eggyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up eggyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up eggyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via eggyyrestart()), so that the user can continue scanning by
	 * just pointing eggyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when eggyytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int eggyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow eggyywrap()'s to do buffer switches
 * instead of setting up a fresh eggyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void eggyyrestart (FILE *input_file  );
void eggyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE eggyy_create_buffer (FILE *file,int size  );
void eggyy_delete_buffer (YY_BUFFER_STATE b  );
void eggyy_flush_buffer (YY_BUFFER_STATE b  );
void eggyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void eggyypop_buffer_state (void );

static void eggyyensure_buffer_stack (void );
static void eggyy_load_buffer_state (void );
static void eggyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER eggyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE eggyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE eggyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE eggyy_scan_bytes (yyconst char *bytes,int len  );

void *eggyyalloc (yy_size_t  );
void *eggyyrealloc (void *,yy_size_t  );
void eggyyfree (void *  );

#define yy_new_buffer eggyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        eggyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            eggyy_create_buffer(eggyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        eggyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            eggyy_create_buffer(eggyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

typedef unsigned char YY_CHAR;

FILE *eggyyin = (FILE *) 0, *eggyyout = (FILE *) 0;

typedef int yy_state_type;

extern int eggyylineno;

int eggyylineno = 1;

extern char *eggyytext;
#define yytext_ptr eggyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up eggyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	eggyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 101
#define YY_END_OF_BUFFER 102
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[585] =
    {   0,
        0,    0,  102,  100,    2,    1,   99,  100,  100,  100,
      100,   91,   91,   91,  100,  100,  100,    5,  100,    1,
      100,   91,   91,  100,   91,    4,    3,   91,   93,  100,
       92,   91,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,   91,  100,    3,    3,   93,  100,
       91,   92,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,   67,  100,  100,
      100,   95,  100,  100,   96,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,   20,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,   82,  100,  100,  100,
      100,  100,  100,  100,  100,  100,    7,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,   26,
      100,  100,  100,  100,  100,   24,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,   53,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       68,  100,  100,  100,  100,  100,  100,  100,  100,   79,
      100,  100,  100,  100,  100,  100,   94,  100,   97,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,   21,  100,  100,  100,  100,  100,   25,  100,   30,
      100,  100,  100,  100,  100,   37,   38,  100,  100,  100,

       43,  100,  100,  100,  100,  100,  100,  100,  100,   54,
      100,   56,   57,   58,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,   75,  100,   78,  100,
      100,  100,  100,  100,  100,   94,   98,  100,  100,    9,
      100,  100,  100,   14,  100,  100,  100,  100,  100,  100,
      100,  100,   23,   28,  100,   31,  100,  100,   33,   34,
      100,  100,   42,  100,  100,  100,  100,   48,  100,   50,
      100,  100,  100,  100,  100,   61,  100,  100,  100,   66,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,   13,   15,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,   44,  100,  100,  100,  100,  100,  100,   55,
       59,   60,  100,  100,   64,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,   85,  100,  100,  100,
      100,  100,  100,  100,  100,  100,   16,   17,  100,  100,
      100,  100,   22,  100,   35,  100,  100,   40,   41,  100,
      100,  100,  100,  100,   52,  100,   63,  100,   69,   70,
       71,  100,  100,  100,  100,   80,   81,   83,  100,  100,
      100,   84,  100,  100,  100,  100,   12,  100,  100,  100,
       27,  100,   36,   39,  100,  100,  100,  100,  100,   62,

      100,   72,  100,  100,  100,  100,  100,  100,  100,   89,
      100,  100,  100,   10,  100,   18,  100,  100,  100,  100,
      100,  100,  100,  100,  100,   73,   74,  100,  100,  100,
      100,   88,  100,  100,  100,  100,  100,  100,  100,   45,
      100,   47,   49,   51,  100,  100,  100,   86,   87,  100,
        6,    8,  100,  100,   32,  100,  100,  100,   76,  100,
       90,  100,  100,  100,   46,  100,  100,  100,  100,  100,
      100,   77,  100,  100,  100,  100,   11,  100,  100,   65,
       19,  100,   29,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    1,    1,    1,    1,
        1,    7,    8,    1,    9,   10,   11,   12,   13,   14,
       15,   16,   14,   14,   14,   14,   14,    1,    1,   17,
        1,   18,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,    1,   72,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2
    } ;

static yyconst flex_int16_t yy_base[590] =
    {   0,
        0,   71, 1224,    0, 1225,    0, 1225,    8,   23,   28,
       18,  134,   55,   79,  203,    2,    0, 1225,    0,    0,
       94,  101,  122,   17,  146,    0,   24,  151,   18,  174,
      263,  276,  136,  277,  289,  338,   36,   63,   68,   68,
       72,  146,  261,  284,  300,  318,  335,  373,  370,  373,
      401,   88,  129,  138,  440,  147,   49,    0,   35,  416,
      422,    0,  151,  271,  261,  261,  287,  385,  276,  299,
      307,  417, 1205,  312,  334,  398,  406,  424,  433,  423,
      420,  418,  430,  434,  432,  445,  440,  435,  437,  438,
      434,  451,  453,  442,  443,  452,  459,  445,  459,  474,

      478,  491,  474,  494,  495,  480,  497,  490,  498,  477,
      497,  529,  484,  497, 1204,  498,  503,    0,  497,  505,
      504,    0, 1209,  509,    0,  505,  520, 1202,  528,  537,
      535,  533,  545,  532,  532,  540,  540,  536,    0,  535,
     1201,  557,  539,  544,  561,  561, 1200,  542,  568,  565,
      550,  560,  553,  570,  567,  583,  575,  587,  589,  595,
      589,  601,  599,  601,  587,  605,  595,  585, 1199,  611,
      616,  602,  608,  601,  619,  604,  613, 1198,  619,  626,
      613,  631,  642,  657, 1197,  641,    0,  642,  643,  639,
      646, 1208,  637,  648,  657,  648,    0,  661,  666,  672,

      658,  665, 1206,  673,  670,  675,  666,  688, 1194,    0,
      673,  694,  683,  698,  694,    0, 1193,  689, 1192,  693,
      689,  710,  692,  694, 1191, 1175,  696,  706,  704, 1167,
      716,  699,  717,  706,  724,  720,  710,  724,    0, 1166,
      712, 1165, 1164, 1163,  724,  745,  729,  726,  745,  744,
        0,  748,  745,  735,  756,  745, 1156,  751, 1155,    0,
      751,  752,  753,  764,  755,  770,  805,  772,    0,  767,
      768,  830,  772,  775,  784,  784,  800,  813,  804,  805,
      811,    0,  809,  808,  822,  782,  779,    0,  815,    0,
      774,  821,  812,  772,  613,    0,    0,  818,  804,  507,

        0,  817,  838,  812,  503,  825,  407,  828,  827,    0,
      838,    0,    0,    0,  845,  842,  393,  847,  848,  855,
      391,  850,  846,  853,  852,  867,    0,  867,    0,  855,
      856,  857,  854,  860,  867,    0,    0,  877,  880,    0,
      885,  892,  387,    0,  384,  889,  875,  891,  883,  891,
      909,  902,    0,    0,  912,    0,  911,  914,    0,    0,
      917,   40,    0,  373,  898,  904,  906,    0,  920,    0,
      919,  915,  372,  365,  355,    0,  927,  924,  932,    0,
      913,  914,  931,  929,  925,  946,  936,  930,  931,  932,
      965,  940,  959,  957,  949,  953,  960,    0,    0,  354,

      351,  959,  978,  964,  977,  344,  962,  337,  980,  975,
      336,  335,    0,  970,  971,  965,  986,  985,  334,    0,
        0,    0,  989,  323,    0,  986,  320,  316,  284,  983,
      985,  984, 1000,  278,  277,  275,    0,  999, 1005, 1017,
      189, 1010, 1009, 1007, 1022,  181,    0,    0, 1007, 1013,
     1019,  176,    0, 1030,    0,  175,  174,    0,    0, 1014,
     1031, 1022, 1025, 1033,    0,  173,    0, 1028,    0,    0,
        0,  167, 1030, 1039, 1039,    0,    0,    0, 1037, 1033,
     1049,    0, 1056, 1056, 1037, 1074,    0,  159, 1062, 1057,
        0, 1060,    0,    0, 1074, 1079, 1076, 1067, 1068,    0,

     1085,    0,  138,  137, 1089, 1071, 1079, 1081,  134,    0,
     1076, 1092, 1092,    0, 1093,    0, 1080, 1095, 1081,  124,
     1099,  123,  122,  115, 1100,    0,    0, 1096, 1093,  105,
      104,    0,  114,  101,  100, 1098, 1088,   79, 1116,    0,
     1125,    0,    0,    0, 1111,   48, 1123,    0,    0,   46,
        0,    0, 1113, 1115,    0, 1111,   44, 1132,    0, 1126,
        0, 1138, 1124, 1129,    0, 1131,   42, 1129, 1144, 1135,
     1137,    0,   40, 1139, 1138,   39,    0,   34, 1142,    0,
        0,   27,    0, 1225, 1199,    0, 1202, 1204, 1206
    } ;

static yyconst flex_int16_t yy_def[590] =
    {   0,
      585,  585,  584,  586,  584,  587,  584,  586,  586,  586,
      586,  586,  586,  586,  584,  586,  586,  584,  586,  587,
      586,  586,  586,  586,  586,  586,  588,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  588,  589,  586,  586,
      586,   31,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,

      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,

      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,

      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  267,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,

      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,

      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,    0,  584,  584,  584,  584,  584
    } ;

static yyconst flex_int16_t yy_nxt[1298] =
    {   0,
       19,    5,    6,    7,  584,  584,  584,    8,    9,   10,
       11,   12,   13,   14,   14,   14,   15,   21,   54,   22,
       22,   22,   22,   22,   26,   58,   16,   58,   27,   59,
       59,   17,   21,   53,   22,   23,   22,   22,   22,   25,
       25,   25,   25,   25,  583,   54,   59,   59,   56,   24,
       58,  581,   58,   16,  411,  412,  580,  577,   17,  572,
       53,  565,   84,  561,   32,  559,   22,   22,   22,   22,
       22,   18,    5,    6,    7,   56,   24,   30,    8,    9,
       10,   11,   12,   13,   14,   14,   14,   15,   28,   84,
       22,   22,   22,   22,   22,   58,  555,   16,   85,   86,

       87,   30,   17,   88,   30,   25,   25,   25,   25,   25,
       28,  121,   22,   22,   22,   22,   22,  552,  551,  550,
       58,  549,  548,   30,   16,   85,   86,   87,   30,   17,
       88,   55,  544,   22,   22,   22,   22,   22,  121,  543,
      542,  540,   18,   28,   30,   22,   22,   22,   22,   22,
       30,  532,  122,   29,  527,  526,   30,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   64,   30,  123,
      125,   30,   89,   30,   65,   31,  516,  126,   90,  122,
       29,   60,   60,   30,  502,   61,   61,   61,   61,   61,
      500,  494,  493,  491,   64,   30,  123,  125,  487,   89,

       30,   65,   31,   19,  126,   90,  482,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   33,   34,   35,   36,   19,   37,   38,   19,   39,
       40,   41,   42,   43,   44,   45,   46,   19,   47,   48,
       49,   50,   51,   19,   52,   19,   19,   19,   33,   34,
       35,   36,   19,   37,   38,   19,   39,   40,   41,   42,
       43,   44,   45,   46,   19,   47,   48,   49,   50,   51,
       19,   52,   19,   19,   62,   62,   62,   62,   62,   91,
       63,   62,   62,   62,   62,   62,   62,   25,   25,   25,
       25,   25,  478,   92,  477,  476,   93,  127,   30,   66,

       67,  471,  128,   68,  129,  130,   91,  133,   62,   62,
       62,   62,   62,   62,   70,   69,   94,  134,   71,   96,
       92,   72,   95,   93,  127,   30,   66,   67,   73,  128,
       68,  129,  130,  470,  133,   97,   99,  469,   98,  135,
      467,   70,   69,   94,  134,   71,   96,  140,   72,   95,
      100,  465,  459,  458,  455,   73,   74,  101,   75,  102,
       76,  453,   97,   99,   77,   98,  135,  103,  448,   78,
      141,  447,  422,   79,  140,   80,   81,  100,  104,   82,
       83,  114,  421,   74,  101,   75,  102,   76,  109,  420,
      413,   77,  110,  105,  103,  106,   78,  141,  107,  111,

       79,  399,   80,   81,  398,  112,   82,   83,  380,  117,
      376,  113,  115,  108,  131,  109,  132,  116,  118,  110,
      105,  142,  106,  119,  370,  107,  111,   61,   61,   61,
       61,   61,  112,   61,   61,   61,   61,   61,  113,  115,
      108,  131,  143,  132,  124,  120,  136,  137,  142,  138,
      119,   25,   25,   25,   25,   25,  144,  145,  146,  147,
      148,  149,   30,  150,  151,  152,  154,  155,  156,  143,
      157,  158,  159,  136,  137,  160,  138,  161,  162,  163,
      164,  153,  165,  144,  145,  146,  147,  148,  149,   30,
      150,  151,  152,  154,  155,  156,  166,  157,  158,  159,

      167,  169,  160,  168,  161,  162,  163,  164,  153,  165,
      170,  171,  172,  173,  174,  175,  176,  177,  180,  181,
      368,  185,  178,  166,  363,  186,  188,  167,  169,  179,
      168,  189,  190,  191,  192,  194,  195,  170,  171,  172,
      173,  174,  175,  176,  177,  180,  181,  182,  185,  178,
      196,  183,  186,  188,  198,  184,  179,  199,  189,  190,
      191,  192,  194,  195,  200,  201,  202,  203,  204,  205,
      206,  208,  209,  207,  182,  211,  212,  196,  183,  213,
      214,  198,  184,  215,  199,  217,  218,  219,  220,  221,
      222,  200,  201,  202,  203,  204,  205,  206,  208,  209,

      207,  223,  211,  212,  224,  225,  213,  214,  226,  227,
      215,  229,  217,  218,  219,  220,  221,  222,  230,  231,
      232,  233,  228,  234,  235,  236,  237,  238,  223,  240,
      360,  224,  225,  245,  241,  226,  227,  246,  229,  247,
      248,  249,  250,  252,  255,  230,  231,  232,  233,  228,
      234,  235,  236,  237,  238,  253,  240,  242,  243,  244,
      245,  241,  256,  254,  246,  257,  247,  248,  249,  250,
      252,  255,  261,  262,  263,  258,  264,  265,  267,  268,
      269,  270,  253,  271,  242,  243,  244,  259,  272,  256,
      254,  273,  257,  274,  275,  277,  278,  279,  280,  261,

      262,  263,  258,  264,  265,  267,  268,  269,  270,  281,
      271,  283,  284,  285,  259,  272,  286,  287,  273,  289,
      274,  275,  277,  278,  279,  280,  291,  292,  293,  294,
      295,  298,  299,  300,  302,  303,  281,  304,  283,  284,
      285,  305,  306,  286,  287,  307,  289,  308,  309,  311,
      315,  318,  319,  291,  292,  293,  294,  295,  298,  299,
      300,  302,  303,  316,  304,  320,  321,  317,  305,  306,
      322,  323,  307,  324,  308,  309,  311,  315,  318,  319,
      325,  326,  328,  330,  331,  332,  333,  334,  335,  359,
      316,  356,  320,  321,  317,  337,  354,  322,  323,  353,

      324,  344,  338,  339,  341,  342,  343,  325,  326,  328,
      330,  331,  332,  333,  334,  335,  336,  336,  336,  336,
      336,  345,  337,  336,  336,  336,  336,  336,  336,  338,
      339,  341,  342,  343,  346,  347,  348,  349,  350,  351,
      352,  355,  357,  358,  361,  362,  364,  340,  345,  367,
      336,  336,  336,  336,  336,  336,  369,  371,  365,  372,
      373,  346,  347,  348,  349,  350,  351,  352,  355,  357,
      358,  361,  362,  364,  366,  374,  367,  375,  377,  378,
      379,  381,  382,  369,  371,  365,  372,  373,  383,  384,
      385,  387,  388,  389,  390,  391,  386,  392,  393,  394,

      395,  366,  374,  396,  375,  377,  378,  379,  381,  382,
      397,  400,  401,  402,  403,  383,  384,  385,  387,  388,
      389,  390,  391,  386,  392,  393,  394,  395,  404,  405,
      396,  406,  407,  408,  409,  410,  414,  397,  400,  401,
      402,  403,  415,  416,  417,  418,  419,  423,  424,  425,
      427,  428,  426,  429,  430,  404,  405,  431,  406,  407,
      408,  409,  410,  414,  432,  433,  434,  435,  436,  415,
      416,  417,  418,  419,  423,  424,  441,  427,  428,  426,
      429,  430,  437,  438,  431,  442,  443,  444,  445,  446,
      449,  432,  433,  434,  435,  436,  450,  451,  439,  452,

      440,  454,  456,  441,  457,  460,  461,  462,  463,  464,
      438,  466,  442,  443,  444,  445,  446,  449,  468,  472,
      473,  474,  475,  450,  451,  439,  452,  440,  454,  456,
      479,  457,  460,  461,  462,  463,  464,  480,  466,  481,
      483,  484,  485,  486,  488,  468,  472,  473,  474,  475,
      489,  490,  492,  495,  496,  497,  498,  479,  499,  501,
      503,  504,  505,  507,  480,  508,  481,  483,  484,  485,
      486,  488,  509,  510,  512,  506,  513,  489,  490,  492,
      495,  496,  497,  498,  517,  499,  501,  503,  504,  505,
      507,  514,  508,  518,  515,  519,  520,  521,  522,  509,

      511,  512,  506,  513,  523,  524,  525,  528,  529,  530,
      531,  517,  533,  534,  535,  536,  537,  538,  539,  541,
      518,  515,  519,  520,  521,  522,  545,  546,  547,  553,
      554,  523,  524,  525,  528,  529,  530,  531,  556,  533,
      534,  535,  536,  537,  538,  539,  541,  557,  558,  560,
      562,  563,  564,  545,  546,  547,  553,  554,  566,  567,
      568,  569,  570,  571,  573,  556,  574,  575,  576,  578,
      579,  582,  329,  327,  557,  558,  560,  562,  563,  564,
      314,  313,  312,  310,  301,  566,  567,  568,  569,  570,
      571,  573,  297,  574,  575,  576,  578,  579,  582,    4,

        4,    4,   20,   20,   57,   57,   58,   58,  296,  290,
      288,  282,  276,  266,  260,  251,  239,  216,  210,  197,
      193,  187,  139,  584,    3,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584

    } ;

static yyconst flex_int16_t yy_chk[1298] =
    {   0,
      586,    1,    1,    1,    0,    0,    0,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    8,   17,    8,
        8,    8,    8,    8,   11,   27,    1,   27,   11,   29,
       29,    1,    9,   16,    9,    9,    9,    9,    9,   10,
       10,   10,   10,   10,  582,   17,   59,   59,   24,    9,
       57,  578,   57,    1,  362,  362,  576,  573,    1,  567,
       16,  557,   37,  550,   13,  546,   13,   13,   13,   13,
       13,    1,    2,    2,    2,   24,    9,   13,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   14,   37,
       14,   14,   14,   14,   14,   27,  538,    2,   38,   39,

       40,   14,    2,   41,   13,   21,   21,   21,   21,   21,
       22,   52,   22,   22,   22,   22,   22,  535,  534,  533,
       57,  531,  530,   22,    2,   38,   39,   40,   14,    2,
       41,   23,  524,   23,   23,   23,   23,   23,   52,  523,
      522,  520,    2,   12,   23,   12,   12,   12,   12,   12,
       22,  509,   53,   12,  504,  503,   12,   25,   25,   25,
       25,   25,   28,   28,   28,   28,   28,   33,   25,   54,
       56,   23,   42,   28,   33,   12,  488,   63,   42,   53,
       12,   30,   30,   12,  472,   30,   30,   30,   30,   30,
      466,  457,  456,  452,   33,   25,   54,   56,  446,   42,

       28,   33,   12,   15,   63,   42,  441,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   31,   31,   31,   31,   31,   43,
       32,   31,   31,   31,   31,   31,   31,   32,   32,   32,
       32,   32,  436,   43,  435,  434,   43,   64,   32,   34,

       34,  429,   65,   34,   66,   67,   43,   69,   31,   31,
       31,   31,   31,   31,   35,   34,   44,   70,   35,   45,
       43,   35,   44,   43,   64,   32,   34,   34,   35,   65,
       34,   66,   67,  428,   69,   45,   46,  427,   45,   71,
      424,   35,   34,   44,   70,   35,   45,   74,   35,   44,
       46,  419,  412,  411,  408,   35,   36,   47,   36,   47,
       36,  406,   45,   46,   36,   45,   71,   47,  401,   36,
       75,  400,  375,   36,   74,   36,   36,   46,   48,   36,
       36,   50,  374,   36,   47,   36,   47,   36,   49,  373,
      364,   36,   49,   48,   47,   48,   36,   75,   48,   49,

       36,  345,   36,   36,  343,   49,   36,   36,  321,   51,
      317,   49,   50,   48,   68,   49,   68,   50,   51,   49,
       48,   76,   48,   51,  307,   48,   49,   60,   60,   60,
       60,   60,   49,   61,   61,   61,   61,   61,   49,   50,
       48,   68,   77,   68,   55,   51,   72,   72,   76,   72,
       51,   55,   55,   55,   55,   55,   78,   79,   80,   81,
       82,   83,   55,   84,   85,   86,   87,   88,   89,   77,
       90,   91,   92,   72,   72,   93,   72,   94,   95,   96,
       97,   86,   98,   78,   79,   80,   81,   82,   83,   55,
       84,   85,   86,   87,   88,   89,   99,   90,   91,   92,

      100,  101,   93,  100,   94,   95,   96,   97,   86,   98,
      102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
      305,  113,  109,   99,  300,  114,  116,  100,  101,  109,
      100,  117,  119,  120,  121,  124,  126,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,  113,  109,
      127,  112,  114,  116,  129,  112,  109,  130,  117,  119,
      120,  121,  124,  126,  131,  132,  133,  134,  135,  136,
      137,  138,  140,  137,  112,  142,  143,  127,  112,  144,
      145,  129,  112,  146,  130,  148,  149,  150,  151,  152,
      153,  131,  132,  133,  134,  135,  136,  137,  138,  140,

      137,  154,  142,  143,  155,  156,  144,  145,  157,  158,
      146,  159,  148,  149,  150,  151,  152,  153,  160,  161,
      162,  163,  158,  164,  165,  166,  167,  168,  154,  170,
      295,  155,  156,  172,  171,  157,  158,  173,  159,  174,
      175,  176,  177,  179,  181,  160,  161,  162,  163,  158,
      164,  165,  166,  167,  168,  180,  170,  171,  171,  171,
      172,  171,  182,  180,  173,  183,  174,  175,  176,  177,
      179,  181,  186,  188,  189,  184,  190,  191,  193,  194,
      195,  196,  180,  198,  171,  171,  171,  184,  199,  182,
      180,  200,  183,  201,  202,  204,  205,  206,  207,  186,

      188,  189,  184,  190,  191,  193,  194,  195,  196,  208,
      198,  211,  212,  213,  184,  199,  214,  215,  200,  218,
      201,  202,  204,  205,  206,  207,  220,  221,  222,  223,
      224,  227,  228,  229,  231,  232,  208,  233,  211,  212,
      213,  234,  235,  214,  215,  236,  218,  237,  238,  241,
      245,  247,  248,  220,  221,  222,  223,  224,  227,  228,
      229,  231,  232,  246,  233,  249,  250,  246,  234,  235,
      252,  253,  236,  254,  237,  238,  241,  245,  247,  248,
      255,  256,  258,  261,  262,  263,  264,  265,  266,  294,
      246,  291,  249,  250,  246,  268,  287,  252,  253,  286,

      254,  276,  270,  271,  273,  274,  275,  255,  256,  258,
      261,  262,  263,  264,  265,  266,  267,  267,  267,  267,
      267,  277,  268,  267,  267,  267,  267,  267,  267,  270,
      271,  273,  274,  275,  278,  279,  280,  281,  283,  284,
      285,  289,  292,  293,  298,  299,  302,  272,  277,  304,
      267,  267,  267,  267,  267,  267,  306,  308,  303,  309,
      311,  278,  279,  280,  281,  283,  284,  285,  289,  292,
      293,  298,  299,  302,  303,  315,  304,  316,  318,  319,
      320,  322,  323,  306,  308,  303,  309,  311,  324,  325,
      326,  328,  330,  331,  332,  333,  326,  334,  335,  338,

      339,  303,  315,  341,  316,  318,  319,  320,  322,  323,
      342,  346,  347,  348,  349,  324,  325,  326,  328,  330,
      331,  332,  333,  326,  334,  335,  338,  339,  350,  351,
      341,  352,  355,  357,  358,  361,  365,  342,  346,  347,
      348,  349,  366,  367,  369,  371,  372,  377,  378,  379,
      381,  382,  379,  383,  384,  350,  351,  385,  352,  355,
      357,  358,  361,  365,  386,  387,  388,  389,  390,  366,
      367,  369,  371,  372,  377,  378,  392,  381,  382,  379,
      383,  384,  391,  391,  385,  393,  394,  395,  396,  397,
      402,  386,  387,  388,  389,  390,  403,  404,  391,  405,

      391,  407,  409,  392,  410,  414,  415,  416,  417,  418,
      391,  423,  393,  394,  395,  396,  397,  402,  426,  430,
      431,  432,  433,  403,  404,  391,  405,  391,  407,  409,
      438,  410,  414,  415,  416,  417,  418,  439,  423,  440,
      442,  443,  444,  445,  449,  426,  430,  431,  432,  433,
      450,  451,  454,  460,  461,  462,  463,  438,  464,  468,
      473,  474,  475,  479,  439,  480,  440,  442,  443,  444,
      445,  449,  481,  483,  484,  475,  485,  450,  451,  454,
      460,  461,  462,  463,  489,  464,  468,  473,  474,  475,
      479,  486,  480,  490,  486,  492,  495,  496,  497,  481,

      483,  484,  475,  485,  498,  499,  501,  505,  506,  507,
      508,  489,  511,  512,  513,  515,  517,  518,  519,  521,
      490,  486,  492,  495,  496,  497,  525,  528,  529,  536,
      537,  498,  499,  501,  505,  506,  507,  508,  539,  511,
      512,  513,  515,  517,  518,  519,  521,  541,  545,  547,
      553,  554,  556,  525,  528,  529,  536,  537,  558,  560,
      562,  563,  564,  566,  568,  539,  569,  570,  571,  574,
      575,  579,  259,  257,  541,  545,  547,  553,  554,  556,
      244,  243,  242,  240,  230,  558,  560,  562,  563,  564,
      566,  568,  226,  569,  570,  571,  574,  575,  579,  585,

      585,  585,  587,  587,  588,  588,  589,  589,  225,  219,
      217,  209,  203,  192,  185,  178,  169,  147,  141,  128,
      123,  115,   73,    3,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int eggyy_flex_debug;
int eggyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *eggyytext;
#line 1 "lexer.lxx"
/*
// Filename: lexer.l
// Created by:  drose (16Jan99)
// 
////////////////////////////////////////////////////////////////////
*/
#line 9 "lexer.lxx"
#include "pandabase.h"
#include "lexerDefs.h"
#include "parserDefs.h"
#include "config_egg.h"
#include "parser.h"
#include "indent.h"
#include "pnotify.h"
#include "lightMutex.h"
#include "thread.h"
#include "pstrtod.h"

#include <math.h>

using std::istream;
using std::ostream;
using std::string;

extern "C" int eggyywrap(void);  // declared below.

static int yyinput(void);        // declared by flex.


////////////////////////////////////////////////////////////////////
// Static variables
////////////////////////////////////////////////////////////////////

// This mutex protects all of these global variables. 
LightMutex egg_lock; 

// We'll increment line_number and col_number as we parse the file, so
// that we can report the position of an error.
static int line_number = 0;
static int col_number = 0;

// current_line holds as much of the current line as will fit.  Its
// only purpose is for printing it out to report an error to the user.
static const int max_error_width = 1024;
static char current_line[max_error_width + 1];

static int error_count = 0;
static int warning_count = 0;

// This is the pointer to the current input stream.
static istream *input_p = NULL;

// This is the name of the egg file we're parsing.  We keep it so we
// can print it out for error messages.
static string egg_filename;

// This is the initial token state returned by the lexer.  It allows
// the yacc grammar to start from initial points.
static int initial_token;

////////////////////////////////////////////////////////////////////
// Defining the interface to the lexer.
////////////////////////////////////////////////////////////////////

void
egg_init_lexer(istream &in, const string &filename) {
  input_p = &in;
  egg_filename = filename;
  line_number = 0;
  col_number = 0;
  error_count = 0;
  warning_count = 0;
  initial_token = START_EGG;
}

void
egg_start_group_body() {
  /* Set the initial state to begin within a group_body context,
     instead of at the beginning of the egg file. */
  initial_token = START_GROUP_BODY;
}

void
egg_start_texture_body() {
  initial_token = START_TEXTURE_BODY;
}

void
egg_start_primitive_body() {
  initial_token = START_PRIMITIVE_BODY;
}

int
egg_error_count() {
  return error_count;
}

int
egg_warning_count() {
  return warning_count;
}


////////////////////////////////////////////////////////////////////
// Internal support functions.
////////////////////////////////////////////////////////////////////

int
eggyywrap(void) {
  return 1;
}

void
eggyyerror(const string &msg) {
  if (egg_cat.is_error()) {
    ostream &out = egg_cat.error(false);

    out << "\nError";
    if (!egg_filename.empty()) {
      out << " in " << egg_filename;
    }
    out 
      << " at line " << line_number << ", column " << col_number << ":\n"
      << std::setiosflags(Notify::get_literal_flag())
      << current_line << "\n";
    indent(out, col_number-1) 
      << "^\n" << msg << "\n\n" 
      << std::resetiosflags(Notify::get_literal_flag()) << std::flush;
  }
  error_count++;
}

void
eggyyerror(std::ostringstream &strm) {
  string s = strm.str();
  eggyyerror(s);
}

void
eggyywarning(const string &msg) {
  if (egg_cat.is_warning()) {
    ostream &out = egg_cat.warning(false);

    out << "\nWarning";
    if (!egg_filename.empty()) {
      out << " in " << egg_filename;
    }
    out 
      << " at line " << line_number << ", column " << col_number << ":\n"
      << std::setiosflags(Notify::get_literal_flag())
      << current_line << "\n";
    indent(out, col_number-1) 
      << "^\n" << msg << "\n\n" 
      << std::resetiosflags(Notify::get_literal_flag()) << std::flush;
  }
  warning_count++;
}

void
eggyywarning(std::ostringstream &strm) {
  std::string s = strm.str();
  eggyywarning(s);
}

// Now define a function to take input from an istream instead of a
// stdio FILE pointer.  This is flex-specific.
static void
input_chars(char *buffer, int &result, int max_size) {
  nassertv(input_p != NULL);
  if (*input_p) {
    input_p->read(buffer, max_size);
    result = input_p->gcount();

    if (line_number == 0) {
      // This is a special case.  If we are reading the very first bit
      // from the stream, copy it into the current_line array.  This
      // is because the \n.* rule below, which fills current_line
      // normally, doesn't catch the first line.
      int length = std::min(max_error_width, result);
      strncpy(current_line, buffer, length);
      current_line[length] = '\0';
      line_number++;
      col_number = 0;

      // Truncate it at the newline.
      char *end = strchr(current_line, '\n');
      if (end != NULL) {
        *end = '\0';
      }
    }

  } else {
    // End of file or I/O error.
    result = 0;
  }
  Thread::consider_yield();
}
#undef YY_INPUT

// Define this macro carefully, since different flex versions call it
// with a different type for result.
#define YY_INPUT(buffer, result, max_size) { \
  int int_result = 0; \
  input_chars((buffer), int_result, (max_size)); \
  (result) = int_result; \
}

// read_char reads and returns a single character, incrementing the
// supplied line and column numbers as appropriate.  A convenience
// function for the scanning functions below.
static int
read_char(int &line, int &col) {
  int c = yyinput();
  if (c == '\n') {
    line++;
    col = 0;
  } else {
    col++;
  }
  return c;
}

// scan_quoted_string reads a string delimited by quotation marks and
// returns it.
static string
scan_quoted_string() {
  string result;

  // We don't touch the current line number and column number during
  // scanning, so that if we detect an error while scanning the string
  // (e.g. an unterminated string), we'll report the error as
  // occurring at the start of the string, not at the end--somewhat
  // more convenient for the user.

  // Instead of adjusting the global line_number and col_number
  // variables, we'll operate on our own local variables for the
  // interim.
  int line = line_number;
  int col = col_number;

  int c;
  c = read_char(line, col);
  while (c != '"' && c != EOF) {
    result += c;
    c = read_char(line, col);
  }

  if (c == EOF) {
    eggyyerror("This quotation mark is unterminated.");
  }

  line_number = line;
  col_number = col;

  return result;
}

// eat_c_comment scans past all characters up until the first */
// encountered.
static void
eat_c_comment() {
  // As above, we'll operate on our own local copies of line_number
  // and col_number within this function.

  int line = line_number;
  int col = col_number;

  int c, last_c;
  
  last_c = '\0';
  c = read_char(line, col);
  while (c != EOF && !(last_c == '*' && c == '/')) {
    if (last_c == '/' && c == '*') {
      std::ostringstream errmsg;
      errmsg << "This comment contains a nested /* symbol at line "
             << line << ", column " << col-1 << "--possibly unclosed?"
             << std::ends;
      eggyywarning(errmsg);
    }
    last_c = c;
    c = read_char(line, col);
  }

  if (c == EOF) {
    eggyyerror("This comment marker is unclosed.");
  }

  line_number = line;
  col_number = col;
}


// accept() is called below as each piece is pulled off and
// accepted by the lexer; it increments the current column number.
INLINE void accept() {
  col_number += eggyyleng;
}

#line 1241 "lex.yy.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int eggyylex_destroy (void );

int eggyyget_debug (void );

void eggyyset_debug (int debug_flag  );

YY_EXTRA_TYPE eggyyget_extra (void );

void eggyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *eggyyget_in (void );

void eggyyset_in  (FILE * in_str  );

FILE *eggyyget_out (void );

void eggyyset_out  (FILE * out_str  );

int eggyyget_leng (void );

char *eggyyget_text (void );

int eggyyget_lineno (void );

void eggyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int eggyywrap (void );
#else
extern int eggyywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( eggyytext, eggyyleng, 1, eggyyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( eggyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( eggyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, eggyyin))==0 && ferror(eggyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(eggyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int eggyylex (void);

#define YY_DECL int eggyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after eggyytext and eggyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 302 "lexer.lxx"



  if (initial_token != 0) {
    int t = initial_token;
    initial_token = 0;
    return t;
  }


#line 1434 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! eggyyin )
			eggyyin = stdin;

		if ( ! eggyyout )
			eggyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			eggyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				eggyy_create_buffer(eggyyin,YY_BUF_SIZE );
		}

		eggyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of eggyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 585 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1225 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 312 "lexer.lxx"
{
  // New line.  Save a copy of the line so we can print it out for the
  // benefit of the user in case we get an error.

  strncpy(current_line, eggyytext+1, max_error_width);
  current_line[max_error_width] = '\0';
  line_number++;
  col_number=0;

  // Return the whole line to the lexer, except the newline character,
  // which we eat.
  yyless(1);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 326 "lexer.lxx"
{ 
  // Eat whitespace.
  accept();
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 331 "lexer.lxx"
{ 
  // Eat C++-style comments.
  accept();
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 336 "lexer.lxx"
{
  // Eat C-style comments.
  accept();
  eat_c_comment(); 
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 342 "lexer.lxx"
{
  // Send curly braces as themselves.
  accept(); 
  return eggyytext[0];
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 350 "lexer.lxx"
{
  accept();
  return ANIMPRELOAD;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 354 "lexer.lxx"
{
  accept();
  return AUX;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 358 "lexer.lxx"
{
  accept();
  return BEZIERCURVE;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 362 "lexer.lxx"
{
  accept();
  return BFACE;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 366 "lexer.lxx"
{
  accept();
  return BILLBOARD;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 370 "lexer.lxx"
{
  accept();
  return BILLBOARDCENTER;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 374 "lexer.lxx"
{
  accept();
  return BINORMAL;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 378 "lexer.lxx"
{
  accept();
  return BUNDLE;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 382 "lexer.lxx"
{
  accept();
  return SCALAR;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 386 "lexer.lxx"
{
  accept();
  return CLOSED;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 390 "lexer.lxx"
{
  accept();
  return COLLIDE;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 394 "lexer.lxx"
{
  accept();
  return COMMENT;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 398 "lexer.lxx"
{
  accept();
  return COMPONENT;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 402 "lexer.lxx"
{
  accept();
  return COORDSYSTEM;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 406 "lexer.lxx"
{
  accept();
  return CV;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 410 "lexer.lxx"
{
  accept();
  return DART;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 414 "lexer.lxx"
{
  accept();
  return DNORMAL;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 418 "lexer.lxx"
{
  accept();
  return DRGBA;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 422 "lexer.lxx"
{
  accept();
  return DUV;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 426 "lexer.lxx"
{
  accept();
  return DXYZ;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 430 "lexer.lxx"
{
  accept();
  return DCS;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 434 "lexer.lxx"
{
  accept();
  return DISTANCE;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 438 "lexer.lxx"
{
  accept();
  return DTREF;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 442 "lexer.lxx"
{
  accept();
  return DYNAMICVERTEXPOOL;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 446 "lexer.lxx"
{
  accept();
  return EXTERNAL_FILE;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 450 "lexer.lxx"
{
  accept();
  return GROUP;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 454 "lexer.lxx"
{
  accept();
  return DEFAULTPOSE;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 458 "lexer.lxx"
{
  accept();
  return JOINT;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 462 "lexer.lxx"
{
  accept();
  return KNOTS;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 466 "lexer.lxx"
{
  accept();
  return INCLUDE;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 470 "lexer.lxx"
{
  accept();
  return INSTANCE;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 474 "lexer.lxx"
{
  accept();
  return LINE;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 478 "lexer.lxx"
{
  accept();
  return LOOP;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 482 "lexer.lxx"
{
  accept();
  return MATERIAL;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 486 "lexer.lxx"
{
  accept();
  return MATRIX3;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 490 "lexer.lxx"
{
  accept();
  return MATRIX4;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 494 "lexer.lxx"
{
  accept();
  return MODEL;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 498 "lexer.lxx"
{
  accept();
  return MREF;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 502 "lexer.lxx"
{
  accept();
  return NORMAL;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 506 "lexer.lxx"
{
  accept();
  return NURBSCURVE;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 510 "lexer.lxx"
{
  accept();
  return NURBSSURFACE;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 514 "lexer.lxx"
{
  accept();
  return OBJECTTYPE;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 518 "lexer.lxx"
{
  accept();
  return ORDER;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 522 "lexer.lxx"
{
  accept();
  return OUTTANGENT;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 526 "lexer.lxx"
{
  accept();
  return PATCH;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 530 "lexer.lxx"
{
  accept();
  return POINTLIGHT;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 534 "lexer.lxx"
{
  accept();
  return POLYGON;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 538 "lexer.lxx"
{
  accept();
  return REF;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 542 "lexer.lxx"
{
  accept();
  return RGBA;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 546 "lexer.lxx"
{
  accept();
  return ROTATE;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 550 "lexer.lxx"
{
  accept();
  return ROTX;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 554 "lexer.lxx"
{
  accept();
  return ROTY;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 558 "lexer.lxx"
{
  accept();
  return ROTZ;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 562 "lexer.lxx"
{
  accept();
  return SANIM;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 566 "lexer.lxx"
{
  accept();
  return SCALAR;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 570 "lexer.lxx"
{
  accept();
  return SCALE;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 574 "lexer.lxx"
{
  accept();
  return SEQUENCE;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 578 "lexer.lxx"
{
  accept();
  return SHADING;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 582 "lexer.lxx"
{
  accept();
  return SWITCH;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 586 "lexer.lxx"
{
  accept();
  return SWITCHCONDITION;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 590 "lexer.lxx"
{
  accept();
  return TABLE;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 594 "lexer.lxx"
{
  accept();
  return TABLE_V;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 598 "lexer.lxx"
{
  accept();
  return TAG;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 602 "lexer.lxx"
{
  accept();
  return TANGENT;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 606 "lexer.lxx"
{
  accept();
  return TEXLIST;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 610 "lexer.lxx"
{
  accept();
  return TEXTURE;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 614 "lexer.lxx"
{
  accept();
  return TLENGTHS;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 618 "lexer.lxx"
{
  accept();
  return TRANSFORM;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 622 "lexer.lxx"
{
  accept();
  return TRANSLATE;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 626 "lexer.lxx"
{
  accept();
  return TREF;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 630 "lexer.lxx"
{
  accept();
  return TRIANGLEFAN;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 634 "lexer.lxx"
{
  accept();
  return TRIANGLESTRIP;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 638 "lexer.lxx"
{
  accept();
  return TRIM;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 642 "lexer.lxx"
{
  accept();
  return TXT;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 646 "lexer.lxx"
{
  accept();
  return UKNOTS;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 650 "lexer.lxx"
{
  accept();
  return UKNOTS;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 654 "lexer.lxx"
{
  accept();
  return UV;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 658 "lexer.lxx"
{
  accept();
  return VKNOTS;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 662 "lexer.lxx"
{
  accept();
  return VKNOTS;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 666 "lexer.lxx"
{
  accept();
  return VERTEX;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 670 "lexer.lxx"
{
  accept();
  return VERTEXANIM;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 674 "lexer.lxx"
{
  accept();
  return VERTEXPOOL;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 678 "lexer.lxx"
{
  accept();
  return VERTEXREF;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 682 "lexer.lxx"
{
  accept();
  return XFMANIM;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 686 "lexer.lxx"
{
  accept();
  return XFMSANIM;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 693 "lexer.lxx"
{ 
  // An integer or floating-point number.
  accept(); 
  eggyylval._number = patof(eggyytext); 
  eggyylval._string = eggyytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 701 "lexer.lxx"
{
  // A hexadecimal integer number.
  accept(); 
  eggyylval._ulong = strtoul(eggyytext+2, NULL, 16);
  eggyylval._string = eggyytext;
  return EGG_ULONG; 
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 709 "lexer.lxx"
{
  // A binary integer number.
  accept(); 
  eggyylval._ulong = strtoul(eggyytext+2, NULL, 2);
  eggyylval._string = eggyytext;
  return EGG_ULONG; 
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 717 "lexer.lxx"
{
  // not-a-number.  These sometimes show up in egg files accidentally.
  accept(); 
  memset(&eggyylval._number, 0, sizeof(eggyylval._number));
  *(unsigned long *)&eggyylval._number = strtoul(eggyytext+3, NULL, 0);
  eggyylval._string = eggyytext;
  return EGG_NUMBER;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 726 "lexer.lxx"
{ 
  // infinity.  As above.
  accept(); 
  eggyylval._number = HUGE_VAL;
  eggyylval._string = eggyytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 734 "lexer.lxx"
{
  // minus infinity.  As above.
  accept(); 
  eggyylval._number = -HUGE_VAL;
  eggyylval._string = eggyytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 742 "lexer.lxx"
{ 
  // infinity, on Win32.  As above.
  accept(); 
  eggyylval._number = HUGE_VAL;
  eggyylval._string = eggyytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 750 "lexer.lxx"
{
  // minus infinity, on Win32.  As above.
  accept(); 
  eggyylval._number = -HUGE_VAL;
  eggyylval._string = eggyytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 759 "lexer.lxx"
{
  // Quoted string.
  accept();
  eggyylval._string = scan_quoted_string();
  return EGG_STRING;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 766 "lexer.lxx"
{ 
  // Unquoted string.
  accept();
  eggyylval._string = eggyytext;
  return EGG_STRING;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 772 "lexer.lxx"
ECHO;
	YY_BREAK
#line 2363 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed eggyyin at a new source and called
			 * eggyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = eggyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( eggyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * eggyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of eggyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					eggyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			eggyyrestart(eggyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) eggyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 585 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 585 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 584);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up eggyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					eggyyrestart(eggyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( eggyywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve eggyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void eggyyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        eggyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            eggyy_create_buffer(eggyyin,YY_BUF_SIZE );
	}

	eggyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	eggyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void eggyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		eggyypop_buffer_state();
	 *		eggyypush_buffer_state(new_buffer);
     */
	eggyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	eggyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (eggyywrap()) processing, but the only time this flag
	 * is looked at is after eggyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void eggyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	eggyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE eggyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) eggyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in eggyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) eggyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in eggyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	eggyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with eggyy_create_buffer()
 * 
 */
    void eggyy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		eggyyfree((void *) b->yy_ch_buf  );

	eggyyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a eggyyrestart() or at EOF.
 */
    static void eggyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	eggyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then eggyy_init_buffer was _probably_
     * called from eggyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void eggyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		eggyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void eggyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	eggyyensure_buffer_stack();

	/* This block is copied from eggyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from eggyy_switch_to_buffer. */
	eggyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void eggyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	eggyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		eggyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void eggyyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)eggyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in eggyyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)eggyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in eggyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE eggyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) eggyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in eggyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	eggyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to eggyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       eggyy_scan_bytes() instead.
 */
YY_BUFFER_STATE eggyy_scan_string (yyconst char * yystr )
{
    
	return eggyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to eggyylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE eggyy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) eggyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in eggyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = eggyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in eggyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up eggyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		eggyytext[eggyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = eggyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		eggyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int eggyyget_lineno  (void)
{
        
    return eggyylineno;
}

/** Get the input stream.
 * 
 */
FILE *eggyyget_in  (void)
{
        return eggyyin;
}

/** Get the output stream.
 * 
 */
FILE *eggyyget_out  (void)
{
        return eggyyout;
}

/** Get the length of the current token.
 * 
 */
int eggyyget_leng  (void)
{
        return eggyyleng;
}

/** Get the current token.
 * 
 */

char *eggyyget_text  (void)
{
        return eggyytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void eggyyset_lineno (int  line_number )
{
    
    eggyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see eggyy_switch_to_buffer
 */
void eggyyset_in (FILE *  in_str )
{
        eggyyin = in_str ;
}

void eggyyset_out (FILE *  out_str )
{
        eggyyout = out_str ;
}

int eggyyget_debug  (void)
{
        return eggyy_flex_debug;
}

void eggyyset_debug (int  bdebug )
{
        eggyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from eggyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    eggyyin = stdin;
    eggyyout = stdout;
#else
    eggyyin = (FILE *) 0;
    eggyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * eggyylex_init()
     */
    return 0;
}

/* eggyylex_destroy is for both reentrant and non-reentrant scanners. */
int eggyylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		eggyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		eggyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	eggyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * eggyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *eggyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *eggyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void eggyyfree (void * ptr )
{
	free( (char *) ptr );	/* see eggyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 772 "lexer.lxx"
