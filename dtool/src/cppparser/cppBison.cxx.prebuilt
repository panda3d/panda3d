/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs


/* Copy the first part of user declarations.  */
#line 7 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:339  */


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppClosureType.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL;
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static CPPClosureType *current_closure = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#line 268 "built/tmp/cppBison.yxx.c" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "cppBison.yxx.h".  */
#ifndef YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    REAL = 258,
    INTEGER = 259,
    CHAR_TOK = 260,
    SIMPLE_STRING = 261,
    SIMPLE_IDENTIFIER = 262,
    STRING_LITERAL = 263,
    CUSTOM_LITERAL = 264,
    IDENTIFIER = 265,
    TYPENAME_IDENTIFIER = 266,
    TYPEPACK_IDENTIFIER = 267,
    SCOPING = 268,
    TYPEDEFNAME = 269,
    ELLIPSIS = 270,
    OROR = 271,
    ANDAND = 272,
    EQCOMPARE = 273,
    NECOMPARE = 274,
    LECOMPARE = 275,
    GECOMPARE = 276,
    LSHIFT = 277,
    RSHIFT = 278,
    POINTSAT_STAR = 279,
    DOT_STAR = 280,
    UNARY = 281,
    UNARY_NOT = 282,
    UNARY_NEGATE = 283,
    UNARY_MINUS = 284,
    UNARY_PLUS = 285,
    UNARY_STAR = 286,
    UNARY_REF = 287,
    POINTSAT = 288,
    SCOPE = 289,
    PLUSPLUS = 290,
    MINUSMINUS = 291,
    TIMESEQUAL = 292,
    DIVIDEEQUAL = 293,
    MODEQUAL = 294,
    PLUSEQUAL = 295,
    MINUSEQUAL = 296,
    OREQUAL = 297,
    ANDEQUAL = 298,
    XOREQUAL = 299,
    LSHIFTEQUAL = 300,
    RSHIFTEQUAL = 301,
    ATTR_LEFT = 302,
    ATTR_RIGHT = 303,
    KW_ALIGNAS = 304,
    KW_ALIGNOF = 305,
    KW_AUTO = 306,
    KW_BEGIN_PUBLISH = 307,
    KW_BLOCKING = 308,
    KW_BOOL = 309,
    KW_CATCH = 310,
    KW_CHAR = 311,
    KW_CHAR16_T = 312,
    KW_CHAR32_T = 313,
    KW_CLASS = 314,
    KW_CONST = 315,
    KW_CONSTEXPR = 316,
    KW_CONST_CAST = 317,
    KW_DECLTYPE = 318,
    KW_DEFAULT = 319,
    KW_DELETE = 320,
    KW_DOUBLE = 321,
    KW_DYNAMIC_CAST = 322,
    KW_ELSE = 323,
    KW_END_PUBLISH = 324,
    KW_ENUM = 325,
    KW_EXTENSION = 326,
    KW_EXTERN = 327,
    KW_EXPLICIT = 328,
    KW_PUBLISHED = 329,
    KW_FALSE = 330,
    KW_FINAL = 331,
    KW_FLOAT = 332,
    KW_FRIEND = 333,
    KW_FOR = 334,
    KW_GOTO = 335,
    KW_HAS_VIRTUAL_DESTRUCTOR = 336,
    KW_IF = 337,
    KW_INLINE = 338,
    KW_INT = 339,
    KW_IS_ABSTRACT = 340,
    KW_IS_BASE_OF = 341,
    KW_IS_CLASS = 342,
    KW_IS_CONSTRUCTIBLE = 343,
    KW_IS_CONVERTIBLE_TO = 344,
    KW_IS_DESTRUCTIBLE = 345,
    KW_IS_EMPTY = 346,
    KW_IS_ENUM = 347,
    KW_IS_FINAL = 348,
    KW_IS_FUNDAMENTAL = 349,
    KW_IS_POD = 350,
    KW_IS_POLYMORPHIC = 351,
    KW_IS_STANDARD_LAYOUT = 352,
    KW_IS_TRIVIAL = 353,
    KW_IS_UNION = 354,
    KW_LONG = 355,
    KW_MAKE_MAP_PROPERTY = 356,
    KW_MAKE_PROPERTY = 357,
    KW_MAKE_PROPERTY2 = 358,
    KW_MAKE_SEQ = 359,
    KW_MAKE_SEQ_PROPERTY = 360,
    KW_MUTABLE = 361,
    KW_NAMESPACE = 362,
    KW_NEW = 363,
    KW_NOEXCEPT = 364,
    KW_NULLPTR = 365,
    KW_OPERATOR = 366,
    KW_OVERRIDE = 367,
    KW_PRIVATE = 368,
    KW_PROTECTED = 369,
    KW_PUBLIC = 370,
    KW_REGISTER = 371,
    KW_REINTERPRET_CAST = 372,
    KW_RETURN = 373,
    KW_SHORT = 374,
    KW_SIGNED = 375,
    KW_SIZEOF = 376,
    KW_STATIC = 377,
    KW_STATIC_ASSERT = 378,
    KW_STATIC_CAST = 379,
    KW_STRUCT = 380,
    KW_TEMPLATE = 381,
    KW_THREAD_LOCAL = 382,
    KW_THROW = 383,
    KW_TRUE = 384,
    KW_TRY = 385,
    KW_TYPEDEF = 386,
    KW_TYPEID = 387,
    KW_TYPENAME = 388,
    KW_UNDERLYING_TYPE = 389,
    KW_UNION = 390,
    KW_UNSIGNED = 391,
    KW_USING = 392,
    KW_VIRTUAL = 393,
    KW_VOID = 394,
    KW_VOLATILE = 395,
    KW_WCHAR_T = 396,
    KW_WHILE = 397,
    START_CPP = 398,
    START_CONST_EXPR = 399,
    START_TYPE = 400
  };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define SIMPLE_STRING 261
#define SIMPLE_IDENTIFIER 262
#define STRING_LITERAL 263
#define CUSTOM_LITERAL 264
#define IDENTIFIER 265
#define TYPENAME_IDENTIFIER 266
#define TYPEPACK_IDENTIFIER 267
#define SCOPING 268
#define TYPEDEFNAME 269
#define ELLIPSIS 270
#define OROR 271
#define ANDAND 272
#define EQCOMPARE 273
#define NECOMPARE 274
#define LECOMPARE 275
#define GECOMPARE 276
#define LSHIFT 277
#define RSHIFT 278
#define POINTSAT_STAR 279
#define DOT_STAR 280
#define UNARY 281
#define UNARY_NOT 282
#define UNARY_NEGATE 283
#define UNARY_MINUS 284
#define UNARY_PLUS 285
#define UNARY_STAR 286
#define UNARY_REF 287
#define POINTSAT 288
#define SCOPE 289
#define PLUSPLUS 290
#define MINUSMINUS 291
#define TIMESEQUAL 292
#define DIVIDEEQUAL 293
#define MODEQUAL 294
#define PLUSEQUAL 295
#define MINUSEQUAL 296
#define OREQUAL 297
#define ANDEQUAL 298
#define XOREQUAL 299
#define LSHIFTEQUAL 300
#define RSHIFTEQUAL 301
#define ATTR_LEFT 302
#define ATTR_RIGHT 303
#define KW_ALIGNAS 304
#define KW_ALIGNOF 305
#define KW_AUTO 306
#define KW_BEGIN_PUBLISH 307
#define KW_BLOCKING 308
#define KW_BOOL 309
#define KW_CATCH 310
#define KW_CHAR 311
#define KW_CHAR16_T 312
#define KW_CHAR32_T 313
#define KW_CLASS 314
#define KW_CONST 315
#define KW_CONSTEXPR 316
#define KW_CONST_CAST 317
#define KW_DECLTYPE 318
#define KW_DEFAULT 319
#define KW_DELETE 320
#define KW_DOUBLE 321
#define KW_DYNAMIC_CAST 322
#define KW_ELSE 323
#define KW_END_PUBLISH 324
#define KW_ENUM 325
#define KW_EXTENSION 326
#define KW_EXTERN 327
#define KW_EXPLICIT 328
#define KW_PUBLISHED 329
#define KW_FALSE 330
#define KW_FINAL 331
#define KW_FLOAT 332
#define KW_FRIEND 333
#define KW_FOR 334
#define KW_GOTO 335
#define KW_HAS_VIRTUAL_DESTRUCTOR 336
#define KW_IF 337
#define KW_INLINE 338
#define KW_INT 339
#define KW_IS_ABSTRACT 340
#define KW_IS_BASE_OF 341
#define KW_IS_CLASS 342
#define KW_IS_CONSTRUCTIBLE 343
#define KW_IS_CONVERTIBLE_TO 344
#define KW_IS_DESTRUCTIBLE 345
#define KW_IS_EMPTY 346
#define KW_IS_ENUM 347
#define KW_IS_FINAL 348
#define KW_IS_FUNDAMENTAL 349
#define KW_IS_POD 350
#define KW_IS_POLYMORPHIC 351
#define KW_IS_STANDARD_LAYOUT 352
#define KW_IS_TRIVIAL 353
#define KW_IS_UNION 354
#define KW_LONG 355
#define KW_MAKE_MAP_PROPERTY 356
#define KW_MAKE_PROPERTY 357
#define KW_MAKE_PROPERTY2 358
#define KW_MAKE_SEQ 359
#define KW_MAKE_SEQ_PROPERTY 360
#define KW_MUTABLE 361
#define KW_NAMESPACE 362
#define KW_NEW 363
#define KW_NOEXCEPT 364
#define KW_NULLPTR 365
#define KW_OPERATOR 366
#define KW_OVERRIDE 367
#define KW_PRIVATE 368
#define KW_PROTECTED 369
#define KW_PUBLIC 370
#define KW_REGISTER 371
#define KW_REINTERPRET_CAST 372
#define KW_RETURN 373
#define KW_SHORT 374
#define KW_SIGNED 375
#define KW_SIZEOF 376
#define KW_STATIC 377
#define KW_STATIC_ASSERT 378
#define KW_STATIC_CAST 379
#define KW_STRUCT 380
#define KW_TEMPLATE 381
#define KW_THREAD_LOCAL 382
#define KW_THROW 383
#define KW_TRUE 384
#define KW_TRY 385
#define KW_TYPEDEF 386
#define KW_TYPEID 387
#define KW_TYPENAME 388
#define KW_UNDERLYING_TYPE 389
#define KW_UNION 390
#define KW_UNSIGNED 391
#define KW_USING 392
#define KW_VIRTUAL 393
#define KW_VOID 394
#define KW_VOLATILE 395
#define KW_WCHAR_T 396
#define KW_WHILE 397
#define START_CPP 398
#define START_CONST_EXPR 399
#define START_TYPE 400

/* Value type.  */

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int cppyyparse (void);

#endif /* !YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 617 "built/tmp/cppBison.yxx.c" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  104
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   7153

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  170
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  110
/* YYNRULES -- Number of rules.  */
#define YYNRULES  761
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1557

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   400

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   168,     2,     2,     2,   161,   154,     2,
     164,   166,   159,   157,   147,   158,   163,   160,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   149,   148,
     155,   150,   156,   151,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   165,     2,   169,   153,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   146,   152,   167,   162,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   449,   449,   450,   454,   461,   462,   463,   467,   468,
     472,   476,   480,   493,   492,   504,   505,   506,   507,   508,
     509,   510,   523,   532,   536,   544,   548,   552,   573,   600,
     621,   650,   686,   698,   719,   755,   777,   813,   835,   846,
     860,   859,   874,   878,   883,   887,   898,   902,   906,   910,
     914,   918,   922,   926,   930,   934,   938,   942,   947,   951,
     958,   959,   963,   964,   965,   970,   969,   985,   995,   994,
    1011,  1019,  1027,  1038,  1054,  1053,  1068,  1083,  1092,  1107,
    1106,  1131,  1130,  1158,  1157,  1188,  1187,  1206,  1205,  1226,
    1225,  1257,  1256,  1282,  1295,  1299,  1303,  1307,  1320,  1324,
    1328,  1332,  1336,  1341,  1346,  1350,  1354,  1358,  1365,  1369,
    1373,  1377,  1381,  1385,  1389,  1393,  1397,  1401,  1405,  1409,
    1413,  1417,  1421,  1425,  1429,  1433,  1437,  1441,  1445,  1449,
    1453,  1457,  1461,  1465,  1469,  1473,  1477,  1481,  1485,  1489,
    1493,  1497,  1501,  1505,  1509,  1513,  1517,  1524,  1525,  1526,
    1530,  1532,  1531,  1539,  1540,  1544,  1545,  1549,  1555,  1564,
    1565,  1569,  1573,  1577,  1581,  1587,  1593,  1599,  1606,  1611,
    1620,  1624,  1629,  1637,  1649,  1653,  1667,  1682,  1687,  1692,
    1697,  1702,  1707,  1712,  1717,  1723,  1722,  1753,  1763,  1773,
    1777,  1781,  1790,  1794,  1802,  1806,  1811,  1815,  1820,  1828,
    1833,  1841,  1845,  1850,  1854,  1859,  1867,  1872,  1880,  1884,
    1891,  1895,  1902,  1906,  1910,  1914,  1918,  1925,  1929,  1933,
    1937,  1941,  1945,  1952,  1953,  1954,  1958,  1961,  1962,  1963,
    1967,  1972,  1978,  1984,  1989,  1995,  2001,  2005,  2016,  2020,
    2030,  2034,  2038,  2043,  2048,  2053,  2058,  2063,  2068,  2076,
    2080,  2084,  2089,  2094,  2099,  2104,  2109,  2114,  2119,  2125,
    2133,  2138,  2143,  2148,  2153,  2158,  2163,  2168,  2173,  2178,
    2184,  2192,  2196,  2201,  2206,  2211,  2216,  2221,  2226,  2231,
    2236,  2244,  2248,  2253,  2258,  2263,  2268,  2273,  2278,  2283,
    2288,  2293,  2299,  2306,  2313,  2323,  2327,  2335,  2339,  2343,
    2347,  2351,  2367,  2383,  2392,  2396,  2406,  2413,  2424,  2428,
    2436,  2440,  2444,  2448,  2452,  2468,  2484,  2502,  2511,  2515,
    2525,  2532,  2536,  2544,  2548,  2564,  2580,  2589,  2599,  2606,
    2610,  2618,  2622,  2627,  2631,  2639,  2640,  2641,  2642,  2647,
    2646,  2671,  2670,  2700,  2701,  2708,  2709,  2713,  2714,  2718,
    2722,  2726,  2730,  2734,  2738,  2742,  2746,  2750,  2754,  2761,
    2769,  2773,  2777,  2782,  2790,  2794,  2801,  2802,  2807,  2814,
    2815,  2820,  2828,  2832,  2836,  2843,  2847,  2851,  2859,  2858,
    2881,  2880,  2903,  2904,  2908,  2914,  2921,  2930,  2931,  2932,
    2936,  2940,  2944,  2948,  2952,  2956,  2961,  2966,  2971,  2976,
    2980,  2985,  2994,  2999,  3007,  3011,  3015,  3023,  3033,  3033,
    3043,  3044,  3048,  3049,  3050,  3051,  3052,  3053,  3054,  3055,
    3056,  3057,  3058,  3059,  3059,  3059,  3060,  3060,  3060,  3060,
    3061,  3061,  3061,  3061,  3061,  3062,  3062,  3062,  3063,  3063,
    3063,  3063,  3063,  3064,  3064,  3064,  3064,  3064,  3065,  3065,
    3066,  3066,  3066,  3066,  3066,  3067,  3067,  3067,  3067,  3067,
    3068,  3068,  3068,  3068,  3069,  3069,  3069,  3069,  3069,  3070,
    3070,  3070,  3070,  3070,  3071,  3071,  3071,  3071,  3071,  3071,
    3072,  3072,  3072,  3072,  3072,  3073,  3073,  3073,  3073,  3074,
    3074,  3074,  3074,  3075,  3075,  3075,  3075,  3075,  3076,  3076,
    3076,  3076,  3077,  3077,  3077,  3077,  3077,  3078,  3078,  3078,
    3078,  3079,  3079,  3079,  3079,  3079,  3080,  3080,  3083,  3083,
    3083,  3083,  3083,  3083,  3083,  3083,  3083,  3083,  3083,  3084,
    3084,  3084,  3084,  3084,  3084,  3084,  3084,  3084,  3084,  3085,
    3085,  3089,  3093,  3100,  3104,  3111,  3115,  3122,  3126,  3130,
    3134,  3138,  3142,  3146,  3150,  3162,  3166,  3170,  3174,  3178,
    3182,  3186,  3190,  3194,  3198,  3202,  3206,  3210,  3214,  3218,
    3222,  3226,  3230,  3234,  3238,  3242,  3246,  3250,  3254,  3258,
    3262,  3266,  3270,  3274,  3278,  3282,  3290,  3294,  3298,  3302,
    3306,  3310,  3314,  3324,  3334,  3340,  3346,  3352,  3358,  3364,
    3370,  3377,  3384,  3391,  3398,  3404,  3410,  3414,  3426,  3430,
    3434,  3438,  3442,  3453,  3464,  3468,  3472,  3476,  3480,  3484,
    3488,  3492,  3496,  3500,  3504,  3508,  3512,  3516,  3520,  3524,
    3528,  3532,  3536,  3540,  3544,  3548,  3552,  3556,  3560,  3564,
    3568,  3572,  3576,  3580,  3584,  3591,  3595,  3599,  3603,  3607,
    3611,  3615,  3619,  3623,  3629,  3635,  3639,  3645,  3652,  3656,
    3660,  3664,  3668,  3672,  3676,  3680,  3684,  3688,  3692,  3696,
    3700,  3704,  3708,  3712,  3716,  3730,  3734,  3738,  3742,  3746,
    3750,  3754,  3758,  3770,  3774,  3778,  3782,  3786,  3797,  3808,
    3812,  3816,  3820,  3824,  3828,  3832,  3836,  3840,  3844,  3848,
    3852,  3856,  3860,  3864,  3868,  3872,  3876,  3880,  3884,  3888,
    3892,  3896,  3900,  3904,  3908,  3912,  3916,  3920,  3924,  3931,
    3935,  3939,  3943,  3947,  3951,  3955,  3959,  3963,  3969,  3975,
    3983,  3987,  3991,  3995,  4002,  4012,  4018,  4024,  4034,  4046,
    4054,  4058,  4088,  4092,  4096,  4100,  4104,  4108,  4114,  4118,
    4122,  4126,  4130,  4141,  4145,  4149,  4153,  4161,  4165,  4169,
    4175,  4186
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK",
  "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL", "CUSTOM_LITERAL",
  "IDENTIFIER", "TYPENAME_IDENTIFIER", "TYPEPACK_IDENTIFIER", "SCOPING",
  "TYPEDEFNAME", "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE",
  "LECOMPARE", "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR",
  "DOT_STAR", "UNARY", "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS",
  "UNARY_PLUS", "UNARY_STAR", "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS",
  "MINUSMINUS", "TIMESEQUAL", "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL",
  "MINUSEQUAL", "OREQUAL", "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL",
  "RSHIFTEQUAL", "ATTR_LEFT", "ATTR_RIGHT", "KW_ALIGNAS", "KW_ALIGNOF",
  "KW_AUTO", "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL", "KW_CATCH",
  "KW_CHAR", "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS", "KW_CONST",
  "KW_CONSTEXPR", "KW_CONST_CAST", "KW_DECLTYPE", "KW_DEFAULT",
  "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH",
  "KW_ENUM", "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED",
  "KW_FALSE", "KW_FINAL", "KW_FLOAT", "KW_FRIEND", "KW_FOR", "KW_GOTO",
  "KW_HAS_VIRTUAL_DESTRUCTOR", "KW_IF", "KW_INLINE", "KW_INT",
  "KW_IS_ABSTRACT", "KW_IS_BASE_OF", "KW_IS_CLASS", "KW_IS_CONSTRUCTIBLE",
  "KW_IS_CONVERTIBLE_TO", "KW_IS_DESTRUCTIBLE", "KW_IS_EMPTY",
  "KW_IS_ENUM", "KW_IS_FINAL", "KW_IS_FUNDAMENTAL", "KW_IS_POD",
  "KW_IS_POLYMORPHIC", "KW_IS_STANDARD_LAYOUT", "KW_IS_TRIVIAL",
  "KW_IS_UNION", "KW_LONG", "KW_MAKE_MAP_PROPERTY", "KW_MAKE_PROPERTY",
  "KW_MAKE_PROPERTY2", "KW_MAKE_SEQ", "KW_MAKE_SEQ_PROPERTY", "KW_MUTABLE",
  "KW_NAMESPACE", "KW_NEW", "KW_NOEXCEPT", "KW_NULLPTR", "KW_OPERATOR",
  "KW_OVERRIDE", "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER",
  "KW_REINTERPRET_CAST", "KW_RETURN", "KW_SHORT", "KW_SIGNED", "KW_SIZEOF",
  "KW_STATIC", "KW_STATIC_ASSERT", "KW_STATIC_CAST", "KW_STRUCT",
  "KW_TEMPLATE", "KW_THREAD_LOCAL", "KW_THROW", "KW_TRUE", "KW_TRY",
  "KW_TYPEDEF", "KW_TYPEID", "KW_TYPENAME", "KW_UNDERLYING_TYPE",
  "KW_UNION", "KW_UNSIGNED", "KW_USING", "KW_VIRTUAL", "KW_VOID",
  "KW_VOLATILE", "KW_WCHAR_T", "KW_WHILE", "START_CPP", "START_CONST_EXPR",
  "START_TYPE", "'{'", "','", "';'", "':'", "'='", "'?'", "'|'", "'^'",
  "'&'", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'.'",
  "'('", "'['", "')'", "'}'", "'!'", "']'", "$accept", "grammar", "cpp",
  "constructor_inits", "constructor_init", "extern_c", "$@1",
  "declaration", "friend_declaration", "$@2", "storage_class",
  "attribute_specifiers", "attribute_specifier", "type_like_declaration",
  "$@3", "$@4", "multiple_instance_identifiers", "typedef_declaration",
  "$@5", "typedef_instance_identifiers", "constructor_prototype", "$@6",
  "$@7", "function_prototype", "$@8", "$@9", "$@10", "$@11", "$@12",
  "function_post", "function_operator", "more_template_declaration",
  "template_declaration", "$@13", "template_formal_parameters",
  "template_nonempty_formal_parameters", "typename_keyword",
  "template_formal_parameter", "template_formal_parameter_type",
  "instance_identifier", "$@14",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "maybe_comma_identifier",
  "function_parameter_list", "function_parameters",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "parameter_pack_identifier", "not_paren_empty_instance_identifier",
  "empty_instance_identifier", "type", "type_pack", "type_decl",
  "predefined_type", "var_type_decl", "full_type", "struct_attributes",
  "anonymous_struct", "$@15", "named_struct", "$@16", "maybe_final",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "enum", "enum_decl", "enum_element_type", "enum_body_trailing_comma",
  "enum_body", "enum_keyword", "struct_keyword", "namespace_declaration",
  "$@17", "$@18", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@19", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   123,    44,    59,    58,
      61,    63,   124,    94,    38,    60,    62,    43,    45,    42,
      47,    37,   126,    46,    40,    91,    41,   125,    33,    93
};
# endif

#define YYPACT_NINF -923

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-923)))

#define YYTABLE_NINF -757

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     136,  -923,  3707,  5786,    58,  4877,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,   -63,   -85,   -54,    20,    66,    72,
     -79,    78,   -12,  -923,  -923,    81,   129,   142,   146,   164,
     177,   187,   196,   203,   210,   227,   230,   232,   240,   242,
     244,   250,   266,   268,  6097,  -923,  -923,   100,   281,   287,
      23,   300,  -923,   295,   304,   307,  3707,  3707,  3707,  3707,
    3707,  1818,  2827,  3707,  3915,  -923,   326,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  5896,   310,  -923,    -3,  -923,
    -923,  4202,  7012,  7012,  -923,  5440,   311,  -923,  7012,  -923,
    -923,   337,   337,  -923,  -923,  -923,  -923,    15,    61,  -923,
    -923,  -923,  -923,  -923,  -923,   809,   314,  -923,  6988,  6988,
    6988,  -923,  6988,  5317,  6988,   170,  -923,  6979,   319,   322,
     324,   335,   338,  6988,  5237,   312,   321,   341,  6988,  6988,
     340,  6815,  6988,  6988,  5905,  6988,  6988,  -923,  -923,  -923,
    -923,  4341,  -923,  -923,  -923,  -923,  -923,  3707,  3707,  5786,
    3707,  3707,  3707,  3707,  5786,  3707,  5786,  3707,  5786,  3707,
    5786,  5786,  5786,  5786,  5786,  5786,  5786,  5786,  5786,  5786,
    5786,  5786,  5786,  5786,  5786,  3707,  -923,  -923,   342,  5440,
     343,   346,  5440,  -923,  -923,  5786,  3707,  3707,   347,  5405,
    5786,  1818,  3707,  3707,    76,    76,    76,    76,    76,   -63,
     -54,    20,    66,    72,    78,    81,   142,  4482,  5509,  5883,
    6759,   307,   339,   -88,  3915,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  5440,  5440,  -104,
     362,  -923,  -923,    76,  3707,  3707,  3707,  3707,  3707,  3707,
    3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,
    3707,  3707,  3707,  3707,  3707,  2769,  3707,  -923,  -923,   337,
     337,  2903,  -923,  -923,  -923,  7012,  -923,  -923,  -923,  -923,
    5786,  -923,   357,   417,   236,   337,   337,   236,   236,  4990,
     353,  -923,   358,  -923,  -923,  -923,  -923,  -923,  -923,  4576,
     371,  5178,  -923,  5440,   474,   379,   361,  2496,  5320,  6988,
    -923,  -923,  -923,  -923,  6988,  -923,  -923,  -923,  -923,  6907,
    5284,  -923,  5440,  5440,  5440,  5440,  5440,  -923,  -923,   382,
    -923,  -923,  -923,  -923,  -923,  3707,  -923,  4434,  -923,   376,
    -923,  4520,  -923,  5440,   223,  -923,  -923,   104,   370,  -923,
     374,  5982,  5440,   397,  -923,  5440,  -923,   198,   387,  -923,
    -923,  -923,  -923,  4617,  -923,  -923,   396,   418,  -923,   400,
     402,   403,   404,   405,   407,   419,   408,   420,   411,   412,
     415,   422,   436,   426,   -73,   437,   433,   434,   435,   439,
     440,   443,   448,   449,   450,   460,   462,  3707,  -923,  5786,
    3707,  -923,  6793,   446,   463,   464,  5440,   466,   467,   479,
     471,  4205,   472,   473,  3707,  3707,  -923,   581,  -923,   947,
     476,  3707,  -923,  -923,  4171,  5000,  5113,  5113,  1867,  1867,
     276,   276,  -923,  2653,  5043,  2049,  1570,  1867,  1867,   293,
     293,    76,    76,    76,  -923,  -923,   -72,  1648,  -923,  -923,
     475,  4589,   480,   236,   477,   486,  5440,   236,   236,   236,
     236,   236,   482,  -923,   353,  -923,   353,  -923,   482,   482,
    -923,   236,   809,  5872,  5757,   236,   236,   483,    33,  -923,
    1286,   355,  -923,  3707,  5440,   481,  -923,  -923,  -923,  -923,
    4576,   -26,   -22,   -16,   809,   487,    86,  -923,  -923,  -923,
     501,  6988,   809,  3841,   -63,   489,  4646,  -923,  -923,  -923,
     506,   509,   510,   511,   512,   515,  6291,  -923,  3860,  5608,
     199,   500,   198,  -923,  -923,   517,  -923,  5786,  -923,    29,
    3037,  6121,  1306,  -923,  5786,  -923,   502,   190,  -923,  -923,
    2635,  -923,  -923,  1069,  -923,   518,  5178,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,   504,  -923,   505,  -923,  -923,  -923,
    -923,  5786,  -923,  5786,  -923,  5786,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  4667,   513,   514,
    -923,   507,  -923,  -923,   519,  -923,  -923,   508,  -923,  -923,
    -923,  -923,    76,  3915,  -923,  5440,   362,  5637,  5228,  -923,
    3915,  3707,  -923,  -923,  -923,  -923,  -923,   482,   236,  -923,
     482,   482,   482,   482,   482,  3707,   -99,   622,  5896,  1286,
     355,  -923,   -69,   -29,  -923,  -923,  5666,   522,  1286,  1286,
    1286,  1286,  1286,  1286,   -61,  -923,  -923,   524,  5440,   355,
     355,   355,   355,   355,   355,    -6,   520,  3915,  -923,   -15,
    -923,   540,   639,  2496,  -923,   612,   809,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,   528,   544,   545,  -923,  -923,
    6097,  -923,  -923,   546,    32,   547,  -923,   539,  3707,  3707,
    3707,  3707,  1818,  3707,   542,    80,  -923,  -923,  4758,  -923,
     326,  -923,  6988,  6988,  6363,  -923,   696,   704,   709,   715,
     716,  -923,  -923,   378,   561,  -923,  -923,  -923,  -923,  1185,
    -923,   571,   582,  1562,  -923,  1175,  -923,  -923,    29,  -923,
    1069,  -923,   583,  5637,   574,  1069,  5637,   564,  4685,  1306,
     575,  1306,  1306,  1306,  1306,  1306,    49,  -923,  -923,   570,
    6435,  -923,  -923,  -923,  5440,   105,  -923,   577,  -923,   593,
     594,  3171,  3059,   586,  1069,  1069,  4274,  1069,  1069,  1069,
    1069,  -923,    11,   209,  -923,  4576,  -923,  3707,  3707,   580,
     584,   587,  -923,  -923,  -923,  3707,  -923,  3707,  -923,   588,
    -923,  6011,   809,  -923,  -923,  -923,  -923,  -923,  -923,   591,
    -923,  -923,   601,  -923,  3915,   482,   579,   596,  5757,  1286,
     355,   -61,    -6,   597,   598,  5228,  -923,  -923,  1286,   604,
     604,   604,   604,   604,   157,  3707,  -923,   355,  -923,   605,
     605,   605,   605,   605,   233,  3707,  -923,   608,  -923,  3707,
    -923,   600,  4703,  6507,  -923,   614,  -923,  -923,  5786,  5786,
    5786,   611,  5786,   613,  5491,  5786,  1818,    76,    76,    76,
      76,   610,   -67,    76,  -923,  -923,  3981,  3707,  3707,  3707,
    3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,
    3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,  3305,  3707,
    -923,  -923,  -923,  -923,   -59,   633,   635,   636,   638,  6579,
      13,  -923,  1175,  6867,  5608,  5440,   637,   630,  1175,  1175,
    1175,  1175,  1175,  1175,    -2,   605,  -923,   209,  -923,   626,
    1069,   216,   627,  -923,  -923,   253,  1306,   634,   634,   634,
     634,   634,  -923,  3707,  -923,  -923,  5637,   631,   277,  -923,
     -43,   652,   653,  -923,  2318,  -923,  -923,  -923,  3171,   640,
     656,  3915,  -923,  -923,  1069,   302,   302,   796,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,   643,   642,  -923,  -923,   302,   302,
     302,   237,   808,  -923,  3707,  -923,  2635,   668,  -923,   540,
     -55,   -47,  -923,  -923,  -923,   -41,   -21,  -923,  6097,   337,
     768,   367,  -923,  -923,  5637,  -923,   -61,    -6,  -923,  -923,
    5637,  5637,  -923,   604,   654,   648,   605,   658,   659,  3327,
    -923,  -923,  -923,  5299,   677,   680,  -923,   663,   675,   676,
    3707,   682,  5440,   667,   673,   684,   679,  4740,  3707,  -923,
    -923,  -923,  4171,  5000,  5113,  5113,  1867,  1867,   276,   276,
    -923,  3595,  5043,  2049,  1570,  1867,  1867,   293,   293,    76,
      76,    76,  -923,  -923,     6,  1837,  6651,   831,   694,   836,
     681,  -923,   839,   840,   842,  -923,   706,    -2,   605,  -923,
    -923,  -923,  -923,  -923,  -923,  5786,  1175,  4120,  -923,  -923,
     714,  -923,  -923,   256,   707,  -923,  -923,   634,  5637,   701,
     710,  -923,  -923,  5440,  3707,  3707,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,   708,  -923,
    3439,   302,  -923,  -923,  -923,  -923,  -923,  3841,   711,  3059,
    1069,  -923,  -923,  -923,  -923,  5228,   337,  -923,  -923,  -923,
       5,   712,   717,  -923,  -923,   718,   728,  5637,  -923,  5637,
    -923,  -923,  6130,  6189,  6203,  5440,   297,  -923,  -923,   862,
    -923,  5299,  -923,   731,   735,   734,   737,   736,  -923,  -923,
     740,  -923,  -923,    76,  3707,  -923,  -923,  -923,    17,  -923,
     760,   730,    42,   742,    53,  -923,  -923,  -923,   745,   727,
     759,   761,    40,   763,  4120,  4120,  4120,  4120,  4120,  1818,
    4120,  1494,  -923,  1069,   965,   756,  -923,   965,  5637,   757,
    -923,  -923,   758,  -923,   771,   762,  2118,  -923,  3171,  3915,
     764,  -923,  -923,   793,  -923,   775,  -923,  -923,  -923,  -923,
    -923,   776,   777,  6217,  -923,  6217,  -923,  6217,  -923,  -923,
    6217,  6217,  6217,  -923,  6723,  -923,  3707,  3707,  -923,  3707,
    -923,  3707,  3915,   934,   797,   940,  -923,   942,   805,   806,
     946,   813,  5786,  5786,  5786,  5786,   799,  5522,  5786,   124,
     124,   124,   124,   124,   807,    62,   124,  4120,  4120,  4120,
    4120,  4120,  4120,  4120,  4120,  4120,  4120,  4120,  4120,  4120,
    4120,  4120,  4120,  4120,  4120,  4120,  3573,  3707,  -923,  -923,
    5637,   812,  -923,   965,  -923,  -923,   969,  -923,   819,  -923,
    -923,  -923,  5228,  5228,  5228,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,    91,    96,    99,   135,   841,  -923,
     821,   850,  -923,  -923,   137,  -923,   833,   844,   845,   846,
    5440,   838,   847,   851,  4120,  -923,  4356,  5059,  1194,  1194,
    1898,  1898,   699,   699,  -923,  1391,  5075,  5099,  1449,   430,
     430,   124,   124,   124,  -923,  -923,   138,  1945,  5637,   848,
    -923,   965,  -923,  -923,   965,   849,  -923,  -923,  -923,   965,
     965,  -923,  -923,  -923,  -923,   998,   852,   867,  1007,  1009,
     872,  -923,   857,   858,   863,   864,  -923,  -923,   868,   124,
    4120,  -923,  -923,   865,  -923,   965,  -923,  -923,   880,  -923,
     870,   871,  -923,  3707,  3707,  3707,  -923,  3707,  1494,  -923,
    5228,  -923,   885,   886,   139,   150,   155,   171,  5228,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   761,     0,     0,     0,   761,     5,   649,   645,   648,
     757,   758,   651,   652,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   647,   653,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   655,   654,     0,     0,     0,
       0,     0,   646,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   761,     0,     3,   586,   650,   296,   307,   306,
     390,   391,   393,   394,   375,     0,     0,   405,   372,   404,
     399,   396,   395,   398,   376,     0,     0,   377,   397,   407,
     392,   761,   761,     4,   298,   299,   300,     0,   361,   761,
     295,   387,   388,   389,     1,     0,     0,    21,   761,   761,
     761,    22,   761,   761,   761,     0,    40,   761,     0,     0,
       0,     0,     0,   761,     0,     0,     0,     0,   761,   761,
       0,   761,   761,   761,     0,   761,   761,     6,    17,     7,
      19,     0,    15,    16,    18,    71,    42,   761,   761,     0,
     761,   761,   761,   761,     0,   761,     0,   761,     0,   761,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   761,   322,   328,     0,     0,
       0,   610,     0,   761,   321,     0,   761,   761,     0,     0,
       0,     0,   761,   761,   619,   617,   616,   618,   615,   296,
     390,   391,   393,   394,   405,   404,   399,   396,   395,   398,
     397,   392,     0,     0,   545,   742,   743,   744,   752,   745,
     748,   746,   750,   749,   747,   751,   731,   732,     0,     0,
     761,   737,   730,   614,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   759,   760,   761,
     761,     0,   373,   374,   406,   396,   401,   400,   403,   297,
       0,   402,     0,   282,   761,   761,   761,   761,   761,   761,
       0,   331,   281,   333,   761,   753,   754,   755,   756,     0,
     363,     0,   335,     0,     0,    60,    62,     0,   761,   761,
      54,    43,    53,    55,   761,    44,   150,    49,    23,   761,
       0,    47,     0,     0,     0,     0,     0,    52,   761,     0,
      26,    25,    24,    50,    46,     0,   154,     0,   153,     0,
      56,     0,    20,     0,     0,    48,    51,   330,   309,   320,
       0,     0,     0,     0,    13,     0,    68,     0,   329,    65,
     311,   312,   313,   361,   761,   308,     0,   544,   543,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
     761,   325,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   644,   735,   738,     0,
     761,     0,   733,   210,   628,   629,   630,   631,   632,   633,
     636,   637,   643,     0,   625,   626,   627,   634,   635,   623,
     624,   620,   621,   622,   642,   641,     0,     0,   332,   334,
       0,     0,     0,   761,   283,     0,   272,   761,   761,   761,
     761,   761,   288,   271,     0,   284,     0,   285,   287,   286,
     195,   761,     0,     0,     0,   761,   761,     0,   196,   199,
     761,     0,   194,   761,   369,     0,   366,   365,   360,   364,
       0,   742,   743,   744,     0,     0,   746,   339,   301,   341,
       0,   761,     0,   761,   309,     0,     0,    45,    41,   761,
       0,     0,     0,     0,     0,     0,   761,   378,     0,   761,
     330,   309,     0,   329,    74,     0,   384,     0,    79,    81,
       0,     0,   761,   310,     0,   761,     0,     0,   408,   217,
       0,    70,    67,     0,   316,   363,     0,   593,   592,   609,
     599,   595,   597,   598,     0,   605,     0,   604,   658,   594,
     659,     0,   661,     0,   662,     0,   665,   666,   667,   668,
     669,   670,   671,   672,   673,   674,   601,     0,     0,     0,
     324,     0,   600,   603,     0,   607,   606,     0,   612,   613,
     602,   596,   587,   546,   736,     0,   761,   761,   761,    94,
     211,     0,   640,   639,   304,   303,   305,   289,   761,   273,
     278,   274,   275,   277,   276,   761,     0,     0,     0,   761,
       0,   236,     0,     0,   761,   198,     0,     0,   761,   761,
     761,   761,   761,   761,   761,   250,   249,     0,   260,     0,
       0,     0,     0,     0,     0,   761,     0,   542,   541,   370,
     359,   302,     0,     0,   761,   761,     0,    57,    61,   723,
     719,   722,   725,   726,   202,     0,     0,     0,   721,   727,
       0,   729,   728,     0,     0,     0,   720,     0,     0,     0,
       0,     0,     0,     0,     0,   203,   238,   206,   239,   675,
     724,   201,   761,   761,   761,   380,     0,     0,     0,     0,
       0,   382,   761,     0,     0,   171,   172,   173,   159,     0,
     160,     0,   156,   161,   157,   761,   170,   155,     0,    76,
       0,   386,     0,   761,     0,     0,   761,     0,     0,   761,
       0,   761,   761,   761,   761,   761,     0,   241,   240,     0,
     761,    83,   408,   212,     0,     0,    69,     0,   761,     0,
       0,   761,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    66,   761,   761,   174,     0,   314,     0,     0,     0,
       0,     0,   326,   327,   611,     0,   608,     0,   734,     0,
     101,     0,     0,    95,   103,    98,   102,    97,    99,     0,
      96,   100,     0,   189,   638,   279,     0,     0,     0,   761,
       0,   761,   761,     0,     0,   761,   197,   200,   761,   255,
     251,   252,   254,   253,     0,   761,   230,     0,   261,   266,
     262,   263,   265,   264,     0,   761,   233,   290,   367,     0,
     336,     0,     0,   761,   344,   761,   343,    64,     0,     0,
       0,   685,     0,     0,     0,     0,     0,   693,   692,   691,
     690,     0,     0,   689,    63,   205,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      59,    58,   383,   761,     0,   761,     0,     0,     0,   761,
       0,    39,   761,   761,     0,   164,   162,     0,   761,   761,
     761,   761,   761,   761,   761,   168,    75,   761,   385,     0,
       0,     0,     0,   318,   317,     0,   761,   246,   242,   243,
     245,   244,    89,   761,   319,    14,   761,     0,     0,     8,
       0,     0,     0,   218,   409,   410,   220,   221,   761,     0,
     224,   226,   223,   219,     0,   181,   177,     0,   118,   119,
     120,   121,   122,   123,   126,   127,   142,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   146,
     145,   129,   128,   115,   117,   116,   124,   125,   113,   114,
     110,   111,   112,   109,     0,     0,   108,   175,   178,   180,
     179,     0,     0,   185,   761,   187,     0,     0,    72,   315,
       0,     0,   660,   663,   664,     0,     0,   761,     0,   761,
       0,     0,   408,   280,   761,   237,   761,   761,   231,   234,
     761,   761,   291,   256,   259,     0,   267,   270,     0,   371,
     338,   337,   340,     0,     0,   346,   345,     0,     0,     0,
     761,     0,     0,     0,     0,     0,     0,     0,     0,   718,
     204,   207,   702,   703,   704,   705,   706,   707,   710,   711,
     717,     0,   699,   700,   701,   708,   709,   697,   698,   694,
     695,   696,   716,   715,     0,     0,   761,     0,     0,     0,
       0,   192,     0,     0,     0,   379,     0,   761,   169,   149,
     147,   152,   148,   158,   165,     0,   761,     0,   166,   208,
       0,    77,   761,     0,     0,   761,    91,   247,   761,     0,
       0,   213,   408,     0,   761,   761,   215,   216,   412,   413,
     417,   414,   422,   415,   416,   418,   419,   420,   421,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   490,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   761,   534,   535,   536,   527,   539,
     523,   524,   522,   529,   530,   518,   519,   520,   521,   528,
     526,   533,   531,   537,   532,   525,   538,   411,     0,   222,
     225,   182,   176,   144,   143,   184,   188,   761,     0,   211,
       0,   590,   589,   591,   588,   761,   761,   190,   107,   104,
       0,     0,     0,   232,   235,     0,     0,   761,   257,   761,
     268,   368,   750,     0,   749,     0,     0,   347,   349,   739,
     761,     0,   684,     0,     0,     0,     0,     0,   682,   681,
       0,   687,   688,   676,     0,   714,   713,   381,     0,    32,
     193,     0,     0,     0,     0,    38,   167,   163,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   209,   547,     0,    80,     0,    85,    82,   761,     0,
     248,   761,     0,     9,     0,     0,     0,   227,   761,   228,
       0,   183,    73,     0,   191,     0,   105,   656,   761,   761,
     761,     0,     0,     0,   352,     0,   351,     0,   350,   740,
       0,     0,     0,   741,   761,   348,     0,     0,   686,     0,
     683,     0,   712,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   562,
     560,   559,   561,   558,     0,     0,   557,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    78,    87,
     761,     0,   761,    84,   214,    12,    10,   540,     0,   761,
     408,   106,   761,   761,   761,   761,   761,   358,   357,   356,
     355,   354,   353,   342,     0,     0,     0,     0,   761,    33,
       0,     0,    35,    37,     0,    29,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   585,   571,   572,   573,   574,
     575,   576,   577,   578,   584,     0,   568,   569,   570,   566,
     567,   563,   564,   565,   583,   582,     0,     0,   761,     0,
     761,    90,    11,   229,   186,     0,   294,   293,   292,   258,
     269,   679,   678,   680,   677,     0,     0,     0,     0,     0,
       0,   556,     0,     0,     0,     0,   554,   553,     0,   548,
       0,   581,   580,     0,   761,    92,   657,   193,     0,    28,
       0,     0,    30,     0,     0,     0,   555,     0,   579,   761,
     761,    34,     0,     0,     0,     0,     0,     0,   761,    86,
      36,    31,   551,   550,   552,   549,    88
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -923,  -923,  -309,  -923,   -65,  -923,  -923,   733,  -118,  -923,
      89,  -439,   393,  -115,  -923,  -923,  -210,  -923,  -923,  -277,
    -923,  -923,  -923,   719,  -923,  -923,  -923,  -923,  -923,  -592,
    -923,  -923,  -109,  -923,  -923,  -923,  -923,   165,   352,  -663,
    -923,  -698,  -738,  -396,  -585,  -923,  -194,  -923,   -23,  -522,
    -923,  -505,  -922,  -923,  -461,   211,  -607,   246,    44,  -136,
     -82,   332,   197,  -282,  -642,   724,  1215,  -147,  -116,  -923,
     -71,  -923,  -923,  -923,  -923,  -225,   -64,  -923,  -463,  -923,
    -923,   -33,    -7,  -923,  -923,  -923,  -923,   -36,   -42,  -923,
    -923,  -702,  -923,  -156,  -923,  -571,  -124,   -60,   377,   306,
     305,  -923,  -923,  -923,   655,   -90,  1188,   245,  -488,    -1
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   918,   919,   138,   525,   139,   140,   309,
     141,   294,   295,   142,   533,   527,   751,   332,   710,   896,
     346,   713,   716,   347,   916,  1420,  1488,  1098,  1328,   588,
     977,  1081,   143,   329,   701,   702,   703,   704,   705,   752,
    1247,   753,   782,  1070,   467,   468,   674,   675,  1088,   412,
     736,   531,   929,   930,   469,   677,   726,   799,   809,   280,
     281,    91,    92,   348,   181,   349,    93,   291,    94,   644,
      95,   645,   825,  1024,  1025,  1277,    96,    97,   478,   474,
     475,    98,    99,   144,   692,   873,   145,   100,   101,   102,
     103,   737,   738,   924,  1237,   636,   356,   357,  1321,   214,
      65,   678,   679,   229,   230,  1278,  1279,   625,    66,   146
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       6,   213,   769,   611,   306,   680,  1238,   709,   184,   506,
     283,   182,   897,   326,   985,   495,   328,   641,   831,   257,
    1345,   258,   795,   607,   359,   350,   361,   362,   363,   364,
     917,   366,   676,   368,   786,   370,   392,   183,   188,   266,
     267,   268,   714,   409,   771,   642,   271,   833,   615,   513,
    -753,   386,   901,   648,  -754,  1386,   262,  1012,   104,   405,
    -755,   232,   394,   395,   768,   410,   605,   787,   402,   403,
     351,   285,   286,   287,   553,   405,   154,   352,   406,   149,
     405,   935,   936,   147,   978,   979,   980,   981,  1067,   411,
     282,   282,   405,   554,   592,   845,   605,   793,   292,  1039,
     405,   148,   806,  1104,   805,   355,   405,  1068,   353,   242,
     150,  1251,   905,   816,   907,   908,   909,   910,   911,  1252,
    -753,  1105,   263,  -753,  -754,  1253,   405,  -754,   899,   999,
    -755,   902,   818,  -755,   354,   819,   605,   794,   452,   454,
     456,   458,   459,   156,   411,  1254,   358,   358,  1087,   358,
     358,   358,   358,   405,   358,   797,   358,  1405,   358,   815,
     982,   284,  -756,   805,  1373,   266,   267,   268,   271,   921,
     922,  1346,  1295,   288,   358,   983,   984,   438,   439,  1076,
     616,   350,   292,  1374,   151,   358,   358,   189,   715,  1377,
     684,   358,   358,   455,   457,   436,   834,   300,   301,   302,
    1380,   303,   305,   307,  1387,   880,   311,   536,  1378,   405,
     289,   350,   317,   912,   913,   350,   730,   323,   324,  1381,
     327,   330,   331,   266,   335,   336,   351,   846,  1465,   413,
     152,   987,  -756,   352,  1015,  -756,   153,  1093,   405,   254,
     255,   256,   155,   405,  1018,   157,   405,   479,   988,   445,
     -93,   446,   -93,   447,   -93,   185,   351,  1501,   282,   282,
     351,   355,  1502,   352,   353,  1503,   569,   352,   518,  1008,
    1009,  1241,   260,   453,   282,   282,   453,   453,   472,     1,
       2,     3,   405,   476,  1509,   405,   405,  1415,  1416,  1417,
     354,   355,   989,   158,   353,   355,   448,   405,   353,  1097,
    1261,  1504,   405,  1510,  1521,  1552,   159,   597,    64,   242,
     160,   600,   601,   602,   603,   604,  1553,     6,   405,   308,
     354,  1554,   805,  1014,   354,   606,   242,  1005,   161,   612,
     613,  1100,   257,  1000,   258,   823,   732,  1555,   733,   734,
     735,   162,  1099,   290,   528,   -93,   529,   -93,   530,   -93,
     272,   163,   273,   292,   274,   528,  1256,   529,   680,   986,
     164,   821,   194,   195,   196,   197,   198,   165,   627,   233,
     628,   516,   629,   517,   166,  1090,   449,   215,   216,   217,
     983,   984,  1094,   879,    10,   676,    11,   305,   311,   358,
     450,   167,  1091,   497,   168,   451,   169,   275,   815,  1017,
    1332,   983,   984,  1245,   170,  1255,   171,   259,   172,   589,
    1360,  1361,  1362,  1248,   173,   630,  1428,  1096,   913,  1262,
     983,   984,  1325,  1102,  1103,  1265,  1266,   215,   216,   217,
     174,   218,   175,   249,   250,   251,   252,   253,   479,   254,
     255,   256,   453,   219,   220,   186,   453,   453,   453,   453,
     453,   187,   251,   252,   253,   190,   254,   255,   256,   191,
     453,   320,   785,  1405,   453,   453,   983,   984,   192,   626,
     321,   193,   638,   706,   261,   270,   471,   276,   297,   221,
     222,   218,   223,   312,  1263,  1264,   313,   224,   314,   225,
     322,   277,   681,   219,   220,   631,   278,   401,     6,   315,
    1324,   279,   316,  1327,   325,   404,   387,   389,   707,   632,
     390,   396,   411,  1329,   633,   635,   443,  1343,   473,   634,
     480,   728,   491,  -271,     6,   493,   492,   350,   507,   221,
     222,   509,   223,  1259,   519,   532,   489,   224,   520,   225,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   524,   437,   537,  1066,   405,   538,   441,   539,   540,
     541,   542,   351,   543,   545,   544,   546,   547,   548,   352,
     647,   549,  -272,   551,   555,   413,   472,   783,   550,  1412,
    1413,  1414,   552,  1415,  1416,  1417,   584,   453,   535,   556,
     557,   558,   571,   496,   638,   559,   560,   355,   626,   561,
     353,   470,   842,   589,   562,   563,   564,   626,   626,   626,
     626,   626,   626,   413,   184,   897,   565,   182,   566,   572,
     573,   508,   575,   576,   413,   577,   354,   578,   580,   581,
     587,   594,  -273,     6,   826,   598,   596,   605,   640,   614,
     646,   643,   685,   183,   792,   682,   686,   687,   688,   689,
     610,   471,   690,   706,   708,   711,   731,   755,   757,   758,
     788,   765,   767,   522,   810,   811,   812,   813,   814,   763,
     764,   798,  1351,   807,  1352,   766,  -362,   820,   824,   817,
     471,     6,   828,   567,  1496,  1497,  1498,   990,   991,   829,
     830,   832,   835,   836,   626,   995,   874,   996,   844,   881,
     582,   583,   472,   479,   875,   472,   624,   590,   728,   876,
     728,   728,   728,   728,   728,   877,   878,   883,  1495,   884,
     903,   898,  1405,   900,   906,   184,   914,   925,   182,  1423,
     932,   926,   927,  1421,   923,   934,   992,  1002,  1003,   895,
     993,   783,   413,   994,   997,  1001,  1432,  1433,  1434,   680,
    1004,  1010,  1011,  1023,   183,  1079,  1020,   727,  1080,   805,
     815,   870,   871,  -280,  1082,  1030,  1038,  1032,   754,   637,
    1069,   489,  1072,  1073,   471,  1074,   676,  1085,   626,  1086,
     413,   413,  1092,  1095,   783,   609,   470,   626,  1101,   913,
    1106,  1107,  1549,  1240,   638,   790,  1242,  1239,  1064,  1243,
    1556,  1244,  1246,   471,   638,  1250,  1258,  1268,  1267,   215,
     216,   217,  1269,  1280,  1026,   470,   718,  1281,  1270,  1282,
    1491,  1283,  1284,  1288,  1007,  1489,   742,  1494,  1286,  1289,
    1290,  1298,  1299,  1499,  1500,  1291,  1300,  1301,   706,  1302,
    1303,  1016,  1304,   719,  1305,   791,  1410,  1411,  1412,  1413,
    1414,  1323,  1415,  1416,  1417,   800,   801,   802,   803,   804,
    1330,  1326,     6,   218,  1071,  1337,  1331,  1363,  1376,  1347,
    1341,   626,  1383,  1348,  1349,   219,   220,   626,   626,   626,
     626,   626,   626,  1089,  1350,  1366,   413,   784,  1525,  1367,
    1368,  1369,  1370,  1523,  1371,   728,  1285,  1375,  1379,  1382,
     471,   637,   638,   471,  1384,   472,  1385,  1257,  1388,   470,
    1419,   221,   222,  1422,   223,  1424,  1078,   932,  1426,   224,
    1429,   225,  1540,   810,   811,   812,   813,   814,  1425,  1430,
     789,  1431,  1435,  1436,  1448,  1449,   293,  1548,   470,   822,
    1450,   894,  1451,  1452,  1453,   754,  1454,   215,   216,   217,
     754,  1455,   184,  1460,   727,   182,   727,   727,   727,   727,
     727,  1364,   327,  1464,   837,   838,   839,   840,  1490,   843,
    1334,  1335,   770,   638,  1492,   471,  1493,  1507,  1505,   754,
     754,   183,   754,   754,   754,   754,   589,  1508,   282,  1511,
    1512,  1513,  1514,   472,  1516,   413,   413,  1518,  1527,   472,
     472,   218,   772,  1517,  1524,  1529,  1526,  1530,  1528,  1531,
    1532,  1533,  1534,   219,   220,   773,   774,  1535,  1541,   358,
    1536,  1539,  1537,  1550,  1551,  1006,  1542,  1543,  1333,   827,
    1342,   775,   498,   471,  1013,   470,  1418,   931,   470,  1083,
     512,   882,  1506,  1340,  1306,   514,  1365,  1041,  1336,   221,
     222,     0,   223,     0,   586,     0,     0,   224,     0,   225,
       0,   776,     0,     0,   777,     0,  1089,   778,     0,   285,
     286,   287,   743,     0,     0,   626,   744,     0,     0,     0,
       0,   589,     0,   779,   589,     0,     0,   472,     0,     0,
       0,   585,     0,   358,   358,   780,   228,     0,     0,     0,
       0,   637,     0,   471,     0,     0,     0,     0,     0,   781,
     470,   637,     0,     0,     0,  1019,     0,     0,  1077,   745,
    1016,     0,     0,     0,     0,   800,   801,   802,   803,   804,
       0,     0,  1037,     0,     0,   754,     0,     0,     0,     0,
       0,   727,     0,  1042,  1043,  1044,  1045,  1046,  1047,  1048,
    1049,  1050,  1051,  1052,  1053,  1054,  1055,  1056,  1057,  1058,
    1059,  1060,  1061,  1062,  1344,  1065,     0,     0,   470,   754,
     746,   288,  1354,  1356,  1358,   285,   286,   287,   887,     0,
     628,     0,   888,     0,     0,   695,   696,   697,     0,     0,
       0,   471,     0,     0,     0,     0,     0,   471,   471,   747,
       0,     0,     0,   925,  1401,  1402,  1403,  1404,     0,   637,
       0,     0,     0,   748,     0,     0,     0,  1405,   749,     0,
       0,     0,     0,   750,   931,   889,     0,     0,     0,    70,
       0,    71,    72,    73,     0,     0,   681,     0,   470,     0,
     231,    77,     0,     0,   783,   282,     0,     0,     0,  1395,
       0,     0,    79,  1437,     0,  1438,   472,  1439,   472,    80,
    1440,  1441,  1442,   269,     0,     0,   212,     0,     0,     6,
       0,     0,     0,     0,     0,    81,     0,   288,     0,     0,
     637,     0,  1249,   296,     0,   471,   285,   286,   287,   617,
       0,     0,     0,   618,    82,    83,  1444,  1445,     0,  1446,
       0,  1447,   319,     0,     0,   890,   285,   286,   287,   720,
       0,    88,   334,   721,    89,     0,    90,   472,     0,   891,
     589,     0,  1013,     0,   892,     0,   470,   932,     0,   893,
       0,     0,   470,   470,  1293,     0,   619,   589,   589,   589,
       0,  1410,  1411,  1412,  1413,  1414,  1486,  1415,  1416,  1417,
       0,     0,     0,     0,   360,     0,   722,   388,     0,   365,
     391,   367,     0,   369,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,     0,  1322,     0,     0,     0,     0,     0,   288,     0,
     393,     0,     0,     0,   398,   399,   400,  1397,  1398,  1399,
    1400,  1401,  1402,  1403,  1404,   407,   408,     0,   288,   472,
       0,   589,     0,     0,  1405,     0,   620,     0,   589,     0,
     470,   783,   783,   783,   589,   589,     0,     0,     0,     0,
     621,     0,     0,     0,   471,   622,   723,  1071,     0,     0,
     623,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     724,   444,     0,     0,   471,   725,   471,  1399,  1400,  1401,
    1402,  1403,  1404,  1544,  1545,  1546,     0,  1547,     0,   488,
       0,   490,  1405,     0,     0,   442,     0,   472,     0,   589,
       0,     0,     0,     0,     0,   754,     0,     0,   500,     0,
     501,   502,   503,   504,   505,     0,     0,     0,     0,     0,
    1397,  1398,  1399,  1400,  1401,  1402,  1403,  1404,     0,     0,
       0,   515,     0,   589,     0,   471,     0,  1405,     0,     0,
     523,     0,     0,   526,     0,     0,     0,     0,   589,   783,
    1520,   534,  1406,  1407,  1408,  1409,  1339,   783,  1410,  1411,
    1412,  1413,  1414,     0,  1415,  1416,  1417,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   754,     0,
       0,     0,   215,   216,   217,     0,     0,   885,     0,   470,
     570,     0,     0,     0,   574,     0,     0,     0,   236,   237,
     238,   239,   240,   241,     0,     0,     0,   231,     0,   470,
    1372,   470,     0,   242,   568,     0,  1410,  1411,  1412,  1413,
    1414,     0,  1415,  1416,  1417,     0,     0,   471,     0,  1322,
    1322,  1322,  1322,  1322,     0,  1322,   218,     0,     0,     0,
       0,     0,     0,     0,   599,     0,     0,     0,   219,   220,
       0,     0,     0,     0,   931,  1406,  1407,  1408,  1409,     0,
     296,  1410,  1411,  1412,  1413,  1414,     0,  1415,  1416,  1417,
     470,     0,   639,     0,   234,   235,   236,   237,   238,   239,
     240,   241,   296,     0,   221,   222,     0,   223,     0,     0,
     296,   242,   224,     0,   225,   471,     0,     0,     0,     0,
       0,  1389,  1390,  1391,  1392,  1393,     0,  1396,     0,     0,
       0,     0,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,
    1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,
    1322,     0,     0,  1487,   756,   247,   248,   249,   250,   251,
     252,   253,   712,   254,   255,   256,     0,     0,     0,   729,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   470,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   759,     0,   760,  1322,
     761,     0,     0,   407,  1466,  1467,  1468,  1469,  1470,  1471,
    1472,  1473,  1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,
    1482,  1483,  1484,     0,     0,     0,     0,     0,     0,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
       0,   254,   255,   256,     0,     0,   808,   593,     0,     0,
     470,     7,     8,     9,    10,  1322,    11,    12,    13,   199,
      68,     0,     0,     0,   296,     0,     0,     0,     0,     0,
       0,  1519,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   234,   235,   236,   237,   238,   239,   240,
     241,     0,     0,     0,     0,     0,     0,     0,    15,    69,
     242,     0,   200,     0,   201,   202,   203,    74,    75,     0,
      20,    76,     0,     0,   204,    22,     0,   841,    78,   240,
     241,   886,     0,    23,    24,   205,     0,  1538,     0,    26,
     242,     0,   206,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,   207,     0,
    1403,  1404,   920,     0,     0,     0,    44,     0,    45,     0,
      46,  1405,     0,     0,     0,    47,     0,   208,   209,    50,
       0,     0,    51,    84,     0,     0,     0,    52,     0,     0,
      53,    85,    86,    87,   210,     0,     0,    89,     0,   211,
     296,   234,   235,   236,   237,   238,   239,   240,   241,     0,
       0,     0,    56,     0,     0,    57,    58,    59,   242,     0,
      60,     0,    61,    62,     0,     0,    63,     0,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,     0,
     254,   255,   256,     0,     0,     0,  1296,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   249,   250,   251,   252,   253,     0,
     254,   255,   256,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1027,  1028,  1029,     0,  1031,     0,  1034,
    1035,  1036,     0,     0,     0,  1410,  1411,  1412,  1413,  1414,
       0,  1415,  1416,  1417,     0,     0,     0,   236,   237,   238,
     239,   240,   241,  1084,     0,     0,     0,     0,     0,     0,
       0,     0,   242,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,     0,   254,   255,
     256,     0,     0,     0,  1522,     0,     0,     0,     0,     0,
       0,  1108,  1109,  1110,  1111,  1112,  1113,  1114,  1115,  1116,
    1117,  1118,     0,  1119,  1120,  1121,  1122,  1123,  1124,  1125,
    1126,  1127,  1128,  1129,     0,     0,     0,     0,     0,     0,
       0,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,  1138,
    1139,  1140,  1141,  1142,  1143,  1144,  1145,  1146,  1147,  1148,
       0,     0,  1149,  1150,  1151,  1152,  1153,  1154,  1155,  1156,
    1157,  1158,  1159,  1160,  1161,  1162,  1163,     0,  1164,  1260,
    1165,  1166,  1167,  1168,  1169,  1170,  1171,  1172,  1173,     0,
    1174,  1175,  1176,   246,   247,   248,   249,   250,   251,   252,
     253,     0,   254,   255,   256,     0,     0,     0,  1177,     0,
    1287,     0,     0,     0,  1178,  1179,  1180,     0,  1181,  1182,
    1183,  1184,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,
    1193,  1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,
    1203,  1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,
    1213,     0,     0,     0,  1214,  1215,  1216,  1217,  1218,  1219,
    1220,  1221,  1222,  1223,  1224,  1225,  1226,  1227,  1228,  1229,
    1230,  1231,  1232,  1233,  1234,  1427,  1235,  1236,     0,     0,
       0,   920,     0,     0,     0,     0,     0,     0,     0,     0,
    1307,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1108,  1109,  1110,  1111,  1112,  1113,  1114,  1115,  1116,
    1117,  1118,     0,  1119,  1120,  1121,  1122,  1123,  1124,  1125,
    1126,  1127,  1128,  1129,     0,     0,     0,     0,     0,     0,
       0,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,  1138,
    1139,  1140,  1141,  1142,  1143,  1144,  1145,  1146,  1147,  1148,
       0,     0,  1149,  1150,  1151,  1152,  1153,  1154,  1155,  1156,
    1157,  1158,  1159,  1160,  1161,  1162,  1163,     0,  1164,     0,
    1165,  1166,  1167,  1168,  1169,  1170,  1171,  1172,  1173,     0,
    1174,  1175,  1176,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1177,     0,
       0,     0,     0,     0,  1178,  1179,  1180,     0,  1181,  1182,
    1183,  1184,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,
    1193,  1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,
    1203,  1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,
    1213,     0,     0,  1359,  1214,  1215,  1216,  1217,  1218,  1219,
    1220,  1221,  1222,  1223,  1224,  1225,  1226,  1227,  1228,  1229,
    1230,  1231,  1232,  1233,  1234,     0,  1235,  1236,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     7,
       8,     9,    10,     0,    11,    12,    13,   494,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1394,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    15,   339,     0,     0,
     200,     0,   201,   202,   203,    74,     0,     0,    20,   340,
       0,     0,   204,    22,     0,     0,    78,     0,     0,     0,
       0,    23,    24,   205,     0,     0,     0,    26,     0,     0,
     206,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,   207,  1456,  1457,  1458,
    1459,     0,  1462,  1463,    44,     0,    45,     0,    46,     0,
       0,     0,     0,    47,     0,   208,   209,    50,     0,     0,
      51,    84,     0,     0,     0,    52,     0,     0,    53,   342,
     343,    87,   210,     0,     0,    89,     0,   211,     7,     8,
       9,    10,     0,    11,    12,    13,    14,     0,  1515,     0,
      56,     0,     0,    57,    58,    59,     0,     0,    60,     0,
      61,    62,     0,     0,    63,     0,     0,     0,     0,   234,
     235,   236,   237,   238,   239,   240,   241,     0,     0,     0,
       0,     0,     0,     0,     0,    15,   242,     0,     0,    16,
       0,    17,    18,    19,     0,     0,     0,    20,     0,   739,
     740,    21,    22,     0,     0,     0,     0,     0,     0,     0,
      23,    24,    25,     0,     0,     0,    26,     0,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,     0,     0,     0,
       0,     0,     0,    44,     0,    45,     0,    46,     0,     0,
       0,     0,    47,     0,    48,    49,    50,     0,     0,    51,
       0,     0,     0,     0,    52,     0,     0,    53,     0,     0,
       0,    54,     7,     8,     9,    10,    55,    11,    12,    13,
      14,   741,     0,     0,     0,     0,     0,     0,     0,    56,
       0,     0,    57,    58,    59,     0,     0,    60,     0,    61,
      62,     0,   591,    63,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,     0,   254,   255,   256,    15,
       0,     0,     0,    16,     0,    17,    18,    19,     0,     0,
       0,    20,     0,     0,     0,    21,    22,   215,   216,   217,
       0,     0,     0,     0,    23,    24,    25,     0,     0,     0,
      26,     0,     0,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,     0,     0,     0,     0,     0,     0,    44,     0,    45,
       0,    46,     0,     0,     0,     0,    47,     0,    48,    49,
      50,   218,     0,    51,     0,     0,     0,     0,    52,     0,
       0,    53,     0,   219,   220,    54,     7,     8,     9,    10,
      55,    11,    12,    13,    14,     0,     0,     0,     0,     0,
       0,     0,     0,    56,     0,     0,    57,    58,    59,     0,
       0,    60,     0,    61,    62,   435,     0,    63,     0,   221,
     222,     0,   223,     0,     0,     0,     0,   224,     0,   225,
       0,     0,     0,    15,   440,     0,     0,    16,     0,    17,
      18,    19,     0,     0,     0,    20,     0,     0,     0,    21,
      22,     0,     0,     0,     0,     0,     0,   226,    23,    24,
      25,   227,     0,     0,    26,     0,   228,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,     0,     0,     0,     0,     0,
       0,    44,     0,    45,     0,    46,     0,     0,     0,     0,
      47,     0,    48,    49,    50,     0,     0,    51,     0,     0,
       0,     0,    52,     0,     0,    53,     0,     0,     0,    54,
       7,     8,     9,    10,    55,    11,    12,    13,    14,     0,
       0,     0,     0,     0,     0,     0,     0,    56,     0,     0,
      57,    58,    59,     0,     0,    60,     0,    61,    62,     0,
       0,    63,     0,     0,     0,   234,   235,   236,   237,   238,
     239,   240,   241,     0,     0,     0,     0,    15,   717,     0,
       0,    16,   242,    17,    18,    19,     0,     0,     0,    20,
       0,     0,     0,    21,    22,     0,     0,     0,     0,     0,
       0,     0,    23,    24,    25,     0,     0,     0,    26,     0,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,    44,     0,    45,     0,    46,
       0,     0,     0,     0,    47,     0,    48,    49,    50,     0,
       0,    51,     0,     0,     0,     0,    52,     0,     0,    53,
       0,     0,     0,    54,     7,     8,     9,    10,    55,    11,
      12,    13,    14,     0,     0,     0,     0,     0,     0,     0,
       0,    56,     0,     0,    57,    58,    59,     0,     0,    60,
       0,    61,    62,     0,     0,    63,     0,   933,     0,     0,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,    15,   254,   255,   256,    16,     0,    17,    18,    19,
       0,     0,     0,    20,     0,     0,     0,    21,    22,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,     0,
       0,     0,    26,     0,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,    44,
       0,    45,     0,    46,     0,     0,     0,     0,    47,     0,
      48,    49,    50,     0,     0,    51,     0,     0,     0,     0,
      52,     0,     0,    53,     0,     0,     0,    54,     7,     8,
       9,    10,    55,    11,    12,    13,    14,   928,     0,     0,
       0,     0,     0,     0,     0,    56,     0,     0,    57,    58,
      59,     0,     0,    60,     0,    61,    62,     0,     0,    63,
       0,     0,     0,   234,   235,   236,   237,   238,   239,   240,
     241,     0,     0,     0,     0,    15,     0,     0,     0,    16,
     242,    17,    18,    19,     0,     0,     0,    20,     0,     0,
       0,    21,    22,     0,     0,     0,     0,     0,     0,     0,
      23,    24,    25,     0,     0,     0,    26,     0,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,     0,     0,     0,
       0,     0,     0,    44,     0,    45,     0,    46,     0,     0,
       0,     0,    47,     0,    48,    49,    50,     0,     0,    51,
       0,     0,     0,     0,    52,     0,     0,    53,     0,     0,
       0,    54,     7,     8,     9,    10,    55,    11,    12,    13,
      14,     0,     0,     0,     0,     0,     0,     0,     0,    56,
       0,     0,    57,    58,    59,     0,     0,    60,     0,    61,
      62,  1063,     0,    63,  1271,     0,     0,     0,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    15,
     254,   255,   256,    16,     0,    17,    18,    19,     0,     0,
       0,    20,     0,     0,     0,    21,    22,     0,     0,     0,
       0,     0,     0,     0,    23,    24,    25,     0,     0,     0,
      26,     0,     0,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,     0,     0,     0,     0,     0,     0,    44,     0,    45,
       0,    46,     0,     0,     0,     0,    47,     0,    48,    49,
      50,     0,     0,    51,     0,     0,     0,     0,    52,     0,
       0,    53,     0,     0,     0,    54,     7,     8,     9,    10,
      55,    11,    12,    13,    14,  1338,     0,     0,     0,     0,
       0,     0,     0,    56,     0,     0,    57,    58,    59,     0,
       0,    60,     0,    61,    62,     0,     0,    63,     0,     0,
       0,   234,   235,   236,   237,   238,   239,   240,   241,     0,
       0,     0,     0,    15,     0,     0,     0,    16,   242,    17,
      18,    19,     0,     0,     0,    20,     0,     0,     0,    21,
      22,     0,     0,     0,     0,     0,     0,     0,    23,    24,
      25,     0,     0,     0,    26,     0,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,     0,     0,     0,     0,     0,
       0,    44,     0,    45,     0,    46,     0,     0,     0,     0,
      47,     0,    48,    49,    50,     0,     0,    51,     0,     0,
       0,     0,    52,     0,     0,    53,     0,     0,     0,    54,
       7,     8,     9,    10,    55,    11,    12,    13,    14,     0,
       0,     0,     0,     0,     0,     0,     0,    56,     0,     0,
      57,    58,    59,     0,     0,    60,     0,    61,    62,  1485,
       0,    63,     0,     0,  1294,     0,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,    15,   254,   255,
     256,    16,     0,    17,    18,    19,     0,     0,     0,    20,
       0,     0,     0,    21,    22,     0,     0,     0,     0,     0,
       0,     0,    23,    24,    25,     0,     0,     0,    26,     0,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,    44,     0,    45,     0,    46,
       0,     0,     0,     0,    47,     0,    48,    49,    50,     0,
       0,    51,     0,     0,     0,     0,    52,     0,     0,    53,
       0,     0,     0,    54,   649,   650,   651,    10,    55,    11,
     652,   653,    67,    68,     0,     0,   654,     0,     0,     0,
       0,    56,     0,     0,    57,    58,    59,     0,     0,    60,
       0,    61,    62,     0,     0,    63,   234,   235,   236,   237,
     238,   239,   240,   241,     0,     0,     0,     0,   462,     0,
       0,   655,    69,   242,     0,    70,     0,    71,    72,    73,
      74,   463,     0,   656,    76,     0,     0,    77,   657,     0,
       0,    78,     0,     0,     0,     0,   658,   659,    79,     0,
       0,     0,     0,     0,     0,    80,     0,     0,     0,     0,
       0,   234,   235,   236,   237,   238,   239,   240,   241,     0,
       0,    81,     0,     0,     0,     0,     0,     0,   242,   660,
       0,   661,     0,   662,     0,     0,     0,   464,   663,     0,
      82,    83,   664,     0,     0,   665,    84,     0,     0,     0,
     666,     0,     0,   667,    85,    86,    87,    88,     0,     0,
      89,     0,    90,     0,   649,   650,   651,    10,     0,    11,
     652,   653,    67,    68,     0,   668,  1040,     0,   669,   670,
       0,     0,     0,   671,     0,   672,     0,   693,     0,   673,
       0,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,     0,   254,   255,   256,   694,     0,   462,     0,
       0,   655,    69,     0,     0,    70,     0,    71,    72,    73,
      74,   463,     0,   656,    76,     0,     0,    77,   657,     0,
       0,    78,     0,     0,     0,     0,   658,   659,    79,     0,
       0,     0,     0,     0,     0,    80,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,     0,   254,   255,
     256,    81,     0,     0,     0,     0,     0,     0,     0,   660,
       0,   661,     0,   662,     0,     0,     0,   464,   663,     0,
      82,    83,   664,     0,     0,   665,    84,     0,     0,     0,
     666,     0,     0,   667,    85,    86,    87,    88,     0,     0,
      89,     0,    90,     7,     8,     9,    10,     0,    11,    12,
      13,     0,     0,     0,     0,   668,     0,     0,   669,   670,
       0,     0,     0,   671,     0,   672,     0,     0,     0,   673,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1308,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1309,     0,     0,     0,     0,  1310,   235,   236,
     237,   238,   239,   240,   241,    23,    24,     0,     0,     0,
       0,    26,     0,     0,   242,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
       0,   234,   235,   236,   237,   238,   239,   240,   241,     0,
      45,     0,    46,     0,     0,     0,     0,  1311,   242,     0,
       0,  1312,     0,     0,  1313,     0,     0,     0,     0,    52,
       0,     0,     0,     0,     0,     0,    70,     0,    71,    72,
      73,     0,     0,     0,     0,     0,     0,     0,   264,     0,
       0,     0,     0,     0,  1314,     0,     0,  1315,  1316,  1317,
     937,     0,  1318,     0,  1319,    62,    80,     0,  1320,     0,
     938,   939,   940,   941,   942,   943,   944,   945,     0,     0,
       0,     0,   265,     0,     0,     0,     0,   946,     0,   947,
     948,   949,   950,   951,   952,   953,   954,   955,   956,   957,
     958,    82,    83,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,     0,   254,   255,   256,     0,    88,   959,
       0,     0,     0,    90,     0,     0,     0,     0,     0,     0,
       0,   337,   338,     0,     0,     0,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,     0,   254,   255,
     256,   579,     0,  1398,  1399,  1400,  1401,  1402,  1403,  1404,
       0,     0,   960,     0,     0,     0,     0,     0,     0,  1405,
       0,     0,   339,     0,     0,    70,     0,    71,    72,    73,
      74,     0,     0,     0,   340,     0,     0,    77,     0,     0,
       0,    78,     0,     0,     0,     0,     0,     0,    79,     0,
       0,   961,     0,     0,   962,    80,   963,   964,   965,   966,
     967,   968,   969,   970,   971,   972,   973,     0,   974,   975,
       0,    81,   976,     0,   337,   338,     0,     0,     0,     0,
       0,     0,   341,     0,     0,     0,     0,     0,     0,     0,
      82,    83,     0,     0,     0,     0,    84,     0,     0,     0,
       0,     0,     0,     0,   342,   343,    87,    88,     0,     0,
      89,     0,    90,     0,     0,   339,     0,   344,    70,     0,
      71,    72,    73,    74,     0,     0,     0,   340,     0,     0,
      77,     0,     0,   345,    78,     0,     0,     0,  1407,  1408,
    1409,    79,     0,  1410,  1411,  1412,  1413,  1414,    80,  1415,
    1416,  1417,     0,     0,     0,     0,     0,     0,     0,     0,
     510,   511,     0,     0,    81,     0,    70,     0,    71,    72,
      73,     0,     0,     0,     0,   341,     0,     0,   264,     0,
       0,     0,     0,    82,    83,     0,     0,     0,     0,    84,
       0,     0,     0,     0,     0,     0,    80,   342,   343,    87,
      88,   339,     0,    89,    70,    90,    71,    72,    73,    74,
       0,     0,   265,   340,     0,     0,    77,   477,     0,     0,
      78,     0,     0,     0,     0,     0,   345,    79,     0,     0,
       0,    82,    83,     0,    80,   234,   235,   236,   237,   238,
     239,   240,   241,     0,     0,     0,     0,     0,    88,     0,
      81,     0,   242,    90,     0,     0,     0,   481,   482,   483,
      70,   341,    71,    72,    73,     0,     0,     0,     0,    82,
      83,     0,     0,     0,     0,    84,   175,     0,     0,     0,
       0,     0,     0,   342,   343,    87,    88,     0,     0,    89,
      80,    90,   234,   235,   236,   237,   238,   239,   240,   241,
       0,     0,     0,     0,     0,     0,   265,     0,     0,   242,
       0,   218,   345,   234,   235,   236,   237,   238,   239,   240,
     241,     0,     0,   219,   220,    82,    83,     0,     0,     0,
     242,   234,   235,   236,   237,   238,   239,   240,   241,     0,
       0,     0,    88,     0,     0,     0,     0,    90,   242,   234,
     235,   236,   237,   238,   239,   240,   241,     0,     0,   486,
     222,     0,   223,     0,     0,     0,   242,   224,     0,   225,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,     0,   254,   255,   256,   595,   234,   235,   236,   237,
     238,   239,   240,   241,     0,     0,   289,     0,     0,     0,
       0,     0,     0,   242,   847,   848,   849,   850,   851,   852,
     853,   854,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   855,     0,     0,     0,     0,     0,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,     0,   254,
     255,   256,   683,     0,     0,     0,     0,     0,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,     0,
     254,   255,   256,   762,     0,     0,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,     0,   254,   255,
     256,   904,     0,     0,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,     0,   254,   255,   256,  1021,
       0,     0,     0,     0,     0,     0,     0,    -2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,     0,   254,   255,   256,  1292,     0,     0,   856,
     857,   858,   859,   860,   861,   862,   863,   864,   865,   866,
       0,   867,   868,   869,   105,     0,   106,     0,     0,   107,
     108,     0,     0,     0,     0,     0,     0,   109,   110,     0,
       0,     0,     0,     0,     0,     0,   111,     0,   112,   113,
     114,   115,     0,     0,     0,   116,     0,     0,     0,     0,
     117,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,     0,     0,     0,     0,     0,
     125,   126,   127,   128,     0,     0,     0,     0,     0,   129,
     130,    67,    68,   131,   132,   460,     0,   461,   133,     0,
       0,     0,     0,     0,   134,   135,     0,   136,   236,   237,
     238,   239,   240,   241,     0,   137,     0,     0,     0,     0,
       0,     0,     0,   242,     0,     0,     0,   462,     0,     0,
       0,    69,     0,     0,    70,     0,    71,    72,    73,    74,
     463,     0,     0,    76,     0,     0,    77,     0,     0,     0,
      78,   236,   237,   238,   239,   240,   241,    79,     0,     0,
       0,     0,     0,     0,    80,     0,   242,  1399,  1400,  1401,
    1402,  1403,  1404,     0,     0,     0,     0,     0,     0,     0,
      81,     0,  1405,  1399,  1400,  1401,  1402,  1403,  1404,     0,
       0,     0,     0,     0,     0,     0,   464,     0,  1405,    82,
      83,     0,     0,     0,     0,    84,     0,  1399,  1400,  1401,
    1402,  1403,  1404,    85,    86,    87,    88,     0,     0,    89,
       0,    90,  1405,   238,   239,   240,   241,     0,     0,     0,
       0,     0,     0,     0,   465,     0,   242,     0,     0,   466,
       0,     0,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,     0,   254,   255,   256,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   481,   482,
     483,     0,     0,     0,     0,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,     0,   254,   255,   256,     0,
       0,  1407,  1408,  1409,     0,     0,  1410,  1411,  1412,  1413,
    1414,     0,  1415,  1416,  1417,   484,     0,   485,  1408,  1409,
       0,     0,  1410,  1411,  1412,  1413,  1414,     0,  1415,  1416,
    1417,     0,   218,     0,     0,   770,     0,   215,   216,   217,
       0,     0,     0,  1409,   219,   220,  1410,  1411,  1412,  1413,
    1414,   771,  1415,  1416,  1417,     0,     0,     0,   247,   248,
     249,   250,   251,   252,   253,   772,   254,   255,   256,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   773,   774,
     486,   222,     0,   223,   215,   216,   217,     0,   224,     0,
     225,   218,     0,     0,   775,     0,     0,     0,     0,   215,
     216,   217,     0,   219,   220,     0,     0,     0,     0,     0,
       0,     0,     0,   304,   487,     0,   304,     0,     0,     0,
       0,     0,     0,     0,   776,     0,     0,   777,     0,     0,
     778,     0,     0,     0,     0,     0,     0,     0,   218,   221,
     222,     0,   223,     0,     0,     0,   779,   224,     0,   225,
     219,   220,     0,   218,   105,     0,   106,   105,   780,   106,
     108,     0,     0,   108,     0,   219,   220,   109,   110,     0,
     109,   110,   781,   318,     0,     0,     0,     0,   112,   113,
     114,   112,   298,   114,     0,     0,   221,   222,     0,   223,
     299,     0,     0,   299,   224,     0,   225,     0,     0,     0,
       0,   221,  1272,  1273,  1274,   397,    67,    68,     0,   224,
       0,   225,     0,   123,     0,     0,   123,     0,     0,     0,
     499,     0,  1275,   128,     0,     0,   128,  1276,     0,   129,
       0,     0,   129,   131,   132,     0,     0,   132,     0,     0,
     215,   216,   217,     0,     0,   135,    69,   136,   135,    70,
     136,    71,    72,    73,    74,    75,     0,     0,    76,     0,
       0,    77,     0,     0,     0,    78,     0,     0,     0,     0,
       0,     0,    79,     0,     0,     0,     0,     0,     0,    80,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1033,    67,    68,   218,    81,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   219,   220,     0,     0,
       0,     0,     0,     0,    82,    83,     0,     0,     0,     0,
      84,     0,  1461,    67,    68,     0,     0,     0,    85,    86,
      87,    88,    69,     0,    89,    70,    90,    71,    72,    73,
      74,    75,   221,   222,    76,   223,     0,    77,     0,     0,
     224,    78,   225,    70,     0,    71,    72,    73,    79,     0,
       0,     0,     0,    69,     0,    80,    70,     0,    71,    72,
      73,    74,    75,     0,     0,    76,     0,     0,    77,     0,
       0,    81,    78,    80,     0,     0,     0,     0,     0,    79,
       0,     0,     0,     0,     0,     0,    80,     0,     0,   265,
      82,    83,     0,     0,     0,     0,    84,     0,   695,   696,
     697,     0,    81,     0,    85,    86,    87,    88,    82,    83,
      89,     0,    90,     0,     0,     0,     0,     0,     0,     0,
       0,    82,    83,     0,     0,    88,     0,    84,    67,    68,
      90,     0,   460,     0,     0,    85,    86,    87,    88,     0,
       0,    89,    70,    90,    71,    72,    73,   698,   699,     0,
       0,     0,     0,   186,    77,     0,     0,    67,    68,     0,
       0,   796,     0,     0,   462,    79,     0,     0,    69,     0,
       0,    70,    80,    71,    72,    73,    74,   463,     0,     0,
      76,     0,     0,    77,     0,     0,     0,    78,    81,     0,
       0,     0,     0,   462,    79,     0,     0,    69,     0,     0,
      70,    80,    71,    72,    73,    74,   463,    82,    83,    76,
       0,     0,    77,     0,     0,     0,    78,    81,     0,     0,
       0,   700,     0,    79,    88,     0,     0,    89,     0,    90,
      80,     0,     0,   464,     0,     0,    82,    83,     0,     0,
       0,     0,    84,     0,     0,     0,    81,     0,    67,    68,
      85,    86,    87,    88,     0,     0,    89,     0,    90,     0,
       0,     0,   464,     0,     0,    82,    83,     0,     0,     0,
       0,    84,     0,     0,     0,     0,     0,    67,    68,    85,
      86,    87,    88,     0,   462,    89,     0,    90,    69,     0,
       0,    70,     0,    71,    72,    73,    74,   463,     0,     0,
      76,     0,     0,    77,     0,     0,     0,    78,     0,     0,
       0,     0,     0,     0,    79,     0,     0,    69,     0,     0,
      70,    80,    71,    72,    73,    74,    75,     0,     0,    76,
       0,     0,    77,     0,     0,     0,    78,    81,     0,     0,
       0,     0,     0,    79,     0,     0,     0,     0,     0,     0,
      80,     0,     0,   464,     0,     0,    82,    83,     0,     0,
       0,     0,    84,    67,    68,     0,    81,     0,     0,     0,
      85,    86,    87,    88,     0,     0,    89,     0,    90,     0,
       0,     0,     0,     0,     0,    82,    83,    67,    68,     0,
       0,    84,     0,     0,     0,   215,   216,   217,     0,    85,
      86,    87,    88,    69,     0,    89,    70,    90,    71,    72,
      73,    74,     0,     0,     0,    76,     0,    70,    77,    71,
      72,    73,    78,     0,     0,     0,     0,    69,     0,    79,
      70,     0,    71,    72,    73,    74,    80,     0,     0,    76,
       0,     0,    77,     0,     0,     0,    78,    80,     0,   218,
       0,     0,    81,    79,     0,     0,     0,     0,     0,     0,
      80,   219,   220,   265,     0,     0,     0,     0,   608,     0,
       0,    82,    83,    67,     0,     0,    81,    84,     0,     0,
       0,     0,    82,    83,     0,    85,    86,    87,    88,     0,
       0,    89,   333,    90,     0,    82,    83,   221,   222,    88,
     223,    84,   176,     0,    90,   224,     0,   225,     0,    85,
      86,    87,    88,    69,     0,    89,    70,    90,    71,    72,
      73,    74,   521,     0,     0,    76,     0,   187,    77,     0,
       0,     0,    78,     0,     0,     0,     0,     0,     0,    79,
       0,     0,   177,     0,     0,    70,    80,    71,    72,    73,
      74,   998,     0,     0,   178,     0,     0,    77,     0,     0,
       0,    78,    81,     0,     0,     0,     0,     0,    79,     0,
       0,     0,     0,     0,     0,    80,     0,     0,     0,     0,
       0,    82,    83,     0,     0,     0,     0,    84,   176,     0,
       0,    81,     0,     0,     0,    85,    86,    87,    88,     0,
       0,    89,     0,    90,     0,     0,     0,     0,     0,     0,
      82,    83,    67,     0,     0,     0,    84,     0,     0,     0,
     215,   216,   217,     0,   179,   180,    87,    88,   177,     0,
      89,    70,    90,    71,    72,    73,    74,     0,     0,     0,
     178,     0,     0,    77,     0,     0,     0,    78,     0,     0,
       0,     0,    69,     0,    79,    70,     0,    71,    72,    73,
      74,    80,     0,     0,    76,     0,     0,    77,     0,     0,
       0,    78,     0,     0,   218,     0,     0,    81,    79,   215,
     216,   217,     0,     0,     0,    80,   219,   220,     0,     0,
       0,     0,     0,   215,   216,   217,    82,    83,     0,     0,
       0,    81,    84,     0,     0,     0,     0,   215,   216,   217,
     179,   180,    87,    88,     0,     0,    89,     0,    90,     0,
      82,    83,   221,   222,     0,   223,    84,     0,     0,     0,
     224,     0,   225,   218,    85,    86,    87,    88,     0,     0,
      89,     0,    90,  1275,     0,   219,   220,   218,  1353,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   219,
     220,   218,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   219,   220,     0,     0,     0,     0,     0,
       0,   221,   222,     0,   223,     0,     0,     0,     0,   224,
       0,   225,     0,     0,     0,   221,   222,     0,   223,     0,
       0,     0,  1275,   224,     0,   225,     0,  1355,     0,   221,
     222,     0,   223,     0,     0,     0,  1275,   224,   105,   225,
     106,  1357,     0,   107,   108,     0,     0,     0,     0,     0,
    1275,   109,   110,     0,     0,     0,     0,     0,     0,     0,
     111,     0,   112,   113,   114,   115,     0,     0,     0,   116,
       0,     0,     0,     0,   117,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,     0,
       0,     0,     0,     0,   125,   126,   127,   128,     0,     0,
     105,     0,   106,   129,   130,   107,   108,   131,   132,     0,
       0,     0,   133,   109,   110,     0,     0,     0,   134,   135,
       0,   136,   111,     0,   112,   113,   114,   115,     0,   137,
       0,   116,     0,     0,     0,     0,   117,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   691,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,     0,     0,     0,     0,     0,   125,   126,   127,   128,
       0,     0,   105,     0,   106,   129,   130,   107,   108,   131,
     132,     0,     0,     0,   133,   109,   110,     0,     0,     0,
     134,   135,     0,   136,   111,     0,   112,   113,   114,   115,
       0,   137,     0,   116,     0,     0,     0,     0,   117,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     872,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,     0,     0,     0,     0,     0,   125,   126,
     127,   128,     0,     0,   105,     0,   106,   129,   130,   107,
     108,   131,   132,     0,     0,     0,   133,   109,   110,     0,
       0,     0,   134,   135,     0,   136,   111,     0,   112,   113,
     114,   115,     0,   137,     0,   116,     0,     0,     0,     0,
     117,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   915,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,     0,     0,     0,     0,     0,
     125,   126,   127,   128,     0,     0,   105,     0,   106,   129,
     130,   107,   108,   131,   132,     0,     0,     0,   133,   109,
     110,     0,     0,     0,   134,   135,     0,   136,   111,     0,
     112,   113,   114,   115,     0,   137,     0,   116,     0,     0,
       0,     0,   117,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1022,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,   124,     0,     0,     0,
       0,     0,   125,   126,   127,   128,     0,     0,   105,     0,
     106,   129,   130,   107,   108,   131,   132,     0,     0,     0,
     133,   109,   110,     0,     0,     0,   134,   135,     0,   136,
     111,     0,   112,   113,   114,   115,     0,   137,     0,   116,
       0,     0,     0,     0,   117,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1075,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,     0,
       0,     0,     0,     0,   125,   126,   127,   128,     0,     0,
     105,     0,   106,   129,   130,   107,   108,   131,   132,     0,
       0,     0,   133,   109,   110,     0,     0,     0,   134,   135,
       0,   136,   111,     0,   112,   113,   114,   115,     0,   137,
       0,   116,     0,   215,   216,   217,   117,     0,     0,     0,
       0,     0,     0,    70,     0,    71,    72,    73,  1297,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
     124,     0,     0,     0,     0,     0,   125,   126,   127,   128,
     484,     0,   485,    80,     0,   129,   130,     0,     0,   131,
     132,     0,     0,     0,   133,     0,     0,   218,     0,   265,
     134,   135,   105,   136,   106,     0,     0,     0,   108,   219,
     220,   137,     0,     0,     0,   109,   110,     0,    82,    83,
       0,     0,     0,     0,     0,     0,   112,   298,   114,     0,
    1443,     0,     0,   116,     0,    88,     0,     0,   299,     0,
      90,     0,     0,     0,     0,   221,   222,     0,   223,     0,
       0,     0,     0,   224,   105,   225,   106,     0,     0,     0,
     108,   123,     0,   192,     0,     0,     0,   109,   110,     0,
       0,   128,     0,     0,     0,     0,     0,   129,   112,   113,
     114,     0,   132,     0,     0,   116,     0,     0,     0,     0,
     299,     0,   134,   135,   105,   136,   106,     0,     0,   107,
     108,     0,     0,     0,     0,     0,     0,   109,   110,     0,
    -151,     0,     0,   123,     0,     0,   111,     0,   112,   113,
     114,   115,     0,   128,     0,   116,     0,     0,     0,   129,
     117,     0,     0,   131,   132,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,   135,     0,   136,   118,   119,
     120,   121,   122,   123,   124,     0,     0,     0,     0,     0,
     125,   126,   127,   128,     0,     0,   105,     0,   106,   129,
     130,     0,   108,   131,   132,   105,     0,   106,   133,   109,
     110,   108,     0,     0,   134,   135,     0,   136,   109,   110,
     112,   298,   114,     0,     0,     0,     0,     0,     0,   112,
     298,   114,   299,     0,     0,     0,    70,     0,    71,    72,
      73,   299,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   310,     0,     0,     0,
       0,     0,     0,     0,   123,   128,    80,     0,     0,     0,
       0,   129,     0,     0,   128,     0,   132,     0,     0,     0,
     129,     0,   265,     0,     0,   132,     0,   135,     0,   136,
       0,     0,     0,     0,     0,     0,   135,     0,   136,     0,
       0,    82,    83,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    88,     0,
       0,     0,     0,    90
};

static const yytype_int16 yycheck[] =
{
       1,    61,   587,   464,   113,   493,   928,   512,    44,   318,
      92,    44,   710,   131,   752,   297,   131,   480,   660,     6,
      15,     8,   614,   462,   148,   141,   150,   151,   152,   153,
     732,   155,   493,   157,   605,   159,   183,    44,    15,    81,
      82,    83,    13,   147,    33,   484,    88,    15,    15,   331,
      76,   175,   715,   492,    76,    15,    59,   795,     0,   147,
      76,    62,   186,   187,   586,   169,   165,   166,   192,   193,
     141,    10,    11,    12,   147,   147,   155,   141,   166,   164,
     147,   744,   745,   146,   747,   748,   749,   750,   147,   150,
      91,    92,   147,   166,   166,    15,   165,   166,    99,   166,
     147,   164,   624,   146,   165,   141,   147,   166,   141,    33,
     164,   166,   719,   635,   721,   722,   723,   724,   725,   166,
     146,   164,   125,   149,   146,   166,   147,   149,   713,   771,
     146,   716,   147,   149,   141,   150,   165,   166,   274,   275,
     276,   277,   278,   155,   150,   166,   147,   148,   150,   150,
     151,   152,   153,   147,   155,   616,   157,    33,   159,   165,
     149,   146,    76,   165,   147,   207,   208,   209,   210,    64,
      65,   166,   166,   112,   175,   164,   165,   259,   260,   166,
     147,   297,   183,   166,   164,   186,   187,   164,   159,   147,
     499,   192,   193,   275,   276,   255,   164,   108,   109,   110,
     147,   112,   113,   114,   164,   693,   117,   354,   166,   147,
     149,   327,   123,   164,   165,   331,   525,   128,   129,   166,
     131,   132,   133,   265,   135,   136,   297,   147,   166,   230,
     164,   753,   146,   297,   805,   149,   164,   900,   147,   163,
     164,   165,   164,   147,   815,   164,   147,   289,   753,    13,
     146,    15,   148,    17,   150,   155,   327,   166,   259,   260,
     331,   297,   166,   327,   297,   166,   390,   331,   164,   791,
     792,   934,    75,   274,   275,   276,   277,   278,   279,   143,
     144,   145,   147,   284,   147,   147,   147,   163,   164,   165,
     297,   327,   755,   164,   327,   331,    60,   147,   331,   906,
    1002,   166,   147,   166,   166,   166,   164,   443,     2,    33,
     164,   447,   448,   449,   450,   451,   166,   318,   147,   149,
     327,   166,   165,   166,   331,   461,    33,   788,   164,   465,
     466,   916,     6,   772,     8,   644,   146,   166,   148,   149,
     150,   164,   913,    98,   146,   146,   148,   148,   150,   150,
      13,   164,    15,   354,    17,   146,   998,   148,   846,   150,
     164,   643,    56,    57,    58,    59,    60,   164,    13,    63,
      15,   148,    17,   150,   164,   897,   140,    10,    11,    12,
     164,   165,   166,   692,     6,   846,     8,   298,   299,   390,
     154,   164,   897,   304,   164,   159,   164,    60,   165,   166,
    1102,   164,   165,   166,   164,   997,   164,    75,   164,   410,
     113,   114,   115,   984,   164,    60,  1338,   164,   165,  1004,
     164,   165,   166,   146,   147,  1010,  1011,    10,    11,    12,
     164,    64,   164,   157,   158,   159,   160,   161,   480,   163,
     164,   165,   443,    76,    77,   164,   447,   448,   449,   450,
     451,   164,   159,   160,   161,   155,   163,   164,   165,   164,
     461,   149,   598,    33,   465,   466,   164,   165,   164,   470,
     149,   164,   473,   509,   164,   164,   279,   140,   164,   112,
     113,    64,   115,   164,  1006,  1007,   164,   120,   164,   122,
     149,   154,   493,    76,    77,   140,   159,   191,   499,   164,
    1092,   164,   164,  1095,   164,   166,   164,   164,   509,   154,
     164,   164,   150,  1098,   159,   471,   159,  1255,   165,   164,
     149,   522,    48,   165,   525,   164,   147,   643,   146,   112,
     113,   155,   115,   166,   164,   148,   291,   120,   164,   122,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   164,   256,   167,   873,   147,   166,   261,   166,   166,
     166,   166,   643,   166,   166,   156,   156,   166,   166,   643,
     491,   166,   165,   147,   147,   586,   587,   588,   166,   159,
     160,   161,   166,   163,   164,   165,    15,   598,   353,   166,
     166,   166,   156,   297,   605,   166,   166,   643,   609,   166,
     643,   279,   672,   614,   166,   166,   166,   618,   619,   620,
     621,   622,   623,   624,   660,  1323,   166,   660,   166,   166,
     166,   325,   166,   166,   635,   156,   643,   166,   166,   166,
     164,   166,   165,   644,   645,   159,   166,   165,   167,   166,
     149,   164,   146,   660,   610,   166,   147,   147,   147,   147,
     463,   464,   147,   699,   164,   148,   164,   149,   164,   164,
      48,   164,   164,   341,   630,   631,   632,   633,   634,   166,
     166,   159,  1267,   159,  1269,   166,   146,    48,    76,   169,
     493,   692,   164,   387,  1432,  1433,  1434,   757,   758,   155,
     155,   155,   155,   164,   705,   765,    10,   767,   166,   148,
     404,   405,   713,   755,    10,   716,   470,   411,   719,    10,
     721,   722,   723,   724,   725,    10,    10,   156,  1430,   147,
     166,   148,    33,   159,   159,   771,   166,   738,   771,  1331,
     741,   148,   148,  1328,   167,   159,   166,   146,   169,   705,
     166,   752,   753,   166,   166,   164,  1348,  1349,  1350,  1247,
     164,   164,   164,   149,   771,   883,   166,   522,   883,   165,
     165,   682,   683,   165,   883,   164,   166,   164,   533,   473,
     147,   536,   147,   147,   587,   147,  1247,   150,   789,   159,
     791,   792,   166,   166,   795,   463,   464,   798,   167,   165,
     148,   148,  1540,   147,   805,   608,    10,   167,   868,   166,
    1548,   169,     4,   616,   815,   147,    48,   169,   164,    10,
      11,    12,   164,   146,   825,   493,   520,   147,   169,   166,
    1422,   156,   156,   166,   790,  1420,   530,  1429,   156,   166,
     156,    10,   148,  1435,  1436,   166,    10,   166,   884,    10,
      10,   807,    10,   521,   148,   609,   157,   158,   159,   160,
     161,   147,   163,   164,   165,   619,   620,   621,   622,   623,
     169,   164,   873,    64,   875,   167,   166,    15,   148,   167,
     169,   882,   155,   166,   166,    76,    77,   888,   889,   890,
     891,   892,   893,   894,   166,   164,   897,   591,  1490,   164,
     166,   164,   166,  1488,   164,   906,  1030,   147,   166,   164,
     713,   605,   913,   716,   155,   916,   155,   999,   155,   587,
     164,   112,   113,   166,   115,   167,   882,   928,   166,   120,
     166,   122,  1524,   889,   890,   891,   892,   893,   167,   146,
     608,   166,   166,   166,    10,   148,   137,  1539,   616,   643,
      10,   705,    10,   148,   148,   710,    10,    10,    11,    12,
     715,   148,   998,   164,   719,   998,   721,   722,   723,   724,
     725,  1280,   883,   166,   668,   669,   670,   671,   166,   673,
    1104,  1105,    17,   984,    15,   788,   167,   166,   147,   744,
     745,   998,   747,   748,   749,   750,   997,   147,   999,   166,
     156,   156,   156,  1004,   166,  1006,  1007,   156,    10,  1010,
    1011,    64,    47,   166,   166,   148,   167,    10,   166,    10,
     148,   164,   164,    76,    77,    60,    61,   164,   148,  1030,
     166,   166,   164,   148,   148,   789,   166,   166,  1103,   646,
    1250,    76,   309,   846,   798,   713,  1323,   741,   716,   884,
     331,   699,  1448,  1247,  1077,   331,  1281,   846,  1214,   112,
     113,    -1,   115,    -1,   409,    -1,    -1,   120,    -1,   122,
      -1,   106,    -1,    -1,   109,    -1,  1077,   112,    -1,    10,
      11,    12,    13,    -1,    -1,  1086,    17,    -1,    -1,    -1,
      -1,  1092,    -1,   128,  1095,    -1,    -1,  1098,    -1,    -1,
      -1,   154,    -1,  1104,  1105,   140,   159,    -1,    -1,    -1,
      -1,   805,    -1,   916,    -1,    -1,    -1,    -1,    -1,   154,
     788,   815,    -1,    -1,    -1,   819,    -1,    -1,   882,    60,
    1086,    -1,    -1,    -1,    -1,   889,   890,   891,   892,   893,
      -1,    -1,   836,    -1,    -1,   900,    -1,    -1,    -1,    -1,
      -1,   906,    -1,   847,   848,   849,   850,   851,   852,   853,
     854,   855,   856,   857,   858,   859,   860,   861,   862,   863,
     864,   865,   866,   867,  1256,   869,    -1,    -1,   846,   934,
     111,   112,  1272,  1273,  1274,    10,    11,    12,    13,    -1,
      15,    -1,    17,    -1,    -1,    10,    11,    12,    -1,    -1,
      -1,  1004,    -1,    -1,    -1,    -1,    -1,  1010,  1011,   140,
      -1,    -1,    -1,  1214,    20,    21,    22,    23,    -1,   913,
      -1,    -1,    -1,   154,    -1,    -1,    -1,    33,   159,    -1,
      -1,    -1,    -1,   164,   928,    60,    -1,    -1,    -1,    54,
      -1,    56,    57,    58,    -1,    -1,  1247,    -1,   916,    -1,
      62,    66,    -1,    -1,  1255,  1256,    -1,    -1,    -1,  1319,
      -1,    -1,    77,  1353,    -1,  1355,  1267,  1357,  1269,    84,
    1360,  1361,  1362,    85,    -1,    -1,    61,    -1,    -1,  1280,
      -1,    -1,    -1,    -1,    -1,   100,    -1,   112,    -1,    -1,
     984,    -1,   986,   105,    -1,  1098,    10,    11,    12,    13,
      -1,    -1,    -1,    17,   119,   120,  1366,  1367,    -1,  1369,
      -1,  1371,   124,    -1,    -1,   140,    10,    11,    12,    13,
      -1,   136,   134,    17,   139,    -1,   141,  1328,    -1,   154,
    1331,    -1,  1086,    -1,   159,    -1,  1004,  1338,    -1,   164,
      -1,    -1,  1010,  1011,  1038,    -1,    60,  1348,  1349,  1350,
      -1,   157,   158,   159,   160,   161,  1416,   163,   164,   165,
      -1,    -1,    -1,    -1,   149,    -1,    60,   179,    -1,   154,
     182,   156,    -1,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
      -1,    -1,  1087,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     185,    -1,    -1,    -1,   189,   190,   191,    16,    17,    18,
      19,    20,    21,    22,    23,   227,   228,    -1,   112,  1420,
      -1,  1422,    -1,    -1,    33,    -1,   140,    -1,  1429,    -1,
    1098,  1432,  1433,  1434,  1435,  1436,    -1,    -1,    -1,    -1,
     154,    -1,    -1,    -1,  1247,   159,   140,  1448,    -1,    -1,
     164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     154,   273,    -1,    -1,  1267,   159,  1269,    18,    19,    20,
      21,    22,    23,  1533,  1534,  1535,    -1,  1537,    -1,   291,
      -1,   293,    33,    -1,    -1,   270,    -1,  1488,    -1,  1490,
      -1,    -1,    -1,    -1,    -1,  1250,    -1,    -1,   310,    -1,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,   333,    -1,  1524,    -1,  1328,    -1,    33,    -1,    -1,
     342,    -1,    -1,   345,    -1,    -1,    -1,    -1,  1539,  1540,
     149,   353,   151,   152,   153,   154,  1240,  1548,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1323,    -1,
      -1,    -1,    10,    11,    12,    -1,    -1,    15,    -1,  1247,
     392,    -1,    -1,    -1,   396,    -1,    -1,    -1,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,   409,    -1,  1267,
    1294,  1269,    -1,    33,   389,    -1,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,    -1,    -1,  1420,    -1,  1314,
    1315,  1316,  1317,  1318,    -1,  1320,    64,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   446,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    -1,  1338,   151,   152,   153,   154,    -1,
     462,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
    1328,    -1,   474,    -1,    16,    17,    18,    19,    20,    21,
      22,    23,   484,    -1,   112,   113,    -1,   115,    -1,    -1,
     492,    33,   120,    -1,   122,  1488,    -1,    -1,    -1,    -1,
      -1,  1314,  1315,  1316,  1317,  1318,    -1,  1320,    -1,    -1,
      -1,    -1,  1397,  1398,  1399,  1400,  1401,  1402,  1403,  1404,
    1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,  1414,
    1415,    -1,    -1,  1417,   536,   155,   156,   157,   158,   159,
     160,   161,   517,   163,   164,   165,    -1,    -1,    -1,   524,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1420,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   551,    -1,   553,  1464,
     555,    -1,    -1,   585,  1397,  1398,  1399,  1400,  1401,  1402,
    1403,  1404,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,
    1413,  1414,  1415,    -1,    -1,    -1,    -1,    -1,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   628,   169,    -1,    -1,
    1488,     3,     4,     5,     6,  1520,     8,     9,    10,    11,
      12,    -1,    -1,    -1,   646,    -1,    -1,    -1,    -1,    -1,
      -1,  1464,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    16,    17,    18,    19,    20,    21,    22,
      23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,
      33,    -1,    54,    -1,    56,    57,    58,    59,    60,    -1,
      62,    63,    -1,    -1,    66,    67,    -1,   672,    70,    22,
      23,   703,    -1,    75,    76,    77,    -1,  1520,    -1,    81,
      33,    -1,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,    -1,
      22,    23,   734,    -1,    -1,    -1,   108,    -1,   110,    -1,
     112,    33,    -1,    -1,    -1,   117,    -1,   119,   120,   121,
      -1,    -1,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,    -1,   141,
     772,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,   154,    -1,    -1,   157,   158,   159,    33,    -1,
     162,    -1,   164,   165,    -1,    -1,   168,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   828,   829,   830,    -1,   832,    -1,   834,
     835,   836,    -1,    -1,    -1,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,   885,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,  1001,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,    -1,    -1,    -1,   100,    -1,
    1032,    -1,    -1,    -1,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,    -1,    -1,    -1,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,    -1,    -1,
      -1,  1103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1085,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,    -1,    -1,  1275,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,    -1,   168,   169,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1319,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    -1,    -1,
      54,    -1,    56,    57,    58,    59,    -1,    -1,    62,    63,
      -1,    -1,    66,    67,    -1,    -1,    70,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,  1382,  1383,  1384,
    1385,    -1,  1387,  1388,   108,    -1,   110,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,   120,   121,    -1,    -1,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,    -1,   141,     3,     4,
       5,     6,    -1,     8,     9,    10,    11,    -1,  1460,    -1,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,    -1,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    33,    -1,    -1,    54,
      -1,    56,    57,    58,    -1,    -1,    -1,    62,    -1,    64,
      65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,    -1,
      -1,    -1,   117,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,
      -1,   136,     3,     4,     5,     6,   141,     8,     9,    10,
      11,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,    -1,   164,
     165,    -1,   149,   168,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,    50,
      -1,    -1,    -1,    54,    -1,    56,    57,    58,    -1,    -1,
      -1,    62,    -1,    -1,    -1,    66,    67,    10,    11,    12,
      -1,    -1,    -1,    -1,    75,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,   110,
      -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,
     121,    64,    -1,   124,    -1,    -1,    -1,    -1,   129,    -1,
      -1,   132,    -1,    76,    77,   136,     3,     4,     5,     6,
     141,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,    -1,   164,   165,   166,    -1,   168,    -1,   112,
     113,    -1,   115,    -1,    -1,    -1,    -1,   120,    -1,   122,
      -1,    -1,    -1,    50,    51,    -1,    -1,    54,    -1,    56,
      57,    58,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,
      67,    -1,    -1,    -1,    -1,    -1,    -1,   150,    75,    76,
      77,   154,    -1,    -1,    81,    -1,   159,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,   110,    -1,   112,    -1,    -1,    -1,    -1,
     117,    -1,   119,   120,   121,    -1,    -1,   124,    -1,    -1,
      -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,   136,
       3,     4,     5,     6,   141,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,    -1,   164,   165,    -1,
      -1,   168,    -1,    -1,    -1,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    50,    51,    -1,
      -1,    54,    33,    56,    57,    58,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,
      -1,    -1,    -1,    -1,   117,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,   132,
      -1,    -1,    -1,   136,     3,     4,     5,     6,   141,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
      -1,   164,   165,    -1,    -1,   168,    -1,   148,    -1,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    50,   163,   164,   165,    54,    -1,    56,    57,    58,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,   110,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,
     129,    -1,    -1,   132,    -1,    -1,    -1,   136,     3,     4,
       5,     6,   141,     8,     9,    10,    11,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,    -1,   164,   165,    -1,    -1,   168,
      -1,    -1,    -1,    16,    17,    18,    19,    20,    21,    22,
      23,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    54,
      33,    56,    57,    58,    -1,    -1,    -1,    62,    -1,    -1,
      -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,    -1,
      -1,    -1,   117,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,
      -1,   136,     3,     4,     5,     6,   141,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,    -1,   164,
     165,   166,    -1,   168,   147,    -1,    -1,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    50,
     163,   164,   165,    54,    -1,    56,    57,    58,    -1,    -1,
      -1,    62,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,   110,
      -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,    -1,    -1,    -1,   129,    -1,
      -1,   132,    -1,    -1,    -1,   136,     3,     4,     5,     6,
     141,     8,     9,    10,    11,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,    -1,   164,   165,    -1,    -1,   168,    -1,    -1,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    54,    33,    56,
      57,    58,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,   110,    -1,   112,    -1,    -1,    -1,    -1,
     117,    -1,   119,   120,   121,    -1,    -1,   124,    -1,    -1,
      -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,   136,
       3,     4,     5,     6,   141,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,    -1,   164,   165,   166,
      -1,   168,    -1,    -1,   149,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    50,   163,   164,
     165,    54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,
      -1,    -1,    -1,    -1,   117,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,   132,
      -1,    -1,    -1,   136,     3,     4,     5,     6,   141,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      -1,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
      -1,   164,   165,    -1,    -1,   168,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,    -1,    47,    -1,
      -1,    50,    51,    33,    -1,    54,    -1,    56,    57,    58,
      59,    60,    -1,    62,    63,    -1,    -1,    66,    67,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    33,   108,
      -1,   110,    -1,   112,    -1,    -1,    -1,   116,   117,    -1,
     119,   120,   121,    -1,    -1,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,    -1,   141,    -1,     3,     4,     5,     6,    -1,     8,
       9,    10,    11,    12,    -1,   154,    15,    -1,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,    -1,   147,    -1,   168,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,    47,    -1,
      -1,    50,    51,    -1,    -1,    54,    -1,    56,    57,    58,
      59,    60,    -1,    62,    63,    -1,    -1,    66,    67,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    84,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,   110,    -1,   112,    -1,    -1,    -1,   116,   117,    -1,
     119,   120,   121,    -1,    -1,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,    -1,   141,     3,     4,     5,     6,    -1,     8,     9,
      10,    -1,    -1,    -1,    -1,   154,    -1,    -1,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,    -1,    -1,    -1,   168,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    -1,    -1,    -1,    -1,    67,    17,    18,
      19,    20,    21,    22,    23,    75,    76,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    33,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
     110,    -1,   112,    -1,    -1,    -1,    -1,   117,    33,    -1,
      -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,   129,
      -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    57,
      58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,   154,    -1,    -1,   157,   158,   159,
       6,    -1,   162,    -1,   164,   165,    84,    -1,   168,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    33,    -1,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,   119,   120,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,    -1,   136,    65,
      -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    10,    11,    -1,    -1,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    58,
      59,    -1,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,   147,    -1,    -1,   150,    84,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,   165,
      -1,   100,   168,    -1,    10,    11,    -1,    -1,    -1,    -1,
      -1,    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,   136,    -1,    -1,
     139,    -1,   141,    -1,    -1,    51,    -1,   146,    54,    -1,
      56,    57,    58,    59,    -1,    -1,    -1,    63,    -1,    -1,
      66,    -1,    -1,   162,    70,    -1,    -1,    -1,   152,   153,
     154,    77,    -1,   157,   158,   159,   160,   161,    84,   163,
     164,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      10,    11,    -1,    -1,   100,    -1,    54,    -1,    56,    57,
      58,    -1,    -1,    -1,    -1,   111,    -1,    -1,    66,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
      -1,    -1,    -1,    -1,    -1,    -1,    84,   133,   134,   135,
     136,    51,    -1,   139,    54,   141,    56,    57,    58,    59,
      -1,    -1,   100,    63,    -1,    -1,    66,    11,    -1,    -1,
      70,    -1,    -1,    -1,    -1,    -1,   162,    77,    -1,    -1,
      -1,   119,   120,    -1,    84,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,   136,    -1,
     100,    -1,    33,   141,    -1,    -1,    -1,    10,    11,    12,
      54,   111,    56,    57,    58,    -1,    -1,    -1,    -1,   119,
     120,    -1,    -1,    -1,    -1,   125,   164,    -1,    -1,    -1,
      -1,    -1,    -1,   133,   134,   135,   136,    -1,    -1,   139,
      84,   141,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    33,
      -1,    64,   162,    16,    17,    18,    19,    20,    21,    22,
      23,    -1,    -1,    76,    77,   119,   120,    -1,    -1,    -1,
      33,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,   136,    -1,    -1,    -1,    -1,   141,    33,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,   112,
     113,    -1,   115,    -1,    -1,    -1,    33,   120,    -1,   122,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,   149,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,    -1,    -1,    -1,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,    47,    -1,    49,    -1,    -1,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,
     113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,   122,
     123,    11,    12,   126,   127,    15,    -1,    17,   131,    -1,
      -1,    -1,    -1,    -1,   137,   138,    -1,   140,    18,    19,
      20,    21,    22,    23,    -1,   148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    -1,    47,    -1,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    58,    59,
      60,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,
      70,    18,    19,    20,    21,    22,    23,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    33,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    33,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   116,    -1,    33,   119,
     120,    -1,    -1,    -1,    -1,   125,    -1,    18,    19,    20,
      21,    22,    23,   133,   134,   135,   136,    -1,    -1,   139,
      -1,   141,    33,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,    -1,    33,    -1,    -1,   159,
      -1,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    11,
      12,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   152,   153,   154,    -1,    -1,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,    47,    -1,    49,   153,   154,
      -1,    -1,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,    -1,    64,    -1,    -1,    17,    -1,    10,    11,    12,
      -1,    -1,    -1,   154,    76,    77,   157,   158,   159,   160,
     161,    33,   163,   164,   165,    -1,    -1,    -1,   155,   156,
     157,   158,   159,   160,   161,    47,   163,   164,   165,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
     112,   113,    -1,   115,    10,    11,    12,    -1,   120,    -1,
     122,    64,    -1,    -1,    76,    -1,    -1,    -1,    -1,    10,
      11,    12,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     6,   146,    -1,     6,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,
     112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    64,   112,
     113,    -1,   115,    -1,    -1,    -1,   128,   120,    -1,   122,
      76,    77,    -1,    64,    47,    -1,    49,    47,   140,    49,
      53,    -1,    -1,    53,    -1,    76,    77,    60,    61,    -1,
      60,    61,   154,   146,    -1,    -1,    -1,    -1,    71,    72,
      73,    71,    72,    73,    -1,    -1,   112,   113,    -1,   115,
      83,    -1,    -1,    83,   120,    -1,   122,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,    10,    11,    12,    -1,   120,
      -1,   122,    -1,   106,    -1,    -1,   106,    -1,    -1,    -1,
     146,    -1,   133,   116,    -1,    -1,   116,   138,    -1,   122,
      -1,    -1,   122,   126,   127,    -1,    -1,   127,    -1,    -1,
      10,    11,    12,    -1,    -1,   138,    51,   140,   138,    54,
     140,    56,    57,    58,    59,    60,    -1,    -1,    63,    -1,
      -1,    66,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,
      -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    10,    11,    12,    64,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,
     125,    -1,    10,    11,    12,    -1,    -1,    -1,   133,   134,
     135,   136,    51,    -1,   139,    54,   141,    56,    57,    58,
      59,    60,   112,   113,    63,   115,    -1,    66,    -1,    -1,
     120,    70,   122,    54,    -1,    56,    57,    58,    77,    -1,
      -1,    -1,    -1,    51,    -1,    84,    54,    -1,    56,    57,
      58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    -1,
      -1,   100,    70,    84,    -1,    -1,    -1,    -1,    -1,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,   100,
     119,   120,    -1,    -1,    -1,    -1,   125,    -1,    10,    11,
      12,    -1,   100,    -1,   133,   134,   135,   136,   119,   120,
     139,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,   136,    -1,   125,    11,    12,
     141,    -1,    15,    -1,    -1,   133,   134,   135,   136,    -1,
      -1,   139,    54,   141,    56,    57,    58,    59,    60,    -1,
      -1,    -1,    -1,   164,    66,    -1,    -1,    11,    12,    -1,
      -1,    15,    -1,    -1,    47,    77,    -1,    -1,    51,    -1,
      -1,    54,    84,    56,    57,    58,    59,    60,    -1,    -1,
      63,    -1,    -1,    66,    -1,    -1,    -1,    70,   100,    -1,
      -1,    -1,    -1,    47,    77,    -1,    -1,    51,    -1,    -1,
      54,    84,    56,    57,    58,    59,    60,   119,   120,    63,
      -1,    -1,    66,    -1,    -1,    -1,    70,   100,    -1,    -1,
      -1,   133,    -1,    77,   136,    -1,    -1,   139,    -1,   141,
      84,    -1,    -1,   116,    -1,    -1,   119,   120,    -1,    -1,
      -1,    -1,   125,    -1,    -1,    -1,   100,    -1,    11,    12,
     133,   134,   135,   136,    -1,    -1,   139,    -1,   141,    -1,
      -1,    -1,   116,    -1,    -1,   119,   120,    -1,    -1,    -1,
      -1,   125,    -1,    -1,    -1,    -1,    -1,    11,    12,   133,
     134,   135,   136,    -1,    47,   139,    -1,   141,    51,    -1,
      -1,    54,    -1,    56,    57,    58,    59,    60,    -1,    -1,
      63,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    -1,    -1,    77,    -1,    -1,    51,    -1,    -1,
      54,    84,    56,    57,    58,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    -1,    -1,    -1,    70,   100,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    -1,    -1,   116,    -1,    -1,   119,   120,    -1,    -1,
      -1,    -1,   125,    11,    12,    -1,   100,    -1,    -1,    -1,
     133,   134,   135,   136,    -1,    -1,   139,    -1,   141,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,    11,    12,    -1,
      -1,   125,    -1,    -1,    -1,    10,    11,    12,    -1,   133,
     134,   135,   136,    51,    -1,   139,    54,   141,    56,    57,
      58,    59,    -1,    -1,    -1,    63,    -1,    54,    66,    56,
      57,    58,    70,    -1,    -1,    -1,    -1,    51,    -1,    77,
      54,    -1,    56,    57,    58,    59,    84,    -1,    -1,    63,
      -1,    -1,    66,    -1,    -1,    -1,    70,    84,    -1,    64,
      -1,    -1,   100,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    76,    77,   100,    -1,    -1,    -1,    -1,   116,    -1,
      -1,   119,   120,    11,    -1,    -1,   100,   125,    -1,    -1,
      -1,    -1,   119,   120,    -1,   133,   134,   135,   136,    -1,
      -1,   139,   107,   141,    -1,   119,   120,   112,   113,   136,
     115,   125,    11,    -1,   141,   120,    -1,   122,    -1,   133,
     134,   135,   136,    51,    -1,   139,    54,   141,    56,    57,
      58,    59,    60,    -1,    -1,    63,    -1,   164,    66,    -1,
      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      -1,    -1,    51,    -1,    -1,    54,    84,    56,    57,    58,
      59,    60,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,
      -1,    70,   100,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,    -1,    -1,   125,    11,    -1,
      -1,   100,    -1,    -1,    -1,   133,   134,   135,   136,    -1,
      -1,   139,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,    11,    -1,    -1,    -1,   125,    -1,    -1,    -1,
      10,    11,    12,    -1,   133,   134,   135,   136,    51,    -1,
     139,    54,   141,    56,    57,    58,    59,    -1,    -1,    -1,
      63,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    51,    -1,    77,    54,    -1,    56,    57,    58,
      59,    84,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,
      -1,    70,    -1,    -1,    64,    -1,    -1,   100,    77,    10,
      11,    12,    -1,    -1,    -1,    84,    76,    77,    -1,    -1,
      -1,    -1,    -1,    10,    11,    12,   119,   120,    -1,    -1,
      -1,   100,   125,    -1,    -1,    -1,    -1,    10,    11,    12,
     133,   134,   135,   136,    -1,    -1,   139,    -1,   141,    -1,
     119,   120,   112,   113,    -1,   115,   125,    -1,    -1,    -1,
     120,    -1,   122,    64,   133,   134,   135,   136,    -1,    -1,
     139,    -1,   141,   133,    -1,    76,    77,    64,   138,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,    -1,   115,    -1,    -1,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,   112,   113,    -1,   115,    -1,
      -1,    -1,   133,   120,    -1,   122,    -1,   138,    -1,   112,
     113,    -1,   115,    -1,    -1,    -1,   133,   120,    47,   122,
      49,   138,    -1,    52,    53,    -1,    -1,    -1,    -1,    -1,
     133,    60,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,    -1,
      -1,    -1,    -1,    -1,   113,   114,   115,   116,    -1,    -1,
      47,    -1,    49,   122,   123,    52,    53,   126,   127,    -1,
      -1,    -1,   131,    60,    61,    -1,    -1,    -1,   137,   138,
      -1,   140,    69,    -1,    71,    72,    73,    74,    -1,   148,
      -1,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,
      -1,    -1,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,    -1,    -1,    -1,    -1,    -1,   113,   114,   115,   116,
      -1,    -1,    47,    -1,    49,   122,   123,    52,    53,   126,
     127,    -1,    -1,    -1,   131,    60,    61,    -1,    -1,    -1,
     137,   138,    -1,   140,    69,    -1,    71,    72,    73,    74,
      -1,   148,    -1,    78,    -1,    -1,    -1,    -1,    83,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     167,    -1,    -1,    -1,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,   114,
     115,   116,    -1,    -1,    47,    -1,    49,   122,   123,    52,
      53,   126,   127,    -1,    -1,    -1,   131,    60,    61,    -1,
      -1,    -1,   137,   138,    -1,   140,    69,    -1,    71,    72,
      73,    74,    -1,   148,    -1,    78,    -1,    -1,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,
     113,   114,   115,   116,    -1,    -1,    47,    -1,    49,   122,
     123,    52,    53,   126,   127,    -1,    -1,    -1,   131,    60,
      61,    -1,    -1,    -1,   137,   138,    -1,   140,    69,    -1,
      71,    72,    73,    74,    -1,   148,    -1,    78,    -1,    -1,
      -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,    -1,    -1,    -1,
      -1,    -1,   113,   114,   115,   116,    -1,    -1,    47,    -1,
      49,   122,   123,    52,    53,   126,   127,    -1,    -1,    -1,
     131,    60,    61,    -1,    -1,    -1,   137,   138,    -1,   140,
      69,    -1,    71,    72,    73,    74,    -1,   148,    -1,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,    -1,
      -1,    -1,    -1,    -1,   113,   114,   115,   116,    -1,    -1,
      47,    -1,    49,   122,   123,    52,    53,   126,   127,    -1,
      -1,    -1,   131,    60,    61,    -1,    -1,    -1,   137,   138,
      -1,   140,    69,    -1,    71,    72,    73,    74,    -1,   148,
      -1,    78,    -1,    10,    11,    12,    83,    -1,    -1,    -1,
      -1,    -1,    -1,    54,    -1,    56,    57,    58,   167,    -1,
      -1,    -1,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,    -1,    -1,    -1,    -1,    -1,   113,   114,   115,   116,
      47,    -1,    49,    84,    -1,   122,   123,    -1,    -1,   126,
     127,    -1,    -1,    -1,   131,    -1,    -1,    64,    -1,   100,
     137,   138,    47,   140,    49,    -1,    -1,    -1,    53,    76,
      77,   148,    -1,    -1,    -1,    60,    61,    -1,   119,   120,
      -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
     167,    -1,    -1,    78,    -1,   136,    -1,    -1,    83,    -1,
     141,    -1,    -1,    -1,    -1,   112,   113,    -1,   115,    -1,
      -1,    -1,    -1,   120,    47,   122,    49,    -1,    -1,    -1,
      53,   106,    -1,   164,    -1,    -1,    -1,    60,    61,    -1,
      -1,   116,    -1,    -1,    -1,    -1,    -1,   122,    71,    72,
      73,    -1,   127,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      83,    -1,   137,   138,    47,   140,    49,    -1,    -1,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    -1,
     155,    -1,    -1,   106,    -1,    -1,    69,    -1,    71,    72,
      73,    74,    -1,   116,    -1,    78,    -1,    -1,    -1,   122,
      83,    -1,    -1,   126,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   137,   138,    -1,   140,   101,   102,
     103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,
     113,   114,   115,   116,    -1,    -1,    47,    -1,    49,   122,
     123,    -1,    53,   126,   127,    47,    -1,    49,   131,    60,
      61,    53,    -1,    -1,   137,   138,    -1,   140,    60,    61,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    83,    -1,    -1,    -1,    54,    -1,    56,    57,
      58,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   116,    84,    -1,    -1,    -1,
      -1,   122,    -1,    -1,   116,    -1,   127,    -1,    -1,    -1,
     122,    -1,   100,    -1,    -1,   127,    -1,   138,    -1,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   138,    -1,   140,    -1,
      -1,   119,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,
      -1,    -1,    -1,   141
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   143,   144,   145,   171,   172,   279,     3,     4,     5,
       6,     8,     9,    10,    11,    50,    54,    56,    57,    58,
      62,    66,    67,    75,    76,    77,    81,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   108,   110,   112,   117,   119,   120,
     121,   124,   129,   132,   136,   141,   154,   157,   158,   159,
     162,   164,   165,   168,   269,   270,   278,    11,    12,    51,
      54,    56,    57,    58,    59,    60,    63,    66,    70,    77,
      84,   100,   119,   120,   125,   133,   134,   135,   136,   139,
     141,   231,   232,   236,   238,   240,   246,   247,   251,   252,
     257,   258,   259,   260,     0,    47,    49,    52,    53,    60,
      61,    69,    71,    72,    73,    74,    78,    83,   101,   102,
     103,   104,   105,   106,   107,   113,   114,   115,   116,   122,
     123,   126,   127,   131,   137,   138,   140,   148,   175,   177,
     178,   180,   183,   202,   253,   256,   279,   146,   164,   164,
     164,   164,   164,   164,   155,   164,   155,   164,   164,   164,
     164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
     164,   164,   164,   164,   164,   164,    11,    51,    63,   133,
     134,   234,   251,   252,   257,   155,   164,   164,    15,   164,
     155,   164,   164,   164,   269,   269,   269,   269,   269,    11,
      54,    56,    57,    58,    66,    77,    84,   100,   119,   120,
     136,   141,   236,   267,   269,    10,    11,    12,    64,    76,
      77,   112,   113,   115,   120,   122,   150,   154,   159,   273,
     274,   276,   279,   269,    16,    17,    18,    19,    20,    21,
      22,    23,    33,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   163,   164,   165,     6,     8,   231,
     232,   164,    59,   125,    66,   100,   258,   258,   258,   276,
     164,   258,    13,    15,    17,    60,   140,   154,   159,   164,
     229,   230,   279,   230,   146,    10,    11,    12,   112,   149,
     277,   237,   279,   137,   181,   182,   276,   164,    72,    83,
     180,   180,   180,   180,     6,   180,   202,   180,   149,   179,
     107,   180,   164,   164,   164,   164,   164,   180,   146,   276,
     149,   149,   149,   180,   180,   164,   178,   180,   183,   203,
     180,   180,   187,   107,   276,   180,   180,    10,    11,    51,
      63,   111,   133,   134,   146,   162,   190,   193,   233,   235,
     238,   240,   246,   251,   252,   257,   266,   267,   279,   266,
     236,   266,   266,   266,   266,   236,   266,   236,   266,   236,
     266,   236,   236,   236,   236,   236,   236,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   266,   164,   276,   164,
     164,   276,   237,   236,   266,   266,   164,    10,   236,   236,
     236,   269,   266,   266,   166,   147,   166,   276,   276,   147,
     169,   150,   219,   279,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   166,   267,   269,   230,   230,
      51,   269,   236,   159,   276,    13,    15,    17,    60,   140,
     154,   159,   229,   279,   229,   230,   229,   230,   229,   229,
      15,    17,    47,    60,   116,   154,   159,   214,   215,   224,
     231,   232,   279,   165,   249,   250,   279,    11,   248,   258,
     149,    10,    11,    12,    47,    49,   112,   146,   276,   277,
     276,    48,   147,   164,    11,   233,   269,   180,   177,   146,
     276,   276,   276,   276,   276,   276,   172,   146,   269,   155,
      10,    11,   193,   233,   235,   276,   148,   150,   164,   164,
     164,    60,   231,   276,   164,   176,   276,   185,   146,   148,
     150,   221,   148,   184,   276,   277,   237,   167,   166,   166,
     166,   166,   166,   166,   156,   166,   156,   166,   166,   166,
     166,   147,   166,   147,   166,   147,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   269,   236,   266,
     276,   156,   166,   166,   276,   166,   166,   156,   166,   166,
     166,   166,   269,   269,    15,   154,   274,   164,   199,   279,
     269,   149,   166,   169,   166,   166,   166,   229,   159,   276,
     229,   229,   229,   229,   229,   165,   229,   181,   116,   231,
     232,   224,   229,   229,   166,    15,   147,    13,    17,    60,
     140,   154,   159,   164,   227,   277,   279,    13,    15,    17,
      60,   140,   154,   159,   164,   228,   265,   269,   279,   276,
     167,   248,   181,   164,   239,   241,   149,   180,   181,     3,
       4,     5,     9,    10,    15,    50,    62,    67,    75,    76,
     108,   110,   112,   117,   121,   124,   129,   132,   154,   157,
     158,   162,   164,   168,   216,   217,   224,   225,   271,   272,
     278,   279,   166,   166,   172,   146,   147,   147,   147,   147,
     147,   167,   254,   147,   166,    10,    11,    12,    59,    60,
     133,   204,   205,   206,   207,   208,   257,   279,   164,   221,
     188,   148,   236,   191,    13,   159,   192,    51,   269,   231,
      13,    17,    60,   140,   154,   159,   226,   277,   279,   236,
     172,   164,   146,   148,   149,   150,   220,   261,   262,    64,
      65,   146,   269,    13,    17,    60,   111,   140,   154,   159,
     164,   186,   209,   211,   277,   149,   276,   164,   164,   236,
     236,   236,   166,   166,   166,   164,   166,   164,   219,   214,
      17,    33,    47,    60,    61,    76,   106,   109,   112,   128,
     140,   154,   212,   279,   269,   229,   265,   166,    48,   231,
     232,   227,   228,   166,   166,   199,    15,   224,   159,   227,
     227,   227,   227,   227,   227,   165,   219,   159,   276,   228,
     228,   228,   228,   228,   228,   165,   219,   169,   147,   150,
      48,   233,   269,   172,    76,   242,   279,   182,   164,   155,
     155,   234,   155,    15,   164,   155,   164,   269,   269,   269,
     269,   236,   267,   269,   166,    15,   147,    16,    17,    18,
      19,    20,    21,    22,    23,    33,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   163,   164,   165,
     180,   180,   167,   255,    10,    10,    10,    10,    10,   172,
     278,   148,   208,   156,   147,    15,   276,    13,    17,    60,
     140,   154,   159,   164,   227,   228,   189,   211,   148,   214,
     159,   209,   214,   166,   166,   226,   159,   226,   226,   226,
     226,   226,   164,   165,   166,   167,   194,   261,   173,   174,
     276,    64,    65,   167,   263,   279,   148,   148,   146,   222,
     223,   269,   279,   148,   159,   209,   209,     6,    16,    17,
      18,    19,    20,    21,    22,    23,    33,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    65,
     108,   147,   150,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   164,   165,   168,   200,   209,   209,
     209,   209,   149,   164,   165,   212,   150,   219,   221,   248,
     267,   267,   166,   166,   166,   267,   267,   166,    60,   234,
     181,   164,   146,   169,   164,   224,   227,   228,   219,   219,
     164,   164,   212,   227,   166,   265,   228,   166,   265,   269,
     166,   166,   167,   149,   243,   244,   279,   236,   236,   236,
     164,   236,   164,    10,   236,   236,   236,   269,   166,   166,
      15,   225,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   166,   267,   269,   172,   147,   166,   147,
     213,   279,   147,   147,   147,   167,   166,   227,   228,   178,
     183,   201,   202,   207,   276,   150,   159,   150,   218,   279,
     219,   221,   166,   209,   166,   166,   164,   226,   197,   265,
     214,   167,   146,   147,   146,   164,   148,   148,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    70,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    82,    83,    84,   100,   106,   107,
     108,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   168,   169,   264,   222,   167,
     147,   209,    10,   166,   169,   166,     4,   210,   265,   269,
     147,   166,   166,   166,   166,   199,   234,   230,    48,   166,
     276,   261,   214,   219,   219,   214,   214,   164,   169,   164,
     169,   147,   113,   114,   115,   133,   138,   245,   275,   276,
     146,   147,   166,   156,   156,   266,   156,   276,   166,   166,
     156,   166,   166,   269,   149,   166,   169,   167,    10,   148,
      10,   166,    10,    10,    10,   148,   218,   236,    50,    62,
      67,   117,   121,   124,   154,   157,   158,   159,   162,   164,
     168,   268,   270,   147,   199,   166,   164,   199,   198,   214,
     169,   166,   261,   174,   266,   266,   263,   167,   146,   269,
     216,   169,   186,   212,   230,    15,   166,   167,   166,   166,
     166,   214,   214,   138,   275,   138,   275,   138,   275,   276,
     113,   114,   115,    15,   172,   245,   164,   164,   166,   164,
     166,   164,   269,   147,   166,   147,   148,   147,   166,   166,
     147,   166,   164,   155,   155,   155,    15,   164,   155,   268,
     268,   268,   268,   268,   236,   267,   268,    16,    17,    18,
      19,    20,    21,    22,    23,    33,   151,   152,   153,   154,
     157,   158,   159,   160,   161,   163,   164,   165,   189,   164,
     195,   214,   166,   199,   167,   167,   166,   167,   222,   166,
     146,   166,   199,   199,   199,   166,   166,   275,   275,   275,
     275,   275,   275,   167,   267,   267,   267,   267,    10,   148,
      10,    10,   148,   148,    10,   148,   236,   236,   236,   236,
     164,    10,   236,   236,   166,   166,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   166,   267,   269,   196,   214,
     166,   199,    15,   167,   199,   261,   212,   212,   212,   199,
     199,   166,   166,   166,   166,   147,   213,   166,   147,   147,
     166,   166,   156,   156,   156,   276,   166,   166,   156,   268,
     149,   166,   169,   214,   166,   199,   167,    10,   166,   148,
      10,    10,   148,   164,   164,   164,   166,   164,   268,   166,
     199,   148,   166,   166,   267,   267,   267,   267,   199,   212,
     148,   148,   166,   166,   166,   166,   212
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   170,   171,   171,   171,   172,   172,   172,   173,   173,
     174,   174,   174,   176,   175,   177,   177,   177,   177,   177,
     177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
     177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
     179,   178,   180,   180,   180,   180,   180,   180,   180,   180,
     180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
     181,   181,   182,   182,   182,   184,   183,   183,   185,   183,
     183,   183,   186,   186,   188,   187,   187,   189,   189,   191,
     190,   192,   190,   194,   193,   195,   193,   196,   193,   197,
     193,   198,   193,   193,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   200,   200,
     200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   200,   200,   201,   201,   201,
     202,   203,   202,   202,   202,   204,   204,   205,   205,   206,
     206,   207,   207,   207,   207,   207,   207,   207,   207,   207,
     208,   208,   208,   208,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   210,   209,   211,   211,   212,
     212,   212,   213,   213,   214,   214,   214,   214,   214,   215,
     215,   216,   216,   216,   216,   216,   217,   217,   218,   218,
     219,   219,   220,   220,   220,   220,   220,   221,   221,   221,
     221,   221,   221,   222,   222,   222,   223,   223,   223,   223,
     224,   224,   224,   224,   224,   224,   224,   224,   225,   225,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   227,
     227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
     228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
     228,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   230,   230,   230,   230,   230,   230,   230,   230,   230,
     230,   230,   230,   230,   230,   231,   231,   231,   231,   231,
     231,   231,   231,   231,   231,   231,   231,   232,   233,   233,
     233,   233,   233,   233,   233,   233,   233,   233,   233,   233,
     233,   234,   234,   234,   234,   234,   234,   234,   234,   235,
     235,   236,   236,   236,   236,   237,   237,   237,   237,   239,
     238,   241,   240,   242,   242,   243,   243,   244,   244,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   246,
     247,   247,   247,   247,   248,   248,   249,   249,   249,   250,
     250,   250,   251,   251,   251,   252,   252,   252,   254,   253,
     255,   253,   253,   253,   256,   256,   256,   257,   257,   257,
     258,   258,   258,   258,   258,   258,   258,   258,   258,   258,
     258,   258,   258,   258,   259,   259,   259,   260,   262,   261,
     263,   263,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   265,   265,   266,   266,   267,   267,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     273,   273,   273,   273,   273,   274,   274,   274,   274,   275,
     275,   275,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   277,   277,   277,   277,   278,   278,   278,
     278,   279
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     5,     4,     0,     5,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     2,     2,     2,     8,    11,     9,
      11,    13,     7,     9,    12,     9,    13,     9,     7,     5,
       0,     3,     1,     2,     2,     3,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     4,     5,     5,
       1,     3,     1,     4,     4,     0,     4,     3,     0,     4,
       3,     1,     2,     4,     0,     4,     3,     2,     4,     0,
       6,     0,     6,     0,     7,     0,    11,     0,    12,     0,
       8,     0,     9,     1,     1,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     4,     5,     6,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       2,     0,     6,     2,     2,     1,     1,     1,     3,     1,
       1,     1,     2,     4,     2,     3,     3,     4,     2,     3,
       1,     1,     1,     1,     1,     2,     3,     2,     2,     2,
       2,     2,     3,     4,     3,     0,     6,     2,     3,     1,
       3,     4,     1,     2,     1,     1,     1,     3,     2,     1,
       3,     1,     1,     1,     3,     2,     1,     3,     1,     2,
       1,     2,     1,     3,     5,     3,     3,     1,     3,     3,
       3,     3,     4,     1,     1,     2,     1,     3,     3,     5,
       3,     4,     5,     3,     4,     5,     2,     4,     1,     1,
       1,     1,     2,     2,     2,     2,     2,     3,     4,     1,
       1,     2,     2,     2,     2,     2,     3,     4,     7,     3,
       1,     2,     2,     2,     2,     2,     2,     3,     4,     7,
       3,     1,     1,     2,     2,     2,     2,     2,     2,     3,
       4,     1,     1,     2,     2,     2,     2,     2,     2,     3,
       4,     5,     9,     9,     9,     1,     1,     2,     1,     1,
       1,     3,     4,     4,     4,     4,     1,     1,     1,     1,
       2,     1,     1,     1,     3,     4,     2,     4,     4,     4,
       1,     1,     1,     2,     3,     2,     4,     4,     1,     1,
       1,     2,     3,     2,     3,     1,     4,     5,     5,     0,
       6,     0,     9,     1,     1,     1,     1,     2,     3,     1,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     4,
       3,     1,     4,     2,     1,     1,     1,     3,     5,     1,
       2,     4,     1,     2,     2,     1,     1,     1,     0,     6,
       0,     7,     4,     5,     3,     5,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     1,     1,     2,     1,     0,     2,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     3,     1,     4,     7,
       7,     7,     7,     4,     4,     5,     4,     2,     2,     2,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       4,     4,     3,     3,     3,     3,     1,     4,     7,     7,
       7,     7,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     5,     4,
       2,     5,     4,     4,     2,     2,     2,     2,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     5,     4,
       4,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     8,    11,     4,     4,
       6,     4,     4,     6,     6,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     1,     4,     7,     7,     7,
       7,     4,     4,     5,     4,     2,     5,     4,     4,     2,
       2,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     4,     4,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     4,     2,     3,     1,     2,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     0
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
#line 451 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_expr = (yyvsp[0].u.expr);
}
#line 4025 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 4:
#line 455 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_type = (yyvsp[0].u.type);
}
#line 4033 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 10:
#line 473 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-1].u.expr);
}
#line 4041 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 11:
#line 477 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-2].u.expr);
}
#line 4049 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 12:
#line 481 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-1].u.expr);
}
#line 4057 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 13:
#line 493 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
#line 4066 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 14:
#line 498 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4074 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 21:
#line 511 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
#line 4091 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 22:
#line 524 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
#line 4104 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 23:
#line 533 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_published);
}
#line 4112 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 24:
#line 537 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
#line 4124 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 25:
#line 545 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_protected);
}
#line 4132 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 26:
#line 549 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_private);
}
#line 4140 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 27:
#line 553 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-5].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-7]).file);
    make_property->_get_function = getter->as_function_group();

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_set_function = setter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-7]));
  }
}
#line 4165 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 28:
#line 574 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4196 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 29:
#line 601 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4221 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 30:
#line 622 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4254 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 31:
#line 651 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    length_getter = NULL;
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4294 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 32:
#line 687 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid item getter method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-4].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-6]).file);
    make_property->_get_function = getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-6]));
  }
}
#line 4310 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 33:
#line 699 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4335 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 34:
#line 720 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-5].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-9].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-11]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-7].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-7].u.identifier)->get_fully_scoped_name(), (yylsp[-7]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_del_function = deleter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-11]));
  }
}
#line 4375 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 35:
#line 756 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4401 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 36:
#line 778 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *clearer = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (clearer == nullptr || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid clear method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_clear_function = clearer->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4441 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 37:
#line 814 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = NULL;
  }

  CPPDeclaration *element_getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == (CPPDeclaration *)NULL || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    element_getter = NULL;
  }

  if (length_getter != (CPPDeclaration *)NULL && element_getter != (CPPDeclaration *)NULL) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4467 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 38:
#line 836 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPExpression::Result result = (yyvsp[-4].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-4]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[-2].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[-4]));
  }
}
#line 4482 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 39:
#line 847 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-2]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[-2]));
  }
}
#line 4496 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 40:
#line 860 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
#line 4506 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 41:
#line 866 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete current_scope;
  pop_scope();
}
#line 4515 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 42:
#line 875 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = 0;
}
#line 4523 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 43:
#line 879 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This isn't really a storage class, but it helps with parsing.
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_const;
}
#line 4532 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 44:
#line 884 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
}
#line 4540 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 45:
#line 888 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[-1].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[-1].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[-1].str) + "\"", (yylsp[-1]));
  }
}
#line 4555 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 46:
#line 899 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_static;
}
#line 4563 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 47:
#line 903 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_inline;
}
#line 4571 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 48:
#line 907 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_virtual;
}
#line 4579 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 49:
#line 911 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
}
#line 4587 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 50:
#line 915 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_register;
}
#line 4595 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 51:
#line 919 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_volatile;
}
#line 4603 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 52:
#line 923 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_mutable;
}
#line 4611 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 53:
#line 927 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constexpr;
}
#line 4619 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 54:
#line 931 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_blocking;
}
#line 4627 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 55:
#line 935 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extension;
}
#line 4635 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 56:
#line 939 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_thread_local;
}
#line 4643 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 57:
#line 943 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Ignore attribute specifiers for now.
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4652 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 58:
#line 948 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4660 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 59:
#line 952 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4668 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 65:
#line 970 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // type_like_declaration.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4683 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 66:
#line 981 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4691 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 67:
#line 986 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
#line 4704 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 68:
#line 995 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[0].u.instance) != (CPPInstance *)NULL) {
    // Push the scope so that the initializers can make use of things defined
    // in the class body.
    push_scope((yyvsp[0].u.instance)->get_scope(current_scope, global_scope));
    (yyvsp[0].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-1].u.integer));
  }
}
#line 4717 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 69:
#line 1004 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-2].u.instance) != (CPPInstance *)NULL) {
    pop_scope();
    current_scope->add_declaration((yyvsp[-2].u.instance), global_scope, current_lexer, (yylsp[-2]));
    (yyvsp[-2].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4729 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 70:
#line 1012 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4741 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 72:
#line 1028 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 4756 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 73:
#line 1039 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 4771 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 74:
#line 1054 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4786 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 75:
#line 1065 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4794 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 76:
#line 1069 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPDeclaration *)NULL) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
#line 4810 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 77:
#line 1084 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
}
#line 4823 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 78:
#line 1093 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-3]));
}
#line 4836 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 79:
#line 1107 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4844 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 80:
#line 1111 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name() ||
      (yyvsp[-5].u.identifier)->get_simple_name() == string("~") + current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[-5]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 4868 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 81:
#line 1131 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4876 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 82:
#line 1135 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 4898 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 83:
#line 1158 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4906 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 84:
#line 1162 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  if ((yyvsp[-5].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[-5].u.identifier)->get_simple_name(), (yylsp[-5]));
    delete (yyvsp[-5].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
  }
}
#line 4929 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 85:
#line 1188 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 4937 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 86:
#line 1192 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-10].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-10]).file);
}
#line 4955 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 87:
#line 1206 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 4963 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 88:
#line 1210 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-11].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-11].u.identifier)->get_fully_scoped_name(), (yylsp[-11]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-9].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-11]).file);
}
#line 4981 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 89:
#line 1226 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-3].u.identifier) != NULL) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 4991 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 90:
#line 1232 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-7].u.identifier) != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier(name, (yylsp[-6]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5020 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 91:
#line 1257 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-4].u.identifier) != NULL) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5030 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 92:
#line 1263 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-8].u.identifier) != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-5]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5050 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 93:
#line 1283 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *decl =
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = (CPPInstance *)NULL;
  }
}
#line 5064 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 94:
#line 1296 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = 0;
}
#line 5072 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 95:
#line 1300 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_const_method;
}
#line 5080 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 96:
#line 1304 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_volatile_method;
}
#line 5088 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 97:
#line 1308 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_noexcept;
}
#line 5096 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 98:
#line 1321 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_final;
}
#line 5104 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 99:
#line 1325 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_override;
}
#line 5112 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 100:
#line 1329 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_lvalue_method;
}
#line 5120 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 101:
#line 1333 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_rvalue_method;
}
#line 5128 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 102:
#line 1337 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5137 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 103:
#line 1342 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Used for lambdas in C++17, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5146 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 104:
#line 1347 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5154 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 105:
#line 1351 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
#line 5162 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 106:
#line 1355 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-5].u.integer);
}
#line 5170 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 107:
#line 1359 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5178 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 108:
#line 1366 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "!";
}
#line 5186 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 109:
#line 1370 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "~";
}
#line 5194 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 110:
#line 1374 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "*";
}
#line 5202 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 111:
#line 1378 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "/";
}
#line 5210 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 112:
#line 1382 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "%";
}
#line 5218 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 113:
#line 1386 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "+";
}
#line 5226 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 114:
#line 1390 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "-";
}
#line 5234 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 115:
#line 1394 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "|";
}
#line 5242 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 116:
#line 1398 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&";
}
#line 5250 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 117:
#line 1402 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "^";
}
#line 5258 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 118:
#line 1406 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "||";
}
#line 5266 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 119:
#line 1410 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&&";
}
#line 5274 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 120:
#line 1414 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "==";
}
#line 5282 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 121:
#line 1418 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "!=";
}
#line 5290 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 122:
#line 1422 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<=";
}
#line 5298 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 123:
#line 1426 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">=";
}
#line 5306 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 124:
#line 1430 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<";
}
#line 5314 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 125:
#line 1434 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">";
}
#line 5322 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 126:
#line 1438 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<<";
}
#line 5330 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 127:
#line 1442 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">>";
}
#line 5338 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 128:
#line 1446 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "=";
}
#line 5346 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 129:
#line 1450 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ",";
}
#line 5354 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 130:
#line 1454 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "++";
}
#line 5362 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 131:
#line 1458 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "--";
}
#line 5370 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 132:
#line 1462 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "*=";
}
#line 5378 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 133:
#line 1466 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "/=";
}
#line 5386 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 134:
#line 1470 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "%=";
}
#line 5394 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 135:
#line 1474 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "+=";
}
#line 5402 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 136:
#line 1478 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "-=";
}
#line 5410 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 137:
#line 1482 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "|=";
}
#line 5418 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 138:
#line 1486 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&=";
}
#line 5426 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 139:
#line 1490 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "^=";
}
#line 5434 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 140:
#line 1494 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<<=";
}
#line 5442 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 141:
#line 1498 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">>=";
}
#line 5450 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 142:
#line 1502 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "->";
}
#line 5458 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 143:
#line 1506 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "[]";
}
#line 5466 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 144:
#line 1510 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "()";
}
#line 5474 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 145:
#line 1514 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "new";
}
#line 5482 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 146:
#line 1518 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "delete";
}
#line 5490 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 151:
#line 1532 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope(new CPPTemplateScope(current_scope));
}
#line 5498 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 152:
#line 1536 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 5506 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 157:
#line 1550 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5516 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 158:
#line 1556 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5526 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 161:
#line 1570 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((CPPIdentifier *)NULL));
}
#line 5534 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 162:
#line 1574 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 5542 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 163:
#line 1578 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 5550 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 164:
#line 1582 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((CPPIdentifier *)NULL);
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5560 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 165:
#line 1588 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[0].u.identifier));
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5570 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 166:
#line 1594 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5580 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 167:
#line 1600 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5591 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 168:
#line 1607 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5600 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 169:
#line 1612 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5610 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 170:
#line 1621 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5618 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 171:
#line 1625 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 5627 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 172:
#line 1630 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 5639 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 173:
#line 1638 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 5651 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 174:
#line 1650 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 5659 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 175:
#line 1654 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-1].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+(yyvsp[0].str), (yylsp[0]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[0].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5677 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 176:
#line 1668 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A C++11 literal operator.
  if (!(yyvsp[-1].str).empty()) {
    yyerror("expected empty string", (yylsp[-1]));
  }
  CPPIdentifier *ident = (yyvsp[-2].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name(), (yylsp[0]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5696 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 177:
#line 1683 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5705 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 178:
#line 1688 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5714 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 179:
#line 1693 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 5723 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 180:
#line 1698 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 5732 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 181:
#line 1703 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 5741 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 182:
#line 1708 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 5750 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 183:
#line 1713 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 5759 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 184:
#line 1718 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 5768 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 185:
#line 1723 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Create a scope for this function (in case it is a function)
  CPPScope *scope = new CPPScope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope),
                                 CPPNameComponent(""), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5785 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 186:
#line 1736 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  if ((yyvsp[-2].u.param_list)->is_parameter_expr() && (yyvsp[0].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-2].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  }
}
#line 5803 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 187:
#line 1754 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[0].u.type) != NULL) {
    (yyvsp[-1].u.inst_ident)->add_trailing_return_type((yyvsp[0].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
}
#line 5817 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 188:
#line 1764 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Bitfield definition.
  (yyvsp[-2].u.inst_ident)->_bit_width = (yyvsp[0].u.integer);
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
#line 5827 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 189:
#line 1774 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = NULL;
}
#line 5835 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 190:
#line 1778 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5843 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 191:
#line 1782 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5852 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 192:
#line 1791 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = NULL;
}
#line 5860 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 193:
#line 1795 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 5868 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 194:
#line 1803 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
}
#line 5876 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 195:
#line 1807 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5885 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 196:
#line 1812 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 5893 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 197:
#line 1816 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5902 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 198:
#line 1821 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5911 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 199:
#line 1829 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5920 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 200:
#line 1834 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5929 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 201:
#line 1842 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
}
#line 5937 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 202:
#line 1846 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5946 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 203:
#line 1851 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 5954 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 204:
#line 1855 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5963 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 205:
#line 1860 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5972 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 206:
#line 1868 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5981 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 207:
#line 1873 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5990 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 208:
#line 1881 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5998 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 209:
#line 1885 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6006 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 210:
#line 1892 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 6014 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 211:
#line 1896 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6022 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 212:
#line 1903 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 6030 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 213:
#line 1907 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 6038 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 214:
#line 1911 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 6046 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 215:
#line 1915 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6054 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 216:
#line 1919 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6062 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 217:
#line 1926 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 6070 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 218:
#line 1930 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 6078 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 219:
#line 1934 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 6086 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 220:
#line 1938 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6094 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 221:
#line 1942 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6102 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 222:
#line 1946 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 6110 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 226:
#line 1959 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
}
#line 6117 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 230:
#line 1968 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6126 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 231:
#line 1973 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6136 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 232:
#line 1979 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6146 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 233:
#line 1985 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6155 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 234:
#line 1990 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6165 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 235:
#line 1996 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6175 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 236:
#line 2002 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6183 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 237:
#line 2006 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6191 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 238:
#line 2017 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6199 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 239:
#line 2021 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6210 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 240:
#line 2031 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6218 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 241:
#line 2035 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 6226 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 242:
#line 2039 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6235 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 243:
#line 2044 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6244 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 244:
#line 2049 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6253 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 245:
#line 2054 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6262 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 246:
#line 2059 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6271 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 247:
#line 2064 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6280 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 248:
#line 2069 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6289 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 249:
#line 2077 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6297 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 250:
#line 2081 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 6305 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 251:
#line 2085 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6314 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 252:
#line 2090 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6323 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 253:
#line 2095 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6332 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 254:
#line 2100 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6341 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 255:
#line 2105 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6350 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 256:
#line 2110 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6359 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 257:
#line 2115 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6368 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 258:
#line 2120 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6378 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 259:
#line 2126 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6387 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 260:
#line 2134 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6396 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 261:
#line 2139 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6405 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 262:
#line 2144 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6414 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 263:
#line 2149 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6423 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 264:
#line 2154 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6432 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 265:
#line 2159 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6441 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 266:
#line 2164 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6450 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 267:
#line 2169 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6459 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 268:
#line 2174 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6468 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 269:
#line 2179 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6478 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 270:
#line 2185 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6487 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 271:
#line 2193 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6495 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 272:
#line 2197 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6504 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 273:
#line 2202 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6513 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 274:
#line 2207 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6522 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 275:
#line 2212 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6531 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 276:
#line 2217 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6540 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 277:
#line 2222 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6549 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 278:
#line 2227 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6558 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 279:
#line 2232 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6567 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 280:
#line 2237 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6576 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 281:
#line 2245 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6584 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 282:
#line 2249 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6593 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 283:
#line 2254 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6602 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 284:
#line 2259 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6611 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 285:
#line 2264 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6620 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 286:
#line 2269 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6629 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 287:
#line 2274 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6638 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 288:
#line 2279 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6647 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 289:
#line 2284 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6656 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 290:
#line 2289 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6665 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 291:
#line 2294 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6675 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 292:
#line 2300 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6686 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 293:
#line 2307 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6697 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 294:
#line 2314 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6708 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 295:
#line 2324 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6716 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 296:
#line 2328 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 6728 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 297:
#line 2336 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6736 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 298:
#line 2340 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6744 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 299:
#line 2344 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6752 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 300:
#line 2348 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
#line 6760 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 301:
#line 2352 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6780 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 302:
#line 2368 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6800 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 303:
#line 2384 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6813 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 304:
#line 2393 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6821 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 305:
#line 2397 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 6835 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 306:
#line 2407 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6843 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 307:
#line 2414 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 6855 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 308:
#line 2425 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6863 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 309:
#line 2429 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.decl) != NULL);
}
#line 6875 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 310:
#line 2437 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6883 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 311:
#line 2441 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6891 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 312:
#line 2445 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
#line 6899 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 313:
#line 2449 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
#line 6907 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 314:
#line 2453 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 6927 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 315:
#line 2469 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 6947 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 316:
#line 2485 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));

  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 6969 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 317:
#line 2503 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.decl) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6982 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 318:
#line 2512 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6990 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 319:
#line 2516 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.decl) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.decl) = enum_type->get_underlying_type();
  }
}
#line 7004 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 320:
#line 2526 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7012 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 321:
#line 2533 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7020 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 322:
#line 2537 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 7032 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 323:
#line 2545 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7040 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 324:
#line 2549 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7060 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 325:
#line 2565 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7080 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 326:
#line 2581 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7093 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 327:
#line 2590 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 7107 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 328:
#line 2600 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7115 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 329:
#line 2607 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[0].u.decl);
}
#line 7123 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 330:
#line 2611 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yyerror(string("unknown type '") + (yyvsp[0].u.identifier)->get_fully_scoped_name() + "'", (yylsp[0]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 7133 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 331:
#line 2619 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7141 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 332:
#line 2623 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7150 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 333:
#line 2628 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7158 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 334:
#line 2632 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7167 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 339:
#line 2647 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), NULL, current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7185 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 340:
#line 2661 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7196 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 341:
#line 2671 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7220 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 342:
#line 2691 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7231 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 344:
#line 2702 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->_final = true;
}
#line 7239 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 349:
#line 2719 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_unknown, false);
}
#line 7247 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 350:
#line 2723 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
#line 7255 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 351:
#line 2727 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
#line 7263 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 352:
#line 2731 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
#line 7271 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 353:
#line 2735 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7279 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 354:
#line 2739 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7287 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 355:
#line 2743 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7295 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 356:
#line 2747 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7303 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 357:
#line 2751 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7311 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 358:
#line 2755 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7319 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 359:
#line 2762 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
#line 7328 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 360:
#line 2770 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType((yyvsp[-2].u.extension_enum), NULL, (yyvsp[0].u.type), current_scope, NULL, (yylsp[-2]).file);
}
#line 7336 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 361:
#line 2774 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType((yyvsp[0].u.extension_enum), NULL, current_scope, NULL, (yylsp[0]).file);
}
#line 7344 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 362:
#line 2778 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[-2].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), (yyvsp[0].u.type), current_scope, new_scope, (yylsp[-3]).file);
}
#line 7353 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 363:
#line 2783 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[0].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, new_scope, (yylsp[-1]).file);
}
#line 7362 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 364:
#line 2791 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7370 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 365:
#line 2795 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
#line 7378 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 367:
#line 2803 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-1].u.identifier)->get_simple_name(), NULL, current_lexer, (yylsp[-1]));
}
#line 7387 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 368:
#line 2808 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-3].u.identifier)->get_simple_name(), (yyvsp[-1].u.expr), current_lexer, (yylsp[-3]));
}
#line 7396 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 370:
#line 2816 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[0].u.identifier)->get_simple_name(), NULL, current_lexer, (yylsp[0]));
}
#line 7405 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 371:
#line 2821 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), (yyvsp[0].u.expr), current_lexer, (yylsp[-2]));
}
#line 7414 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 372:
#line 2829 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
#line 7422 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 373:
#line 2833 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_class;
}
#line 7430 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 374:
#line 2837 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_struct;
}
#line 7438 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 375:
#line 2844 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
#line 7446 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 376:
#line 2848 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
#line 7454 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 377:
#line 2852 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
#line 7462 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 378:
#line 2859 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7484 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 379:
#line 2877 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 7492 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 380:
#line 2881 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7515 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 381:
#line 2900 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 7523 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 384:
#line 2909 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7533 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 385:
#line 2915 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[-1].u.type), (yyvsp[-3].u.identifier), current_scope);
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-4]));
}
#line 7544 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 386:
#line 2922 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), true, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7554 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 390:
#line 2937 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
#line 7562 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 391:
#line 2941 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
#line 7570 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 392:
#line 2945 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
#line 7578 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 393:
#line 2949 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
#line 7586 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 394:
#line 2953 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
#line 7594 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 395:
#line 2957 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
#line 7603 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 396:
#line 2962 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
#line 7612 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 397:
#line 2967 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
#line 7621 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 398:
#line 2972 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
#line 7630 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 399:
#line 2977 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
#line 7638 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 400:
#line 2981 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
#line 7647 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 401:
#line 2986 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
#line 7660 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 402:
#line 2995 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
#line 7669 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 403:
#line 3000 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
#line 7678 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 404:
#line 3008 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
#line 7686 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 405:
#line 3012 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
#line 7694 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 406:
#line 3016 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
#line 7703 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 407:
#line 3024 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
#line 7711 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 408:
#line 3033 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_lexer->_resolve_identifiers = false;
}
#line 7719 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 409:
#line 3037 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_lexer->_resolve_identifiers = true;
}
#line 7727 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 517:
#line 3081 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
}
#line 7734 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 541:
#line 3090 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 7742 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 542:
#line 3094 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7750 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 543:
#line 3101 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 7758 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 544:
#line 3105 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7766 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 545:
#line 3112 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7774 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 546:
#line 3116 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7782 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 547:
#line 3123 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7790 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 548:
#line 3127 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 7798 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 549:
#line 3131 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 7806 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 550:
#line 3135 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 7814 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 551:
#line 3139 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 7822 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 552:
#line 3143 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 7830 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 553:
#line 3147 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 7838 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 554:
#line 3151 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 7854 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 555:
#line 3163 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 7862 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 556:
#line 3167 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 7870 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 557:
#line 3171 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 7878 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 558:
#line 3175 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 7886 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 559:
#line 3179 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 7894 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 560:
#line 3183 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 7902 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 561:
#line 3187 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 7910 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 562:
#line 3191 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 7918 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 563:
#line 3195 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7926 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 564:
#line 3199 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7934 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 565:
#line 3203 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7942 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 566:
#line 3207 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7950 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 567:
#line 3211 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7958 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 568:
#line 3215 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7966 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 569:
#line 3219 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7974 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 570:
#line 3223 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7982 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 571:
#line 3227 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7990 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 572:
#line 3231 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7998 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 573:
#line 3235 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8006 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 574:
#line 3239 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8014 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 575:
#line 3243 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8022 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 576:
#line 3247 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8030 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 577:
#line 3251 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8038 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 578:
#line 3255 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8046 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 579:
#line 3259 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8054 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 580:
#line 3263 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8062 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 581:
#line 3267 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8070 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 582:
#line 3271 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8078 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 583:
#line 3275 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8086 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 584:
#line 3279 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8094 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 585:
#line 3283 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8102 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 586:
#line 3291 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8110 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 587:
#line 3295 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8118 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 588:
#line 3299 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8126 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 589:
#line 3303 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8134 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 590:
#line 3307 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8142 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 591:
#line 3311 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8150 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 592:
#line 3315 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8164 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 593:
#line 3325 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Aggregate initialization.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::aggregate_init_op(type, (yyvsp[-1].u.expr)));
}
#line 8178 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 594:
#line 3335 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8188 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 595:
#line 3341 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8198 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 596:
#line 3347 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8208 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 597:
#line 3353 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8218 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 598:
#line 3359 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8228 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 599:
#line 3365 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8238 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 600:
#line 3371 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8249 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 601:
#line 3378 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8260 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 602:
#line 3385 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8271 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 603:
#line 3392 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8282 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 604:
#line 3399 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8292 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 605:
#line 3405 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8302 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 606:
#line 3411 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8310 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 607:
#line 3415 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 8326 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 608:
#line 3427 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8334 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 609:
#line 3431 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8342 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 610:
#line 3435 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8350 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 611:
#line 3439 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8358 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 612:
#line 3443 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 8373 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 613:
#line 3454 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 8388 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 614:
#line 3465 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8396 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 615:
#line 3469 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8404 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 616:
#line 3473 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8412 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 617:
#line 3477 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8420 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 618:
#line 3481 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8428 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 619:
#line 3485 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8436 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 620:
#line 3489 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8444 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 621:
#line 3493 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8452 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 622:
#line 3497 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8460 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 623:
#line 3501 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8468 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 624:
#line 3505 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8476 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 625:
#line 3509 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8484 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 626:
#line 3513 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8492 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 627:
#line 3517 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8500 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 628:
#line 3521 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8508 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 629:
#line 3525 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8516 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 630:
#line 3529 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8524 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 631:
#line 3533 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8532 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 632:
#line 3537 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8540 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 633:
#line 3541 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8548 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 634:
#line 3545 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8556 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 635:
#line 3549 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8564 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 636:
#line 3553 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8572 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 637:
#line 3557 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8580 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 638:
#line 3561 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8588 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 639:
#line 3565 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8596 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 640:
#line 3569 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8604 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 641:
#line 3573 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8612 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 642:
#line 3577 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8620 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 643:
#line 3581 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8628 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 644:
#line 3585 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8636 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 645:
#line 3592 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8644 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 646:
#line 3596 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 8652 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 647:
#line 3600 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 8660 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 648:
#line 3604 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8668 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 649:
#line 3608 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 8676 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 650:
#line 3612 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8684 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 651:
#line 3616 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8692 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 652:
#line 3620 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 8700 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 653:
#line 3624 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8710 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 654:
#line 3630 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8720 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 655:
#line 3636 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 8728 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 656:
#line 3640 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-6].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-6].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-6].u.closure_type)));
}
#line 8738 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 657:
#line 3646 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-9].u.closure_type)->_parameters = (yyvsp[-6].u.param_list);
  (yyvsp[-9].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-9].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-9].u.closure_type)));
}
#line 8749 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 658:
#line 3653 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_HAS_VIRTUAL_DESTRUCTOR, (yyvsp[-1].u.type)));
}
#line 8757 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 659:
#line 3657 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ABSTRACT, (yyvsp[-1].u.type)));
}
#line 8765 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 660:
#line 3661 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8773 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 661:
#line 3665 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-1].u.type)));
}
#line 8781 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 662:
#line 3669 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8789 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 663:
#line 3673 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8797 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 664:
#line 3677 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONVERTIBLE_TO, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8805 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 665:
#line 3681 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_DESTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8813 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 666:
#line 3685 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_EMPTY, (yyvsp[-1].u.type)));
}
#line 8821 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 667:
#line 3689 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ENUM, (yyvsp[-1].u.type)));
}
#line 8829 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 668:
#line 3693 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FINAL, (yyvsp[-1].u.type)));
}
#line 8837 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 669:
#line 3697 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FUNDAMENTAL, (yyvsp[-1].u.type)));
}
#line 8845 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 670:
#line 3701 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POD, (yyvsp[-1].u.type)));
}
#line 8853 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 671:
#line 3705 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POLYMORPHIC, (yyvsp[-1].u.type)));
}
#line 8861 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 672:
#line 3709 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_STANDARD_LAYOUT, (yyvsp[-1].u.type)));
}
#line 8869 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 673:
#line 3713 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIAL, (yyvsp[-1].u.type)));
}
#line 8877 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 674:
#line 3717 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_UNION, (yyvsp[-1].u.type)));
}
#line 8885 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 675:
#line 3731 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8893 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 676:
#line 3735 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8901 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 677:
#line 3739 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8909 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 678:
#line 3743 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8917 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 679:
#line 3747 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8925 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 680:
#line 3751 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8933 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 681:
#line 3755 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8941 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 682:
#line 3759 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 8957 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 683:
#line 3771 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8965 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 684:
#line 3775 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8973 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 685:
#line 3779 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8981 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 686:
#line 3783 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8989 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 687:
#line 3787 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 9004 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 688:
#line 3798 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 9019 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 689:
#line 3809 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 9027 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 690:
#line 3813 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 9035 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 691:
#line 3817 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 9043 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 692:
#line 3821 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 9051 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 693:
#line 3825 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 9059 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 694:
#line 3829 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9067 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 695:
#line 3833 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9075 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 696:
#line 3837 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9083 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 697:
#line 3841 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9091 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 698:
#line 3845 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9099 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 699:
#line 3849 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9107 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 700:
#line 3853 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9115 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 701:
#line 3857 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9123 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 702:
#line 3861 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9131 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 703:
#line 3865 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9139 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 704:
#line 3869 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9147 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 705:
#line 3873 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9155 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 706:
#line 3877 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9163 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 707:
#line 3881 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9171 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 708:
#line 3885 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9179 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 709:
#line 3889 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9187 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 710:
#line 3893 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9195 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 711:
#line 3897 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9203 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 712:
#line 3901 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9211 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 713:
#line 3905 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9219 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 714:
#line 3909 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9227 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 715:
#line 3913 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 9235 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 716:
#line 3917 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9243 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 717:
#line 3921 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9251 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 718:
#line 3925 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 9259 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 719:
#line 3932 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9267 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 720:
#line 3936 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 9275 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 721:
#line 3940 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 9283 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 722:
#line 3944 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9291 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 723:
#line 3948 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 9299 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 724:
#line 3952 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9307 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 725:
#line 3956 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9315 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 726:
#line 3960 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 9323 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 727:
#line 3964 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9333 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 728:
#line 3970 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9343 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 729:
#line 3976 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 9351 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 730:
#line 3984 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType();
}
#line 9359 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 731:
#line 3988 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_value);
}
#line 9367 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 732:
#line 3992 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_reference);
}
#line 9375 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 733:
#line 3996 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType();
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9386 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 734:
#line 4003 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = (yyvsp[-3].u.closure_type);
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9397 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 735:
#line 4013 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9407 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 736:
#line 4019 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[-1].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9417 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 737:
#line 4025 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  if ((yyval.u.capture)->_name == "this") {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
  } else {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  }
}
#line 9431 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 738:
#line 4035 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  if ((yyval.u.capture)->_name != "this") {
    yywarning("only capture name 'this' may be preceded by an asterisk", (yylsp[0]));
  }
}
#line 9444 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 739:
#line 4047 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 9456 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 740:
#line 4055 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 9464 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 741:
#line 4059 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[-1].u.identifier));
  ctp->_packed = true;
  (yyval.u.type) = CPPType::new_type(ctp);
}
#line 9474 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 742:
#line 4089 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9482 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 743:
#line 4093 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9490 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 744:
#line 4097 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9498 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 745:
#line 4101 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[0]));
}
#line 9506 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 746:
#line 4105 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9514 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 747:
#line 4109 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is not a keyword in Python, so it is useful to be able to use this
  // in MAKE_PROPERTY definitions, etc.
  (yyval.u.identifier) = new CPPIdentifier("signed", (yylsp[0]));
}
#line 9524 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 748:
#line 4115 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("float", (yylsp[0]));
}
#line 9532 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 749:
#line 4119 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("public", (yylsp[0]));
}
#line 9540 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 750:
#line 4123 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("private", (yylsp[0]));
}
#line 9548 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 751:
#line 4127 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("static", (yylsp[0]));
}
#line 9556 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 752:
#line 4131 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("default", (yylsp[0]));
}
#line 9564 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 753:
#line 4142 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9572 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 754:
#line 4146 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9580 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 755:
#line 4150 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9588 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 756:
#line 4154 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9596 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 757:
#line 4162 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 9604 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 758:
#line 4166 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9612 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 759:
#line 4170 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  (yyval.u.expr)->_str += (yyvsp[0].str);
}
#line 9622 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 760:
#line 4176 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  if ((yyvsp[0].u.expr)->_type != CPPExpression::T_string && (yyvsp[0].u.expr)->_type != (yyvsp[-1].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[0].u.expr)->_str;
}
#line 9635 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;


#line 9639 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
