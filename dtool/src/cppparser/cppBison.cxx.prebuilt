/* A Bison parser, made by GNU Bison 3.0.5.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.5"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs


/* Copy the first part of user declarations.  */
#line 7 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:339  */


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppClosureType.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

using std::stringstream;
using std::string;

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = nullptr;
CPPScope *global_scope = nullptr;
CPPPreprocessor *current_lexer = nullptr;

static CPPStructType *current_struct = nullptr;
static CPPEnumType *current_enum = nullptr;
static int current_storage_class = 0;
static CPPType *current_type = nullptr;
static CPPExpression *current_expr = nullptr;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static std::vector<CPPScope *> last_scopes;
static std::vector<int> last_storage_classes;
static std::vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = nullptr;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = nullptr;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != nullptr) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#line 270 "built/tmp/cppBison.yxx.c" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "cppBison.yxx.h".  */
#ifndef YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    REAL = 258,
    INTEGER = 259,
    CHAR_TOK = 260,
    SIMPLE_STRING = 261,
    SIMPLE_IDENTIFIER = 262,
    STRING_LITERAL = 263,
    CUSTOM_LITERAL = 264,
    IDENTIFIER = 265,
    TYPENAME_IDENTIFIER = 266,
    TYPEPACK_IDENTIFIER = 267,
    SCOPING = 268,
    TYPEDEFNAME = 269,
    ELLIPSIS = 270,
    OROR = 271,
    ANDAND = 272,
    EQCOMPARE = 273,
    NECOMPARE = 274,
    LECOMPARE = 275,
    GECOMPARE = 276,
    LSHIFT = 277,
    RSHIFT = 278,
    POINTSAT_STAR = 279,
    DOT_STAR = 280,
    UNARY = 281,
    UNARY_NOT = 282,
    UNARY_NEGATE = 283,
    UNARY_MINUS = 284,
    UNARY_PLUS = 285,
    UNARY_STAR = 286,
    UNARY_REF = 287,
    POINTSAT = 288,
    SCOPE = 289,
    PLUSPLUS = 290,
    MINUSMINUS = 291,
    TIMESEQUAL = 292,
    DIVIDEEQUAL = 293,
    MODEQUAL = 294,
    PLUSEQUAL = 295,
    MINUSEQUAL = 296,
    OREQUAL = 297,
    ANDEQUAL = 298,
    XOREQUAL = 299,
    LSHIFTEQUAL = 300,
    RSHIFTEQUAL = 301,
    ATTR_LEFT = 302,
    ATTR_RIGHT = 303,
    KW_ALIGNAS = 304,
    KW_ALIGNOF = 305,
    KW_AUTO = 306,
    KW_BEGIN_PUBLISH = 307,
    KW_BLOCKING = 308,
    KW_BOOL = 309,
    KW_CATCH = 310,
    KW_CHAR = 311,
    KW_CHAR16_T = 312,
    KW_CHAR32_T = 313,
    KW_CLASS = 314,
    KW_CONST = 315,
    KW_CONSTEXPR = 316,
    KW_CONST_CAST = 317,
    KW_DECLTYPE = 318,
    KW_DEFAULT = 319,
    KW_DELETE = 320,
    KW_DOUBLE = 321,
    KW_DYNAMIC_CAST = 322,
    KW_ELSE = 323,
    KW_END_PUBLISH = 324,
    KW_ENUM = 325,
    KW_EXTENSION = 326,
    KW_EXTERN = 327,
    KW_EXPLICIT = 328,
    KW_PUBLISHED = 329,
    KW_FALSE = 330,
    KW_FINAL = 331,
    KW_FLOAT = 332,
    KW_FRIEND = 333,
    KW_FOR = 334,
    KW_GOTO = 335,
    KW_HAS_VIRTUAL_DESTRUCTOR = 336,
    KW_IF = 337,
    KW_INLINE = 338,
    KW_INT = 339,
    KW_IS_ABSTRACT = 340,
    KW_IS_BASE_OF = 341,
    KW_IS_CLASS = 342,
    KW_IS_CONSTRUCTIBLE = 343,
    KW_IS_CONVERTIBLE_TO = 344,
    KW_IS_DESTRUCTIBLE = 345,
    KW_IS_EMPTY = 346,
    KW_IS_ENUM = 347,
    KW_IS_FINAL = 348,
    KW_IS_FUNDAMENTAL = 349,
    KW_IS_POD = 350,
    KW_IS_POLYMORPHIC = 351,
    KW_IS_STANDARD_LAYOUT = 352,
    KW_IS_TRIVIAL = 353,
    KW_IS_UNION = 354,
    KW_LONG = 355,
    KW_MAKE_MAP_KEYS_SEQ = 356,
    KW_MAKE_MAP_PROPERTY = 357,
    KW_MAKE_PROPERTY = 358,
    KW_MAKE_PROPERTY2 = 359,
    KW_MAKE_SEQ = 360,
    KW_MAKE_SEQ_PROPERTY = 361,
    KW_MUTABLE = 362,
    KW_NAMESPACE = 363,
    KW_NEW = 364,
    KW_NOEXCEPT = 365,
    KW_NULLPTR = 366,
    KW_OPERATOR = 367,
    KW_OVERRIDE = 368,
    KW_PRIVATE = 369,
    KW_PROTECTED = 370,
    KW_PUBLIC = 371,
    KW_REGISTER = 372,
    KW_REINTERPRET_CAST = 373,
    KW_RETURN = 374,
    KW_SHORT = 375,
    KW_SIGNED = 376,
    KW_SIZEOF = 377,
    KW_STATIC = 378,
    KW_STATIC_ASSERT = 379,
    KW_STATIC_CAST = 380,
    KW_STRUCT = 381,
    KW_TEMPLATE = 382,
    KW_THREAD_LOCAL = 383,
    KW_THROW = 384,
    KW_TRUE = 385,
    KW_TRY = 386,
    KW_TYPEDEF = 387,
    KW_TYPEID = 388,
    KW_TYPENAME = 389,
    KW_UNDERLYING_TYPE = 390,
    KW_UNION = 391,
    KW_UNSIGNED = 392,
    KW_USING = 393,
    KW_VIRTUAL = 394,
    KW_VOID = 395,
    KW_VOLATILE = 396,
    KW_WCHAR_T = 397,
    KW_WHILE = 398,
    START_CPP = 399,
    START_CONST_EXPR = 400,
    START_TYPE = 401
  };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define SIMPLE_STRING 261
#define SIMPLE_IDENTIFIER 262
#define STRING_LITERAL 263
#define CUSTOM_LITERAL 264
#define IDENTIFIER 265
#define TYPENAME_IDENTIFIER 266
#define TYPEPACK_IDENTIFIER 267
#define SCOPING 268
#define TYPEDEFNAME 269
#define ELLIPSIS 270
#define OROR 271
#define ANDAND 272
#define EQCOMPARE 273
#define NECOMPARE 274
#define LECOMPARE 275
#define GECOMPARE 276
#define LSHIFT 277
#define RSHIFT 278
#define POINTSAT_STAR 279
#define DOT_STAR 280
#define UNARY 281
#define UNARY_NOT 282
#define UNARY_NEGATE 283
#define UNARY_MINUS 284
#define UNARY_PLUS 285
#define UNARY_STAR 286
#define UNARY_REF 287
#define POINTSAT 288
#define SCOPE 289
#define PLUSPLUS 290
#define MINUSMINUS 291
#define TIMESEQUAL 292
#define DIVIDEEQUAL 293
#define MODEQUAL 294
#define PLUSEQUAL 295
#define MINUSEQUAL 296
#define OREQUAL 297
#define ANDEQUAL 298
#define XOREQUAL 299
#define LSHIFTEQUAL 300
#define RSHIFTEQUAL 301
#define ATTR_LEFT 302
#define ATTR_RIGHT 303
#define KW_ALIGNAS 304
#define KW_ALIGNOF 305
#define KW_AUTO 306
#define KW_BEGIN_PUBLISH 307
#define KW_BLOCKING 308
#define KW_BOOL 309
#define KW_CATCH 310
#define KW_CHAR 311
#define KW_CHAR16_T 312
#define KW_CHAR32_T 313
#define KW_CLASS 314
#define KW_CONST 315
#define KW_CONSTEXPR 316
#define KW_CONST_CAST 317
#define KW_DECLTYPE 318
#define KW_DEFAULT 319
#define KW_DELETE 320
#define KW_DOUBLE 321
#define KW_DYNAMIC_CAST 322
#define KW_ELSE 323
#define KW_END_PUBLISH 324
#define KW_ENUM 325
#define KW_EXTENSION 326
#define KW_EXTERN 327
#define KW_EXPLICIT 328
#define KW_PUBLISHED 329
#define KW_FALSE 330
#define KW_FINAL 331
#define KW_FLOAT 332
#define KW_FRIEND 333
#define KW_FOR 334
#define KW_GOTO 335
#define KW_HAS_VIRTUAL_DESTRUCTOR 336
#define KW_IF 337
#define KW_INLINE 338
#define KW_INT 339
#define KW_IS_ABSTRACT 340
#define KW_IS_BASE_OF 341
#define KW_IS_CLASS 342
#define KW_IS_CONSTRUCTIBLE 343
#define KW_IS_CONVERTIBLE_TO 344
#define KW_IS_DESTRUCTIBLE 345
#define KW_IS_EMPTY 346
#define KW_IS_ENUM 347
#define KW_IS_FINAL 348
#define KW_IS_FUNDAMENTAL 349
#define KW_IS_POD 350
#define KW_IS_POLYMORPHIC 351
#define KW_IS_STANDARD_LAYOUT 352
#define KW_IS_TRIVIAL 353
#define KW_IS_UNION 354
#define KW_LONG 355
#define KW_MAKE_MAP_KEYS_SEQ 356
#define KW_MAKE_MAP_PROPERTY 357
#define KW_MAKE_PROPERTY 358
#define KW_MAKE_PROPERTY2 359
#define KW_MAKE_SEQ 360
#define KW_MAKE_SEQ_PROPERTY 361
#define KW_MUTABLE 362
#define KW_NAMESPACE 363
#define KW_NEW 364
#define KW_NOEXCEPT 365
#define KW_NULLPTR 366
#define KW_OPERATOR 367
#define KW_OVERRIDE 368
#define KW_PRIVATE 369
#define KW_PROTECTED 370
#define KW_PUBLIC 371
#define KW_REGISTER 372
#define KW_REINTERPRET_CAST 373
#define KW_RETURN 374
#define KW_SHORT 375
#define KW_SIGNED 376
#define KW_SIZEOF 377
#define KW_STATIC 378
#define KW_STATIC_ASSERT 379
#define KW_STATIC_CAST 380
#define KW_STRUCT 381
#define KW_TEMPLATE 382
#define KW_THREAD_LOCAL 383
#define KW_THROW 384
#define KW_TRUE 385
#define KW_TRY 386
#define KW_TYPEDEF 387
#define KW_TYPEID 388
#define KW_TYPENAME 389
#define KW_UNDERLYING_TYPE 390
#define KW_UNION 391
#define KW_UNSIGNED 392
#define KW_USING 393
#define KW_VIRTUAL 394
#define KW_VOID 395
#define KW_VOLATILE 396
#define KW_WCHAR_T 397
#define KW_WHILE 398
#define START_CPP 399
#define START_CONST_EXPR 400
#define START_TYPE 401

/* Value type.  */

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int cppyyparse (void);

#endif /* !YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 621 "built/tmp/cppBison.yxx.c" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  104
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   7127

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  171
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  110
/* YYNRULES -- Number of rules.  */
#define YYNRULES  763
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1570

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   401

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   169,     2,     2,     2,   162,   155,     2,
     165,   167,   160,   158,   148,   159,   164,   161,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   150,   149,
     156,   151,   157,   152,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   166,     2,   170,   154,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   147,   153,   168,   163,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   452,   452,   453,   457,   464,   465,   466,   470,   471,
     475,   479,   483,   496,   495,   507,   508,   509,   510,   511,
     512,   513,   526,   535,   539,   547,   551,   555,   576,   603,
     624,   653,   689,   732,   744,   765,   801,   835,   857,   893,
     915,   926,   940,   939,   954,   958,   963,   967,   978,   982,
     986,   990,   994,   998,  1002,  1006,  1010,  1014,  1018,  1022,
    1027,  1031,  1038,  1039,  1043,  1044,  1045,  1050,  1049,  1065,
    1075,  1074,  1091,  1099,  1107,  1118,  1134,  1133,  1148,  1163,
    1172,  1187,  1186,  1224,  1223,  1260,  1259,  1290,  1289,  1308,
    1307,  1328,  1327,  1359,  1358,  1384,  1397,  1401,  1405,  1409,
    1422,  1426,  1430,  1434,  1438,  1443,  1448,  1452,  1456,  1460,
    1467,  1471,  1475,  1479,  1483,  1487,  1491,  1495,  1499,  1503,
    1507,  1511,  1515,  1519,  1523,  1527,  1531,  1535,  1539,  1543,
    1547,  1551,  1555,  1559,  1563,  1567,  1571,  1575,  1579,  1583,
    1587,  1591,  1595,  1599,  1603,  1607,  1611,  1615,  1619,  1626,
    1627,  1628,  1632,  1634,  1633,  1641,  1642,  1646,  1647,  1651,
    1657,  1666,  1667,  1671,  1675,  1679,  1683,  1689,  1695,  1701,
    1708,  1713,  1722,  1726,  1731,  1739,  1751,  1755,  1769,  1784,
    1789,  1794,  1799,  1804,  1809,  1814,  1819,  1825,  1824,  1855,
    1865,  1875,  1879,  1883,  1892,  1896,  1904,  1908,  1913,  1917,
    1922,  1930,  1935,  1943,  1947,  1952,  1956,  1961,  1969,  1974,
    1982,  1986,  1993,  1997,  2004,  2008,  2012,  2016,  2020,  2027,
    2031,  2035,  2039,  2043,  2047,  2054,  2055,  2056,  2060,  2063,
    2064,  2065,  2069,  2074,  2080,  2086,  2091,  2097,  2103,  2107,
    2118,  2122,  2132,  2136,  2140,  2145,  2150,  2155,  2160,  2165,
    2170,  2178,  2182,  2186,  2191,  2196,  2201,  2206,  2211,  2216,
    2221,  2227,  2235,  2240,  2245,  2250,  2255,  2260,  2265,  2270,
    2275,  2280,  2286,  2294,  2298,  2303,  2308,  2313,  2318,  2323,
    2328,  2333,  2338,  2346,  2350,  2355,  2360,  2365,  2370,  2375,
    2380,  2385,  2390,  2395,  2401,  2408,  2415,  2425,  2429,  2437,
    2441,  2445,  2449,  2453,  2469,  2485,  2494,  2498,  2508,  2515,
    2526,  2530,  2538,  2542,  2546,  2550,  2554,  2570,  2586,  2604,
    2613,  2617,  2627,  2634,  2638,  2646,  2650,  2666,  2682,  2691,
    2701,  2708,  2712,  2720,  2724,  2729,  2733,  2741,  2742,  2743,
    2744,  2749,  2748,  2773,  2772,  2802,  2803,  2810,  2811,  2815,
    2816,  2820,  2824,  2828,  2832,  2836,  2840,  2844,  2848,  2852,
    2856,  2863,  2871,  2875,  2879,  2884,  2892,  2896,  2903,  2904,
    2909,  2916,  2917,  2922,  2930,  2934,  2938,  2945,  2949,  2953,
    2961,  2960,  2983,  2982,  3005,  3006,  3010,  3016,  3023,  3032,
    3033,  3034,  3038,  3042,  3046,  3050,  3054,  3058,  3063,  3068,
    3073,  3078,  3082,  3087,  3096,  3101,  3109,  3113,  3117,  3125,
    3135,  3135,  3145,  3146,  3150,  3151,  3152,  3153,  3154,  3155,
    3156,  3157,  3158,  3159,  3160,  3161,  3161,  3161,  3162,  3162,
    3162,  3162,  3163,  3163,  3163,  3163,  3163,  3164,  3164,  3164,
    3165,  3165,  3165,  3165,  3165,  3166,  3166,  3166,  3166,  3166,
    3167,  3167,  3168,  3168,  3168,  3168,  3168,  3169,  3169,  3169,
    3169,  3169,  3170,  3170,  3170,  3170,  3171,  3171,  3171,  3171,
    3171,  3172,  3172,  3172,  3172,  3172,  3173,  3173,  3173,  3173,
    3173,  3173,  3174,  3174,  3174,  3174,  3174,  3175,  3175,  3175,
    3175,  3176,  3176,  3176,  3176,  3177,  3177,  3177,  3177,  3177,
    3178,  3178,  3178,  3178,  3179,  3179,  3179,  3179,  3179,  3180,
    3180,  3180,  3180,  3181,  3181,  3181,  3181,  3181,  3182,  3182,
    3185,  3185,  3185,  3185,  3185,  3185,  3185,  3185,  3185,  3185,
    3185,  3186,  3186,  3186,  3186,  3186,  3186,  3186,  3186,  3186,
    3186,  3187,  3187,  3191,  3195,  3202,  3206,  3213,  3217,  3224,
    3228,  3232,  3236,  3240,  3244,  3248,  3252,  3264,  3268,  3272,
    3276,  3280,  3284,  3288,  3292,  3296,  3300,  3304,  3308,  3312,
    3316,  3320,  3324,  3328,  3332,  3336,  3340,  3344,  3348,  3352,
    3356,  3360,  3364,  3368,  3372,  3376,  3380,  3384,  3392,  3396,
    3400,  3404,  3408,  3412,  3416,  3426,  3436,  3442,  3448,  3454,
    3460,  3466,  3472,  3479,  3486,  3493,  3500,  3506,  3512,  3516,
    3528,  3532,  3536,  3540,  3544,  3555,  3566,  3570,  3574,  3578,
    3582,  3586,  3590,  3594,  3598,  3602,  3606,  3610,  3614,  3618,
    3622,  3626,  3630,  3634,  3638,  3642,  3646,  3650,  3654,  3658,
    3662,  3666,  3670,  3674,  3678,  3682,  3686,  3693,  3697,  3701,
    3705,  3709,  3713,  3717,  3721,  3725,  3731,  3737,  3741,  3747,
    3754,  3758,  3762,  3766,  3770,  3774,  3778,  3782,  3786,  3790,
    3794,  3798,  3802,  3806,  3810,  3814,  3818,  3832,  3836,  3840,
    3844,  3848,  3852,  3856,  3860,  3872,  3876,  3880,  3884,  3888,
    3899,  3910,  3914,  3918,  3922,  3926,  3930,  3934,  3938,  3942,
    3946,  3950,  3954,  3958,  3962,  3966,  3970,  3974,  3978,  3982,
    3986,  3990,  3994,  3998,  4002,  4006,  4010,  4014,  4018,  4022,
    4026,  4033,  4037,  4041,  4045,  4049,  4053,  4057,  4061,  4065,
    4071,  4077,  4085,  4089,  4093,  4097,  4104,  4114,  4120,  4126,
    4136,  4148,  4156,  4160,  4190,  4194,  4198,  4202,  4206,  4210,
    4216,  4220,  4224,  4228,  4232,  4243,  4247,  4251,  4255,  4263,
    4267,  4271,  4277,  4288
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK",
  "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL", "CUSTOM_LITERAL",
  "IDENTIFIER", "TYPENAME_IDENTIFIER", "TYPEPACK_IDENTIFIER", "SCOPING",
  "TYPEDEFNAME", "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE",
  "LECOMPARE", "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR",
  "DOT_STAR", "UNARY", "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS",
  "UNARY_PLUS", "UNARY_STAR", "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS",
  "MINUSMINUS", "TIMESEQUAL", "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL",
  "MINUSEQUAL", "OREQUAL", "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL",
  "RSHIFTEQUAL", "ATTR_LEFT", "ATTR_RIGHT", "KW_ALIGNAS", "KW_ALIGNOF",
  "KW_AUTO", "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL", "KW_CATCH",
  "KW_CHAR", "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS", "KW_CONST",
  "KW_CONSTEXPR", "KW_CONST_CAST", "KW_DECLTYPE", "KW_DEFAULT",
  "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH",
  "KW_ENUM", "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED",
  "KW_FALSE", "KW_FINAL", "KW_FLOAT", "KW_FRIEND", "KW_FOR", "KW_GOTO",
  "KW_HAS_VIRTUAL_DESTRUCTOR", "KW_IF", "KW_INLINE", "KW_INT",
  "KW_IS_ABSTRACT", "KW_IS_BASE_OF", "KW_IS_CLASS", "KW_IS_CONSTRUCTIBLE",
  "KW_IS_CONVERTIBLE_TO", "KW_IS_DESTRUCTIBLE", "KW_IS_EMPTY",
  "KW_IS_ENUM", "KW_IS_FINAL", "KW_IS_FUNDAMENTAL", "KW_IS_POD",
  "KW_IS_POLYMORPHIC", "KW_IS_STANDARD_LAYOUT", "KW_IS_TRIVIAL",
  "KW_IS_UNION", "KW_LONG", "KW_MAKE_MAP_KEYS_SEQ", "KW_MAKE_MAP_PROPERTY",
  "KW_MAKE_PROPERTY", "KW_MAKE_PROPERTY2", "KW_MAKE_SEQ",
  "KW_MAKE_SEQ_PROPERTY", "KW_MUTABLE", "KW_NAMESPACE", "KW_NEW",
  "KW_NOEXCEPT", "KW_NULLPTR", "KW_OPERATOR", "KW_OVERRIDE", "KW_PRIVATE",
  "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER", "KW_REINTERPRET_CAST",
  "KW_RETURN", "KW_SHORT", "KW_SIGNED", "KW_SIZEOF", "KW_STATIC",
  "KW_STATIC_ASSERT", "KW_STATIC_CAST", "KW_STRUCT", "KW_TEMPLATE",
  "KW_THREAD_LOCAL", "KW_THROW", "KW_TRUE", "KW_TRY", "KW_TYPEDEF",
  "KW_TYPEID", "KW_TYPENAME", "KW_UNDERLYING_TYPE", "KW_UNION",
  "KW_UNSIGNED", "KW_USING", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE",
  "KW_WCHAR_T", "KW_WHILE", "START_CPP", "START_CONST_EXPR", "START_TYPE",
  "'{'", "','", "';'", "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'",
  "'>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['",
  "')'", "'}'", "'!'", "']'", "$accept", "grammar", "cpp",
  "constructor_inits", "constructor_init", "extern_c", "$@1",
  "declaration", "friend_declaration", "$@2", "storage_class",
  "attribute_specifiers", "attribute_specifier", "type_like_declaration",
  "$@3", "$@4", "multiple_instance_identifiers", "typedef_declaration",
  "$@5", "typedef_instance_identifiers", "constructor_prototype", "$@6",
  "$@7", "function_prototype", "$@8", "$@9", "$@10", "$@11", "$@12",
  "function_post", "function_operator", "more_template_declaration",
  "template_declaration", "$@13", "template_formal_parameters",
  "template_nonempty_formal_parameters", "typename_keyword",
  "template_formal_parameter", "template_formal_parameter_type",
  "instance_identifier", "$@14",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "maybe_comma_identifier",
  "function_parameter_list", "function_parameters",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "parameter_pack_identifier", "not_paren_empty_instance_identifier",
  "empty_instance_identifier", "type", "type_pack", "type_decl",
  "predefined_type", "var_type_decl", "full_type", "struct_attributes",
  "anonymous_struct", "$@15", "named_struct", "$@16", "maybe_final",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "enum", "enum_decl", "enum_element_type", "enum_body_trailing_comma",
  "enum_body", "enum_keyword", "struct_keyword", "namespace_declaration",
  "$@17", "$@18", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@19", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   123,    44,    59,
      58,    61,    63,   124,    94,    38,    60,    62,    43,    45,
      42,    47,    37,   126,    46,    40,    91,    41,   125,    33,
      93
};
# endif

#define YYPACT_NINF -926

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-926)))

#define YYTABLE_NINF -759

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     162,  -926,  3677,  5743,    39,  4864,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,   -36,   -99,   -70,   -37,   -33,   -11,
     -69,    -5,    24,  -926,  -926,    19,    33,    44,    57,    64,
      67,    78,    92,    96,   102,   144,   171,   174,   179,   185,
     191,   197,   211,   216,  6057,  -926,  -926,   108,   220,   222,
      20,   246,  -926,   243,   245,   256,  3677,  3677,  3677,  3677,
    3677,  1793,  1173,  3677,  3886,  -926,   158,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  5854,   264,  -926,   -23,  -926,
    -926,  2240,  2171,  2171,  -926,  4505,   272,  -926,  2171,  -926,
    -926,   305,   305,  -926,  -926,  -926,  -926,   152,    95,  -926,
    -926,  -926,  -926,  -926,  -926,  6164,   280,  -926,  6986,  6986,
    6986,  -926,  6986,  5233,  6986,   297,  -926,  6971,   296,   298,
     307,   314,   319,   324,  6986,  1206,   336,   342,   345,  6986,
    6986,   331,  6778,  6986,  6986,  5065,  6986,  6986,  -926,  -926,
    -926,  -926,  2195,  -926,  -926,  -926,  -926,  -926,  3677,  3677,
    5743,  3677,  3677,  3677,  3677,  5743,  3677,  5743,  3677,  5743,
    3677,  5743,  5743,  5743,  5743,  5743,  5743,  5743,  5743,  5743,
    5743,  5743,  5743,  5743,  5743,  5743,  3677,  -926,  -926,   332,
    4505,   337,   338,  4505,  -926,  -926,  5743,  3677,  3677,   339,
    5336,  5743,  1793,  3677,  3677,    88,    88,    88,    88,    88,
     -36,   -70,   -37,   -33,   -11,    -5,    19,    44,  6195,  5244,
    5695,  6068,   256,   334,   -78,  3886,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  4505,  4505,
     -85,   358,  -926,  -926,    88,  3677,  3677,  3677,  3677,  3677,
    3677,  3677,  3677,  3677,  3677,  3677,  3677,  3677,  3677,  3677,
    3677,  3677,  3677,  3677,  3677,  3677,  2732,  3677,  -926,  -926,
     305,   305,  2867,  -926,  -926,  -926,  2171,  -926,  -926,  -926,
    -926,  5743,  -926,   353,   261,   150,   305,   305,   150,   150,
    4978,   349,  -926,   350,  -926,  -926,  -926,  -926,  -926,  -926,
    1338,   368,  5160,  -926,  4505,   472,   371,   356,  1936,  5250,
    6986,  -926,  -926,  -926,  -926,  6986,  -926,  -926,  -926,  -926,
    6871,  1355,  -926,  4505,  4505,  4505,  4505,  4505,  4505,  -926,
    -926,   375,  -926,  -926,  -926,  -926,  -926,  3677,  -926,  4316,
    -926,   367,  -926,  4408,  -926,  4505,    74,  -926,  -926,   -63,
     364,  -926,   365,  5941,  4505,   366,  -926,  4505,  -926,   239,
     383,  -926,  -926,  -926,  -926,   792,  -926,  -926,   372,   386,
    -926,   369,   374,   382,   384,   390,   391,   393,   395,   396,
     407,   408,   410,   412,   415,   414,   -75,   424,   416,   419,
     428,   429,   431,   432,   435,   436,   437,   438,   439,  3677,
    -926,  5743,  3677,  -926,  6759,   425,   443,   446,  4505,   450,
     451,   434,   452,  4177,   462,   463,  3677,  3677,  -926,   524,
    -926,  1294,   467,  3677,  -926,  -926,  1444,  4862,  1629,  1629,
     908,   908,  1658,  1658,  -926,  2750,  1066,  4908,  5061,   908,
     908,   166,   166,    88,    88,    88,  -926,  -926,   -74,  1595,
    -926,  -926,   468,  4477,   473,   150,   476,   479,  4505,   150,
     150,   150,   150,   150,   477,  -926,   349,  -926,   349,  -926,
     477,   477,  -926,   150,  6164,  5830,  5714,   150,   150,   481,
      53,  -926,   672,   720,  -926,  3677,  4505,   484,  -926,  -926,
    -926,  -926,  1338,   -16,   -14,    -4,  6164,   489,   143,  -926,
    -926,  -926,   494,  6986,  6164,  3812,   -36,   482,  4535,  -926,
    -926,  -926,   509,   511,   513,   515,   522,   525,   526,  6239,
    -926,  3831,  5486,   249,   492,   239,  -926,  -926,   523,  -926,
    5743,  -926,    46,  3002,  6081,   916,  -926,  5743,  -926,   510,
     202,  -926,  -926,  2079,  -926,  -926,   413,  -926,   531,  5160,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,   521,  -926,   533,
    -926,  -926,  -926,  -926,  5743,  -926,  5743,  -926,  5743,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    4556,   529,   536,  -926,   535,  -926,  -926,   537,  -926,  -926,
     540,  -926,  -926,  -926,  -926,    88,  3886,  -926,  4505,   358,
    5593,  2226,  -926,  3886,  3677,  -926,  -926,  -926,  -926,  -926,
     477,   150,  -926,   477,   477,   477,   477,   477,  3677,  -121,
     658,  5854,   672,   720,  -926,   -29,    10,  -926,  -926,  5622,
     555,   672,   672,   672,   672,   672,   672,   -57,  -926,  -926,
     558,  4505,   720,   720,   720,   720,   720,   720,    99,   551,
    3886,  -926,   -52,  -926,   582,   683,  1936,  -926,   660,  6164,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,   569,   584,
     589,  -926,  -926,  6057,  -926,  -926,   590,    35,   594,  -926,
     573,  3677,  3677,  3677,  3677,  1793,  3677,   585,    54,  -926,
    -926,  4647,  -926,   158,  -926,  6986,  6986,  6312,  -926,   741,
     743,   744,   748,   754,   755,  -926,  -926,   290,   617,  -926,
    -926,  -926,  -926,  5518,  -926,   610,   620,  6753,  -926,   495,
    -926,  -926,    46,  -926,   413,  -926,   621,  5593,   609,   413,
    5593,   612,  4574,   916,   616,   916,   916,   916,   916,   916,
     266,  -926,  -926,   614,  6385,  -926,  -926,  -926,  4505,   248,
    -926,   615,  -926,   637,   638,  3137,  3024,   628,   413,   413,
    4248,   413,   413,   413,   413,  -926,     8,   250,  -926,  1338,
    -926,  3677,  3677,   624,   626,   629,  -926,  -926,  -926,  3677,
    -926,  3677,  -926,   630,  -926,  5970,  6164,  -926,  -926,  -926,
    -926,  -926,  -926,   634,  -926,  -926,   653,  -926,  3886,   477,
     635,   641,  5714,   672,   720,   -57,    99,   642,   644,  2226,
    -926,  -926,   672,   645,   645,   645,   645,   645,   212,  3677,
    -926,   720,  -926,   649,   649,   649,   649,   649,   275,  3677,
    -926,   650,  -926,  3677,  -926,   643,  4592,  6458,  -926,   669,
    -926,  -926,  5743,  5743,  5743,   655,  5743,   659,  5365,  5743,
    1793,    88,    88,    88,    88,   656,   -66,    88,  -926,  -926,
    3953,  3677,  3677,  3677,  3677,  3677,  3677,  3677,  3677,  3677,
    3677,  3677,  3677,  3677,  3677,  3677,  3677,  3677,  3677,  3677,
    3677,  3677,  3272,  3677,  -926,  -926,  -926,  -926,   678,   -48,
     685,   686,   690,   691,  6531,    23,  -926,   495,  6944,  5486,
    4505,   680,   681,   495,   495,   495,   495,   495,   495,   134,
     649,  -926,   250,  -926,   675,   413,   240,   676,  -926,  -926,
     288,   916,   679,   679,   679,   679,   679,  -926,  3677,  -926,
    -926,  5593,   687,   321,  -926,   -25,   697,   698,  -926,  2564,
    -926,  -926,  -926,  3137,   692,   700,  3886,  -926,  -926,   413,
     311,   311,   839,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,   684,
     688,  -926,  -926,   311,   311,   311,   247,   849,  -926,  3677,
    -926,  2079,   706,  -926,   582,   -44,   -40,  -926,  -926,  -926,
     -28,   -22,  -926,  6057,   305,   811,   471,  -926,  -926,  5593,
    -926,   -57,    99,  -926,  -926,  5593,  5593,  -926,   645,   699,
     693,   649,   701,   695,  3294,  -926,  -926,  -926,  5324,   723,
     714,  -926,   704,   710,   716,  3677,   724,  4505,   717,   721,
     725,   722,  4629,  3677,  -926,  -926,  -926,  1444,  4862,  1629,
    1629,   908,   908,  1658,  1658,  -926,  3564,  1066,  4908,  5061,
     908,   908,   166,   166,    88,    88,    88,  -926,  -926,    -6,
    1958,  6604,   867,   873,   738,   880,   733,  -926,   892,   893,
     894,  -926,   760,   134,   649,  -926,  -926,  -926,  -926,  -926,
    -926,  5743,   495,  4093,  -926,  -926,   764,  -926,  -926,   269,
     749,  -926,  -926,   679,  5593,   746,   751,  -926,  -926,  4505,
    3677,  3677,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,  -926,  -926,   771,  -926,  3407,   311,  -926,  -926,
    -926,  -926,  -926,  3812,   753,  3024,   413,  -926,  -926,  -926,
    -926,  2226,   305,  -926,  -926,  -926,    15,   776,   752,  -926,
    -926,   778,   779,  5593,  -926,  5593,  -926,  -926,  5705,  6090,
    6150,  4505,   343,  -926,  -926,   932,  -926,  5324,  -926,   783,
     784,   812,   813,   814,  -926,  -926,   815,  -926,  -926,    88,
    3677,  -926,  -926,  -926,   816,     1,  -926,   834,   835,    14,
     819,    59,  -926,  -926,  -926,   822,   833,   837,   838,    38,
     840,  4093,  4093,  4093,  4093,  4093,  1793,  4093,  4798,  -926,
     413,  4016,   825,  -926,  4016,  5593,   828,  -926,  -926,   829,
    -926,   830,   842,  2396,  -926,  3137,  3886,   845,  -926,  -926,
     853,  -926,   850,  -926,  -926,  -926,  -926,  -926,   851,   852,
    5929,  -926,  5929,  -926,  5929,  -926,  -926,  5929,  5929,  5929,
    -926,  6677,  -926,  3677,  3677,  -926,  3677,  -926,  3677,  3886,
     855,   992,   858,  1006,  -926,  1010,   874,   875,  1012,   876,
    5743,  5743,  5743,  5743,   861,  5457,  5743,   123,   123,   123,
     123,   123,   860,   101,   123,  4093,  4093,  4093,  4093,  4093,
    4093,  4093,  4093,  4093,  4093,  4093,  4093,  4093,  4093,  4093,
    4093,  4093,  4093,  4093,  3542,  3677,  -926,  -926,  5593,   863,
    -926,  4016,  -926,  -926,  1013,  -926,   864,  -926,  -926,  -926,
    2226,  2226,  2226,  -926,  -926,  -926,  -926,  -926,  -926,  -926,
    -926,  -926,   114,   147,   168,   175,  -926,   885,  -926,   868,
     888,  -926,  -926,   176,  -926,   872,   883,   884,   886,  4505,
     877,   887,   895,  4093,  -926,  4144,  5038,  1181,  1181,  1608,
    1608,  2116,  2116,  -926,  4744,  5088,  5104,  1648,   405,   405,
     123,   123,   123,  -926,  -926,   181,  2329,  5593,   889,  -926,
    4016,  -926,  -926,  4016,   882,  -926,  -926,  -926,  4016,  4016,
    -926,  -926,  -926,  -926,  1043,   891,   906,  1049,  1050,   912,
    -926,   897,   899,   900,   910,  -926,  -926,   913,   123,  4093,
    -926,  -926,   914,  -926,  4016,  -926,  -926,   926,  -926,   923,
     192,  -926,  3677,  3677,  3677,  -926,  3677,  4798,  -926,  2226,
    -926,   930,  1070,   934,   193,   199,   206,   213,  2226,  -926,
    -926,   925,  -926,  -926,  -926,  -926,  -926,  -926,   944,  -926
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   763,     0,     0,     0,   763,     5,   651,   647,   650,
     759,   760,   653,   654,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   649,   655,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   657,   656,     0,     0,     0,
       0,     0,   648,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   763,     0,     3,   588,   652,   298,   309,   308,
     392,   393,   395,   396,   377,     0,     0,   407,   374,   406,
     401,   398,   397,   400,   378,     0,     0,   379,   399,   409,
     394,   763,   763,     4,   300,   301,   302,     0,   363,   763,
     297,   389,   390,   391,     1,     0,     0,    21,   763,   763,
     763,    22,   763,   763,   763,     0,    42,   763,     0,     0,
       0,     0,     0,     0,   763,     0,     0,     0,     0,   763,
     763,     0,   763,   763,   763,     0,   763,   763,     6,    17,
       7,    19,     0,    15,    16,    18,    73,    44,   763,   763,
       0,   763,   763,   763,   763,     0,   763,     0,   763,     0,
     763,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   763,   324,   330,     0,
       0,     0,   612,     0,   763,   323,     0,   763,   763,     0,
       0,     0,     0,   763,   763,   621,   619,   618,   620,   617,
     298,   392,   393,   395,   396,   407,   406,   401,   398,   397,
     400,   399,   394,     0,     0,   547,   744,   745,   746,   754,
     747,   750,   748,   752,   751,   749,   753,   733,   734,     0,
       0,   763,   739,   732,   616,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   761,   762,
     763,   763,     0,   375,   376,   408,   398,   403,   402,   405,
     299,     0,   404,     0,   284,   763,   763,   763,   763,   763,
     763,     0,   333,   283,   335,   763,   755,   756,   757,   758,
       0,   365,     0,   337,     0,     0,    62,    64,     0,   763,
     763,    56,    45,    55,    57,   763,    46,   152,    51,    23,
     763,     0,    49,     0,     0,     0,     0,     0,     0,    54,
     763,     0,    26,    25,    24,    52,    48,     0,   156,     0,
     155,     0,    58,     0,    20,     0,     0,    50,    53,   332,
     311,   322,     0,     0,     0,     0,    13,     0,    70,     0,
     331,    67,   313,   314,   315,   363,   763,   310,     0,   546,
     545,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     325,     0,   763,   327,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   646,   737,
     740,     0,   763,     0,   735,   212,   630,   631,   632,   633,
     634,   635,   638,   639,   645,     0,   627,   628,   629,   636,
     637,   625,   626,   622,   623,   624,   644,   643,     0,     0,
     334,   336,     0,     0,     0,   763,   285,     0,   274,   763,
     763,   763,   763,   763,   290,   273,     0,   286,     0,   287,
     289,   288,   197,   763,     0,     0,     0,   763,   763,     0,
     198,   201,   763,     0,   196,   763,   371,     0,   368,   367,
     362,   366,     0,   744,   745,   746,     0,     0,   748,   341,
     303,   343,     0,   763,     0,   763,   311,     0,     0,    47,
      43,   763,     0,     0,     0,     0,     0,     0,     0,   763,
     380,     0,   763,   332,   311,     0,   331,    76,     0,   386,
       0,    81,    83,     0,     0,   763,   312,     0,   763,     0,
       0,   410,   219,     0,    72,    69,     0,   318,   365,     0,
     595,   594,   611,   601,   597,   599,   600,     0,   607,     0,
     606,   660,   596,   661,     0,   663,     0,   664,     0,   667,
     668,   669,   670,   671,   672,   673,   674,   675,   676,   603,
       0,     0,     0,   326,     0,   602,   605,     0,   609,   608,
       0,   614,   615,   604,   598,   589,   548,   738,     0,   763,
     763,   763,    96,   213,     0,   642,   641,   306,   305,   307,
     291,   763,   275,   280,   276,   277,   279,   278,   763,     0,
       0,     0,   763,     0,   238,     0,     0,   763,   200,     0,
       0,   763,   763,   763,   763,   763,   763,   763,   252,   251,
       0,   262,     0,     0,     0,     0,     0,     0,   763,     0,
     544,   543,   372,   361,   304,     0,     0,   763,   763,     0,
      59,    63,   725,   721,   724,   727,   728,   204,     0,     0,
       0,   723,   729,     0,   731,   730,     0,     0,     0,   722,
       0,     0,     0,     0,     0,     0,     0,     0,   205,   240,
     208,   241,   677,   726,   203,   763,   763,   763,   382,     0,
       0,     0,     0,     0,     0,   384,   763,     0,     0,   173,
     174,   175,   161,     0,   162,     0,   158,   163,   159,   763,
     172,   157,     0,    78,     0,   388,     0,   763,     0,     0,
     763,     0,     0,   763,     0,   763,   763,   763,   763,   763,
       0,   243,   242,     0,   763,    85,   410,   214,     0,     0,
      71,     0,   763,     0,     0,   763,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    68,   763,   763,   176,     0,
     316,     0,     0,     0,     0,     0,   328,   329,   613,     0,
     610,     0,   736,     0,   103,     0,     0,    97,   105,   100,
     104,    99,   101,     0,    98,   102,     0,   191,   640,   281,
       0,     0,     0,   763,     0,   763,   763,     0,     0,   763,
     199,   202,   763,   257,   253,   254,   256,   255,     0,   763,
     232,     0,   263,   268,   264,   265,   267,   266,     0,   763,
     235,   292,   369,     0,   338,     0,     0,   763,   346,   763,
     345,    66,     0,     0,     0,   687,     0,     0,     0,     0,
       0,   695,   694,   693,   692,     0,     0,   691,    65,   207,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    61,    60,   385,   763,     0,     0,
     763,     0,     0,     0,   763,     0,    41,   763,   763,     0,
     166,   164,     0,   763,   763,   763,   763,   763,   763,   763,
     170,    77,   763,   387,     0,     0,     0,     0,   320,   319,
       0,   763,   248,   244,   245,   247,   246,    91,   763,   321,
      14,   763,     0,     0,     8,     0,     0,     0,   220,   411,
     412,   222,   223,   763,     0,   226,   228,   225,   221,     0,
     183,   179,     0,   120,   121,   122,   123,   124,   125,   128,
     129,   144,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   148,   147,   131,   130,   117,   119,
     118,   126,   127,   115,   116,   112,   113,   114,   111,     0,
       0,   110,   177,   180,   182,   181,     0,     0,   187,   763,
     189,     0,     0,    74,   317,     0,     0,   662,   665,   666,
       0,     0,   763,     0,   763,     0,     0,   410,   282,   763,
     239,   763,   763,   233,   236,   763,   763,   293,   258,   261,
       0,   269,   272,     0,   373,   340,   339,   342,     0,     0,
     348,   347,     0,     0,     0,   763,     0,     0,     0,     0,
       0,     0,     0,     0,   720,   206,   209,   704,   705,   706,
     707,   708,   709,   712,   713,   719,     0,   701,   702,   703,
     710,   711,   699,   700,   696,   697,   698,   718,   717,     0,
       0,   763,     0,     0,     0,     0,     0,   194,     0,     0,
       0,   381,     0,   763,   171,   151,   149,   154,   150,   160,
     167,     0,   763,     0,   168,   210,     0,    79,   763,     0,
       0,   763,    93,   249,   763,     0,     0,   215,   410,     0,
     763,   763,   217,   218,   414,   415,   419,   416,   424,   417,
     418,   420,   421,   422,   423,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   492,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     763,   536,   537,   538,   529,   541,   525,   526,   524,   531,
     532,   520,   521,   522,   523,   530,   528,   535,   533,   539,
     534,   527,   540,   413,     0,   224,   227,   184,   178,   146,
     145,   186,   190,   763,     0,   213,     0,   592,   591,   593,
     590,   763,   763,   192,   109,   106,     0,     0,     0,   234,
     237,     0,     0,   763,   259,   763,   270,   370,   752,     0,
     751,     0,     0,   349,   351,   741,   763,     0,   686,     0,
       0,     0,     0,     0,   684,   683,     0,   689,   690,   678,
       0,   716,   715,   383,     0,     0,    33,   195,     0,     0,
       0,     0,    40,   169,   165,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   211,   549,
       0,    82,     0,    87,    84,   763,     0,   250,   763,     0,
       9,     0,     0,     0,   229,   763,   230,     0,   185,    75,
       0,   193,     0,   107,   658,   763,   763,   763,     0,     0,
       0,   354,     0,   353,     0,   352,   742,     0,     0,     0,
     743,   763,   350,     0,     0,   688,     0,   685,     0,   714,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   564,   562,   561,
     563,   560,     0,     0,   559,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    80,    89,   763,     0,
     763,    86,   216,    12,    10,   542,     0,   763,   410,   108,
     763,   763,   763,   763,   763,   360,   359,   358,   357,   356,
     355,   344,     0,     0,     0,     0,    36,   763,    34,     0,
       0,    37,    39,     0,    29,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   587,   573,   574,   575,   576,   577,
     578,   579,   580,   586,     0,   570,   571,   572,   568,   569,
     565,   566,   567,   585,   584,     0,     0,   763,     0,   763,
      92,    11,   231,   188,     0,   296,   295,   294,   260,   271,
     681,   680,   682,   679,     0,     0,     0,     0,     0,     0,
     558,     0,     0,     0,     0,   556,   555,     0,   550,     0,
     583,   582,     0,   763,    94,   659,   195,     0,    28,     0,
       0,    30,     0,     0,     0,   557,     0,   581,   763,   763,
      35,     0,     0,     0,     0,     0,     0,     0,   763,    88,
      38,     0,    31,   553,   552,   554,   551,    90,     0,    32
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -926,  -926,  -313,  -926,   -13,  -926,  -926,   785,  -128,  -926,
     104,  -430,   449,  -126,  -926,  -926,  -155,  -926,  -926,  -228,
    -926,  -926,  -926,   773,  -926,  -926,  -926,  -926,  -926,  -608,
    -926,  -926,  -111,  -926,  -926,  -926,  -926,   218,   409,  -636,
    -926,  -703,  -728,  -349,  -576,  -926,  -142,  -926,    30,  -513,
    -926,  -510,  -925,  -926,  -428,   265,  -648,   312,  -218,    93,
     -82,   -10,    22,  -279,  -640,   786,  1002,  -159,  -109,  -926,
     -94,  -926,  -926,  -926,  -926,  -171,   -87,  -926,  -455,  -926,
    -926,   -18,   -12,  -926,  -926,  -926,  -926,   -32,   -39,  -926,
    -926,  -715,  -926,  -103,  -926,  -561,  -136,   -60,   302,   715,
    -276,  -926,  -926,  -926,   707,    13,  1196,   -61,  -492,    -1
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   923,   924,   139,   528,   140,   141,   310,
     142,   295,   296,   143,   536,   530,   755,   334,   714,   901,
     348,   717,   720,   349,   921,  1428,  1497,  1104,  1335,   591,
     982,  1087,   144,   331,   705,   706,   707,   708,   709,   756,
    1253,   757,   786,  1076,   469,   470,   677,   678,  1094,   414,
     740,   534,   934,   935,   471,   680,   730,   803,   813,   281,
     282,    91,    92,   350,   182,   351,    93,   292,    94,   647,
      95,   648,   829,  1029,  1030,  1283,    96,    97,   480,   476,
     477,    98,    99,   145,   696,   877,   146,   100,   101,   102,
     103,   741,   742,   929,  1243,   639,   358,   359,  1328,   215,
      65,   681,   682,   230,   231,  1284,  1285,   628,    66,   147
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       6,   214,   307,   683,   328,   713,   330,   509,  1244,   799,
     284,   902,   185,   361,   773,   363,   364,   365,   366,   497,
     368,   922,   370,   835,   372,   394,   183,   644,   990,   258,
    1352,   259,   184,   352,   610,   189,   263,   291,   614,   104,
     388,   775,   267,   268,   269,   608,   791,   790,   353,   272,
     837,   396,   397,  1394,   516,   354,   645,   404,   405,   718,
    -755,   233,  -756,   411,   651,   260,   150,   679,   618,   849,
     407,  1017,  -757,   556,   407,   910,   772,   912,   913,   914,
     915,   916,   407,   906,   -95,   412,   -95,   155,   -95,   408,
     283,   283,   557,   595,   413,   151,   822,   261,   293,   823,
    1073,  1044,   521,   264,   407,   286,   287,   288,   407,   809,
     357,   148,   940,   941,   810,   983,   984,   985,   986,  1074,
     407,   243,  1110,  1257,   355,   820,   407,  1258,   152,   149,
     356,  -755,   153,  -756,  -755,  1004,  -756,   608,   797,  1259,
    1111,   904,   407,  -757,   907,  1260,  -757,   360,   360,  1381,
     360,   360,   360,   360,   154,   360,  1413,   360,   987,   360,
     156,  1301,  1385,   447,   258,   448,   259,   449,  1382,   267,
     268,   269,   272,   988,   989,   360,   608,   798,   440,   441,
     157,  1386,  1353,   293,   158,   190,   360,   360,   687,   352,
    1082,   801,   360,   360,   457,   459,   438,   539,   159,   243,
     838,   619,   850,  1395,   353,   885,   719,  1388,   289,   160,
     450,   354,   301,   302,   303,   734,   304,   306,   308,  -758,
     352,   312,   161,   519,   352,   520,  1389,   267,   319,   162,
     415,   491,   163,   325,   326,   353,   329,   332,   333,   353,
     337,   338,   354,   164,   992,   290,   354,   993,  1020,   407,
     413,   481,   255,   256,   257,   638,   572,   165,  1023,   283,
     283,   166,   407,  1103,   186,   819,   357,   167,  1474,  1099,
     472,   216,   217,   218,   455,   283,   283,   455,   455,   474,
     355,  1510,  1013,  1014,   478,  1093,   356,  1423,  1424,  1425,
    -758,   451,  1267,  -758,   538,   407,    10,   357,    11,   285,
     809,   357,   473,  1247,   994,   452,     1,     2,     3,   168,
     453,   355,   926,   927,  1511,   355,   407,   356,   273,     6,
     274,   356,   275,   407,  1518,   219,   252,   253,   254,   407,
     255,   256,   257,   525,   827,  1512,   169,   220,   221,   170,
    1552,   407,  1513,  1519,   171,  1106,  1005,   407,  1530,   736,
     172,   737,   738,   739,   407,   293,   173,  1105,   683,  1553,
    1563,   407,   174,  1262,  1010,   276,  1564,   825,   454,   456,
     458,   460,   461,  1565,   222,   223,   175,   224,   809,  1019,
    1566,   176,   225,   884,   226,   187,   531,   188,   532,  1096,
     533,   360,  1097,  1339,  1261,   796,   -95,   531,   -95,   532,
     -95,   991,   191,   306,   312,   988,   989,  1100,   192,   499,
     193,   592,   988,   989,  1251,   814,   815,   816,   817,   818,
    1436,   194,   679,   286,   287,   288,   747,  -274,  1254,   262,
     748,   917,   918,  1268,   988,   989,  1332,   271,  1413,  1271,
    1272,   819,  1022,   481,   455,   298,   277,   309,   455,   455,
     455,   455,   455,  1102,   918,   612,   472,  1367,  1368,  1369,
     278,   313,   455,   314,   731,   279,   455,   455,  1108,  1109,
     280,   629,   315,   749,   641,   758,   988,   989,   491,   316,
     710,   216,   217,   218,   317,   472,   322,   613,   473,   318,
    1331,   900,   323,  1334,   684,   324,   327,   389,  1269,  1270,
       6,   406,   391,   392,   398,   286,   287,   288,   892,   413,
     631,   711,   893,   445,   723,   475,  -273,   473,   482,   494,
     493,   495,   510,   512,   732,   750,   289,     6,  1336,   522,
     523,   527,   535,  1350,   407,   219,   541,   352,   600,   587,
     540,   542,   603,   604,   605,   606,   607,   220,   221,   543,
     547,   544,   353,   549,   751,   894,   609,   545,   546,   354,
     615,   616,   548,   554,  1071,  1420,  1421,  1422,   752,  1423,
    1424,  1425,   558,   753,   550,   551,  1012,   552,   754,   553,
     472,   555,   574,   559,   222,   223,   560,   224,   415,   474,
     787,   580,   225,  1021,   226,   561,   562,   650,   563,   564,
     455,   793,   565,   566,   567,   568,   569,   641,   289,   472,
     575,   629,   473,   576,   357,   846,   592,   578,   579,   581,
     629,   629,   629,   629,   629,   629,   415,   902,   355,   583,
     584,   185,   590,   794,   356,   597,   895,   415,  1265,   601,
     599,   473,  -275,   608,   649,   183,     6,   830,   617,   685,
     896,   184,   643,   758,   646,   897,   688,   712,   758,   689,
     898,   690,   731,   691,   731,   731,   731,   731,   731,  1084,
     692,   710,   715,   693,   694,   735,   814,   815,   816,   817,
     818,   759,   286,   287,   288,   620,   761,   758,   758,   621,
     758,   758,   758,   758,   789,     6,   767,  1358,   762,  1359,
     769,   995,   996,   768,   770,   771,   792,   472,   629,  1000,
     472,  1001,  1505,  1506,  1507,   802,   474,    64,   811,   474,
     481,   821,   732,  1504,   732,   732,   732,   732,   732,  -364,
    1431,   824,   622,   630,   832,   631,   828,   632,   840,   473,
     833,   930,   473,   185,   937,   834,   836,  1440,  1441,  1442,
     839,   878,   848,   879,   880,   787,   415,   183,   881,  1429,
    1085,   683,  1086,   184,   882,   883,   886,   888,   889,   905,
     903,   195,   196,   197,   198,   199,   911,  1088,   234,   908,
     633,   919,   472,   928,   627,   289,   931,   932,   939,   874,
     875,   997,   629,   998,   415,   415,   999,  1002,   787,  1006,
    1007,   629,   483,   484,   485,  1008,  1009,  1015,   641,  1016,
    1025,   809,  1069,   623,   473,   819,  -282,  1329,   641,  1028,
    1035,  1559,  1500,  1043,  1037,   679,  1072,   624,  1031,  1503,
    1567,  1091,   625,  1075,  1078,  1508,  1509,   626,  1079,  1080,
     472,  1092,  1098,  1101,   758,   918,  1112,  1113,  1246,  1248,
     731,  1249,  1498,  1252,  1256,  1107,   219,   710,  1250,  1264,
    1245,   634,  1287,  1274,  1273,  1276,  1275,  1289,   220,   221,
    1286,  1288,   473,  1290,  1021,   635,     6,  1304,   758,  1077,
     636,  1292,  1296,  1305,  1294,   637,   629,  1306,  1295,  1297,
    1307,  1534,   629,   629,   629,   629,   629,   629,  1095,  1291,
    1308,   415,  1309,  1310,  1311,   488,   223,   403,   224,  1312,
     732,   472,  1330,   225,  1333,   226,  1337,   641,  1338,  1355,
     474,  1532,  1263,  1348,   795,  1549,   286,   287,   288,   724,
     241,   242,   937,   725,   804,   805,   806,   807,   808,  1344,
    1558,   243,   290,   473,  1354,  1356,  1357,  1370,  1373,  1374,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   185,   439,  1371,  1341,  1342,   726,   443,  1376,  1375,
    1378,  1377,  1383,  1380,  1384,   183,  1387,  1390,   641,  1391,
    1427,   184,   329,  1392,  1393,  1430,  1396,  1432,  1433,   472,
    1438,   592,  1457,   283,  1456,   472,   472,  1458,   474,  1434,
     415,   415,  1437,   498,   474,   474,  1459,  1439,  1443,  1444,
    1460,   899,  1463,  1461,  1462,  1464,  1469,  1473,  1501,   289,
    1499,   473,  1502,  1514,   360,  1516,  1517,   473,   473,  1520,
    1521,  1522,   511,  1523,  1525,  1329,  1329,  1329,  1329,  1329,
    1535,  1329,  1527,  1536,  1526,  1538,  1533,   727,  1537,  1539,
    1540,  1541,  1542,   213,  1543,  1544,   250,   251,   252,   253,
     254,   728,   255,   256,   257,  1550,   729,  1545,  1546,  1560,
    1561,  1548,  1095,  1562,   237,   238,   239,   240,   241,   242,
    1551,   629,  1568,  1569,   472,   500,  1340,   592,   831,   243,
     592,  1349,  1426,   474,   570,  1011,   515,  1089,  1515,   360,
     360,  1347,   887,  1313,  1018,  1046,  1372,  1343,   589,   517,
       0,   585,   586,     0,     0,     0,   473,     0,   593,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,
    1329,  1329,  1329,  1329,  1329,  1329,  1329,  1329,     0,     0,
       0,     0,   362,     0,     0,     0,     0,   367,     0,   369,
       0,   371,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,     0,
    1351,     0,     0,   216,   217,   218,     0,     0,   395,     0,
     640,     0,   400,   401,   402,   758,     0,  1329,     0,  1083,
       0,  1409,  1410,  1411,  1412,     0,   804,   805,   806,   807,
     808,     0,     0,     0,  1413,     0,   216,   217,   218,   930,
     246,   247,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,     0,     0,     0,     0,   219,   722,     0,
       0,     0,     0,   472,     0,     0,     0,     0,   746,   220,
     221,     0,   684,  1329,     0,     0,     0,     0,   232,     0,
     787,   283,     0,   472,     0,   472,  1403,     0,     0,   758,
     219,     0,   474,   444,   474,   473,     0,     0,     0,     0,
       0,   270,   220,   221,     0,     6,   222,   223,     0,   224,
       0,  1361,  1363,  1365,   225,   473,   226,   473,     0,     0,
       0,   297,     0,     0,   216,   217,   218,     0,     0,   788,
       0,     0,     0,  1452,  1453,     0,  1454,     0,  1455,   222,
     223,   321,   224,   640,   227,   472,     0,   225,   228,   226,
       0,   336,     0,   229,   474,     0,     0,   592,     0,  1418,
    1419,  1420,  1421,  1422,   937,  1423,  1424,  1425,     0,   479,
       0,     0,     0,   320,   592,   592,   592,   473,   219,     0,
       0,   826,     0,     0,  1495,   216,   217,   218,     0,     0,
     220,   221,     0,  1445,     0,  1446,   390,  1447,     0,   393,
    1448,  1449,  1450,     0,     0,     0,   841,   842,   843,   844,
       0,   847,    70,   571,    71,    72,    73,     0,     0,     0,
       0,     0,     0,     0,  1018,     0,     0,   222,   223,     0,
     224,     0,     0,     0,     0,   225,     0,   226,   472,   219,
       0,     0,    80,     0,   409,   410,     0,   474,     0,   592,
       0,   220,   221,     0,     0,     0,   592,     0,   266,   787,
     787,   787,   592,   592,     0,     0,     0,     0,     0,   588,
     473,     0,     0,     0,   229,     0,  1077,     0,    82,    83,
     936,   236,   237,   238,   239,   240,   241,   242,   222,   223,
     446,   224,     0,     0,     0,    88,   225,   243,   226,     0,
      90,     0,  1554,  1555,  1556,     0,  1557,   472,   490,     0,
     492,     0,     0,     0,     0,     0,   474,     0,   592,     0,
       0,     0,   501,     0,     0,     0,     0,   502,     0,   503,
     504,   505,   506,   507,   508,     0,     0,     0,     0,   473,
       0,     0,   716,     0,   640,     0,     0,     0,     0,   733,
       0,   518,   592,     0,   640,     0,     0,     0,  1024,     0,
     526,     0,     0,   529,     0,     0,     0,   592,   787,     0,
       0,   537,     0,     0,     0,  1042,   763,   787,   764,     0,
     765,     0,     0,     0,     0,     0,  1047,  1048,  1049,  1050,
    1051,  1052,  1053,  1054,  1055,  1056,  1057,  1058,  1059,  1060,
    1061,  1062,  1063,  1064,  1065,  1066,  1067,     0,  1070,     0,
     573,     0,     0,     0,   577,     0,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   232,   255,   256,
     257,   235,   236,   237,   238,   239,   240,   241,   242,     0,
       0,     0,     0,  1397,  1398,  1399,  1400,  1401,   243,  1404,
    1411,  1412,     0,   640,     0,     0,     0,     0,     0,     0,
       0,  1413,     0,     0,   602,     0,     0,     0,   936,   239,
     240,   241,   242,     0,     0,     0,     0,     0,     0,     0,
     297,     0,   243,     0,     0,     0,  1407,  1408,  1409,  1410,
    1411,  1412,   642,     0,     0,     0,     0,   845,     0,     0,
       0,  1413,   297,     0,     0,     0,     0,     0,     0,     0,
     297,   243,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   640,     0,  1255,  1475,  1476,  1477,
    1478,  1479,  1480,  1481,  1482,  1483,  1484,  1485,  1486,  1487,
    1488,  1489,  1490,  1491,  1492,  1493,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   760,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,  1299,   255,
     256,   257,     0,     0,     0,   596,  1418,  1419,  1420,  1421,
    1422,     0,  1423,  1424,  1425,  1528,     0,     0,     0,     0,
       0,     0,     0,     0,   409,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,     7,     8,     9,    10,
       0,    11,    12,    13,   200,    68,  1418,  1419,  1420,  1421,
    1422,     0,  1423,  1424,  1425,     0,   250,   251,   252,   253,
     254,     0,   255,   256,   257,     0,     0,   812,     0,     0,
       0,  1547,     0,     0,  1032,  1033,  1034,     0,  1036,     0,
    1039,  1040,  1041,    15,    69,   297,     0,   201,     0,   202,
     203,   204,    74,    75,     0,    20,    76,     0,     0,   205,
      22,     0,     0,    78,     0,     0,     0,     0,    23,    24,
     206,     0,     0,     0,    26,     0,     0,   207,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,   208,     0,     0,     0,     0,     0,     0,
       0,     0,    44,   891,    45,     0,    46,     0,     0,     0,
       0,    47,     0,   209,   210,    50,     0,     0,    51,    84,
       0,     0,     0,    52,     0,     0,    53,    85,    86,    87,
     211,     0,     0,    89,   925,   212,     0,     0,     0,     7,
       8,     9,    10,     0,    11,    12,    13,   496,    56,     0,
       0,    57,    58,    59,     0,     0,    60,     0,    61,    62,
       0,  1346,    63,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   297,     0,   235,   236,   237,   238,   239,   240,
     241,   242,     0,     0,     0,     0,    15,   341,     0,     0,
     201,   243,   202,   203,   204,    74,     0,     0,    20,   342,
       0,     0,   205,    22,     0,     0,    78,     0,     0,     0,
       0,    23,    24,   206,     0,  1379,     0,    26,     0,     0,
     207,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,   208,     0,     0,     0,
       0,     0,     0,     0,     0,    44,     0,    45,     0,    46,
       0,     0,     0,     0,    47,     0,   209,   210,    50,     0,
     936,    51,    84,     0,     0,     0,    52,     0,     0,    53,
     344,   345,    87,   211,     0,     0,    89,     0,   212,     0,
       0,     0,     7,     8,     9,    10,  1090,    11,    12,    13,
      14,    56,     0,  1314,    57,    58,    59,     0,     0,    60,
       0,    61,    62,     0,     0,    63,     0,     0,     0,     0,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,     0,     0,     0,  1302,    15,
       0,     0,     0,    16,     0,    17,    18,    19,     0,     0,
    1496,    20,     0,   743,   744,    21,    22,     0,     0,  1413,
       0,     0,     0,     0,    23,    24,    25,     0,     0,     0,
      26,     0,     0,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
      45,     0,    46,     0,     0,     0,     0,    47,     0,    48,
      49,    50,  1266,     0,    51,   339,   340,     0,     0,    52,
       0,     0,    53,     0,     0,     0,    54,     0,     0,     0,
       0,    55,     0,     0,     0,    70,   745,    71,    72,    73,
       0,     0,     0,  1293,    56,     0,     0,    57,    58,    59,
       0,     0,    60,   774,    61,    62,   341,     0,    63,    70,
       0,    71,    72,    73,    74,    80,     0,     0,   342,   775,
       0,    77,     0,     0,     0,    78,     0,     0,     0,     0,
       0,   266,    79,   776,  1418,  1419,  1420,  1421,  1422,    80,
    1423,  1424,  1425,     0,     0,     0,   777,   778,     0,     0,
       0,    82,    83,     0,    70,    81,    71,    72,    73,     0,
       0,     0,   779,     0,     0,   925,   265,   343,    88,     0,
       0,     0,     0,    90,     0,    82,    83,     0,     0,     0,
       0,    84,     0,     0,    80,     0,     0,     0,  1402,   344,
     345,    87,    88,   780,     0,    89,   781,    90,     0,   782,
     266,     0,   346,     0,     0,   235,   236,   237,   238,   239,
     240,   241,   242,     0,     0,   783,     0,     0,   347,     0,
      82,    83,   243,     0,     0,     0,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    88,     0,     0,
       0,   785,    90,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1465,  1466,  1467,  1468,     0,  1471,  1472,  1114,
    1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,
       0,  1125,  1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,
    1134,  1135,     0,     0,     0,     0,     0,     0,     0,  1136,
    1137,  1138,  1139,  1140,  1141,  1142,  1143,  1144,  1145,  1146,
    1147,  1148,  1149,  1150,  1151,  1152,  1153,  1154,     0,     0,
    1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,
    1165,  1166,  1167,  1168,  1169,     0,  1170,     0,  1171,  1172,
    1173,  1174,  1175,  1176,  1177,  1178,  1179,  1366,  1180,  1181,
    1182,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,  1183,     0,     0,  1531,
       0,     0,     0,  1184,  1185,  1186,     0,  1187,  1188,  1189,
    1190,  1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  1199,
    1200,  1201,  1202,  1203,  1204,  1205,  1206,  1207,  1208,  1209,
    1210,  1211,  1212,  1213,  1214,  1215,  1216,  1217,  1218,  1219,
       0,     0,     0,  1220,  1221,  1222,  1223,  1224,  1225,  1226,
    1227,  1228,  1229,  1230,  1231,  1232,  1233,  1234,  1235,  1236,
    1237,  1238,  1239,  1240,  1435,  1241,  1242,  1114,  1115,  1116,
    1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,     0,  1125,
    1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,  1135,
       0,     0,     0,     0,     0,     0,     0,  1136,  1137,  1138,
    1139,  1140,  1141,  1142,  1143,  1144,  1145,  1146,  1147,  1148,
    1149,  1150,  1151,  1152,  1153,  1154,     0,     0,  1155,  1156,
    1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,  1165,  1166,
    1167,  1168,  1169,     0,  1170,     0,  1171,  1172,  1173,  1174,
    1175,  1176,  1177,  1178,  1179,     0,  1180,  1181,  1182,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1183,  1524,     0,     0,     0,     0,
       0,  1184,  1185,  1186,     0,  1187,  1188,  1189,  1190,  1191,
    1192,  1193,  1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,
    1202,  1203,  1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,
    1212,  1213,  1214,  1215,  1216,  1217,  1218,  1219,     0,     0,
       0,  1220,  1221,  1222,  1223,  1224,  1225,  1226,  1227,  1228,
    1229,  1230,  1231,  1232,  1233,  1234,  1235,  1236,  1237,  1238,
    1239,  1240,     0,  1241,  1242,     7,     8,     9,    10,     0,
      11,    12,    13,    14,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   235,   236,   237,   238,
     239,   240,   241,   242,     0,     0,     0,     0,     0,     0,
       0,     0,    15,   243,     0,     0,    16,     0,    17,    18,
      19,     0,     0,     0,    20,     0,     0,     0,    21,    22,
       0,     0,     0,     0,     0,     0,     0,    23,    24,    25,
       0,     0,     0,    26,     0,     0,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
       0,    44,     0,    45,     0,    46,     0,     0,     0,     0,
      47,     0,    48,    49,    50,     0,     0,    51,     0,     0,
       0,     0,    52,     0,     0,    53,     0,     0,     0,    54,
       7,     8,     9,    10,    55,    11,    12,    13,    14,     0,
       0,     0,     0,     0,     0,     0,     0,    56,     0,     0,
      57,    58,    59,     0,     0,    60,     0,    61,    62,   437,
     594,    63,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,    15,   442,     0,
       0,    16,     0,    17,    18,    19,     0,     0,     0,    20,
       0,     0,     0,    21,    22,     0,     0,     0,     0,     0,
       0,     0,    23,    24,    25,     0,     0,     0,    26,     0,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,    45,     0,
      46,     0,     0,     0,     0,    47,     0,    48,    49,    50,
       0,     0,    51,     0,     0,     0,     0,    52,     0,     0,
      53,     0,     0,     0,    54,     7,     8,     9,    10,    55,
      11,    12,    13,    14,     0,     0,     0,     0,     0,     0,
       0,     0,    56,     0,     0,    57,    58,    59,     0,     0,
      60,     0,    61,    62,     0,     0,    63,     0,     0,     0,
     235,   236,   237,   238,   239,   240,   241,   242,     0,     0,
       0,     0,    15,   721,     0,     0,    16,   243,    17,    18,
      19,     0,     0,     0,    20,     0,     0,     0,    21,    22,
       0,     0,     0,     0,     0,     0,     0,    23,    24,    25,
       0,     0,     0,    26,     0,     0,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
       0,    44,     0,    45,     0,    46,     0,     0,     0,     0,
      47,     0,    48,    49,    50,     0,     0,    51,     0,     0,
       0,     0,    52,     0,     0,    53,     0,     0,     0,    54,
       7,     8,     9,    10,    55,    11,    12,    13,    14,     0,
       0,     0,     0,     0,     0,     0,     0,    56,     0,     0,
      57,    58,    59,     0,     0,    60,     0,    61,    62,     0,
       0,    63,     0,   938,     0,     0,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,    15,   255,   256,
     257,    16,     0,    17,    18,    19,     0,     0,     0,    20,
       0,     0,     0,    21,    22,     0,     0,     0,     0,     0,
       0,     0,    23,    24,    25,     0,     0,     0,    26,     0,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,    45,     0,
      46,     0,     0,     0,     0,    47,     0,    48,    49,    50,
       0,     0,    51,     0,     0,     0,     0,    52,     0,     0,
      53,     0,     0,     0,    54,     7,     8,     9,    10,    55,
      11,    12,    13,    14,   933,     0,     0,     0,     0,     0,
       0,     0,    56,     0,     0,    57,    58,    59,     0,     0,
      60,     0,    61,    62,     0,     0,    63,     0,     0,     0,
     235,   236,   237,   238,   239,   240,   241,   242,     0,     0,
       0,     0,    15,     0,     0,     0,    16,   243,    17,    18,
      19,     0,     0,     0,    20,     0,     0,     0,    21,    22,
       0,     0,     0,     0,     0,     0,     0,    23,    24,    25,
       0,     0,     0,    26,     0,     0,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
       0,    44,     0,    45,     0,    46,     0,     0,     0,     0,
      47,     0,    48,    49,    50,     0,     0,    51,     0,     0,
       0,     0,    52,     0,     0,    53,     0,     0,     0,    54,
       7,     8,     9,    10,    55,    11,    12,    13,    14,     0,
       0,     0,     0,     0,     0,     0,     0,    56,     0,     0,
      57,    58,    59,     0,     0,    60,     0,    61,    62,  1068,
       0,    63,  1277,     0,     0,     0,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,    15,   255,   256,
     257,    16,     0,    17,    18,    19,     0,     0,     0,    20,
       0,     0,     0,    21,    22,     0,     0,     0,     0,     0,
       0,     0,    23,    24,    25,     0,     0,     0,    26,     0,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,    45,     0,
      46,     0,     0,     0,     0,    47,     0,    48,    49,    50,
       0,     0,    51,     0,     0,     0,     0,    52,     0,     0,
      53,     0,     0,     0,    54,     7,     8,     9,    10,    55,
      11,    12,    13,    14,  1345,     0,     0,     0,     0,     0,
       0,     0,    56,     0,     0,    57,    58,    59,     0,     0,
      60,     0,    61,    62,     0,     0,    63,     0,     0,     0,
     235,   236,   237,   238,   239,   240,   241,   242,     0,     0,
       0,     0,    15,     0,     0,     0,    16,   243,    17,    18,
      19,     0,     0,     0,    20,     0,     0,     0,    21,    22,
       0,     0,     0,     0,     0,     0,     0,    23,    24,    25,
       0,     0,     0,    26,     0,     0,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
       0,    44,     0,    45,     0,    46,     0,     0,     0,     0,
      47,     0,    48,    49,    50,     0,     0,    51,     0,     0,
       0,     0,    52,     0,     0,    53,     0,     0,     0,    54,
       7,     8,     9,    10,    55,    11,    12,    13,    14,     0,
       0,     0,     0,     0,     0,     0,     0,    56,     0,     0,
      57,    58,    59,     0,     0,    60,     0,    61,    62,  1494,
       0,    63,     0,     0,  1300,     0,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,    15,   255,   256,
     257,    16,     0,    17,    18,    19,     0,     0,     0,    20,
       0,     0,     0,    21,    22,     0,     0,     0,     0,     0,
       0,     0,    23,    24,    25,     0,     0,     0,    26,     0,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,    45,     0,
      46,     0,     0,     0,     0,    47,     0,    48,    49,    50,
       0,     0,    51,     0,     0,     0,     0,    52,     0,     0,
      53,     0,     0,     0,    54,   652,   653,   654,    10,    55,
      11,   655,   656,    67,    68,     0,     0,   657,     0,     0,
       0,     0,    56,     0,     0,    57,    58,    59,     0,     0,
      60,     0,    61,    62,     0,     0,    63,   235,   236,   237,
     238,   239,   240,   241,   242,     0,     0,     0,     0,   464,
       0,     0,   658,    69,   243,     0,    70,     0,    71,    72,
      73,    74,   465,     0,   659,    76,     0,     0,    77,   660,
       0,     0,    78,     0,     0,     0,     0,   661,   662,    79,
       0,     0,     0,     0,     0,     0,    80,     0,     0,     0,
       0,     0,   235,   236,   237,   238,   239,   240,   241,   242,
       0,     0,    81,     0,     0,     0,     0,     0,     0,   243,
       0,   663,     0,   664,     0,   665,     0,     0,     0,   466,
     666,     0,    82,    83,   667,     0,     0,   668,    84,     0,
       0,     0,   669,     0,     0,   670,    85,    86,    87,    88,
       0,     0,    89,     0,    90,     0,   652,   653,   654,    10,
       0,    11,   655,   656,    67,    68,     0,   671,  1045,     0,
     672,   673,     0,     0,     0,   674,     0,   675,     0,   697,
       0,   676,     0,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   698,     0,
     464,     0,     0,   658,    69,     0,     0,    70,     0,    71,
      72,    73,    74,   465,     0,   659,    76,     0,     0,    77,
     660,     0,     0,    78,     0,     0,     0,     0,   661,   662,
      79,     0,     0,   774,     0,     0,     0,    80,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,    81,     0,     0,     0,     0,     0,     0,
       0,     0,   663,   776,   664,     0,   665,     0,     0,     0,
     466,   666,     0,    82,    83,   667,   777,   778,   668,    84,
       0,     0,     0,   669,     0,     0,   670,    85,    86,    87,
      88,     0,   779,    89,     0,    90,     7,     8,     9,    10,
       0,    11,    12,    13,     0,     0,     0,     0,   671,     0,
       0,   672,   673,     0,     0,     0,   674,     0,   675,     0,
       0,     0,   676,   780,     0,     0,   781,     0,     0,   782,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1315,     0,   783,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1316,     0,   784,     0,     0,
    1317,  1406,  1407,  1408,  1409,  1410,  1411,  1412,    23,    24,
       0,   785,     0,     0,    26,     0,     0,  1413,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,   235,   236,   237,   238,   239,   240,   241,
     242,     0,     0,     0,    45,     0,    46,     0,     0,     0,
     243,  1318,     0,     0,     0,  1319,     0,     0,  1320,     0,
       0,     0,     0,    52,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1321,     0,
       0,  1322,  1323,  1324,   942,     0,  1325,     0,  1326,    62,
       0,     0,  1327,     0,   943,   944,   945,   946,   947,   948,
     949,   950,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   951,     0,   952,   953,   954,   955,   956,   957,   958,
     959,   960,   961,   962,   963,     0,     0,  1415,  1416,  1417,
       0,     0,  1418,  1419,  1420,  1421,  1422,     0,  1423,  1424,
    1425,     0,     0,   964,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   339,   340,     0,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   582,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   965,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   341,     0,     0,
      70,     0,    71,    72,    73,    74,     0,     0,     0,   342,
       0,     0,    77,     0,     0,     0,    78,     0,     0,     0,
       0,     0,     0,    79,     0,     0,   966,     0,     0,   967,
      80,   968,   969,   970,   971,   972,   973,   974,   975,   976,
     977,   978,     0,   979,   980,     0,    81,   981,   513,   514,
       0,     0,     0,     0,     0,     0,     0,     0,   343,     0,
       0,     0,     0,     0,     0,     0,    82,    83,     0,     0,
       0,     0,    84,     0,     0,     0,     0,     0,     0,     0,
     344,   345,    87,    88,     0,     0,    89,     0,    90,   341,
       0,     0,    70,     0,    71,    72,    73,    74,     0,     0,
       0,   342,     0,     0,    77,     0,     0,     0,    78,   347,
       0,     0,     0,     0,     0,    79,     0,     0,     0,     0,
       0,     0,    80,   235,   236,   237,   238,   239,   240,   241,
     242,     0,     0,     0,     0,     0,     0,     0,    81,     0,
     243,     0,     0,     0,     0,   216,   217,   218,     0,     0,
     343,     0,     0,     0,     0,     0,     0,     0,    82,    83,
       0,     0,     0,     0,    84,     0,     0,     0,     0,     0,
       0,     0,   344,   345,    87,    88,     0,     0,    89,     0,
      90,   235,   236,   237,   238,   239,   240,   241,   242,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   243,   219,
       0,   347,   235,   236,   237,   238,   239,   240,   241,   242,
       0,   220,   221,     0,     0,     0,     0,     0,     0,   243,
     235,   236,   237,   238,   239,   240,   241,   242,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   243,   235,   236,
     237,   238,   239,   240,   241,   242,     0,     0,   222,   223,
       0,   224,     0,     0,     0,   243,   225,     0,   226,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   256,   257,   598,   235,   236,   237,   238,   239,
     240,   241,   242,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   243,   851,   852,   853,   854,   855,   856,   857,
     858,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     859,     0,     0,     0,     0,     0,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     256,   257,   686,     0,     0,     0,     0,     0,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   766,     0,     0,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   909,     0,     0,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,  1026,
    1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1413,     0,     0,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,  1298,     0,     0,   860,
     861,   862,   863,   864,   865,   866,   867,   868,   869,   870,
       0,   871,   872,   873,  1405,  1406,  1407,  1408,  1409,  1410,
    1411,  1412,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1413,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    -2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     237,   238,   239,   240,   241,   242,     0,     0,     0,     0,
       0,     0,     0,     0,  1529,   243,  1414,  1415,  1416,  1417,
       0,     0,  1418,  1419,  1420,  1421,  1422,     0,  1423,  1424,
    1425,   105,     0,   106,     0,     0,   107,   108,     0,     0,
       0,     0,     0,     0,   109,   110,   237,   238,   239,   240,
     241,   242,     0,   111,     0,   112,   113,   114,   115,     0,
       0,   243,   116,     0,     0,     0,     0,   117,     0,     0,
    1414,  1415,  1416,  1417,     0,     0,  1418,  1419,  1420,  1421,
    1422,     0,  1423,  1424,  1425,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,     0,   126,   127,
     128,   129,     0,     0,     0,     0,     0,   130,   131,    67,
      68,   132,   133,   462,     0,   463,   134,     0,     0,     0,
       0,     0,   135,   136,     0,   137,     0,     0,     0,     0,
       0,     0,     0,   138,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   464,   255,   256,   257,    69,
       0,     0,    70,     0,    71,    72,    73,    74,   465,     0,
       0,    76,     0,     0,    77,     0,     0,     0,    78,     0,
       0,     0,     0,     0,     0,    79,  1407,  1408,  1409,  1410,
    1411,  1412,    80,   247,   248,   249,   250,   251,   252,   253,
     254,  1413,   255,   256,   257,   216,   217,   218,    81,   237,
     238,   239,   240,   241,   242,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   243,   466,     0,     0,    82,    83,
       0,     0,     0,     0,    84,     0,  1407,  1408,  1409,  1410,
    1411,  1412,    85,    86,    87,    88,     0,     0,    89,     0,
      90,  1413,  1407,  1408,  1409,  1410,  1411,  1412,     0,   219,
       0,     0,     0,   467,     0,     0,     0,  1413,   468,     0,
       0,   220,   221,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     483,   484,   485,   335,     0,     0,     0,     0,   222,   223,
       0,   224,     0,     0,     0,     0,   225,     0,   226,     0,
       0,  1415,  1416,  1417,     0,     0,  1418,  1419,  1420,  1421,
    1422,     0,  1423,  1424,  1425,     0,     0,   486,     0,   487,
       0,     0,     0,     0,     0,     0,     0,   248,   249,   250,
     251,   252,   253,   254,   219,   255,   256,   257,     0,     0,
       0,     0,     0,     0,     0,     0,   220,   221,     0,   305,
       0,     0,  1416,  1417,     0,     0,  1418,  1419,  1420,  1421,
    1422,     0,  1423,  1424,  1425,     0,   305,     0,     0,  1417,
       0,     0,  1418,  1419,  1420,  1421,  1422,     0,  1423,  1424,
    1425,     0,     0,   488,   223,     0,   224,     0,     0,     0,
     105,   225,   106,   226,     0,     0,   108,     0,     0,     0,
       0,     0,     0,   109,   110,     0,     0,   105,    70,   106,
      71,    72,    73,   108,   112,   113,   114,   489,     0,     0,
     109,   110,     0,     0,     0,     0,   300,     0,     0,     0,
       0,   112,   299,   114,     0,     0,     0,     0,    80,     0,
       0,     0,     0,   300,   216,   217,   218,     0,     0,     0,
     124,     0,     0,     0,   266,     0,   399,    67,    68,     0,
     129,     0,     0,     0,     0,     0,   130,   124,     0,     0,
     132,   133,     0,     0,    82,    83,     0,   129,     0,     0,
       0,     0,   136,   130,   137,  1038,    67,    68,   133,     0,
       0,    88,     0,     0,     0,     0,    90,    69,   219,   136,
      70,   137,    71,    72,    73,    74,    75,     0,     0,    76,
     220,   221,    77,     0,     0,     0,    78,     0,     0,   187,
       0,     0,     0,    79,     0,     0,    69,     0,     0,    70,
      80,    71,    72,    73,    74,    75,     0,     0,    76,     0,
       0,    77,     0,     0,     0,    78,    81,   222,  1278,  1279,
    1280,     0,    79,     0,     0,   225,     0,   226,     0,    80,
       0,     0,     0,     0,     0,     0,    82,    83,  1281,     0,
       0,     0,    84,  1282,     0,    81,     0,  1470,    67,    68,
      85,    86,    87,    88,     0,     0,    89,     0,    90,     0,
       0,     0,     0,     0,     0,    82,    83,     0,     0,     0,
       0,    84,     0,     0,     0,     0,   699,   700,   701,    85,
      86,    87,    88,     0,     0,    89,     0,    90,    69,     0,
       0,    70,     0,    71,    72,    73,    74,    75,     0,     0,
      76,     0,     0,    77,     0,     0,     0,    78,   699,   700,
     701,     0,     0,     0,    79,     0,     0,     0,     0,     0,
      70,    80,    71,    72,    73,   702,   703,     0,     0,     0,
       0,     0,    77,     0,     0,     0,     0,    81,     0,     0,
       0,     0,     0,    79,     0,     0,     0,     0,     0,     0,
      80,     0,    70,     0,    71,    72,    73,    82,    83,     0,
       0,     0,     0,    84,    77,     0,    81,     0,     0,     0,
       0,    85,    86,    87,    88,    79,     0,    89,     0,    90,
       0,     0,    80,     0,    67,    68,    82,    83,   462,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    81,     0,
     704,     0,     0,    88,     0,     0,    89,     0,    90,     0,
       0,     0,     0,    67,    68,     0,     0,   800,    82,    83,
     464,     0,     0,     0,    69,     0,     0,    70,     0,    71,
      72,    73,    74,   465,     0,    88,    76,     0,    89,    77,
      90,     0,     0,    78,     0,     0,     0,     0,     0,   464,
      79,     0,     0,    69,     0,     0,    70,    80,    71,    72,
      73,    74,   465,     0,     0,    76,     0,     0,    77,     0,
       0,     0,    78,    81,     0,     0,     0,     0,     0,    79,
       0,     0,     0,     0,     0,     0,    80,     0,     0,     0,
     466,     0,     0,    82,    83,   216,   217,   218,     0,    84,
       0,     0,    81,     0,     0,    67,    68,    85,    86,    87,
      88,     0,     0,    89,     0,    90,     0,     0,     0,   466,
       0,     0,    82,    83,     0,     0,     0,     0,    84,    70,
       0,    71,    72,    73,    67,    68,    85,    86,    87,    88,
       0,   464,    89,     0,    90,    69,     0,     0,    70,   219,
      71,    72,    73,    74,   465,     0,     0,    76,     0,    80,
      77,   220,   221,     0,    78,     0,     0,     0,     0,     0,
       0,    79,     0,     0,    69,   266,     0,    70,    80,    71,
      72,    73,    74,    75,     0,     0,    76,     0,     0,    77,
       0,     0,     0,    78,    81,    82,    83,     0,   222,   223,
      79,   224,     0,     0,     0,     0,   225,    80,   226,     0,
       0,   466,    88,     0,    82,    83,     0,    90,     0,  1281,
      84,    67,    68,    81,  1360,     0,     0,     0,    85,    86,
      87,    88,     0,     0,    89,     0,    90,     0,     0,     0,
     188,     0,     0,    82,    83,    67,    68,     0,     0,    84,
       0,     0,     0,     0,     0,     0,     0,    85,    86,    87,
      88,    69,     0,    89,    70,    90,    71,    72,    73,    74,
       0,     0,     0,    76,     0,     0,    77,     0,     0,     0,
      78,     0,     0,     0,     0,    69,     0,    79,    70,     0,
      71,    72,    73,    74,    80,     0,     0,    76,     0,     0,
      77,     0,     0,     0,    78,     0,     0,     0,     0,     0,
      81,    79,     0,     0,     0,     0,     0,     0,    80,   216,
     217,   218,     0,     0,     0,     0,     0,   611,     0,     0,
      82,    83,    67,     0,    81,     0,    84,     0,     0,     0,
       0,     0,     0,     0,    85,    86,    87,    88,     0,     0,
      89,     0,    90,     0,    82,    83,     0,     0,     0,     0,
      84,   177,     0,     0,     0,     0,     0,     0,    85,    86,
      87,    88,    69,   219,    89,    70,    90,    71,    72,    73,
      74,   524,     0,     0,    76,   220,   221,    77,     0,     0,
       0,    78,     0,     0,     0,     0,     0,     0,    79,     0,
       0,   178,     0,     0,    70,    80,    71,    72,    73,    74,
    1003,     0,     0,   179,     0,     0,    77,     0,     0,     0,
      78,    81,   222,   223,     0,   224,     0,    79,     0,     0,
     225,     0,   226,     0,    80,     0,     0,     0,     0,     0,
       0,    82,    83,  1281,     0,     0,     0,    84,   177,     0,
      81,     0,     0,     0,     0,    85,    86,    87,    88,     0,
       0,    89,     0,    90,     0,     0,     0,     0,     0,     0,
      82,    83,    67,     0,     0,     0,    84,     0,     0,     0,
     216,   217,   218,     0,   180,   181,    87,    88,   178,     0,
      89,    70,    90,    71,    72,    73,    74,     0,     0,     0,
     179,     0,    70,    77,    71,    72,    73,    78,     0,     0,
       0,     0,    69,     0,    79,    70,     0,    71,    72,    73,
      74,    80,     0,     0,    76,     0,     0,    77,     0,     0,
       0,    78,    80,     0,   219,     0,     0,    81,    79,     0,
     216,   217,   218,     0,     0,    80,   220,   221,   266,     0,
       0,     0,     0,     0,   216,   217,   218,    82,    83,     0,
       0,    81,     0,    84,     0,     0,     0,     0,    82,    83,
       0,   180,   181,    87,    88,     0,     0,    89,     0,    90,
       0,    82,    83,   222,   223,    88,   224,    84,     0,     0,
      90,   225,     0,   226,   219,    85,    86,    87,    88,     0,
       0,    89,     0,    90,  1281,     0,   220,   221,   219,  1362,
       0,     0,     0,   193,     0,     0,     0,     0,     0,     0,
     220,   221,     0,     0,     0,     0,     0,     0,     0,    70,
       0,    71,    72,    73,     0,     0,     0,     0,     0,     0,
       0,   265,     0,   222,   223,     0,   224,     0,     0,     0,
       0,   225,     0,   226,     0,     0,     0,   222,   223,    80,
     224,     0,     0,     0,  1281,   225,   105,   226,   106,  1364,
       0,   107,   108,     0,     0,   266,     0,     0,     0,   109,
     110,     0,   294,     0,     0,     0,     0,     0,   111,     0,
     112,   113,   114,   115,     0,    82,    83,   116,     0,     0,
       0,     0,   117,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    88,     0,     0,     0,     0,    90,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,     0,
       0,     0,     0,   126,   127,   128,   129,     0,     0,   105,
     176,   106,   130,   131,   107,   108,   132,   133,     0,     0,
       0,   134,   109,   110,     0,     0,     0,   135,   136,     0,
     137,   111,     0,   112,   113,   114,   115,     0,   138,     0,
     116,     0,     0,     0,     0,   117,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   695,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,     0,     0,     0,     0,   126,   127,   128,   129,
       0,     0,   105,     0,   106,   130,   131,   107,   108,   132,
     133,     0,     0,     0,   134,   109,   110,     0,     0,     0,
     135,   136,     0,   137,   111,     0,   112,   113,   114,   115,
       0,   138,     0,   116,     0,     0,     0,     0,   117,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     876,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,     0,     0,     0,     0,   126,
     127,   128,   129,     0,     0,   105,     0,   106,   130,   131,
     107,   108,   132,   133,     0,     0,     0,   134,   109,   110,
       0,     0,     0,   135,   136,     0,   137,   111,     0,   112,
     113,   114,   115,     0,   138,     0,   116,     0,     0,     0,
       0,   117,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   920,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
       0,     0,   126,   127,   128,   129,     0,     0,   105,     0,
     106,   130,   131,   107,   108,   132,   133,     0,     0,     0,
     134,   109,   110,     0,     0,     0,   135,   136,     0,   137,
     111,     0,   112,   113,   114,   115,     0,   138,     0,   116,
       0,     0,     0,     0,   117,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1027,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,     0,   126,   127,   128,   129,     0,
       0,   105,     0,   106,   130,   131,   107,   108,   132,   133,
       0,     0,     0,   134,   109,   110,     0,     0,     0,   135,
     136,     0,   137,   111,     0,   112,   113,   114,   115,     0,
     138,     0,   116,     0,     0,     0,     0,   117,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1081,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,     0,   126,   127,
     128,   129,     0,     0,   105,     0,   106,   130,   131,   107,
     108,   132,   133,     0,     0,     0,   134,   109,   110,     0,
       0,     0,   135,   136,     0,   137,   111,     0,   112,   113,
     114,   115,     0,   138,     0,   116,     0,     0,     0,     0,
     117,     0,     0,   216,   217,   218,     0,     0,   890,   216,
     217,   218,  1303,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
       0,   126,   127,   128,   129,     0,     0,     0,     0,     0,
     130,   131,     0,     0,   132,   133,   486,     0,   487,   134,
       0,     0,     0,     0,     0,   135,   136,   219,   137,     0,
       0,     0,     0,   219,     0,   105,   138,   106,     0,   220,
     221,   108,     0,     0,     0,   220,   221,     0,   109,   110,
       0,     0,     0,     0,     0,  1451,     0,     0,     0,   112,
     299,   114,     0,     0,     0,     0,   116,     0,     0,     0,
       0,   300,     0,     0,     0,     0,   222,   223,     0,   224,
       0,     0,   222,   223,   225,   224,   226,     0,     0,     0,
     225,     0,   226,     0,     0,   124,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   129,     0,     0,     0,     0,
       0,   130,     0,     0,     0,     0,   133,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   135,   136,   105,   137,
     106,     0,     0,   107,   108,     0,     0,     0,     0,     0,
       0,   109,   110,     0,  -153,     0,     0,     0,     0,     0,
     111,     0,   112,   113,   114,   115,     0,     0,     0,   116,
       0,     0,     0,     0,   117,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,     0,   126,   127,   128,   129,     0,
       0,   105,     0,   106,   130,   131,     0,   108,   132,   133,
       0,     0,     0,   134,   109,   110,     0,     0,     0,   135,
     136,     0,   137,     0,     0,   112,   113,   114,   105,     0,
     106,     0,   116,     0,   108,     0,     0,   300,     0,     0,
       0,   109,   110,   105,     0,   106,     0,     0,     0,   108,
       0,     0,   112,   299,   114,     0,   109,   110,     0,     0,
       0,   124,     0,     0,   300,     0,     0,   112,   299,   114,
       0,   129,     0,     0,     0,     0,     0,   130,     0,   300,
       0,   132,   133,     0,     0,     0,     0,     0,   124,   311,
       0,     0,   135,   136,     0,   137,     0,     0,   129,     0,
       0,     0,     0,   124,   130,     0,     0,     0,     0,   133,
       0,     0,     0,   129,     0,     0,     0,     0,     0,   130,
     136,     0,   137,     0,   133,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   136,     0,   137
};

static const yytype_int16 yycheck[] =
{
       1,    61,   113,   495,   132,   515,   132,   320,   933,   617,
      92,   714,    44,   149,   590,   151,   152,   153,   154,   298,
     156,   736,   158,   663,   160,   184,    44,   482,   756,     6,
      15,     8,    44,   142,   464,    15,    59,    98,   466,     0,
     176,    33,    81,    82,    83,   166,   167,   608,   142,    88,
      15,   187,   188,    15,   333,   142,   486,   193,   194,    13,
      76,    62,    76,   148,   494,    75,   165,   495,    15,    15,
     148,   799,    76,   148,   148,   723,   589,   725,   726,   727,
     728,   729,   148,   719,   147,   170,   149,   156,   151,   167,
      91,    92,   167,   167,   151,   165,   148,    75,    99,   151,
     148,   167,   165,   126,   148,    10,    11,    12,   148,   166,
     142,   147,   748,   749,   627,   751,   752,   753,   754,   167,
     148,    33,   147,   167,   142,   638,   148,   167,   165,   165,
     142,   147,   165,   147,   150,   775,   150,   166,   167,   167,
     165,   717,   148,   147,   720,   167,   150,   148,   149,   148,
     151,   152,   153,   154,   165,   156,    33,   158,   150,   160,
     165,   167,   148,    13,     6,    15,     8,    17,   167,   208,
     209,   210,   211,   165,   166,   176,   166,   167,   260,   261,
     156,   167,   167,   184,   165,   165,   187,   188,   501,   298,
     167,   619,   193,   194,   276,   277,   256,   356,   165,    33,
     165,   148,   148,   165,   298,   697,   160,   148,   113,   165,
      60,   298,   108,   109,   110,   528,   112,   113,   114,    76,
     329,   117,   165,   149,   333,   151,   167,   266,   124,   165,
     231,   292,   165,   129,   130,   329,   132,   133,   134,   333,
     136,   137,   329,   165,   757,   150,   333,   757,   809,   148,
     151,   290,   164,   165,   166,   473,   392,   165,   819,   260,
     261,   165,   148,   911,   156,   166,   298,   165,   167,   905,
     280,    10,    11,    12,   275,   276,   277,   278,   279,   280,
     298,   167,   795,   796,   285,   151,   298,   164,   165,   166,
     147,   141,  1007,   150,   355,   148,     6,   329,     8,   147,
     166,   333,   280,   939,   759,   155,   144,   145,   146,   165,
     160,   329,    64,    65,   167,   333,   148,   329,    13,   320,
      15,   333,    17,   148,   148,    64,   160,   161,   162,   148,
     164,   165,   166,   343,   647,   167,   165,    76,    77,   165,
     148,   148,   167,   167,   165,   921,   776,   148,   167,   147,
     165,   149,   150,   151,   148,   356,   165,   918,   850,   167,
     167,   148,   165,  1003,   792,    60,   167,   646,   275,   276,
     277,   278,   279,   167,   113,   114,   165,   116,   166,   167,
     167,   165,   121,   696,   123,   165,   147,   165,   149,   902,
     151,   392,   902,  1108,  1002,   613,   147,   147,   149,   149,
     151,   151,   156,   299,   300,   165,   166,   167,   165,   305,
     165,   412,   165,   166,   167,   633,   634,   635,   636,   637,
    1345,   165,   850,    10,    11,    12,    13,   166,   989,   165,
      17,   165,   166,  1009,   165,   166,   167,   165,    33,  1015,
    1016,   166,   167,   482,   445,   165,   141,   150,   449,   450,
     451,   452,   453,   165,   166,   465,   466,   114,   115,   116,
     155,   165,   463,   165,   525,   160,   467,   468,   147,   148,
     165,   472,   165,    60,   475,   536,   165,   166,   539,   165,
     512,    10,    11,    12,   165,   495,   150,   465,   466,   165,
    1098,   709,   150,  1101,   495,   150,   165,   165,  1011,  1012,
     501,   167,   165,   165,   165,    10,    11,    12,    13,   151,
      15,   512,    17,   160,   524,   166,   166,   495,   150,   148,
      48,   165,   147,   156,   525,   112,   113,   528,  1104,   165,
     165,   165,   149,  1261,   148,    64,   167,   646,   445,    15,
     168,   167,   449,   450,   451,   452,   453,    76,    77,   167,
     157,   167,   646,   157,   141,    60,   463,   167,   167,   646,
     467,   468,   167,   148,   877,   160,   161,   162,   155,   164,
     165,   166,   148,   160,   167,   167,   794,   167,   165,   167,
     590,   167,   157,   167,   113,   114,   167,   116,   589,   590,
     591,   157,   121,   811,   123,   167,   167,   493,   167,   167,
     601,   611,   167,   167,   167,   167,   167,   608,   113,   619,
     167,   612,   590,   167,   646,   675,   617,   167,   167,   167,
     621,   622,   623,   624,   625,   626,   627,  1330,   646,   167,
     167,   663,   165,   611,   646,   167,   141,   638,   167,   160,
     167,   619,   166,   166,   150,   663,   647,   648,   167,   167,
     155,   663,   168,   714,   165,   160,   147,   165,   719,   148,
     165,   148,   723,   148,   725,   726,   727,   728,   729,   887,
     148,   703,   149,   148,   148,   165,   894,   895,   896,   897,
     898,   150,    10,    11,    12,    13,   165,   748,   749,    17,
     751,   752,   753,   754,   601,   696,   167,  1273,   165,  1275,
     165,   761,   762,   167,   167,   165,    48,   717,   709,   769,
     720,   771,  1440,  1441,  1442,   160,   717,     2,   160,   720,
     759,   170,   723,  1438,   725,   726,   727,   728,   729,   147,
    1338,    48,    60,    13,   165,    15,    76,    17,   165,   717,
     156,   742,   720,   775,   745,   156,   156,  1355,  1356,  1357,
     156,    10,   167,    10,    10,   756,   757,   775,    10,  1335,
     888,  1253,   888,   775,    10,    10,   149,   157,   148,   160,
     149,    56,    57,    58,    59,    60,   160,   888,    63,   167,
      60,   167,   792,   168,   472,   113,   149,   149,   160,   685,
     686,   167,   793,   167,   795,   796,   167,   167,   799,   165,
     147,   802,    10,    11,    12,   170,   165,   165,   809,   165,
     167,   166,   872,   141,   792,   166,   166,  1093,   819,   150,
     165,  1549,  1430,   167,   165,  1253,   148,   155,   829,  1437,
    1558,   151,   160,   148,   148,  1443,  1444,   165,   148,   148,
     850,   160,   167,   167,   905,   166,   149,   149,   148,    10,
     911,   167,  1428,     4,   148,   168,    64,   889,   170,    48,
     168,   141,   148,   170,   165,   170,   165,   157,    76,    77,
     147,   167,   850,   157,  1092,   155,   877,    10,   939,   880,
     160,   157,   157,    10,   167,   165,   887,   149,   167,   167,
      10,  1499,   893,   894,   895,   896,   897,   898,   899,  1035,
     167,   902,    10,    10,    10,   113,   114,   192,   116,   149,
     911,   921,   148,   121,   165,   123,   170,   918,   167,   167,
     921,  1497,  1004,   170,   612,  1533,    10,    11,    12,    13,
      22,    23,   933,    17,   622,   623,   624,   625,   626,   168,
    1548,    33,   150,   921,   168,   167,   167,    15,   165,   165,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,  1003,   257,  1286,  1110,  1111,    60,   262,   165,   167,
     165,   167,   148,   167,   149,  1003,   167,   165,   989,   156,
     165,  1003,   888,   156,   156,   167,   156,   168,   168,  1009,
     147,  1002,    10,  1004,   149,  1015,  1016,   149,  1009,   167,
    1011,  1012,   167,   298,  1015,  1016,    10,   167,   167,   167,
      10,   709,    10,   149,   149,   149,   165,   167,    15,   113,
     167,  1009,   168,   148,  1035,   167,   148,  1015,  1016,   167,
     157,   157,   327,   157,   167,  1321,  1322,  1323,  1324,  1325,
     168,  1327,   157,    10,   167,   149,   167,   141,   167,    10,
      10,   149,   165,    61,   165,   165,   158,   159,   160,   161,
     162,   155,   164,   165,   166,   149,   160,   167,   165,   149,
      10,   167,  1083,   149,    18,    19,    20,    21,    22,    23,
     167,  1092,   167,   149,  1104,   310,  1109,  1098,   649,    33,
    1101,  1256,  1330,  1104,   389,   793,   333,   889,  1457,  1110,
    1111,  1253,   703,  1083,   802,   850,  1287,  1220,   411,   333,
      -1,   406,   407,    -1,    -1,    -1,  1104,    -1,   413,  1405,
    1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,  1414,  1415,
    1416,  1417,  1418,  1419,  1420,  1421,  1422,  1423,    -1,    -1,
      -1,    -1,   150,    -1,    -1,    -1,    -1,   155,    -1,   157,
      -1,   159,    -1,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
    1262,    -1,    -1,    10,    11,    12,    -1,    -1,   186,    -1,
     475,    -1,   190,   191,   192,  1256,    -1,  1473,    -1,   887,
      -1,    20,    21,    22,    23,    -1,   894,   895,   896,   897,
     898,    -1,    -1,    -1,    33,    -1,    10,    11,    12,  1220,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,    -1,    -1,    -1,    -1,    64,   523,    -1,
      -1,    -1,    -1,  1253,    -1,    -1,    -1,    -1,   533,    76,
      77,    -1,  1253,  1529,    -1,    -1,    -1,    -1,    62,    -1,
    1261,  1262,    -1,  1273,    -1,  1275,  1326,    -1,    -1,  1330,
      64,    -1,  1273,   271,  1275,  1253,    -1,    -1,    -1,    -1,
      -1,    85,    76,    77,    -1,  1286,   113,   114,    -1,   116,
      -1,  1278,  1279,  1280,   121,  1273,   123,  1275,    -1,    -1,
      -1,   105,    -1,    -1,    10,    11,    12,    -1,    -1,   594,
      -1,    -1,    -1,  1373,  1374,    -1,  1376,    -1,  1378,   113,
     114,   125,   116,   608,   151,  1335,    -1,   121,   155,   123,
      -1,   135,    -1,   160,  1335,    -1,    -1,  1338,    -1,   158,
     159,   160,   161,   162,  1345,   164,   165,   166,    -1,    11,
      -1,    -1,    -1,   147,  1355,  1356,  1357,  1335,    64,    -1,
      -1,   646,    -1,    -1,  1424,    10,    11,    12,    -1,    -1,
      76,    77,    -1,  1360,    -1,  1362,   180,  1364,    -1,   183,
    1367,  1368,  1369,    -1,    -1,    -1,   671,   672,   673,   674,
      -1,   676,    54,   391,    56,    57,    58,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1092,    -1,    -1,   113,   114,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,   123,  1428,    64,
      -1,    -1,    84,    -1,   228,   229,    -1,  1428,    -1,  1430,
      -1,    76,    77,    -1,    -1,    -1,  1437,    -1,   100,  1440,
    1441,  1442,  1443,  1444,    -1,    -1,    -1,    -1,    -1,   155,
    1428,    -1,    -1,    -1,   160,    -1,  1457,    -1,   120,   121,
     745,    17,    18,    19,    20,    21,    22,    23,   113,   114,
     274,   116,    -1,    -1,    -1,   137,   121,    33,   123,    -1,
     142,    -1,  1542,  1543,  1544,    -1,  1546,  1497,   292,    -1,
     294,    -1,    -1,    -1,    -1,    -1,  1497,    -1,  1499,    -1,
      -1,    -1,   147,    -1,    -1,    -1,    -1,   311,    -1,   313,
     314,   315,   316,   317,   318,    -1,    -1,    -1,    -1,  1497,
      -1,    -1,   520,    -1,   809,    -1,    -1,    -1,    -1,   527,
      -1,   335,  1533,    -1,   819,    -1,    -1,    -1,   823,    -1,
     344,    -1,    -1,   347,    -1,    -1,    -1,  1548,  1549,    -1,
      -1,   355,    -1,    -1,    -1,   840,   554,  1558,   556,    -1,
     558,    -1,    -1,    -1,    -1,    -1,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,    -1,   873,    -1,
     394,    -1,    -1,    -1,   398,    -1,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   411,   164,   165,
     166,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,  1321,  1322,  1323,  1324,  1325,    33,  1327,
      22,    23,    -1,   918,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,   448,    -1,    -1,    -1,   933,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     464,    -1,    33,    -1,    -1,    -1,    18,    19,    20,    21,
      22,    23,   476,    -1,    -1,    -1,    -1,   675,    -1,    -1,
      -1,    33,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     494,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   989,    -1,   991,  1405,  1406,  1407,
    1408,  1409,  1410,  1411,  1412,  1413,  1414,  1415,  1416,  1417,
    1418,  1419,  1420,  1421,  1422,  1423,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   539,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,  1043,   164,
     165,   166,    -1,    -1,    -1,   170,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,  1473,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   588,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,   165,   166,     3,     4,     5,     6,
      -1,     8,     9,    10,    11,    12,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,    -1,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   631,    -1,    -1,
      -1,  1529,    -1,    -1,   832,   833,   834,    -1,   836,    -1,
     838,   839,   840,    50,    51,   649,    -1,    54,    -1,    56,
      57,    58,    59,    60,    -1,    62,    63,    -1,    -1,    66,
      67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    75,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,   707,   111,    -1,   113,    -1,    -1,    -1,
      -1,   118,    -1,   120,   121,   122,    -1,    -1,   125,   126,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,   140,   738,   142,    -1,    -1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    10,    11,   155,    -1,
      -1,   158,   159,   160,    -1,    -1,   163,    -1,   165,   166,
      -1,  1246,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   776,    -1,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    50,    51,    -1,    -1,
      54,    33,    56,    57,    58,    59,    -1,    -1,    62,    63,
      -1,    -1,    66,    67,    -1,    -1,    70,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,  1300,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,    -1,   111,    -1,   113,
      -1,    -1,    -1,    -1,   118,    -1,   120,   121,   122,    -1,
    1345,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,    -1,
      -1,    -1,     3,     4,     5,     6,   890,     8,     9,    10,
      11,   155,    -1,  1091,   158,   159,   160,    -1,    -1,   163,
      -1,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,    -1,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,    -1,    -1,    -1,   170,    50,
      -1,    -1,    -1,    54,    -1,    56,    57,    58,    -1,    -1,
    1425,    62,    -1,    64,    65,    66,    67,    -1,    -1,    33,
      -1,    -1,    -1,    -1,    75,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,
     111,    -1,   113,    -1,    -1,    -1,    -1,   118,    -1,   120,
     121,   122,  1006,    -1,   125,    10,    11,    -1,    -1,   130,
      -1,    -1,   133,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,    -1,    -1,    -1,    54,   147,    56,    57,    58,
      -1,    -1,    -1,  1037,   155,    -1,    -1,   158,   159,   160,
      -1,    -1,   163,    17,   165,   166,    51,    -1,   169,    54,
      -1,    56,    57,    58,    59,    84,    -1,    -1,    63,    33,
      -1,    66,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,
      -1,   100,    77,    47,   158,   159,   160,   161,   162,    84,
     164,   165,   166,    -1,    -1,    -1,    60,    61,    -1,    -1,
      -1,   120,   121,    -1,    54,   100,    56,    57,    58,    -1,
      -1,    -1,    76,    -1,    -1,  1109,    66,   112,   137,    -1,
      -1,    -1,    -1,   142,    -1,   120,   121,    -1,    -1,    -1,
      -1,   126,    -1,    -1,    84,    -1,    -1,    -1,  1326,   134,
     135,   136,   137,   107,    -1,   140,   110,   142,    -1,   113,
     100,    -1,   147,    -1,    -1,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,   129,    -1,    -1,   163,    -1,
     120,   121,    33,    -1,    -1,    -1,    -1,   141,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,   155,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1390,  1391,  1392,  1393,    -1,  1395,  1396,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      -1,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    -1,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,  1281,    82,    83,
      84,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,   165,   166,   100,    -1,    -1,   170,
      -1,    -1,    -1,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
      -1,    -1,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    -1,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,  1469,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,    -1,    -1,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,    -1,   169,   170,     3,     4,     5,     6,    -1,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    33,    -1,    -1,    54,    -1,    56,    57,
      58,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,    -1,   111,    -1,   113,    -1,    -1,    -1,    -1,
     118,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,
       3,     4,     5,     6,   142,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,
     158,   159,   160,    -1,    -1,   163,    -1,   165,   166,   167,
     150,   169,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,   165,   166,    50,    51,    -1,
      -1,    54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,   111,    -1,
     113,    -1,    -1,    -1,    -1,   118,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
     133,    -1,    -1,    -1,   137,     3,     4,     5,     6,   142,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   155,    -1,    -1,   158,   159,   160,    -1,    -1,
     163,    -1,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,    50,    51,    -1,    -1,    54,    33,    56,    57,
      58,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,    -1,   111,    -1,   113,    -1,    -1,    -1,    -1,
     118,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,
       3,     4,     5,     6,   142,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,
     158,   159,   160,    -1,    -1,   163,    -1,   165,   166,    -1,
      -1,   169,    -1,   149,    -1,    -1,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    50,   164,   165,
     166,    54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,   111,    -1,
     113,    -1,    -1,    -1,    -1,   118,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
     133,    -1,    -1,    -1,   137,     3,     4,     5,     6,   142,
       8,     9,    10,    11,   147,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   155,    -1,    -1,   158,   159,   160,    -1,    -1,
     163,    -1,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,    50,    -1,    -1,    -1,    54,    33,    56,    57,
      58,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,    -1,   111,    -1,   113,    -1,    -1,    -1,    -1,
     118,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,
       3,     4,     5,     6,   142,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,
     158,   159,   160,    -1,    -1,   163,    -1,   165,   166,   167,
      -1,   169,   148,    -1,    -1,    -1,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    50,   164,   165,
     166,    54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,   111,    -1,
     113,    -1,    -1,    -1,    -1,   118,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
     133,    -1,    -1,    -1,   137,     3,     4,     5,     6,   142,
       8,     9,    10,    11,   147,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   155,    -1,    -1,   158,   159,   160,    -1,    -1,
     163,    -1,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,    50,    -1,    -1,    -1,    54,    33,    56,    57,
      58,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   109,    -1,   111,    -1,   113,    -1,    -1,    -1,    -1,
     118,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,
       3,     4,     5,     6,   142,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,
     158,   159,   160,    -1,    -1,   163,    -1,   165,   166,   167,
      -1,   169,    -1,    -1,   150,    -1,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    50,   164,   165,
     166,    54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,   111,    -1,
     113,    -1,    -1,    -1,    -1,   118,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
     133,    -1,    -1,    -1,   137,     3,     4,     5,     6,   142,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    -1,   155,    -1,    -1,   158,   159,   160,    -1,    -1,
     163,    -1,   165,   166,    -1,    -1,   169,    16,    17,    18,
      19,    20,    21,    22,    23,    -1,    -1,    -1,    -1,    47,
      -1,    -1,    50,    51,    33,    -1,    54,    -1,    56,    57,
      58,    59,    60,    -1,    62,    63,    -1,    -1,    66,    67,
      -1,    -1,    70,    -1,    -1,    -1,    -1,    75,    76,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      -1,   109,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,    -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,
      -1,    -1,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,    -1,     3,     4,     5,     6,
      -1,     8,     9,    10,    11,    12,    -1,   155,    15,    -1,
     158,   159,    -1,    -1,    -1,   163,    -1,   165,    -1,   148,
      -1,   169,    -1,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
      47,    -1,    -1,    50,    51,    -1,    -1,    54,    -1,    56,
      57,    58,    59,    60,    -1,    62,    63,    -1,    -1,    66,
      67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    75,    76,
      77,    -1,    -1,    17,    -1,    -1,    -1,    84,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,    47,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,    -1,   120,   121,   122,    60,    61,   125,   126,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    76,   140,    -1,   142,     3,     4,     5,     6,
      -1,     8,     9,    10,    -1,    -1,    -1,    -1,   155,    -1,
      -1,   158,   159,    -1,    -1,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   107,    -1,    -1,   110,    -1,    -1,   113,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    -1,   129,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    -1,   141,    -1,    -1,
      67,    17,    18,    19,    20,    21,    22,    23,    75,    76,
      -1,   155,    -1,    -1,    81,    -1,    -1,    33,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    16,    17,    18,    19,    20,    21,    22,
      23,    -1,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
      33,   118,    -1,    -1,    -1,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,
      -1,   158,   159,   160,     6,    -1,   163,    -1,   165,   166,
      -1,    -1,   169,    -1,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    -1,    -1,   153,   154,   155,
      -1,    -1,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    -1,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
      -1,   164,   165,   166,   167,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    58,    59,    -1,    -1,    -1,    63,
      -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,   148,    -1,    -1,   151,
      84,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,    -1,   165,   166,    -1,   100,   169,    10,    11,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,    51,
      -1,    -1,    54,    -1,    56,    57,    58,    59,    -1,    -1,
      -1,    63,    -1,    -1,    66,    -1,    -1,    -1,    70,   163,
      -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    16,    17,    18,    19,    20,    21,    22,
      23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      33,    -1,    -1,    -1,    -1,    10,    11,    12,    -1,    -1,
     112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    64,
      -1,   163,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    16,    17,
      18,    19,    20,    21,    22,    23,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,    33,   121,    -1,   123,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
      -1,   164,   165,   166,   167,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    16,    17,    18,    19,    20,    21,    22,
      23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      33,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,    -1,   164,
     165,   166,   167,    -1,    -1,    -1,    -1,    -1,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,    -1,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,   167,    -1,    -1,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,   165,   166,   167,
      16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,   165,   166,   167,    -1,    -1,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
      -1,   164,   165,   166,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      18,    19,    20,    21,    22,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   150,    33,   152,   153,   154,   155,
      -1,    -1,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,    47,    -1,    49,    -1,    -1,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    18,    19,    20,    21,
      22,    23,    -1,    69,    -1,    71,    72,    73,    74,    -1,
      -1,    33,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,
     152,   153,   154,   155,    -1,    -1,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,   101,   102,   103,   104,   105,
     106,   107,   108,    -1,    -1,    -1,    -1,    -1,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,    -1,   123,   124,    11,
      12,   127,   128,    15,    -1,    17,   132,    -1,    -1,    -1,
      -1,    -1,   138,   139,    -1,   141,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   149,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,    47,   164,   165,   166,    51,
      -1,    -1,    54,    -1,    56,    57,    58,    59,    60,    -1,
      -1,    63,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,
      -1,    -1,    -1,    -1,    -1,    77,    18,    19,    20,    21,
      22,    23,    84,   155,   156,   157,   158,   159,   160,   161,
     162,    33,   164,   165,   166,    10,    11,    12,   100,    18,
      19,    20,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,   117,    -1,    -1,   120,   121,
      -1,    -1,    -1,    -1,   126,    -1,    18,    19,    20,    21,
      22,    23,   134,   135,   136,   137,    -1,    -1,   140,    -1,
     142,    33,    18,    19,    20,    21,    22,    23,    -1,    64,
      -1,    -1,    -1,   155,    -1,    -1,    -1,    33,   160,    -1,
      -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      10,    11,    12,   108,    -1,    -1,    -1,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,
      -1,   153,   154,   155,    -1,    -1,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,    -1,    -1,    47,    -1,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,   157,   158,
     159,   160,   161,   162,    64,   164,   165,   166,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,     6,
      -1,    -1,   154,   155,    -1,    -1,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,    -1,     6,    -1,    -1,   155,
      -1,    -1,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
      47,   121,    49,   123,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    61,    -1,    -1,    47,    54,    49,
      56,    57,    58,    53,    71,    72,    73,   147,    -1,    -1,
      60,    61,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    84,    -1,
      -1,    -1,    -1,    83,    10,    11,    12,    -1,    -1,    -1,
     107,    -1,    -1,    -1,   100,    -1,    10,    11,    12,    -1,
     117,    -1,    -1,    -1,    -1,    -1,   123,   107,    -1,    -1,
     127,   128,    -1,    -1,   120,   121,    -1,   117,    -1,    -1,
      -1,    -1,   139,   123,   141,    10,    11,    12,   128,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,    51,    64,   139,
      54,   141,    56,    57,    58,    59,    60,    -1,    -1,    63,
      76,    77,    66,    -1,    -1,    -1,    70,    -1,    -1,   165,
      -1,    -1,    -1,    77,    -1,    -1,    51,    -1,    -1,    54,
      84,    56,    57,    58,    59,    60,    -1,    -1,    63,    -1,
      -1,    66,    -1,    -1,    -1,    70,   100,   113,   114,   115,
     116,    -1,    77,    -1,    -1,   121,    -1,   123,    -1,    84,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   134,    -1,
      -1,    -1,   126,   139,    -1,   100,    -1,    10,    11,    12,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
      -1,   126,    -1,    -1,    -1,    -1,    10,    11,    12,   134,
     135,   136,   137,    -1,    -1,   140,    -1,   142,    51,    -1,
      -1,    54,    -1,    56,    57,    58,    59,    60,    -1,    -1,
      63,    -1,    -1,    66,    -1,    -1,    -1,    70,    10,    11,
      12,    -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,
      54,    84,    56,    57,    58,    59,    60,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    -1,    54,    -1,    56,    57,    58,   120,   121,    -1,
      -1,    -1,    -1,   126,    66,    -1,   100,    -1,    -1,    -1,
      -1,   134,   135,   136,   137,    77,    -1,   140,    -1,   142,
      -1,    -1,    84,    -1,    11,    12,   120,   121,    15,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     134,    -1,    -1,   137,    -1,    -1,   140,    -1,   142,    -1,
      -1,    -1,    -1,    11,    12,    -1,    -1,    15,   120,   121,
      47,    -1,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    58,    59,    60,    -1,   137,    63,    -1,   140,    66,
     142,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    47,
      77,    -1,    -1,    51,    -1,    -1,    54,    84,    56,    57,
      58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    -1,
      -1,    -1,    70,   100,    -1,    -1,    -1,    -1,    -1,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
     117,    -1,    -1,   120,   121,    10,    11,    12,    -1,   126,
      -1,    -1,   100,    -1,    -1,    11,    12,   134,   135,   136,
     137,    -1,    -1,   140,    -1,   142,    -1,    -1,    -1,   117,
      -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,    54,
      -1,    56,    57,    58,    11,    12,   134,   135,   136,   137,
      -1,    47,   140,    -1,   142,    51,    -1,    -1,    54,    64,
      56,    57,    58,    59,    60,    -1,    -1,    63,    -1,    84,
      66,    76,    77,    -1,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    51,   100,    -1,    54,    84,    56,
      57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      -1,    -1,    -1,    70,   100,   120,   121,    -1,   113,   114,
      77,   116,    -1,    -1,    -1,    -1,   121,    84,   123,    -1,
      -1,   117,   137,    -1,   120,   121,    -1,   142,    -1,   134,
     126,    11,    12,   100,   139,    -1,    -1,    -1,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,    -1,    -1,    -1,
     165,    -1,    -1,   120,   121,    11,    12,    -1,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,   136,
     137,    51,    -1,   140,    54,   142,    56,    57,    58,    59,
      -1,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,
      70,    -1,    -1,    -1,    -1,    51,    -1,    77,    54,    -1,
      56,    57,    58,    59,    84,    -1,    -1,    63,    -1,    -1,
      66,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
     100,    77,    -1,    -1,    -1,    -1,    -1,    -1,    84,    10,
      11,    12,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,   121,    11,    -1,   100,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,   135,   136,   137,    -1,    -1,
     140,    -1,   142,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,    11,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
     136,   137,    51,    64,   140,    54,   142,    56,    57,    58,
      59,    60,    -1,    -1,    63,    76,    77,    66,    -1,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    51,    -1,    -1,    54,    84,    56,    57,    58,    59,
      60,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,
      70,   100,   113,   114,    -1,   116,    -1,    77,    -1,    -1,
     121,    -1,   123,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,   134,    -1,    -1,    -1,   126,    11,    -1,
     100,    -1,    -1,    -1,    -1,   134,   135,   136,   137,    -1,
      -1,   140,    -1,   142,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,    11,    -1,    -1,    -1,   126,    -1,    -1,    -1,
      10,    11,    12,    -1,   134,   135,   136,   137,    51,    -1,
     140,    54,   142,    56,    57,    58,    59,    -1,    -1,    -1,
      63,    -1,    54,    66,    56,    57,    58,    70,    -1,    -1,
      -1,    -1,    51,    -1,    77,    54,    -1,    56,    57,    58,
      59,    84,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,
      -1,    70,    84,    -1,    64,    -1,    -1,   100,    77,    -1,
      10,    11,    12,    -1,    -1,    84,    76,    77,   100,    -1,
      -1,    -1,    -1,    -1,    10,    11,    12,   120,   121,    -1,
      -1,   100,    -1,   126,    -1,    -1,    -1,    -1,   120,   121,
      -1,   134,   135,   136,   137,    -1,    -1,   140,    -1,   142,
      -1,   120,   121,   113,   114,   137,   116,   126,    -1,    -1,
     142,   121,    -1,   123,    64,   134,   135,   136,   137,    -1,
      -1,   140,    -1,   142,   134,    -1,    76,    77,    64,   139,
      -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    56,    57,    58,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,   113,   114,    -1,   116,    -1,    -1,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,   113,   114,    84,
     116,    -1,    -1,    -1,   134,   121,    47,   123,    49,   139,
      -1,    52,    53,    -1,    -1,   100,    -1,    -1,    -1,    60,
      61,    -1,   138,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      71,    72,    73,    74,    -1,   120,   121,    78,    -1,    -1,
      -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   137,    -1,    -1,    -1,    -1,   142,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,    -1,    -1,
      -1,    -1,    -1,   114,   115,   116,   117,    -1,    -1,    47,
     165,    49,   123,   124,    52,    53,   127,   128,    -1,    -1,
      -1,   132,    60,    61,    -1,    -1,    -1,   138,   139,    -1,
     141,    69,    -1,    71,    72,    73,    74,    -1,   149,    -1,
      78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,    -1,    -1,
      -1,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,
      -1,    -1,    47,    -1,    49,   123,   124,    52,    53,   127,
     128,    -1,    -1,    -1,   132,    60,    61,    -1,    -1,    -1,
     138,   139,    -1,   141,    69,    -1,    71,    72,    73,    74,
      -1,   149,    -1,    78,    -1,    -1,    -1,    -1,    83,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     168,    -1,    -1,    -1,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,    -1,    -1,    -1,    -1,    -1,   114,
     115,   116,   117,    -1,    -1,    47,    -1,    49,   123,   124,
      52,    53,   127,   128,    -1,    -1,    -1,   132,    60,    61,
      -1,    -1,    -1,   138,   139,    -1,   141,    69,    -1,    71,
      72,    73,    74,    -1,   149,    -1,    78,    -1,    -1,    -1,
      -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,    -1,    -1,    -1,
      -1,    -1,   114,   115,   116,   117,    -1,    -1,    47,    -1,
      49,   123,   124,    52,    53,   127,   128,    -1,    -1,    -1,
     132,    60,    61,    -1,    -1,    -1,   138,   139,    -1,   141,
      69,    -1,    71,    72,    73,    74,    -1,   149,    -1,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   168,    -1,    -1,    -1,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
      -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,    -1,
      -1,    47,    -1,    49,   123,   124,    52,    53,   127,   128,
      -1,    -1,    -1,   132,    60,    61,    -1,    -1,    -1,   138,
     139,    -1,   141,    69,    -1,    71,    72,    73,    74,    -1,
     149,    -1,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,
      -1,    -1,    -1,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,    -1,    -1,    -1,    -1,    -1,   114,   115,
     116,   117,    -1,    -1,    47,    -1,    49,   123,   124,    52,
      53,   127,   128,    -1,    -1,    -1,   132,    60,    61,    -1,
      -1,    -1,   138,   139,    -1,   141,    69,    -1,    71,    72,
      73,    74,    -1,   149,    -1,    78,    -1,    -1,    -1,    -1,
      83,    -1,    -1,    10,    11,    12,    -1,    -1,    15,    10,
      11,    12,   168,    -1,    -1,    -1,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,    -1,    -1,    -1,    -1,
      -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,   127,   128,    47,    -1,    49,   132,
      -1,    -1,    -1,    -1,    -1,   138,   139,    64,   141,    -1,
      -1,    -1,    -1,    64,    -1,    47,   149,    49,    -1,    76,
      77,    53,    -1,    -1,    -1,    76,    77,    -1,    60,    61,
      -1,    -1,    -1,    -1,    -1,   168,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,
      -1,    83,    -1,    -1,    -1,    -1,   113,   114,    -1,   116,
      -1,    -1,   113,   114,   121,   116,   123,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,
      -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   138,   139,    47,   141,
      49,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    61,    -1,   156,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
      -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,    -1,
      -1,    47,    -1,    49,   123,   124,    -1,    53,   127,   128,
      -1,    -1,    -1,   132,    60,    61,    -1,    -1,    -1,   138,
     139,    -1,   141,    -1,    -1,    71,    72,    73,    47,    -1,
      49,    -1,    78,    -1,    53,    -1,    -1,    83,    -1,    -1,
      -1,    60,    61,    47,    -1,    49,    -1,    -1,    -1,    53,
      -1,    -1,    71,    72,    73,    -1,    60,    61,    -1,    -1,
      -1,   107,    -1,    -1,    83,    -1,    -1,    71,    72,    73,
      -1,   117,    -1,    -1,    -1,    -1,    -1,   123,    -1,    83,
      -1,   127,   128,    -1,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,   138,   139,    -1,   141,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   107,   123,    -1,    -1,    -1,    -1,   128,
      -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,   123,
     139,    -1,   141,    -1,   128,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   139,    -1,   141
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   144,   145,   146,   172,   173,   280,     3,     4,     5,
       6,     8,     9,    10,    11,    50,    54,    56,    57,    58,
      62,    66,    67,    75,    76,    77,    81,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   109,   111,   113,   118,   120,   121,
     122,   125,   130,   133,   137,   142,   155,   158,   159,   160,
     163,   165,   166,   169,   270,   271,   279,    11,    12,    51,
      54,    56,    57,    58,    59,    60,    63,    66,    70,    77,
      84,   100,   120,   121,   126,   134,   135,   136,   137,   140,
     142,   232,   233,   237,   239,   241,   247,   248,   252,   253,
     258,   259,   260,   261,     0,    47,    49,    52,    53,    60,
      61,    69,    71,    72,    73,    74,    78,    83,   101,   102,
     103,   104,   105,   106,   107,   108,   114,   115,   116,   117,
     123,   124,   127,   128,   132,   138,   139,   141,   149,   176,
     178,   179,   181,   184,   203,   254,   257,   280,   147,   165,
     165,   165,   165,   165,   165,   156,   165,   156,   165,   165,
     165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
     165,   165,   165,   165,   165,   165,   165,    11,    51,    63,
     134,   135,   235,   252,   253,   258,   156,   165,   165,    15,
     165,   156,   165,   165,   165,   270,   270,   270,   270,   270,
      11,    54,    56,    57,    58,    66,    77,    84,   100,   120,
     121,   137,   142,   237,   268,   270,    10,    11,    12,    64,
      76,    77,   113,   114,   116,   121,   123,   151,   155,   160,
     274,   275,   277,   280,   270,    16,    17,    18,    19,    20,
      21,    22,    23,    33,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   164,   165,   166,     6,     8,
     232,   233,   165,    59,   126,    66,   100,   259,   259,   259,
     277,   165,   259,    13,    15,    17,    60,   141,   155,   160,
     165,   230,   231,   280,   231,   147,    10,    11,    12,   113,
     150,   278,   238,   280,   138,   182,   183,   277,   165,    72,
      83,   181,   181,   181,   181,     6,   181,   203,   181,   150,
     180,   108,   181,   165,   165,   165,   165,   165,   165,   181,
     147,   277,   150,   150,   150,   181,   181,   165,   179,   181,
     184,   204,   181,   181,   188,   108,   277,   181,   181,    10,
      11,    51,    63,   112,   134,   135,   147,   163,   191,   194,
     234,   236,   239,   241,   247,   252,   253,   258,   267,   268,
     280,   267,   237,   267,   267,   267,   267,   237,   267,   237,
     267,   237,   267,   237,   237,   237,   237,   237,   237,   237,
     237,   237,   237,   237,   237,   237,   237,   237,   267,   165,
     277,   165,   165,   277,   238,   237,   267,   267,   165,    10,
     237,   237,   237,   270,   267,   267,   167,   148,   167,   277,
     277,   148,   170,   151,   220,   280,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   167,   268,   270,
     231,   231,    51,   270,   237,   160,   277,    13,    15,    17,
      60,   141,   155,   160,   230,   280,   230,   231,   230,   231,
     230,   230,    15,    17,    47,    60,   117,   155,   160,   215,
     216,   225,   232,   233,   280,   166,   250,   251,   280,    11,
     249,   259,   150,    10,    11,    12,    47,    49,   113,   147,
     277,   278,   277,    48,   148,   165,    11,   234,   270,   181,
     178,   147,   277,   277,   277,   277,   277,   277,   277,   173,
     147,   270,   156,    10,    11,   194,   234,   236,   277,   149,
     151,   165,   165,   165,    60,   232,   277,   165,   177,   277,
     186,   147,   149,   151,   222,   149,   185,   277,   278,   238,
     168,   167,   167,   167,   167,   167,   167,   157,   167,   157,
     167,   167,   167,   167,   148,   167,   148,   167,   148,   167,
     167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
     270,   237,   267,   277,   157,   167,   167,   277,   167,   167,
     157,   167,   167,   167,   167,   270,   270,    15,   155,   275,
     165,   200,   280,   270,   150,   167,   170,   167,   167,   167,
     230,   160,   277,   230,   230,   230,   230,   230,   166,   230,
     182,   117,   232,   233,   225,   230,   230,   167,    15,   148,
      13,    17,    60,   141,   155,   160,   165,   228,   278,   280,
      13,    15,    17,    60,   141,   155,   160,   165,   229,   266,
     270,   280,   277,   168,   249,   182,   165,   240,   242,   150,
     181,   182,     3,     4,     5,     9,    10,    15,    50,    62,
      67,    75,    76,   109,   111,   113,   118,   122,   125,   130,
     133,   155,   158,   159,   163,   165,   169,   217,   218,   225,
     226,   272,   273,   279,   280,   167,   167,   173,   147,   148,
     148,   148,   148,   148,   148,   168,   255,   148,   167,    10,
      11,    12,    59,    60,   134,   205,   206,   207,   208,   209,
     258,   280,   165,   222,   189,   149,   237,   192,    13,   160,
     193,    51,   270,   232,    13,    17,    60,   141,   155,   160,
     227,   278,   280,   237,   173,   165,   147,   149,   150,   151,
     221,   262,   263,    64,    65,   147,   270,    13,    17,    60,
     112,   141,   155,   160,   165,   187,   210,   212,   278,   150,
     277,   165,   165,   237,   237,   237,   167,   167,   167,   165,
     167,   165,   220,   215,    17,    33,    47,    60,    61,    76,
     107,   110,   113,   129,   141,   155,   213,   280,   270,   230,
     266,   167,    48,   232,   233,   228,   229,   167,   167,   200,
      15,   225,   160,   228,   228,   228,   228,   228,   228,   166,
     220,   160,   277,   229,   229,   229,   229,   229,   229,   166,
     220,   170,   148,   151,    48,   234,   270,   173,    76,   243,
     280,   183,   165,   156,   156,   235,   156,    15,   165,   156,
     165,   270,   270,   270,   270,   237,   268,   270,   167,    15,
     148,    16,    17,    18,    19,    20,    21,    22,    23,    33,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   164,   165,   166,   181,   181,   168,   256,    10,    10,
      10,    10,    10,    10,   173,   279,   149,   209,   157,   148,
      15,   277,    13,    17,    60,   141,   155,   160,   165,   228,
     229,   190,   212,   149,   215,   160,   210,   215,   167,   167,
     227,   160,   227,   227,   227,   227,   227,   165,   166,   167,
     168,   195,   262,   174,   175,   277,    64,    65,   168,   264,
     280,   149,   149,   147,   223,   224,   270,   280,   149,   160,
     210,   210,     6,    16,    17,    18,    19,    20,    21,    22,
      23,    33,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    65,   109,   148,   151,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   165,
     166,   169,   201,   210,   210,   210,   210,   150,   165,   166,
     213,   151,   220,   222,   249,   268,   268,   167,   167,   167,
     268,   268,   167,    60,   235,   182,   165,   147,   170,   165,
     225,   228,   229,   220,   220,   165,   165,   213,   228,   167,
     266,   229,   167,   266,   270,   167,   167,   168,   150,   244,
     245,   280,   237,   237,   237,   165,   237,   165,    10,   237,
     237,   237,   270,   167,   167,    15,   226,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   167,   268,
     270,   173,   148,   148,   167,   148,   214,   280,   148,   148,
     148,   168,   167,   228,   229,   179,   184,   202,   203,   208,
     277,   151,   160,   151,   219,   280,   220,   222,   167,   210,
     167,   167,   165,   227,   198,   266,   215,   168,   147,   148,
     147,   165,   149,   149,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      70,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      82,    83,    84,   100,   107,   108,   109,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   169,   170,   265,   223,   168,   148,   210,    10,   167,
     170,   167,     4,   211,   266,   270,   148,   167,   167,   167,
     167,   200,   235,   231,    48,   167,   277,   262,   215,   220,
     220,   215,   215,   165,   170,   165,   170,   148,   114,   115,
     116,   134,   139,   246,   276,   277,   147,   148,   167,   157,
     157,   267,   157,   277,   167,   167,   157,   167,   167,   270,
     150,   167,   170,   168,    10,    10,   149,    10,   167,    10,
      10,    10,   149,   219,   237,    50,    62,    67,   118,   122,
     125,   155,   158,   159,   160,   163,   165,   169,   269,   271,
     148,   200,   167,   165,   200,   199,   215,   170,   167,   262,
     175,   267,   267,   264,   168,   147,   270,   217,   170,   187,
     213,   231,    15,   167,   168,   167,   167,   167,   215,   215,
     139,   276,   139,   276,   139,   276,   277,   114,   115,   116,
      15,   173,   246,   165,   165,   167,   165,   167,   165,   270,
     167,   148,   167,   148,   149,   148,   167,   167,   148,   167,
     165,   156,   156,   156,    15,   165,   156,   269,   269,   269,
     269,   269,   237,   268,   269,    16,    17,    18,    19,    20,
      21,    22,    23,    33,   152,   153,   154,   155,   158,   159,
     160,   161,   162,   164,   165,   166,   190,   165,   196,   215,
     167,   200,   168,   168,   167,   168,   223,   167,   147,   167,
     200,   200,   200,   167,   167,   276,   276,   276,   276,   276,
     276,   168,   268,   268,   268,   268,   149,    10,   149,    10,
      10,   149,   149,    10,   149,   237,   237,   237,   237,   165,
      10,   237,   237,   167,   167,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   167,   268,   270,   197,   215,   167,
     200,    15,   168,   200,   262,   213,   213,   213,   200,   200,
     167,   167,   167,   167,   148,   214,   167,   148,   148,   167,
     167,   157,   157,   157,   277,   167,   167,   157,   269,   150,
     167,   170,   215,   167,   200,   168,    10,   167,   149,    10,
      10,   149,   165,   165,   165,   167,   165,   269,   167,   200,
     149,   167,   148,   167,   268,   268,   268,   268,   200,   213,
     149,    10,   149,   167,   167,   167,   167,   213,   167,   149
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   171,   172,   172,   172,   173,   173,   173,   174,   174,
     175,   175,   175,   177,   176,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
     178,   178,   180,   179,   181,   181,   181,   181,   181,   181,
     181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
     181,   181,   182,   182,   183,   183,   183,   185,   184,   184,
     186,   184,   184,   184,   187,   187,   189,   188,   188,   190,
     190,   192,   191,   193,   191,   195,   194,   196,   194,   197,
     194,   198,   194,   199,   194,   194,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
     201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   201,   201,   201,   201,   202,
     202,   202,   203,   204,   203,   203,   203,   205,   205,   206,
     206,   207,   207,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   209,   209,   209,   209,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   211,   210,   212,
     212,   213,   213,   213,   214,   214,   215,   215,   215,   215,
     215,   216,   216,   217,   217,   217,   217,   217,   218,   218,
     219,   219,   220,   220,   221,   221,   221,   221,   221,   222,
     222,   222,   222,   222,   222,   223,   223,   223,   224,   224,
     224,   224,   225,   225,   225,   225,   225,   225,   225,   225,
     226,   226,   227,   227,   227,   227,   227,   227,   227,   227,
     227,   228,   228,   228,   228,   228,   228,   228,   228,   228,
     228,   228,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   230,   230,   230,   230,   230,   230,   230,
     230,   230,   230,   231,   231,   231,   231,   231,   231,   231,
     231,   231,   231,   231,   231,   231,   231,   232,   232,   232,
     232,   232,   232,   232,   232,   232,   232,   232,   232,   233,
     234,   234,   234,   234,   234,   234,   234,   234,   234,   234,
     234,   234,   234,   235,   235,   235,   235,   235,   235,   235,
     235,   236,   236,   237,   237,   237,   237,   238,   238,   238,
     238,   240,   239,   242,   241,   243,   243,   244,   244,   245,
     245,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   247,   248,   248,   248,   248,   249,   249,   250,   250,
     250,   251,   251,   251,   252,   252,   252,   253,   253,   253,
     255,   254,   256,   254,   254,   254,   257,   257,   257,   258,
     258,   258,   259,   259,   259,   259,   259,   259,   259,   259,
     259,   259,   259,   259,   259,   259,   260,   260,   260,   261,
     263,   262,   264,   264,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   266,   266,   267,   267,   268,   268,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   271,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   274,   274,   274,   274,   274,   275,   275,   275,
     275,   276,   276,   276,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   278,   278,   278,   278,   279,
     279,   279,   279,   280
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     5,     4,     0,     5,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     2,     2,     2,     8,    11,     9,
      11,    13,    15,     7,     9,    12,     9,     9,    13,     9,
       7,     5,     0,     3,     1,     2,     2,     3,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     4,
       5,     5,     1,     3,     1,     4,     4,     0,     4,     3,
       0,     4,     3,     1,     2,     4,     0,     4,     3,     2,
       4,     0,     6,     0,     6,     0,     7,     0,    11,     0,
      12,     0,     8,     0,     9,     1,     1,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     4,     5,     6,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     2,     0,     6,     2,     2,     1,     1,     1,
       3,     1,     1,     1,     2,     4,     2,     3,     3,     4,
       2,     3,     1,     1,     1,     1,     1,     2,     3,     2,
       2,     2,     2,     2,     3,     4,     3,     0,     6,     2,
       3,     1,     3,     4,     1,     2,     1,     1,     1,     3,
       2,     1,     3,     1,     1,     1,     3,     2,     1,     3,
       1,     2,     1,     2,     1,     3,     5,     3,     3,     1,
       3,     3,     3,     3,     4,     1,     1,     2,     1,     3,
       3,     5,     3,     4,     5,     3,     4,     5,     2,     4,
       1,     1,     1,     1,     2,     2,     2,     2,     2,     3,
       4,     1,     1,     2,     2,     2,     2,     2,     3,     4,
       7,     3,     1,     2,     2,     2,     2,     2,     2,     3,
       4,     7,     3,     1,     1,     2,     2,     2,     2,     2,
       2,     3,     4,     1,     1,     2,     2,     2,     2,     2,
       2,     3,     4,     5,     9,     9,     9,     1,     1,     2,
       1,     1,     1,     3,     4,     4,     4,     4,     1,     1,
       1,     1,     2,     1,     1,     1,     3,     4,     2,     4,
       4,     4,     1,     1,     1,     2,     3,     2,     4,     4,
       1,     1,     1,     2,     3,     2,     3,     1,     4,     5,
       5,     0,     6,     0,     9,     1,     1,     1,     1,     2,
       3,     1,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     4,     3,     1,     4,     2,     1,     1,     1,     3,
       5,     1,     2,     4,     1,     2,     2,     1,     1,     1,
       0,     6,     0,     7,     4,     5,     3,     5,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     2,     2,     1,     1,     2,     1,
       0,     2,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     3,     1,
       4,     7,     7,     7,     7,     4,     4,     5,     4,     2,
       2,     2,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     4,     4,     3,     3,     3,     3,     1,     4,
       7,     7,     7,     7,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       5,     4,     2,     5,     4,     4,     2,     2,     2,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     4,     4,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     8,    11,
       4,     4,     6,     4,     4,     6,     6,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     1,     4,     7,
       7,     7,     7,     4,     4,     5,     4,     2,     5,     4,
       4,     2,     2,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     5,     4,     4,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     4,     2,     3,     1,
       2,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     0
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
#line 454 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_expr = (yyvsp[0].u.expr);
}
#line 4030 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 4:
#line 458 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_type = (yyvsp[0].u.type);
}
#line 4038 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 10:
#line 476 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  delete (yyvsp[-1].u.expr);
}
#line 4046 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 11:
#line 480 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  delete (yyvsp[-2].u.expr);
}
#line 4054 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 12:
#line 484 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  delete (yyvsp[-1].u.expr);
}
#line 4062 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 13:
#line 496 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
#line 4071 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 14:
#line 501 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  pop_storage_class();
}
#line 4079 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 21:
#line 514 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
#line 4096 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 22:
#line 527 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
#line 4109 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 23:
#line 536 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_scope->set_current_vis(V_published);
}
#line 4117 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 24:
#line 540 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
#line 4129 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 25:
#line 548 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_scope->set_current_vis(V_protected);
}
#line 4137 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 26:
#line 552 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_scope->set_current_vis(V_private);
}
#line 4145 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 27:
#line 556 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *getter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-5].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-7]).file);
    make_property->_get_function = getter->as_function_group();

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_set_function = setter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-7]));
  }
}
#line 4170 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 28:
#line 577 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4201 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 29:
#line 604 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4226 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 30:
#line 625 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *length_getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4259 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 31:
#line 654 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *length_getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4299 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 32:
#line 690 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *length_getter = (yyvsp[-10].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-12].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-14]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    CPPDeclaration *inserter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (inserter == nullptr || inserter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid append method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_insert_function = inserter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-14]));
  }
}
#line 4346 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 33:
#line 733 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid item getter method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-4].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-6]).file);
    make_property->_get_function = getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-6]));
  }
}
#line 4362 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 34:
#line 745 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4387 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 35:
#line 766 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *getter = (yyvsp[-5].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-9].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-11]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-7].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-7].u.identifier)->get_fully_scoped_name(), (yylsp[-7]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_del_function = deleter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-11]));
  }
}
#line 4427 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 36:
#line 802 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = nullptr;
    for (size_t i = 0; i < current_scope->_declarations.size(); ++i) {
      make_property = current_scope->_declarations[i]->as_make_property();
      if (make_property != nullptr) {
        if (make_property->get_fully_scoped_name() == (yyvsp[-6].u.identifier)->get_fully_scoped_name()) {
          break;
        } else {
          make_property = nullptr;
        }
      }
    }
    if (make_property != nullptr) {
      make_property->_get_key_function = getter->as_function_group();
      make_property->_length_function = length_getter->as_function_group();
    } else {
      yyerror("reference to non-existent MAKE_MAP_PROPERTY: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    }
  }
}
#line 4465 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 37:
#line 836 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4491 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 38:
#line 858 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *clearer = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (clearer == nullptr || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid clear method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_clear_function = clearer->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4531 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 39:
#line 894 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *element_getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == nullptr || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    element_getter = nullptr;
  }

  if (length_getter != nullptr && element_getter != nullptr) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4557 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 40:
#line 916 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPExpression::Result result = (yyvsp[-4].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-4]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[-2].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[-4]));
  }
}
#line 4572 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 41:
#line 927 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-2]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[-2]));
  }
}
#line 4586 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 42:
#line 940 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
#line 4596 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 43:
#line 946 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  delete current_scope;
  pop_scope();
}
#line 4605 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 44:
#line 955 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = 0;
}
#line 4613 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 45:
#line 959 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // This isn't really a storage class, but it helps with parsing.
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_const;
}
#line 4622 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 46:
#line 964 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
}
#line 4630 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 47:
#line 968 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[-1].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[-1].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[-1].str) + "\"", (yylsp[-1]));
  }
}
#line 4645 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 48:
#line 979 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_static;
}
#line 4653 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 49:
#line 983 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_inline;
}
#line 4661 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 50:
#line 987 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_virtual;
}
#line 4669 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 51:
#line 991 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
}
#line 4677 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 52:
#line 995 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_register;
}
#line 4685 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 53:
#line 999 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_volatile;
}
#line 4693 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 54:
#line 1003 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_mutable;
}
#line 4701 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 55:
#line 1007 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constexpr;
}
#line 4709 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 56:
#line 1011 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_blocking;
}
#line 4717 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 57:
#line 1015 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extension;
}
#line 4725 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 58:
#line 1019 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_thread_local;
}
#line 4733 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 59:
#line 1023 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // Ignore attribute specifiers for now.
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4742 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 60:
#line 1028 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4750 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 61:
#line 1032 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4758 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 67:
#line 1050 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // We don't need to push/pop type, because we can't nest
  // type_like_declaration.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4773 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 68:
#line 1061 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  pop_storage_class();
}
#line 4781 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 69:
#line 1066 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
#line 4794 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 70:
#line 1075 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if ((yyvsp[0].u.instance) != nullptr) {
    // Push the scope so that the initializers can make use of things defined
    // in the class body.
    push_scope((yyvsp[0].u.instance)->get_scope(current_scope, global_scope));
    (yyvsp[0].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-1].u.integer));
  }
}
#line 4807 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 71:
#line 1084 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if ((yyvsp[-2].u.instance) != nullptr) {
    pop_scope();
    current_scope->add_declaration((yyvsp[-2].u.instance), global_scope, current_lexer, (yylsp[-2]));
    (yyvsp[-2].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4819 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 72:
#line 1092 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if ((yyvsp[-1].u.instance) != nullptr) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4831 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 74:
#line 1108 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 4846 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 75:
#line 1119 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 4861 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 76:
#line 1134 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4876 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 77:
#line 1145 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  pop_storage_class();
}
#line 4884 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 78:
#line 1149 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if ((yyvsp[-1].u.instance) != nullptr) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != nullptr) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
#line 4900 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 79:
#line 1164 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
}
#line 4913 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 80:
#line 1173 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-3]));
}
#line 4926 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 81:
#line 1187 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 4943 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 82:
#line 1200 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPScope *scope = (yyvsp[-5].u.identifier)->get_scope(current_scope, global_scope);
  CPPType *type;
  std::string simple_name = (yyvsp[-5].u.identifier)->get_simple_name();
  if (!simple_name.empty() && simple_name[0] == '~') {
    // A destructor has no return type.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else if (scope != nullptr && simple_name == scope->get_simple_name()) {
    // Neither does a constructor.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[-5]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 4971 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 83:
#line 1224 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 4988 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 84:
#line 1237 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 5010 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 85:
#line 1260 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 5018 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 86:
#line 1264 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  pop_scope();
  if ((yyvsp[-5].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[-5].u.identifier)->get_simple_name(), (yylsp[-5]));
    delete (yyvsp[-5].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
  }
}
#line 5041 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 87:
#line 1290 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5049 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 88:
#line 1294 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-10].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-10]).file);
}
#line 5067 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 89:
#line 1308 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5075 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 90:
#line 1312 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-11].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-11].u.identifier)->get_fully_scoped_name(), (yylsp[-11]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-9].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-11]).file);
}
#line 5093 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 91:
#line 1328 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if ((yyvsp[-3].u.identifier) != nullptr) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5103 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 92:
#line 1334 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if ((yyvsp[-7].u.identifier) != nullptr) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier(name, (yylsp[-6]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5132 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 93:
#line 1359 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if ((yyvsp[-4].u.identifier) != nullptr) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5142 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 94:
#line 1365 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  if ((yyvsp[-8].u.identifier) != nullptr) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-5]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5162 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 95:
#line 1385 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *decl =
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != nullptr) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = nullptr;
  }
}
#line 5176 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 96:
#line 1398 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = 0;
}
#line 5184 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 97:
#line 1402 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_const_method;
}
#line 5192 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 98:
#line 1406 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_volatile_method;
}
#line 5200 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 99:
#line 1410 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_noexcept;
}
#line 5208 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 100:
#line 1423 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_final;
}
#line 5216 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 101:
#line 1427 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_override;
}
#line 5224 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 102:
#line 1431 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_lvalue_method;
}
#line 5232 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 103:
#line 1435 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_rvalue_method;
}
#line 5240 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 104:
#line 1439 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5249 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 105:
#line 1444 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // Used for lambdas in C++17, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5258 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 106:
#line 1449 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5266 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 107:
#line 1453 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
#line 5274 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 108:
#line 1457 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[-5].u.integer);
}
#line 5282 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 109:
#line 1461 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5290 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 110:
#line 1468 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "!";
}
#line 5298 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 111:
#line 1472 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "~";
}
#line 5306 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 112:
#line 1476 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "*";
}
#line 5314 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 113:
#line 1480 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "/";
}
#line 5322 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 114:
#line 1484 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "%";
}
#line 5330 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 115:
#line 1488 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "+";
}
#line 5338 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 116:
#line 1492 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "-";
}
#line 5346 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 117:
#line 1496 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "|";
}
#line 5354 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 118:
#line 1500 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "&";
}
#line 5362 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 119:
#line 1504 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "^";
}
#line 5370 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 120:
#line 1508 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "||";
}
#line 5378 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 121:
#line 1512 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "&&";
}
#line 5386 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 122:
#line 1516 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "==";
}
#line 5394 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 123:
#line 1520 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "!=";
}
#line 5402 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 124:
#line 1524 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "<=";
}
#line 5410 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 125:
#line 1528 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = ">=";
}
#line 5418 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 126:
#line 1532 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "<";
}
#line 5426 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 127:
#line 1536 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = ">";
}
#line 5434 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 128:
#line 1540 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "<<";
}
#line 5442 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 129:
#line 1544 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = ">>";
}
#line 5450 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 130:
#line 1548 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "=";
}
#line 5458 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 131:
#line 1552 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = ",";
}
#line 5466 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 132:
#line 1556 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "++";
}
#line 5474 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 133:
#line 1560 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "--";
}
#line 5482 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 134:
#line 1564 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "*=";
}
#line 5490 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 135:
#line 1568 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "/=";
}
#line 5498 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 136:
#line 1572 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "%=";
}
#line 5506 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 137:
#line 1576 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "+=";
}
#line 5514 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 138:
#line 1580 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "-=";
}
#line 5522 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 139:
#line 1584 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "|=";
}
#line 5530 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 140:
#line 1588 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "&=";
}
#line 5538 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 141:
#line 1592 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "^=";
}
#line 5546 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 142:
#line 1596 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "<<=";
}
#line 5554 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 143:
#line 1600 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = ">>=";
}
#line 5562 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 144:
#line 1604 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "->";
}
#line 5570 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 145:
#line 1608 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "[]";
}
#line 5578 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 146:
#line 1612 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "()";
}
#line 5586 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 147:
#line 1616 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "new";
}
#line 5594 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 148:
#line 1620 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.str) = "delete";
}
#line 5602 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 153:
#line 1634 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  push_scope(new CPPTemplateScope(current_scope));
}
#line 5610 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 154:
#line 1638 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  pop_scope();
}
#line 5618 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 159:
#line 1652 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5628 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 160:
#line 1658 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5638 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 163:
#line 1672 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter(nullptr));
}
#line 5646 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 164:
#line 1676 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 5654 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 165:
#line 1680 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 5662 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 166:
#line 1684 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter(nullptr);
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5672 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 167:
#line 1690 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[0].u.identifier));
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5682 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 168:
#line 1696 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5692 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 169:
#line 1702 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5703 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 170:
#line 1709 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5712 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 171:
#line 1714 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5722 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 172:
#line 1723 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5730 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 173:
#line 1727 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 5739 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 174:
#line 1732 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5751 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 175:
#line 1740 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5763 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 176:
#line 1752 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 5771 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 177:
#line 1756 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-1].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator "+(yyvsp[0].str), (yylsp[0]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[0].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5789 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 178:
#line 1770 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // A C++11 literal operator.
  if (!(yyvsp[-1].str).empty()) {
    yyerror("expected empty string", (yylsp[-1]));
  }
  CPPIdentifier *ident = (yyvsp[-2].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name(), (yylsp[0]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5808 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 179:
#line 1785 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5817 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 180:
#line 1790 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5826 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 181:
#line 1795 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 5835 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 182:
#line 1800 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 5844 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 183:
#line 1805 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 5853 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 184:
#line 1810 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 5862 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 185:
#line 1815 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 5871 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 186:
#line 1820 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 5880 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 187:
#line 1825 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // Create a scope for this function (in case it is a function)
  CPPScope *scope = new CPPScope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope),
                                 CPPNameComponent(""), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5897 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 188:
#line 1838 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  if ((yyvsp[-2].u.param_list)->is_parameter_expr() && (yyvsp[0].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-2].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  }
}
#line 5915 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 189:
#line 1856 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[0].u.type) != nullptr) {
    (yyvsp[-1].u.inst_ident)->add_trailing_return_type((yyvsp[0].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
}
#line 5929 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 190:
#line 1866 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // Bitfield definition.
  (yyvsp[-2].u.inst_ident)->_bit_width = (yyvsp[0].u.integer);
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
#line 5939 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 191:
#line 1876 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = nullptr;
}
#line 5947 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 192:
#line 1880 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5955 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 193:
#line 1884 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5964 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 194:
#line 1893 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = nullptr;
}
#line 5972 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 195:
#line 1897 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 5980 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 196:
#line 1905 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = new CPPParameterList;
}
#line 5988 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 197:
#line 1909 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5997 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 198:
#line 1914 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6005 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 199:
#line 1918 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6014 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 200:
#line 1923 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6023 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 201:
#line 1931 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6032 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 202:
#line 1936 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6041 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 203:
#line 1944 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = new CPPParameterList;
}
#line 6049 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 204:
#line 1948 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6058 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 205:
#line 1953 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6066 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 206:
#line 1957 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6075 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 207:
#line 1962 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6084 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 208:
#line 1970 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6093 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 209:
#line 1975 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6102 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 210:
#line 1983 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = nullptr;
}
#line 6110 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 211:
#line 1987 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6118 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 212:
#line 1994 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = nullptr;
}
#line 6126 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 213:
#line 1998 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6134 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 214:
#line 2005 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = nullptr;
}
#line 6142 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 215:
#line 2009 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = nullptr;
}
#line 6150 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 216:
#line 2013 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = nullptr;
}
#line 6158 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 217:
#line 2017 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6166 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 218:
#line 2021 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6174 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 219:
#line 2028 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = nullptr;
}
#line 6182 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 220:
#line 2032 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = nullptr;
}
#line 6190 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 221:
#line 2036 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 6198 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 222:
#line 2040 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6206 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 223:
#line 2044 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6214 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 224:
#line 2048 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = nullptr;
}
#line 6222 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 228:
#line 2061 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
}
#line 6229 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 232:
#line 2070 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6238 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 233:
#line 2075 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6248 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 234:
#line 2081 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6258 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 235:
#line 2087 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6267 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 236:
#line 2092 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6277 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 237:
#line 2098 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6287 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 238:
#line 2104 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6295 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 239:
#line 2108 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6303 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 240:
#line 2119 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6311 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 241:
#line 2123 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6322 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 242:
#line 2133 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6330 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 243:
#line 2137 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 6338 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 244:
#line 2141 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6347 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 245:
#line 2146 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6356 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 246:
#line 2151 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6365 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 247:
#line 2156 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6374 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 248:
#line 2161 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6383 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 249:
#line 2166 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6392 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 250:
#line 2171 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6401 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 251:
#line 2179 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6409 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 252:
#line 2183 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 6417 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 253:
#line 2187 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6426 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 254:
#line 2192 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6435 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 255:
#line 2197 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6444 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 256:
#line 2202 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6453 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 257:
#line 2207 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6462 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 258:
#line 2212 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6471 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 259:
#line 2217 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6480 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 260:
#line 2222 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6490 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 261:
#line 2228 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6499 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 262:
#line 2236 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6508 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 263:
#line 2241 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6517 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 264:
#line 2246 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6526 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 265:
#line 2251 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6535 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 266:
#line 2256 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6544 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 267:
#line 2261 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6553 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 268:
#line 2266 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6562 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 269:
#line 2271 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6571 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 270:
#line 2276 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6580 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 271:
#line 2281 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6590 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 272:
#line 2287 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6599 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 273:
#line 2295 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6607 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 274:
#line 2299 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6616 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 275:
#line 2304 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6625 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 276:
#line 2309 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6634 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 277:
#line 2314 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6643 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 278:
#line 2319 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6652 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 279:
#line 2324 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6661 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 280:
#line 2329 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6670 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 281:
#line 2334 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6679 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 282:
#line 2339 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6688 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 283:
#line 2347 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6696 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 284:
#line 2351 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6705 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 285:
#line 2356 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6714 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 286:
#line 2361 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6723 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 287:
#line 2366 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6732 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 288:
#line 2371 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6741 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 289:
#line 2376 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6750 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 290:
#line 2381 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6759 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 291:
#line 2386 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6768 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 292:
#line 2391 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6777 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 293:
#line 2396 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6787 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 294:
#line 2402 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6798 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 295:
#line 2409 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6809 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 296:
#line 2416 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6820 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 297:
#line 2426 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6828 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 298:
#line 2430 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 6840 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 299:
#line 2438 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6848 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 300:
#line 2442 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6856 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 301:
#line 2446 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6864 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 302:
#line 2450 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
#line 6872 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 303:
#line 2454 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6892 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 304:
#line 2470 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6912 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 305:
#line 2486 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6925 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 306:
#line 2495 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6933 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 307:
#line 2499 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 6947 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 308:
#line 2509 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6955 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 309:
#line 2516 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 6967 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 310:
#line 2527 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6975 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 311:
#line 2531 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.decl) != nullptr);
}
#line 6987 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 312:
#line 2539 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6995 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 313:
#line 2543 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 7003 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 314:
#line 2547 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
#line 7011 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 315:
#line 2551 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
#line 7019 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 316:
#line 2555 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7039 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 317:
#line 2571 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7059 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 318:
#line 2587 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));

  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7081 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 319:
#line 2605 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.decl) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7094 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 320:
#line 2614 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7102 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 321:
#line 2618 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.decl) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.decl) = enum_type->get_underlying_type();
  }
}
#line 7116 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 322:
#line 2628 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7124 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 323:
#line 2635 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7132 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 324:
#line 2639 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 7144 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 325:
#line 2647 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7152 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 326:
#line 2651 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7172 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 327:
#line 2667 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7192 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 328:
#line 2683 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7205 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 329:
#line 2692 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 7219 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 330:
#line 2702 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7227 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 331:
#line 2709 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.decl) = (yyvsp[0].u.decl);
}
#line 7235 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 332:
#line 2713 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  yyerror(string("unknown type '") + (yyvsp[0].u.identifier)->get_fully_scoped_name() + "'", (yylsp[0]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 7245 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 333:
#line 2721 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7253 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 334:
#line 2725 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7262 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 335:
#line 2730 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7270 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 336:
#line 2734 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7279 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 341:
#line 2749 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), nullptr, current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7297 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 342:
#line 2763 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7308 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 343:
#line 2773 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7332 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 344:
#line 2793 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7343 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 346:
#line 2804 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_struct->_final = true;
}
#line 7351 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 351:
#line 2821 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_unknown, false);
}
#line 7359 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 352:
#line 2825 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
#line 7367 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 353:
#line 2829 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
#line 7375 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 354:
#line 2833 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
#line 7383 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 355:
#line 2837 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7391 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 356:
#line 2841 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7399 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 357:
#line 2845 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7407 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 358:
#line 2849 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7415 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 359:
#line 2853 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7423 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 360:
#line 2857 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7431 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 361:
#line 2864 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = nullptr;
}
#line 7440 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 362:
#line 2872 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_enum = new CPPEnumType((yyvsp[-2].u.extension_enum), nullptr, (yyvsp[0].u.type), current_scope, nullptr, (yylsp[-2]).file);
}
#line 7448 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 363:
#line 2876 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_enum = new CPPEnumType((yyvsp[0].u.extension_enum), nullptr, current_scope, nullptr, (yylsp[0]).file);
}
#line 7456 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 364:
#line 2880 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[-2].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), (yyvsp[0].u.type), current_scope, new_scope, (yylsp[-3]).file);
}
#line 7465 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 365:
#line 2885 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[0].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, new_scope, (yylsp[-1]).file);
}
#line 7474 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 366:
#line 2893 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7482 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 367:
#line 2897 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
#line 7490 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 369:
#line 2905 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-1].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[-1]));
}
#line 7499 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 370:
#line 2910 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-3].u.identifier)->get_simple_name(), (yyvsp[-1].u.expr), current_lexer, (yylsp[-3]));
}
#line 7508 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 372:
#line 2918 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[0].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[0]));
}
#line 7517 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 373:
#line 2923 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), (yyvsp[0].u.expr), current_lexer, (yylsp[-2]));
}
#line 7526 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 374:
#line 2931 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
#line 7534 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 375:
#line 2935 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_class;
}
#line 7542 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 376:
#line 2939 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_struct;
}
#line 7550 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 377:
#line 2946 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
#line 7558 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 378:
#line 2950 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
#line 7566 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 379:
#line 2954 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
#line 7574 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 380:
#line 2961 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7596 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 381:
#line 2979 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  pop_scope();
}
#line 7604 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 382:
#line 2983 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7627 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 383:
#line 3002 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  pop_scope();
}
#line 7635 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 386:
#line 3011 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7645 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 387:
#line 3017 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[-1].u.type), (yyvsp[-3].u.identifier), current_scope);
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-4]));
}
#line 7656 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 388:
#line 3024 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), true, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7666 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 392:
#line 3039 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
#line 7674 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 393:
#line 3043 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
#line 7682 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 394:
#line 3047 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
#line 7690 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 395:
#line 3051 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
#line 7698 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 396:
#line 3055 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
#line 7706 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 397:
#line 3059 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
#line 7715 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 398:
#line 3064 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
#line 7724 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 399:
#line 3069 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
#line 7733 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 400:
#line 3074 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
#line 7742 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 401:
#line 3079 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
#line 7750 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 402:
#line 3083 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
#line 7759 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 403:
#line 3088 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
#line 7772 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 404:
#line 3097 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
#line 7781 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 405:
#line 3102 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
#line 7790 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 406:
#line 3110 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
#line 7798 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 407:
#line 3114 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
#line 7806 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 408:
#line 3118 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
#line 7815 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 409:
#line 3126 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
#line 7823 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 410:
#line 3135 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_lexer->_resolve_identifiers = false;
}
#line 7831 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 411:
#line 3139 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  current_lexer->_resolve_identifiers = true;
}
#line 7839 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 519:
#line 3183 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
}
#line 7846 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 543:
#line 3192 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = nullptr;
}
#line 7854 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 544:
#line 3196 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7862 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 545:
#line 3203 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = nullptr;
}
#line 7870 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 546:
#line 3207 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7878 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 547:
#line 3214 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7886 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 548:
#line 3218 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7894 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 549:
#line 3225 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7902 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 550:
#line 3229 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 7910 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 551:
#line 3233 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 7918 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 552:
#line 3237 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 7926 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 553:
#line 3241 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 7934 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 554:
#line 3245 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 7942 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 555:
#line 3249 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 7950 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 556:
#line 3253 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == nullptr) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 7966 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 557:
#line 3265 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 7974 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 558:
#line 3269 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 7982 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 559:
#line 3273 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 7990 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 560:
#line 3277 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 7998 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 561:
#line 3281 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8006 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 562:
#line 3285 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8014 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 563:
#line 3289 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8022 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 564:
#line 3293 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8030 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 565:
#line 3297 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8038 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 566:
#line 3301 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8046 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 567:
#line 3305 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8054 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 568:
#line 3309 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8062 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 569:
#line 3313 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8070 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 570:
#line 3317 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8078 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 571:
#line 3321 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8086 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 572:
#line 3325 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8094 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 573:
#line 3329 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8102 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 574:
#line 3333 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8110 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 575:
#line 3337 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8118 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 576:
#line 3341 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8126 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 577:
#line 3345 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8134 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 578:
#line 3349 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8142 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 579:
#line 3353 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8150 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 580:
#line 3357 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8158 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 581:
#line 3361 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8166 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 582:
#line 3365 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8174 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 583:
#line 3369 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8182 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 584:
#line 3373 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8190 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 585:
#line 3377 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8198 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 586:
#line 3381 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8206 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 587:
#line 3385 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8214 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 588:
#line 3393 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8222 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 589:
#line 3397 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8230 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 590:
#line 3401 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8238 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 591:
#line 3405 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8246 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 592:
#line 3409 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8254 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 593:
#line 3413 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8262 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 594:
#line 3417 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8276 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 595:
#line 3427 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // Aggregate initialization.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::aggregate_init_op(type, (yyvsp[-1].u.expr)));
}
#line 8290 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 596:
#line 3437 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8300 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 597:
#line 3443 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8310 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 598:
#line 3449 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8320 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 599:
#line 3455 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8330 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 600:
#line 3461 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8340 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 601:
#line 3467 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8350 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 602:
#line 3473 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8361 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 603:
#line 3480 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8372 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 604:
#line 3487 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8383 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 605:
#line 3494 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8394 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 606:
#line 3501 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8404 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 607:
#line 3507 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8414 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 608:
#line 3513 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8422 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 609:
#line 3517 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == nullptr) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 8438 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 610:
#line 3529 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8446 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 611:
#line 3533 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8454 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 612:
#line 3537 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8462 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 613:
#line 3541 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8470 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 614:
#line 3545 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 8485 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 615:
#line 3556 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 8500 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 616:
#line 3567 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8508 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 617:
#line 3571 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8516 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 618:
#line 3575 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8524 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 619:
#line 3579 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8532 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 620:
#line 3583 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8540 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 621:
#line 3587 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8548 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 622:
#line 3591 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8556 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 623:
#line 3595 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8564 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 624:
#line 3599 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8572 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 625:
#line 3603 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8580 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 626:
#line 3607 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8588 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 627:
#line 3611 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8596 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 628:
#line 3615 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8604 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 629:
#line 3619 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8612 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 630:
#line 3623 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8620 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 631:
#line 3627 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8628 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 632:
#line 3631 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8636 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 633:
#line 3635 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8644 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 634:
#line 3639 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8652 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 635:
#line 3643 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8660 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 636:
#line 3647 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8668 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 637:
#line 3651 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8676 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 638:
#line 3655 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8684 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 639:
#line 3659 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8692 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 640:
#line 3663 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8700 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 641:
#line 3667 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8708 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 642:
#line 3671 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8716 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 643:
#line 3675 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8724 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 644:
#line 3679 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8732 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 645:
#line 3683 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8740 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 646:
#line 3687 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8748 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 647:
#line 3694 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8756 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 648:
#line 3698 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 8764 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 649:
#line 3702 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 8772 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 650:
#line 3706 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8780 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 651:
#line 3710 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 8788 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 652:
#line 3714 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8796 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 653:
#line 3718 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8804 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 654:
#line 3722 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 8812 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 655:
#line 3726 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8822 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 656:
#line 3732 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8832 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 657:
#line 3738 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 8840 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 658:
#line 3742 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyvsp[-6].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-6].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-6].u.closure_type)));
}
#line 8850 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 659:
#line 3748 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyvsp[-9].u.closure_type)->_parameters = (yyvsp[-6].u.param_list);
  (yyvsp[-9].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-9].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-9].u.closure_type)));
}
#line 8861 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 660:
#line 3755 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_HAS_VIRTUAL_DESTRUCTOR, (yyvsp[-1].u.type)));
}
#line 8869 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 661:
#line 3759 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ABSTRACT, (yyvsp[-1].u.type)));
}
#line 8877 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 662:
#line 3763 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8885 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 663:
#line 3767 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-1].u.type)));
}
#line 8893 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 664:
#line 3771 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8901 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 665:
#line 3775 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8909 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 666:
#line 3779 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONVERTIBLE_TO, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8917 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 667:
#line 3783 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_DESTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8925 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 668:
#line 3787 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_EMPTY, (yyvsp[-1].u.type)));
}
#line 8933 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 669:
#line 3791 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ENUM, (yyvsp[-1].u.type)));
}
#line 8941 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 670:
#line 3795 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FINAL, (yyvsp[-1].u.type)));
}
#line 8949 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 671:
#line 3799 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FUNDAMENTAL, (yyvsp[-1].u.type)));
}
#line 8957 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 672:
#line 3803 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POD, (yyvsp[-1].u.type)));
}
#line 8965 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 673:
#line 3807 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POLYMORPHIC, (yyvsp[-1].u.type)));
}
#line 8973 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 674:
#line 3811 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_STANDARD_LAYOUT, (yyvsp[-1].u.type)));
}
#line 8981 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 675:
#line 3815 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIAL, (yyvsp[-1].u.type)));
}
#line 8989 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 676:
#line 3819 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_UNION, (yyvsp[-1].u.type)));
}
#line 8997 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 677:
#line 3833 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9005 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 678:
#line 3837 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 9013 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 679:
#line 3841 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 9021 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 680:
#line 3845 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 9029 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 681:
#line 3849 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 9037 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 682:
#line 3853 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 9045 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 683:
#line 3857 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 9053 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 684:
#line 3861 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == nullptr) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 9069 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 685:
#line 3873 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 9077 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 686:
#line 3877 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 9085 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 687:
#line 3881 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 9093 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 688:
#line 3885 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 9101 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 689:
#line 3889 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 9116 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 690:
#line 3900 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 9131 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 691:
#line 3911 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 9139 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 692:
#line 3915 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 9147 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 693:
#line 3919 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 9155 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 694:
#line 3923 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 9163 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 695:
#line 3927 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 9171 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 696:
#line 3931 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9179 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 697:
#line 3935 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9187 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 698:
#line 3939 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9195 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 699:
#line 3943 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9203 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 700:
#line 3947 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9211 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 701:
#line 3951 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9219 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 702:
#line 3955 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9227 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 703:
#line 3959 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9235 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 704:
#line 3963 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9243 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 705:
#line 3967 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9251 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 706:
#line 3971 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9259 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 707:
#line 3975 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9267 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 708:
#line 3979 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9275 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 709:
#line 3983 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9283 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 710:
#line 3987 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9291 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 711:
#line 3991 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9299 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 712:
#line 3995 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9307 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 713:
#line 3999 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9315 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 714:
#line 4003 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9323 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 715:
#line 4007 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9331 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 716:
#line 4011 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9339 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 717:
#line 4015 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 9347 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 718:
#line 4019 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9355 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 719:
#line 4023 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9363 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 720:
#line 4027 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 9371 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 721:
#line 4034 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9379 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 722:
#line 4038 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 9387 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 723:
#line 4042 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 9395 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 724:
#line 4046 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9403 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 725:
#line 4050 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 9411 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 726:
#line 4054 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9419 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 727:
#line 4058 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9427 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 728:
#line 4062 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 9435 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 729:
#line 4066 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9445 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 730:
#line 4072 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9455 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 731:
#line 4078 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 9463 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 732:
#line 4086 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.closure_type) = new CPPClosureType();
}
#line 9471 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 733:
#line 4090 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_value);
}
#line 9479 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 734:
#line 4094 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_reference);
}
#line 9487 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 735:
#line 4098 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.closure_type) = new CPPClosureType();
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9498 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 736:
#line 4105 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.closure_type) = (yyvsp[-3].u.closure_type);
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9509 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 737:
#line 4115 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9519 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 738:
#line 4121 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[-1].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9529 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 739:
#line 4127 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  if ((yyval.u.capture)->_name == "this") {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
  } else {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  }
}
#line 9543 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 740:
#line 4137 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  if ((yyval.u.capture)->_name != "this") {
    yywarning("only capture name 'this' may be preceded by an asterisk", (yylsp[0]));
  }
}
#line 9556 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 741:
#line 4149 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == nullptr) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 9568 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 742:
#line 4157 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 9576 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 743:
#line 4161 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[-1].u.identifier));
  ctp->_packed = true;
  (yyval.u.type) = CPPType::new_type(ctp);
}
#line 9586 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 744:
#line 4191 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9594 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 745:
#line 4195 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9602 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 746:
#line 4199 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9610 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 747:
#line 4203 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[0]));
}
#line 9618 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 748:
#line 4207 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9626 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 749:
#line 4211 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // This is not a keyword in Python, so it is useful to be able to use this
  // in MAKE_PROPERTY definitions, etc.
  (yyval.u.identifier) = new CPPIdentifier("signed", (yylsp[0]));
}
#line 9636 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 750:
#line 4217 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = new CPPIdentifier("float", (yylsp[0]));
}
#line 9644 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 751:
#line 4221 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = new CPPIdentifier("public", (yylsp[0]));
}
#line 9652 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 752:
#line 4225 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = new CPPIdentifier("private", (yylsp[0]));
}
#line 9660 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 753:
#line 4229 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = new CPPIdentifier("static", (yylsp[0]));
}
#line 9668 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 754:
#line 4233 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = new CPPIdentifier("default", (yylsp[0]));
}
#line 9676 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 755:
#line 4244 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9684 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 756:
#line 4248 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9692 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 757:
#line 4252 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9700 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 758:
#line 4256 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9708 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 759:
#line 4264 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 9716 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 760:
#line 4268 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9724 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 761:
#line 4272 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  (yyval.u.expr)->_str += (yyvsp[0].str);
}
#line 9734 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;

  case 762:
#line 4278 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1648  */
    {
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  if ((yyvsp[0].u.expr)->_type != CPPExpression::T_string && (yyvsp[0].u.expr)->_type != (yyvsp[-1].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[0].u.expr)->_str;
}
#line 9747 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
    break;


#line 9751 "built/tmp/cppBison.yxx.c" /* yacc.c:1648  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
