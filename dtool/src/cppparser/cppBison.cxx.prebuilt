/* A Bison parser, made by GNU Bison 2.7.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yylval          cppyylval
#define yychar          cppyychar
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs
#define yylloc          cppyylloc

/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 6 "dtool/src/cppparser/cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL;
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


/* Line 371 of yacc.c  */
#line 270 "built/tmp/cppBison.yxx.c"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "cppBison.yxx.h".  */
#ifndef YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     REAL = 258,
     INTEGER = 259,
     CHAR_TOK = 260,
     SIMPLE_STRING = 261,
     SIMPLE_IDENTIFIER = 262,
     STRING_LITERAL = 263,
     CUSTOM_LITERAL = 264,
     IDENTIFIER = 265,
     TYPENAME_IDENTIFIER = 266,
     SCOPING = 267,
     TYPEDEFNAME = 268,
     ELLIPSIS = 269,
     OROR = 270,
     ANDAND = 271,
     EQCOMPARE = 272,
     NECOMPARE = 273,
     LECOMPARE = 274,
     GECOMPARE = 275,
     LSHIFT = 276,
     RSHIFT = 277,
     POINTSAT_STAR = 278,
     DOT_STAR = 279,
     UNARY = 280,
     UNARY_NOT = 281,
     UNARY_NEGATE = 282,
     UNARY_MINUS = 283,
     UNARY_STAR = 284,
     UNARY_REF = 285,
     POINTSAT = 286,
     SCOPE = 287,
     PLUSPLUS = 288,
     MINUSMINUS = 289,
     TIMESEQUAL = 290,
     DIVIDEEQUAL = 291,
     MODEQUAL = 292,
     PLUSEQUAL = 293,
     MINUSEQUAL = 294,
     OREQUAL = 295,
     ANDEQUAL = 296,
     XOREQUAL = 297,
     LSHIFTEQUAL = 298,
     RSHIFTEQUAL = 299,
     KW_ALIGNAS = 300,
     KW_ALIGNOF = 301,
     KW_AUTO = 302,
     KW_BEGIN_PUBLISH = 303,
     KW_BLOCKING = 304,
     KW_BOOL = 305,
     KW_CATCH = 306,
     KW_CHAR = 307,
     KW_CHAR16_T = 308,
     KW_CHAR32_T = 309,
     KW_CLASS = 310,
     KW_CONST = 311,
     KW_CONSTEXPR = 312,
     KW_DECLTYPE = 313,
     KW_DEFAULT = 314,
     KW_DELETE = 315,
     KW_DOUBLE = 316,
     KW_DYNAMIC_CAST = 317,
     KW_ELSE = 318,
     KW_END_PUBLISH = 319,
     KW_ENUM = 320,
     KW_EXTENSION = 321,
     KW_EXTERN = 322,
     KW_EXPLICIT = 323,
     KW_PUBLISHED = 324,
     KW_FALSE = 325,
     KW_FLOAT = 326,
     KW_FRIEND = 327,
     KW_FOR = 328,
     KW_GOTO = 329,
     KW_IF = 330,
     KW_INLINE = 331,
     KW_INT = 332,
     KW_LONG = 333,
     KW_LONGLONG = 334,
     KW_MAKE_PROPERTY = 335,
     KW_MAKE_PROPERTY2 = 336,
     KW_MAKE_SEQ = 337,
     KW_MUTABLE = 338,
     KW_NAMESPACE = 339,
     KW_NEW = 340,
     KW_NOEXCEPT = 341,
     KW_NULLPTR = 342,
     KW_OPERATOR = 343,
     KW_PRIVATE = 344,
     KW_PROTECTED = 345,
     KW_PUBLIC = 346,
     KW_REGISTER = 347,
     KW_RETURN = 348,
     KW_SHORT = 349,
     KW_SIGNED = 350,
     KW_SIZEOF = 351,
     KW_STATIC = 352,
     KW_STATIC_ASSERT = 353,
     KW_STATIC_CAST = 354,
     KW_STRUCT = 355,
     KW_TEMPLATE = 356,
     KW_THROW = 357,
     KW_TRUE = 358,
     KW_TRY = 359,
     KW_TYPEDEF = 360,
     KW_TYPENAME = 361,
     KW_UNION = 362,
     KW_UNSIGNED = 363,
     KW_USING = 364,
     KW_VIRTUAL = 365,
     KW_VOID = 366,
     KW_VOLATILE = 367,
     KW_WCHAR_T = 368,
     KW_WHILE = 369,
     START_CPP = 370,
     START_CONST_EXPR = 371,
     START_TYPE = 372
   };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define SIMPLE_STRING 261
#define SIMPLE_IDENTIFIER 262
#define STRING_LITERAL 263
#define CUSTOM_LITERAL 264
#define IDENTIFIER 265
#define TYPENAME_IDENTIFIER 266
#define SCOPING 267
#define TYPEDEFNAME 268
#define ELLIPSIS 269
#define OROR 270
#define ANDAND 271
#define EQCOMPARE 272
#define NECOMPARE 273
#define LECOMPARE 274
#define GECOMPARE 275
#define LSHIFT 276
#define RSHIFT 277
#define POINTSAT_STAR 278
#define DOT_STAR 279
#define UNARY 280
#define UNARY_NOT 281
#define UNARY_NEGATE 282
#define UNARY_MINUS 283
#define UNARY_STAR 284
#define UNARY_REF 285
#define POINTSAT 286
#define SCOPE 287
#define PLUSPLUS 288
#define MINUSMINUS 289
#define TIMESEQUAL 290
#define DIVIDEEQUAL 291
#define MODEQUAL 292
#define PLUSEQUAL 293
#define MINUSEQUAL 294
#define OREQUAL 295
#define ANDEQUAL 296
#define XOREQUAL 297
#define LSHIFTEQUAL 298
#define RSHIFTEQUAL 299
#define KW_ALIGNAS 300
#define KW_ALIGNOF 301
#define KW_AUTO 302
#define KW_BEGIN_PUBLISH 303
#define KW_BLOCKING 304
#define KW_BOOL 305
#define KW_CATCH 306
#define KW_CHAR 307
#define KW_CHAR16_T 308
#define KW_CHAR32_T 309
#define KW_CLASS 310
#define KW_CONST 311
#define KW_CONSTEXPR 312
#define KW_DECLTYPE 313
#define KW_DEFAULT 314
#define KW_DELETE 315
#define KW_DOUBLE 316
#define KW_DYNAMIC_CAST 317
#define KW_ELSE 318
#define KW_END_PUBLISH 319
#define KW_ENUM 320
#define KW_EXTENSION 321
#define KW_EXTERN 322
#define KW_EXPLICIT 323
#define KW_PUBLISHED 324
#define KW_FALSE 325
#define KW_FLOAT 326
#define KW_FRIEND 327
#define KW_FOR 328
#define KW_GOTO 329
#define KW_IF 330
#define KW_INLINE 331
#define KW_INT 332
#define KW_LONG 333
#define KW_LONGLONG 334
#define KW_MAKE_PROPERTY 335
#define KW_MAKE_PROPERTY2 336
#define KW_MAKE_SEQ 337
#define KW_MUTABLE 338
#define KW_NAMESPACE 339
#define KW_NEW 340
#define KW_NOEXCEPT 341
#define KW_NULLPTR 342
#define KW_OPERATOR 343
#define KW_PRIVATE 344
#define KW_PROTECTED 345
#define KW_PUBLIC 346
#define KW_REGISTER 347
#define KW_RETURN 348
#define KW_SHORT 349
#define KW_SIGNED 350
#define KW_SIZEOF 351
#define KW_STATIC 352
#define KW_STATIC_ASSERT 353
#define KW_STATIC_CAST 354
#define KW_STRUCT 355
#define KW_TEMPLATE 356
#define KW_THROW 357
#define KW_TRUE 358
#define KW_TRY 359
#define KW_TYPEDEF 360
#define KW_TYPENAME 361
#define KW_UNION 362
#define KW_UNSIGNED 363
#define KW_USING 364
#define KW_VIRTUAL 365
#define KW_VOID 366
#define KW_VOLATILE 367
#define KW_WCHAR_T 368
#define KW_WHILE 369
#define START_CPP 370
#define START_CONST_EXPR 371
#define START_TYPE 372



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void *YYPARSE_PARAM);
#else
int cppyyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void);
#else
int cppyyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED  */

/* Copy the second part of user declarations.  */

/* Line 390 of yacc.c  */
#line 581 "built/tmp/cppBison.yxx.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  79
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   4690

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  142
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  95
/* YYNRULES -- Number of rules.  */
#define YYNRULES  593
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1101

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   372

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   140,     2,     2,     2,   133,   126,     2,
     136,   138,   131,   129,   119,   130,   135,   132,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   121,   120,
     127,   122,   128,   123,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   137,     2,   141,   125,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   118,   124,   139,   134,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    17,    20,    22,
      26,    31,    32,    38,    40,    42,    44,    46,    48,    50,
      53,    55,    57,    60,    63,    66,    69,    77,    87,    97,
     111,   121,   128,   133,   134,   138,   140,   143,   147,   150,
     153,   156,   159,   162,   165,   168,   171,   174,   177,   179,
     183,   187,   188,   193,   194,   200,   203,   208,   211,   216,
     217,   222,   223,   229,   233,   236,   241,   244,   249,   250,
     257,   258,   265,   266,   274,   275,   286,   287,   299,   300,
     309,   310,   320,   322,   324,   326,   329,   334,   340,   342,
     344,   346,   348,   350,   352,   354,   356,   358,   360,   362,
     364,   366,   368,   370,   372,   374,   376,   378,   380,   382,
     384,   386,   388,   390,   392,   394,   396,   398,   400,   402,
     404,   406,   408,   410,   413,   416,   418,   420,   422,   424,
     425,   432,   435,   437,   439,   441,   445,   448,   453,   456,
     461,   465,   470,   472,   474,   476,   478,   481,   485,   488,
     491,   494,   497,   500,   504,   509,   513,   517,   518,   525,
     527,   529,   531,   535,   538,   540,   544,   546,   549,   551,
     554,   556,   560,   566,   570,   574,   578,   583,   585,   587,
     590,   592,   596,   600,   606,   610,   615,   621,   624,   626,
     628,   630,   632,   635,   638,   641,   644,   647,   651,   656,
     658,   660,   662,   665,   668,   671,   674,   677,   681,   686,
     694,   698,   700,   703,   706,   709,   712,   715,   719,   724,
     732,   734,   736,   739,   741,   743,   745,   748,   753,   758,
     760,   762,   764,   767,   769,   771,   773,   776,   781,   784,
     789,   791,   793,   795,   798,   801,   804,   806,   808,   811,
     815,   816,   822,   823,   831,   833,   835,   838,   842,   845,
     848,   851,   855,   859,   863,   867,   871,   875,   880,   885,
     888,   892,   894,   896,   898,   900,   904,   910,   912,   915,
     920,   922,   924,   926,   928,   929,   936,   937,   945,   950,
     956,   959,   963,   965,   967,   969,   971,   973,   975,   977,
     979,   981,   983,   985,   987,   989,   991,   994,   997,  1000,
    1003,  1005,  1008,  1010,  1014,  1017,  1019,  1020,  1023,  1025,
    1028,  1030,  1032,  1034,  1036,  1038,  1040,  1042,  1044,  1046,
    1048,  1050,  1052,  1054,  1056,  1058,  1060,  1062,  1064,  1066,
    1068,  1070,  1072,  1074,  1076,  1078,  1080,  1082,  1084,  1086,
    1088,  1090,  1092,  1094,  1096,  1098,  1100,  1102,  1104,  1106,
    1108,  1110,  1112,  1114,  1116,  1118,  1120,  1122,  1124,  1126,
    1128,  1130,  1132,  1134,  1136,  1138,  1140,  1142,  1144,  1146,
    1148,  1150,  1152,  1154,  1156,  1158,  1160,  1162,  1164,  1166,
    1168,  1170,  1172,  1174,  1176,  1178,  1180,  1182,  1184,  1186,
    1188,  1190,  1192,  1194,  1196,  1198,  1200,  1202,  1204,  1206,
    1208,  1210,  1212,  1214,  1216,  1218,  1220,  1222,  1224,  1226,
    1228,  1230,  1232,  1234,  1236,  1238,  1240,  1242,  1244,  1246,
    1248,  1250,  1252,  1254,  1256,  1258,  1260,  1262,  1266,  1268,
    1270,  1272,  1274,  1276,  1280,  1282,  1287,  1295,  1303,  1308,
    1313,  1316,  1319,  1322,  1325,  1328,  1332,  1336,  1340,  1344,
    1348,  1352,  1356,  1360,  1364,  1368,  1372,  1376,  1380,  1384,
    1388,  1392,  1398,  1403,  1408,  1412,  1416,  1420,  1424,  1426,
    1431,  1439,  1447,  1452,  1457,  1462,  1467,  1472,  1477,  1482,
    1487,  1492,  1497,  1502,  1507,  1512,  1517,  1522,  1525,  1531,
    1534,  1537,  1540,  1543,  1546,  1550,  1554,  1558,  1562,  1566,
    1570,  1574,  1578,  1582,  1586,  1590,  1594,  1598,  1602,  1606,
    1610,  1614,  1618,  1624,  1629,  1634,  1638,  1642,  1646,  1650,
    1652,  1654,  1656,  1658,  1660,  1662,  1664,  1666,  1668,  1670,
    1675,  1683,  1691,  1696,  1701,  1704,  1710,  1713,  1716,  1719,
    1722,  1726,  1730,  1734,  1738,  1742,  1746,  1750,  1754,  1758,
    1762,  1766,  1770,  1774,  1778,  1782,  1786,  1790,  1794,  1800,
    1805,  1810,  1814,  1818,  1822,  1826,  1828,  1830,  1832,  1834,
    1836,  1838,  1840,  1842,  1844,  1846,  1849,  1852,  1854,  1856,
    1858,  1860,  1863,  1866
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     143,     0,    -1,   115,   144,    -1,   116,   229,    -1,   117,
     198,    -1,   236,    -1,   144,   120,    -1,   144,   149,    -1,
     146,    -1,   145,   119,   146,    -1,   234,   136,   226,   138,
      -1,    -1,   152,   118,   148,   144,   139,    -1,   153,    -1,
     175,    -1,   147,    -1,   213,    -1,   216,    -1,   150,    -1,
     105,   159,    -1,    48,    -1,    64,    -1,    69,   121,    -1,
      91,   121,    -1,    90,   121,    -1,    89,   121,    -1,    80,
     136,    10,   119,    10,   138,   120,    -1,    80,   136,    10,
     119,    10,   119,    10,   138,   120,    -1,    81,   136,    10,
     119,    10,   119,    10,   138,   120,    -1,    81,   136,    10,
     119,    10,   119,    10,   119,    10,   119,    10,   138,   120,
      -1,    82,   136,    10,   119,    10,   119,    10,   138,   120,
      -1,    98,   136,   229,   119,   235,   138,    -1,    98,   136,
     229,   138,    -1,    -1,    72,   151,   149,    -1,   236,    -1,
      67,   152,    -1,    67,     6,   152,    -1,    97,   152,    -1,
      76,   152,    -1,   110,   152,    -1,    68,   152,    -1,    92,
     152,    -1,   112,   152,    -1,    83,   152,    -1,    57,   152,
      -1,    49,   152,    -1,    66,   152,    -1,   154,    -1,   152,
     195,   120,    -1,   152,   164,   187,    -1,    -1,   152,   197,
     155,   157,    -1,    -1,   152,    56,   197,   156,   158,    -1,
     181,   187,    -1,   181,   186,   119,   157,    -1,   181,   187,
      -1,   181,   186,   119,   158,    -1,    -1,   152,   197,   160,
     162,    -1,    -1,   152,    56,   197,   161,   163,    -1,   152,
     164,   187,    -1,   181,   187,    -1,   181,   186,   119,   162,
      -1,   181,   187,    -1,   181,   186,   119,   163,    -1,    -1,
      10,   136,   165,   183,   138,   172,    -1,    -1,    11,   136,
     166,   183,   138,   172,    -1,    -1,   134,   234,   136,   167,
     183,   138,   172,    -1,    -1,    11,   136,   131,   181,   138,
     136,   168,   183,   138,   172,    -1,    -1,    11,   136,    12,
     131,   181,   138,   136,   169,   183,   138,   172,    -1,    -1,
      88,   194,   191,   136,   170,   183,   138,   172,    -1,    -1,
      88,    56,   194,   191,   136,   171,   183,   138,   172,    -1,
      10,    -1,   236,    -1,    56,    -1,   172,    86,    -1,   172,
     102,   136,   138,    -1,   172,   102,   136,   234,   138,    -1,
     140,    -1,   134,    -1,   131,    -1,   132,    -1,   133,    -1,
     129,    -1,   130,    -1,   124,    -1,   126,    -1,   125,    -1,
      15,    -1,    16,    -1,    17,    -1,    18,    -1,    19,    -1,
      20,    -1,   127,    -1,   128,    -1,    21,    -1,    22,    -1,
     122,    -1,   119,    -1,    33,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    39,    -1,    40,    -1,
      41,    -1,    42,    -1,    43,    -1,    44,    -1,    31,    -1,
     137,   141,    -1,   136,   138,    -1,    85,    -1,    60,    -1,
     153,    -1,   175,    -1,    -1,   101,   176,   127,   177,   128,
     174,    -1,   101,   153,    -1,   236,    -1,   178,    -1,   179,
      -1,   178,   119,   179,    -1,    55,   234,    -1,    55,   234,
     122,   198,    -1,   106,   234,    -1,   106,   234,   122,   198,
      -1,   180,   192,   185,    -1,    56,   180,   192,   185,    -1,
     217,    -1,    10,    -1,    11,    -1,   234,    -1,    88,   173,
      -1,    88,     6,    10,    -1,    56,   181,    -1,   112,   181,
      -1,   131,   181,    -1,   126,   181,    -1,    16,   181,    -1,
      12,   131,   181,    -1,   181,   137,   225,   141,    -1,   181,
     121,     4,    -1,   136,   181,   138,    -1,    -1,   181,   136,
     182,   183,   138,   172,    -1,   236,    -1,    14,    -1,   184,
      -1,   184,   119,    14,    -1,   184,    14,    -1,   190,    -1,
     184,   119,   190,    -1,   236,    -1,   122,   228,    -1,   236,
      -1,   122,   229,    -1,   120,    -1,   118,   221,   139,    -1,
     121,   145,   118,   221,   139,    -1,   122,   229,   120,    -1,
     122,    59,   120,    -1,   122,    60,   120,    -1,   122,   118,
     188,   139,    -1,   236,    -1,   189,    -1,   189,   119,    -1,
     229,    -1,   118,   188,   139,    -1,   189,   119,   229,    -1,
     189,   119,   118,   188,   139,    -1,   194,   192,   186,    -1,
      56,   194,   192,   186,    -1,    56,    92,   194,   192,   186,
      -1,    92,   190,    -1,   231,    -1,   236,    -1,    10,    -1,
      11,    -1,    56,   191,    -1,   112,   191,    -1,   131,   191,
      -1,   126,   191,    -1,    16,   191,    -1,    12,   131,   191,
      -1,   191,   137,   225,   141,    -1,   236,    -1,    10,    -1,
      11,    -1,    56,   192,    -1,   112,   192,    -1,   131,   192,
      -1,   126,   192,    -1,    16,   192,    -1,    12,   131,   192,
      -1,   192,   137,   225,   141,    -1,   136,   192,   138,   136,
     183,   138,   172,    -1,   136,   192,   138,    -1,   236,    -1,
      56,   193,    -1,   112,   193,    -1,   131,   193,    -1,   126,
     193,    -1,    16,   193,    -1,    12,   131,   193,    -1,   193,
     137,   225,   141,    -1,   136,   193,   138,   136,   183,   138,
     172,    -1,   217,    -1,    11,    -1,   106,   234,    -1,   199,
      -1,   201,    -1,   206,    -1,   212,   234,    -1,   211,   234,
     121,   208,    -1,    58,   136,   229,   138,    -1,    47,    -1,
     217,    -1,    11,    -1,   106,   234,    -1,   199,    -1,   201,
      -1,   206,    -1,   212,   234,    -1,   211,   234,   121,   208,
      -1,   211,   234,    -1,    58,   136,   229,   138,    -1,    47,
      -1,   217,    -1,    11,    -1,   106,   234,    -1,   212,   234,
      -1,   211,   234,    -1,   195,    -1,    10,    -1,   194,   193,
      -1,    56,   194,   193,    -1,    -1,   212,   118,   200,   144,
     139,    -1,    -1,   212,   234,   202,   203,   118,   144,   139,
      -1,   236,    -1,   204,    -1,   121,   205,    -1,   204,   119,
     205,    -1,    91,   233,    -1,    90,   233,    -1,    89,   233,
      -1,   110,    91,   233,    -1,   110,    90,   233,    -1,   110,
      89,   233,    -1,    91,   110,   233,    -1,    90,   110,   233,
      -1,    89,   110,   233,    -1,   207,   118,   210,   139,    -1,
     211,   234,   121,   208,    -1,   211,   234,    -1,   211,   121,
     208,    -1,   211,    -1,   218,    -1,    11,    -1,   236,    -1,
     209,   234,   119,    -1,   209,   234,   122,   229,   119,    -1,
     209,    -1,   209,   234,    -1,   209,   234,   122,   229,    -1,
      65,    -1,    55,    -1,   100,    -1,   107,    -1,    -1,    84,
     234,   118,   214,   144,   139,    -1,    -1,    76,    84,   234,
     118,   215,   144,   139,    -1,    84,   118,   144,   139,    -1,
      76,    84,   118,   144,   139,    -1,   109,   234,    -1,   109,
      84,   234,    -1,   218,    -1,   219,    -1,   220,    -1,    50,
      -1,    52,    -1,   113,    -1,    53,    -1,    54,    -1,    94,
      -1,    78,    -1,    79,    -1,   108,    -1,    95,    -1,    77,
      -1,    94,   218,    -1,    78,   218,    -1,   108,   218,    -1,
      95,   218,    -1,    71,    -1,    78,    71,    -1,    61,    -1,
      78,    78,    71,    -1,    78,    61,    -1,   111,    -1,    -1,
     222,   223,    -1,   236,    -1,   223,   224,    -1,     3,    -1,
       4,    -1,     6,    -1,     8,    -1,     9,    -1,     5,    -1,
      10,    -1,    11,    -1,    12,    -1,     7,    -1,    14,    -1,
      15,    -1,    16,    -1,    17,    -1,    18,    -1,    19,    -1,
      20,    -1,    21,    -1,    22,    -1,    23,    -1,    24,    -1,
      31,    -1,    32,    -1,    33,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    39,    -1,    40,    -1,
      41,    -1,    42,    -1,    43,    -1,    44,    -1,    45,    -1,
      46,    -1,    47,    -1,    50,    -1,    51,    -1,    52,    -1,
      53,    -1,    54,    -1,    55,    -1,    56,    -1,    57,    -1,
      58,    -1,    59,    -1,    60,    -1,    61,    -1,    62,    -1,
      63,    -1,    65,    -1,    67,    -1,    68,    -1,    70,    -1,
      71,    -1,    72,    -1,    73,    -1,    74,    -1,    75,    -1,
      76,    -1,    77,    -1,    78,    -1,    83,    -1,    84,    -1,
      85,    -1,    87,    -1,    88,    -1,    89,    -1,    90,    -1,
      91,    -1,    69,    -1,    92,    -1,    93,    -1,    94,    -1,
      95,    -1,    96,    -1,    97,    -1,    98,    -1,    99,    -1,
     100,    -1,   102,    -1,   103,    -1,   104,    -1,   105,    -1,
     106,    -1,   107,    -1,   108,    -1,   109,    -1,   110,    -1,
     111,    -1,   112,    -1,   113,    -1,   114,    -1,   129,    -1,
     130,    -1,   131,    -1,   132,    -1,   126,    -1,   124,    -1,
     125,    -1,   140,    -1,   134,    -1,   122,    -1,   133,    -1,
     127,    -1,   128,    -1,   136,    -1,   138,    -1,   135,    -1,
     119,    -1,   120,    -1,   121,    -1,   137,    -1,   141,    -1,
     123,    -1,   118,   223,   139,    -1,   236,    -1,   229,    -1,
     236,    -1,   227,    -1,   229,    -1,   227,   119,   229,    -1,
     230,    -1,   136,   198,   138,   228,    -1,    99,   127,   198,
     128,   136,   227,   138,    -1,    62,   127,   198,   128,   136,
     227,   138,    -1,    96,   136,   198,   138,    -1,    46,   136,
     198,   138,    -1,   140,   228,    -1,   134,   228,    -1,   130,
     228,    -1,   131,   228,    -1,   126,   228,    -1,   228,   131,
     228,    -1,   228,   132,   228,    -1,   228,   133,   228,    -1,
     228,   129,   228,    -1,   228,   130,   228,    -1,   228,   124,
     228,    -1,   228,   125,   228,    -1,   228,   126,   228,    -1,
     228,    15,   228,    -1,   228,    16,   228,    -1,   228,    17,
     228,    -1,   228,    18,   228,    -1,   228,    19,   228,    -1,
     228,    20,   228,    -1,   228,    21,   228,    -1,   228,    22,
     228,    -1,   228,   123,   228,   121,   228,    -1,   228,   137,
     229,   141,    -1,   228,   136,   227,   138,    -1,   228,   136,
     138,    -1,   228,   135,   228,    -1,   228,    31,   228,    -1,
     136,   227,   138,    -1,   230,    -1,   136,   198,   138,   229,
      -1,    99,   127,   198,   128,   136,   227,   138,    -1,    62,
     127,   198,   128,   136,   227,   138,    -1,    11,   136,   226,
     138,    -1,    77,   136,   226,   138,    -1,    52,   136,   226,
     138,    -1,   113,   136,   226,   138,    -1,    53,   136,   226,
     138,    -1,    54,   136,   226,   138,    -1,    50,   136,   226,
     138,    -1,    94,   136,   226,   138,    -1,    78,   136,   226,
     138,    -1,   108,   136,   226,   138,    -1,    95,   136,   226,
     138,    -1,    71,   136,   226,   138,    -1,    61,   136,   226,
     138,    -1,    96,   136,   198,   138,    -1,    46,   136,   198,
     138,    -1,    85,   196,    -1,    85,   196,   136,   226,   138,
      -1,   140,   229,    -1,   134,   229,    -1,   130,   229,    -1,
     131,   229,    -1,   126,   229,    -1,   229,   131,   229,    -1,
     229,   132,   229,    -1,   229,   133,   229,    -1,   229,   129,
     229,    -1,   229,   130,   229,    -1,   229,   124,   229,    -1,
     229,   125,   229,    -1,   229,   126,   229,    -1,   229,    15,
     229,    -1,   229,    16,   229,    -1,   229,    17,   229,    -1,
     229,    18,   229,    -1,   229,    19,   229,    -1,   229,    20,
     229,    -1,   229,   127,   229,    -1,   229,   128,   229,    -1,
     229,    21,   229,    -1,   229,    22,   229,    -1,   229,   123,
     229,   121,   229,    -1,   229,   137,   229,   141,    -1,   229,
     136,   227,   138,    -1,   229,   136,   138,    -1,   229,   135,
     229,    -1,   229,    31,   229,    -1,   136,   227,   138,    -1,
       4,    -1,   103,    -1,    70,    -1,     5,    -1,     3,    -1,
     235,    -1,     9,    -1,    10,    -1,    87,    -1,   232,    -1,
     136,   198,   138,   229,    -1,    99,   127,   198,   128,   136,
     227,   138,    -1,    62,   127,   198,   128,   136,   227,   138,
      -1,    96,   136,   198,   138,    -1,    46,   136,   198,   138,
      -1,    85,   196,    -1,    85,   196,   136,   226,   138,    -1,
     140,   229,    -1,   134,   229,    -1,   130,   229,    -1,   126,
     229,    -1,   231,   131,   229,    -1,   231,   132,   229,    -1,
     231,   133,   229,    -1,   231,   129,   229,    -1,   231,   130,
     229,    -1,   231,   124,   229,    -1,   231,   125,   229,    -1,
     231,   126,   229,    -1,   231,    15,   229,    -1,   231,    16,
     229,    -1,   231,    17,   229,    -1,   231,    18,   229,    -1,
     231,    19,   229,    -1,   231,    20,   229,    -1,   231,   127,
     229,    -1,   231,   128,   229,    -1,   231,    21,   229,    -1,
     231,    22,   229,    -1,   231,   123,   229,   121,   229,    -1,
     231,   137,   229,   141,    -1,   231,   136,   227,   138,    -1,
     231,   136,   138,    -1,   231,   135,   229,    -1,   231,    31,
     229,    -1,   136,   227,   138,    -1,     4,    -1,   103,    -1,
      70,    -1,     5,    -1,     3,    -1,   235,    -1,     9,    -1,
      10,    -1,    87,    -1,   234,    -1,   212,   234,    -1,   106,
     234,    -1,    10,    -1,    11,    -1,     6,    -1,     8,    -1,
     235,     6,    -1,   235,     8,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   406,   406,   407,   411,   418,   419,   420,   424,   425,
     429,   442,   441,   453,   454,   455,   456,   457,   458,   459,
     460,   473,   482,   486,   494,   498,   502,   513,   534,   556,
     589,   611,   622,   636,   635,   650,   654,   658,   669,   673,
     677,   681,   685,   689,   693,   697,   701,   705,   712,   716,
     725,   737,   736,   752,   751,   773,   781,   792,   801,   815,
     814,   830,   829,   844,   859,   865,   874,   881,   894,   893,
     918,   917,   942,   941,   972,   971,   990,   989,  1010,  1009,
    1041,  1040,  1066,  1079,  1083,  1087,  1091,  1095,  1102,  1106,
    1110,  1114,  1118,  1122,  1126,  1130,  1134,  1138,  1142,  1146,
    1150,  1154,  1158,  1162,  1166,  1170,  1174,  1178,  1182,  1186,
    1190,  1194,  1198,  1202,  1206,  1210,  1214,  1218,  1222,  1226,
    1230,  1234,  1238,  1242,  1246,  1250,  1254,  1261,  1262,  1267,
    1266,  1274,  1278,  1279,  1283,  1289,  1298,  1302,  1306,  1310,
    1314,  1320,  1330,  1334,  1339,  1351,  1355,  1369,  1384,  1389,
    1394,  1399,  1404,  1409,  1414,  1419,  1424,  1430,  1429,  1451,
    1455,  1460,  1464,  1469,  1477,  1482,  1490,  1494,  1501,  1505,
    1512,  1516,  1520,  1524,  1528,  1532,  1536,  1543,  1544,  1545,
    1549,  1552,  1553,  1554,  1558,  1563,  1569,  1575,  1579,  1589,
    1593,  1597,  1601,  1606,  1611,  1616,  1621,  1626,  1631,  1639,
    1643,  1647,  1651,  1656,  1661,  1666,  1671,  1676,  1681,  1686,
    1692,  1700,  1704,  1709,  1714,  1719,  1724,  1729,  1734,  1739,
    1748,  1752,  1760,  1764,  1768,  1772,  1776,  1792,  1808,  1817,
    1824,  1828,  1836,  1840,  1844,  1848,  1852,  1868,  1884,  1902,
    1911,  1918,  1922,  1930,  1934,  1950,  1969,  1973,  1981,  1987,
    1998,  1997,  2022,  2021,  2051,  2052,  2056,  2057,  2061,  2065,
    2069,  2073,  2077,  2081,  2085,  2089,  2093,  2100,  2108,  2112,
    2116,  2120,  2127,  2131,  2138,  2139,  2145,  2153,  2154,  2160,
    2169,  2176,  2180,  2184,  2192,  2191,  2214,  2213,  2236,  2237,
    2241,  2247,  2256,  2257,  2258,  2262,  2266,  2270,  2274,  2278,
    2282,  2287,  2292,  2297,  2302,  2307,  2311,  2316,  2325,  2330,
    2338,  2342,  2347,  2351,  2356,  2364,  2374,  2374,  2384,  2385,
    2389,  2390,  2391,  2392,  2393,  2394,  2395,  2396,  2397,  2398,
    2399,  2399,  2399,  2400,  2400,  2400,  2400,  2401,  2401,  2401,
    2401,  2401,  2402,  2402,  2402,  2403,  2403,  2403,  2403,  2403,
    2404,  2404,  2404,  2404,  2404,  2405,  2405,  2405,  2405,  2405,
    2406,  2406,  2406,  2407,  2407,  2407,  2407,  2407,  2408,  2408,
    2408,  2408,  2408,  2409,  2409,  2409,  2410,  2410,  2410,  2410,
    2410,  2410,  2411,  2411,  2411,  2411,  2412,  2412,  2412,  2412,
    2412,  2413,  2413,  2413,  2413,  2414,  2414,  2414,  2414,  2414,
    2415,  2415,  2415,  2415,  2415,  2416,  2416,  2416,  2416,  2416,
    2417,  2417,  2417,  2417,  2417,  2420,  2420,  2420,  2420,  2420,
    2420,  2420,  2420,  2420,  2420,  2420,  2421,  2421,  2421,  2421,
    2421,  2421,  2421,  2421,  2421,  2421,  2422,  2422,  2426,  2430,
    2437,  2441,  2448,  2452,  2459,  2463,  2467,  2471,  2475,  2479,
    2483,  2487,  2491,  2495,  2499,  2503,  2507,  2511,  2515,  2519,
    2523,  2527,  2531,  2535,  2539,  2543,  2547,  2551,  2555,  2559,
    2563,  2567,  2571,  2575,  2579,  2583,  2587,  2591,  2599,  2603,
    2607,  2611,  2615,  2625,  2631,  2637,  2643,  2649,  2655,  2661,
    2668,  2675,  2682,  2689,  2695,  2701,  2705,  2709,  2713,  2717,
    2721,  2725,  2729,  2733,  2737,  2741,  2745,  2749,  2753,  2757,
    2761,  2765,  2769,  2773,  2777,  2781,  2785,  2789,  2793,  2797,
    2801,  2805,  2809,  2813,  2817,  2821,  2825,  2829,  2833,  2840,
    2844,  2848,  2852,  2856,  2860,  2864,  2868,  2872,  2886,  2890,
    2894,  2898,  2902,  2906,  2910,  2914,  2918,  2922,  2926,  2930,
    2934,  2938,  2942,  2946,  2950,  2954,  2958,  2962,  2966,  2970,
    2974,  2978,  2982,  2986,  2990,  2994,  2998,  3002,  3006,  3010,
    3014,  3018,  3022,  3026,  3030,  3037,  3041,  3045,  3049,  3053,
    3057,  3061,  3065,  3069,  3076,  3084,  3092,  3118,  3122,  3129,
    3133,  3137,  3143,  3154
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK",
  "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL", "CUSTOM_LITERAL",
  "IDENTIFIER", "TYPENAME_IDENTIFIER", "SCOPING", "TYPEDEFNAME",
  "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE", "LECOMPARE",
  "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR", "DOT_STAR", "UNARY",
  "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS", "UNARY_STAR", "UNARY_REF",
  "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS", "TIMESEQUAL",
  "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL", "OREQUAL",
  "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL", "KW_ALIGNAS",
  "KW_ALIGNOF", "KW_AUTO", "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL",
  "KW_CATCH", "KW_CHAR", "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS",
  "KW_CONST", "KW_CONSTEXPR", "KW_DECLTYPE", "KW_DEFAULT", "KW_DELETE",
  "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH", "KW_ENUM",
  "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED", "KW_FALSE",
  "KW_FLOAT", "KW_FRIEND", "KW_FOR", "KW_GOTO", "KW_IF", "KW_INLINE",
  "KW_INT", "KW_LONG", "KW_LONGLONG", "KW_MAKE_PROPERTY",
  "KW_MAKE_PROPERTY2", "KW_MAKE_SEQ", "KW_MUTABLE", "KW_NAMESPACE",
  "KW_NEW", "KW_NOEXCEPT", "KW_NULLPTR", "KW_OPERATOR", "KW_PRIVATE",
  "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER", "KW_RETURN", "KW_SHORT",
  "KW_SIGNED", "KW_SIZEOF", "KW_STATIC", "KW_STATIC_ASSERT",
  "KW_STATIC_CAST", "KW_STRUCT", "KW_TEMPLATE", "KW_THROW", "KW_TRUE",
  "KW_TRY", "KW_TYPEDEF", "KW_TYPENAME", "KW_UNION", "KW_UNSIGNED",
  "KW_USING", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WCHAR_T",
  "KW_WHILE", "START_CPP", "START_CONST_EXPR", "START_TYPE", "'{'", "','",
  "';'", "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'",
  "'!'", "']'", "$accept", "grammar", "cpp", "constructor_inits",
  "constructor_init", "extern_c", "$@1", "declaration",
  "friend_declaration", "$@2", "storage_class", "type_like_declaration",
  "multiple_var_declaration", "$@3", "$@4",
  "multiple_instance_identifiers", "multiple_const_instance_identifiers",
  "typedef_declaration", "$@5", "$@6", "typedef_instance_identifiers",
  "typedef_const_instance_identifiers", "function_prototype", "$@7", "$@8",
  "$@9", "$@10", "$@11", "$@12", "$@13", "function_post",
  "function_operator", "more_template_declaration", "template_declaration",
  "$@14", "template_formal_parameters",
  "template_nonempty_formal_parameters", "template_formal_parameter",
  "template_formal_parameter_type", "instance_identifier", "$@15",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "empty_instance_identifier", "type", "type_decl", "predefined_type",
  "var_type_decl", "full_type", "anonymous_struct", "$@16", "named_struct",
  "$@17", "maybe_class_derivation", "class_derivation",
  "base_specification", "enum", "enum_decl", "enum_element_type",
  "enum_body_trailing_comma", "enum_body", "enum_keyword",
  "struct_keyword", "namespace_declaration", "$@18", "$@19",
  "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@20", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "class_derivation_name", "name", "string_literal", "empty", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   123,    44,
      59,    58,    61,    63,   124,    94,    38,    60,    62,    43,
      45,    42,    47,    37,   126,    46,    40,    91,    41,   125,
      33,    93
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,   142,   143,   143,   143,   144,   144,   144,   145,   145,
     146,   148,   147,   149,   149,   149,   149,   149,   149,   149,
     149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
     149,   149,   149,   151,   150,   152,   152,   152,   152,   152,
     152,   152,   152,   152,   152,   152,   152,   152,   153,   153,
     153,   155,   154,   156,   154,   157,   157,   158,   158,   160,
     159,   161,   159,   159,   162,   162,   163,   163,   165,   164,
     166,   164,   167,   164,   168,   164,   169,   164,   170,   164,
     171,   164,   164,   172,   172,   172,   172,   172,   173,   173,
     173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
     173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
     173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
     173,   173,   173,   173,   173,   173,   173,   174,   174,   176,
     175,   175,   177,   177,   178,   178,   179,   179,   179,   179,
     179,   179,   180,   180,   180,   181,   181,   181,   181,   181,
     181,   181,   181,   181,   181,   181,   181,   182,   181,   183,
     183,   183,   183,   183,   184,   184,   185,   185,   186,   186,
     187,   187,   187,   187,   187,   187,   187,   188,   188,   188,
     189,   189,   189,   189,   190,   190,   190,   190,   190,   191,
     191,   191,   191,   191,   191,   191,   191,   191,   191,   192,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   193,   193,   193,   193,   193,   193,   193,   193,   193,
     194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
     195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
     195,   196,   196,   196,   196,   196,   197,   197,   198,   198,
     200,   199,   202,   201,   203,   203,   204,   204,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   206,   207,   207,
     207,   207,   208,   208,   209,   209,   209,   210,   210,   210,
     211,   212,   212,   212,   214,   213,   215,   213,   213,   213,
     216,   216,   217,   217,   217,   218,   218,   218,   218,   218,
     218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     219,   219,   219,   219,   219,   220,   222,   221,   223,   223,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   225,   225,
     226,   226,   227,   227,   228,   228,   228,   228,   228,   228,
     228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
     228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
     228,   228,   228,   228,   228,   228,   228,   228,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   230,
     230,   230,   230,   230,   230,   230,   230,   230,   231,   231,
     231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
     231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
     231,   231,   231,   231,   231,   231,   231,   231,   231,   231,
     231,   231,   231,   231,   231,   232,   232,   232,   232,   232,
     232,   232,   232,   232,   233,   233,   233,   234,   234,   235,
     235,   235,   235,   236
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     0,     5,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     2,     2,     2,     7,     9,     9,    13,
       9,     6,     4,     0,     3,     1,     2,     3,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     3,
       3,     0,     4,     0,     5,     2,     4,     2,     4,     0,
       4,     0,     5,     3,     2,     4,     2,     4,     0,     6,
       0,     6,     0,     7,     0,    10,     0,    11,     0,     8,
       0,     9,     1,     1,     1,     2,     4,     5,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     0,
       6,     2,     1,     1,     1,     3,     2,     4,     2,     4,
       3,     4,     1,     1,     1,     1,     2,     3,     2,     2,
       2,     2,     2,     3,     4,     3,     3,     0,     6,     1,
       1,     1,     3,     2,     1,     3,     1,     2,     1,     2,
       1,     3,     5,     3,     3,     3,     4,     1,     1,     2,
       1,     3,     3,     5,     3,     4,     5,     2,     1,     1,
       1,     1,     2,     2,     2,     2,     2,     3,     4,     1,
       1,     1,     2,     2,     2,     2,     2,     3,     4,     7,
       3,     1,     2,     2,     2,     2,     2,     3,     4,     7,
       1,     1,     2,     1,     1,     1,     2,     4,     4,     1,
       1,     1,     2,     1,     1,     1,     2,     4,     2,     4,
       1,     1,     1,     2,     2,     2,     1,     1,     2,     3,
       0,     5,     0,     7,     1,     1,     2,     3,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     4,     4,     2,
       3,     1,     1,     1,     1,     3,     5,     1,     2,     4,
       1,     1,     1,     1,     0,     6,     0,     7,     4,     5,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       1,     2,     1,     3,     2,     1,     0,     2,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     1,     1,     3,     1,     4,     7,     7,     4,     4,
       2,     2,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     4,     4,     3,     3,     3,     3,     1,     4,
       7,     7,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     2,     5,     2,
       2,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     4,     4,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       7,     7,     4,     4,     2,     5,     2,     2,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     5,     4,
       4,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     2,     2,     0
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   593,     0,     0,     0,   593,     5,   533,   529,   532,
     589,   590,   535,   536,     0,     0,     0,     0,     0,     0,
       0,     0,   531,     0,     0,     0,     0,   537,     0,     0,
       0,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     3,   478,   534,   221,   229,   295,   296,   298,   299,
     281,     0,     0,   312,   280,   310,   305,   301,   302,   300,
     304,   282,     0,   283,   303,   315,   297,   593,     4,   223,
     224,   225,     0,   271,     0,   220,   292,   293,   294,     1,
      20,   593,   593,    21,   593,   593,   593,     0,    33,   593,
       0,     0,     0,   593,     0,     0,     0,     0,   593,   593,
       0,   593,   593,     0,   593,   593,     6,    15,     7,    18,
       0,    13,    48,    14,    16,    17,    35,   593,     0,   593,
     593,   593,   593,   593,     0,   593,   593,   593,   242,     0,
     497,     0,     0,   241,   593,   593,     0,     0,   593,   593,
     503,   501,   502,   500,   221,   295,   296,   298,   299,   312,
     310,   305,   301,   300,   304,   303,   297,     0,     0,   442,
     499,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   591,   592,   593,     0,   314,   311,
     301,   307,   301,   306,   309,   587,   588,   222,   308,     0,
     593,   593,   593,   593,   593,   593,   248,   211,   593,     0,
     269,   250,   226,   593,    46,    45,    47,   593,    36,    41,
      22,   593,     0,    39,     0,     0,     0,    44,   593,     0,
      25,    24,    23,    42,    38,     0,     0,   131,     0,     0,
      19,     0,   290,    40,    43,   247,   231,   240,     0,     0,
       0,     0,    11,     0,     0,   246,    51,   233,   234,   235,
     271,     0,   230,     0,   441,   440,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   243,   593,   245,   244,
       0,     0,     0,     0,     0,     0,     0,     0,   528,   512,
     513,   514,   515,   516,   517,   520,   521,   527,     0,   509,
     510,   511,   518,   519,   507,   508,   504,   505,   506,   526,
     525,     0,     0,   249,     0,   313,   593,   216,   212,   213,
     215,   214,     0,   593,   277,     0,   274,   273,   270,   272,
       0,   593,   593,    37,    34,   593,     0,     0,     0,     0,
     593,   284,     0,   593,     0,     0,   246,    59,   291,    68,
      70,   247,   231,    53,     0,     0,   593,   232,   593,     0,
     316,   170,     0,     0,    50,    49,     0,   238,   236,   482,
     496,   488,   484,   486,   487,   494,     0,   493,   483,   490,
       0,   489,   492,   495,     0,   491,   485,   479,   443,     0,
     524,   523,   228,   217,     0,     0,   439,   438,   278,   267,
     227,   593,     0,     0,   255,   254,   593,   286,     0,     0,
       0,   288,   593,     0,    32,   143,   144,     0,     0,     0,
       0,   133,   134,   593,   142,   132,    61,    63,     0,   593,
       0,     0,   593,     0,     0,   593,   190,   191,     0,   593,
     593,   593,   593,   593,     0,   189,   593,    72,     0,   593,
       0,     8,     0,     0,     0,   593,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    52,   593,   145,     0,     0,
     498,     0,   522,   593,   218,   275,     0,   251,     0,     0,
       0,     0,   256,   593,     0,   289,   593,     0,     0,     0,
     593,     0,   136,   593,   138,   593,     0,   200,   201,     0,
     593,   593,   593,   593,   593,   593,   593,   199,     0,    60,
     593,   579,   575,   578,   581,   582,   160,     0,     0,     0,
     577,     0,   583,     0,     0,     0,   576,     0,     0,     0,
       0,     0,     0,   161,   164,   593,   188,   538,   580,   159,
       0,     0,     0,    54,   593,   239,     0,   593,   196,   192,
     193,   195,   194,    78,   593,    12,   593,   171,   317,   318,
     316,     0,   593,   174,   175,   593,     0,   178,   180,   177,
     173,     0,   152,   148,     0,    98,    99,   100,   101,   102,
     103,   106,   107,   122,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   126,   125,   109,   108,
      95,    97,    96,   104,   105,    93,    94,    90,    91,    92,
      89,     0,     0,    88,   146,   149,   151,   150,     0,     0,
       0,   157,   593,     0,    55,   168,   237,     0,     0,     0,
     279,     0,     0,     0,   260,   584,     0,   259,     0,   258,
       0,     0,     0,   593,   257,   593,     0,     0,     0,     0,
     285,    31,     0,   593,     0,   127,   130,   128,   135,   593,
     206,   202,   203,   205,   204,     0,     0,   593,   140,   166,
      62,   593,     0,    64,     0,     0,   593,     0,   544,   187,
       0,     0,   549,   548,   547,     0,     0,   546,   593,   163,
       0,   593,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   593,     0,
      57,    80,   197,   593,     0,     0,   320,   321,   325,   322,
     329,   323,   324,   326,   327,   328,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   392,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   593,   431,   432,   433,   424,   436,   420,   421,   419,
     426,   427,   415,   416,   417,   418,   425,   423,   430,   428,
     434,   429,   422,   435,   319,     0,     9,     0,     0,   176,
     179,   153,   147,   124,   123,   156,   155,   169,   593,     0,
       0,   481,   480,   593,   276,   586,   266,   585,   265,   264,
     263,   262,   261,   253,   287,     0,    26,     0,     0,   137,
     141,   139,   207,   210,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   167,   444,     0,     0,    66,     0,
       0,   593,   593,     0,   593,     0,     0,     0,   574,    84,
      69,    83,   162,   165,     0,   184,   558,   559,   560,   561,
     562,   563,   566,   567,   573,     0,   555,   556,   557,   564,
     565,   553,   554,   550,   551,   552,   572,   571,     0,     0,
       0,    74,    71,     0,   593,     0,   198,   593,     0,   172,
      10,   181,   593,   182,     0,   154,    56,   219,     0,     0,
       0,     0,   593,     0,     0,     0,     0,   454,   452,   453,
     451,     0,     0,   450,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   208,     0,    65,   543,   593,
     185,     0,     0,   542,     0,   539,    85,     0,   169,     0,
     570,   569,    76,   593,    58,     0,   593,    73,   437,     0,
     593,    27,     0,    28,    30,     0,     0,     0,     0,     0,
       0,   477,   463,   464,   465,   466,   467,   468,   469,   470,
     476,     0,   460,   461,   462,   458,   459,   455,   456,   457,
     475,   474,     0,     0,    67,   186,     0,   545,     0,     0,
     568,   593,     0,   593,    79,   183,   158,     0,   593,   449,
       0,   448,     0,   445,     0,   473,   472,     0,     0,    86,
       0,     0,   593,    81,     0,   209,     0,     0,   471,   541,
     540,    87,   593,    75,     0,     0,     0,    77,    29,   447,
     446
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   450,   451,   107,   358,   108,   109,   221,
     110,   111,   112,   366,   433,   465,   543,   240,   428,   508,
     509,   670,   254,   429,   432,   556,  1013,  1061,   723,   944,
     910,   614,   656,   113,   238,   420,   421,   422,   423,   466,
     858,   532,   533,   668,   623,   364,   566,   567,   534,   444,
     506,   206,    67,   346,   130,   256,    68,    69,   331,    70,
     332,   403,   404,   482,    71,    72,   328,   324,   325,    73,
      74,   114,   412,   486,   115,    75,    76,    77,    78,   448,
     449,   558,   844,   395,   263,   264,   894,   159,    42,   536,
     537,   634,   467,    43,   116
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -656
static const yytype_int16 yypact[] =
{
     351,  -656,  2508,  3720,    19,  2632,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -135,  -103,   -99,   -85,   -60,   -28,
     -13,   -27,  -656,    11,    45,    74,  3926,  -656,    83,    88,
      98,    16,  -656,   105,   111,  2508,  2508,  2508,  2508,  1680,
    2508,  3135,  -656,   109,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  3906,   121,  -656,  -656,  -656,  -656,  4521,  -656,  3527,
    3527,  -656,   306,  -656,  3527,  -656,  -656,   293,  -656,  -656,
    -656,  -656,    42,    20,    24,  -656,  -656,  -656,  -656,  -656,
    -656,  4578,  4578,  -656,  4578,  2516,  4578,    43,  -656,  4528,
     123,   135,   137,  4578,    64,   140,   154,   156,  4578,  4578,
     143,  4421,  4578,    47,  4578,  4578,  -656,  -656,  -656,  -656,
    2725,  -656,  -656,  -656,  -656,  -656,  -656,  2508,  3720,  2508,
    2508,  2508,  2508,  2508,  3720,  2508,  2508,  2508,  -656,   306,
     150,   306,   306,  -656,  2508,  2508,  3720,  3720,  2508,  2508,
     184,   184,   184,   184,  -135,   -99,   -85,   -60,   -28,   -13,
      11,    45,  4414,  1891,  3324,  3709,   111,   164,   -76,  3135,
     184,  2508,  2508,  2508,  2508,  2508,  2508,  2508,  2508,  2508,
    2508,  2508,  2508,  2508,  2508,  2508,  2508,  2508,  2508,  2508,
    2508,  2508,  2003,  2508,  -656,  -656,   293,  2508,  -656,  -656,
    3771,  -656,  3527,  -656,  -656,  -656,  -656,  -656,  -656,   175,
     293,   293,   293,   293,   293,   293,   173,  -656,  -656,  3833,
     222,  -656,    34,  4578,  -656,  -656,  -656,  4578,  -656,  -656,
    -656,  4471,    78,  -656,   379,   381,   389,  -656,  -656,   296,
    -656,  -656,  -656,  -656,  -656,  2508,  2795,  -656,   269,  2857,
    -656,   306,  -656,  -656,  -656,   261,   279,  -656,  3589,   289,
    3782,   306,  -656,   306,   329,   310,  -656,  -656,  -656,  -656,
      20,    24,  -656,   294,   307,  -656,   315,   317,   324,   325,
     331,   340,   352,   345,   349,   355,  -656,  2508,  -656,  -656,
     359,   360,   368,   361,   369,   370,  2508,  2508,  -656,  3219,
     864,  3481,  3481,   738,   738,   532,   532,  -656,  2977,  3340,
    3378,  3393,   738,   738,   215,   215,   184,   184,   184,  -656,
    -656,   -73,  1037,   173,  2922,  -656,   293,   173,   173,   173,
     173,   173,   186,  2508,   306,   371,  -656,  -656,  -656,  -656,
    3833,  -656,   391,  -656,  -656,  -656,   395,   401,   402,   404,
    3974,  -656,   947,  3609,  3589,   329,  -656,  -656,  -656,  -656,
       9,  -656,  -656,  -656,  2508,  3906,   182,  -656,  -656,   388,
    -656,  -656,   306,  1902,  -656,  -656,   244,   100,    34,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,   392,  -656,  -656,  -656,
     387,  -656,  -656,  -656,   393,  -656,  -656,   184,  3135,  2508,
    -656,  -656,  -656,   173,   394,   390,  3135,  -656,   192,  -656,
     409,  4039,   277,   414,   416,  -656,  4104,  -656,   526,   527,
     528,  -656,  -656,   124,  -656,  -656,  -656,   306,  3671,   306,
     413,   423,  -656,   348,  -656,  -656,  -656,  -656,   244,  1133,
     417,   244,  1133,   244,  2956,   182,  -656,  -656,   418,   182,
     182,   182,   182,   182,   217,  -656,  4169,  -656,   405,  -656,
     288,  -656,   411,   425,   430,  2104,  2995,   420,   244,   244,
    2634,   244,   244,   244,   244,  -656,   512,  -656,  3833,  2508,
    -656,  2508,  3135,  1133,  -656,  -656,  2508,  -656,   595,   743,
     792,   386,  -656,  -656,   277,  -656,  -656,   -71,   435,   439,
    4234,    53,   437,   348,   438,  4556,  3609,  -656,  -656,   434,
     348,   348,   348,   348,   348,   348,  -114,  -656,   244,  -656,
     512,  -656,  -656,  -656,  -656,  -656,  -656,   436,  3844,   442,
    -656,  3926,  -656,  1791,   440,   443,  -656,  2508,  2508,  2508,
    1680,  2508,   441,    26,  -656,   348,  3169,  -656,   109,  -656,
     244,   191,   465,  -656,   512,  -656,   226,   182,   415,   415,
     415,   415,   415,  -656,  2508,  -656,  1133,  -656,  1541,  -656,
    -656,   306,  2508,  -656,  -656,  2104,   432,   454,  3135,  -656,
    -656,   244,   284,   284,   567,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,   469,   468,  -656,  -656,   284,   284,   284,   248,   103,
    1902,  -656,  2508,   459,  -656,  -656,   409,    76,    90,   472,
    3046,   306,   433,   306,  -656,  -656,   433,  -656,   433,  -656,
     433,   433,   433,  4299,  -656,  4364,   570,   461,   601,   602,
    -656,  -656,  3720,  -114,  3720,  -656,  -656,  -656,  -656,   348,
     476,   476,   476,   476,   476,   308,   675,  2508,  -656,  -656,
    -656,   512,   497,  -656,  3720,  3906,   348,  3720,   481,  -656,
    3720,  3720,   184,   184,   184,   485,    93,   184,   563,  -656,
    1244,   -58,  2508,  2508,  2508,  2508,  2508,  2508,  2508,  2508,
    2508,  2508,  2508,  2508,  2508,  2508,  2508,  2508,  2508,  2508,
    2508,  2508,  2508,  2205,  2508,   280,   620,   495,   563,   516,
    -656,  -656,   415,  1133,   496,   498,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,   500,  -656,   503,   505,  -656,
    2306,   284,  -656,  -656,  -656,  -656,  -656,  2995,  1133,   501,
     244,  -656,  -656,   563,  -656,  -656,  -656,  -656,  -656,  -656,
    -656,  -656,  -656,  -656,  -656,   507,  -656,   107,   513,  -656,
    -656,  -656,   476,   518,   519,   530,   523,   533,   675,   675,
     675,   675,  1680,   675,  3203,  -656,   531,   552,  -656,   244,
     538,   348,   -58,   554,  2508,   550,   561,  2508,  -656,  -656,
       7,  -656,  -656,  -656,  2508,  -656,  3219,   864,  3481,  3481,
     738,   738,   532,   532,  -656,  3012,  3340,  3378,  3393,   738,
     738,   215,   215,   184,   184,   184,  -656,  -656,   113,  1262,
     555,  -656,     7,   244,  1133,   556,  -656,   563,  1402,  -656,
    -656,  -656,  2104,  3135,   558,  -656,  -656,     7,   572,   683,
     577,   578,  1133,  3720,  3720,  3720,  3720,   204,   204,   204,
     204,   562,   125,   204,   675,   675,   675,   675,   675,   675,
     675,   675,   675,   675,   675,   675,   675,   675,   675,   675,
     675,   675,   675,  2407,  2508,  -656,   244,  -656,  -656,   -58,
    -656,   568,   565,  -656,   573,   184,  -656,   575,  3135,  2508,
    -656,  -656,  -656,  1133,  -656,   585,   563,     7,  -656,   560,
     563,  -656,   587,  -656,  -656,   586,   588,   597,   589,   600,
     675,  -656,  3257,  1915,  3542,  3542,  1995,  1995,   583,   583,
    -656,  3186,  3408,  3423,  3461,   241,   241,   204,   204,   204,
    -656,  -656,   131,  1698,  -656,  -656,  2508,  -656,  2508,    28,
    3135,  1133,   591,   563,     7,  -656,     7,   720,   563,  -656,
     596,  -656,   598,   204,   675,  -656,  -656,   146,   155,  -656,
     593,   604,   563,     7,   608,     7,  2508,  2508,  3203,  -656,
    -656,  -656,   563,     7,   613,   163,   169,     7,  -656,  -656,
    -656
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -656,  -656,  -196,  -656,   174,  -656,  -656,   515,  -656,  -656,
      72,   -97,  -656,  -656,  -656,  -113,  -195,  -656,  -656,  -656,
    -149,  -247,   522,  -656,  -656,  -656,  -656,  -656,  -656,  -656,
    -655,  -656,  -656,   256,  -656,  -656,  -656,   259,   334,  -381,
    -656,  -388,  -656,   110,  -508,  -338,  -559,  -656,  -501,  -144,
    -406,  -132,   -37,   -92,   243,  -147,   -34,   -61,  -656,   -19,
    -656,  -656,  -656,   281,     0,  -656,  -289,  -656,  -656,     1,
     278,  -656,  -656,  -656,  -656,    -6,    -4,  -656,  -656,   206,
    -656,   -54,  -656,  -442,  -110,   -36,   118,   421,  -150,  -656,
    -656,  -374,   149,  -387,    -1
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -270
static const yytype_int16 yytable[] =
{
       6,   117,   672,   158,   237,   157,   848,   427,   666,   267,
     268,   269,   270,   271,   186,   273,   274,   275,   255,    79,
     133,   430,   679,   667,   280,   281,   491,   131,   284,   285,
     195,   196,   340,   118,   195,   196,   719,   119,   195,   196,
     689,   400,   538,   287,   542,   538,   287,   510,   646,   257,
     541,   120,   544,   191,   313,   193,   194,   195,   196,   184,
     198,   185,   288,   942,   914,   390,   207,   647,   317,   318,
     319,   320,   321,   322,   195,   196,   121,   572,   573,   667,
     615,   616,   617,   618,   266,   629,   538,   653,   195,   196,
     272,   258,   347,  1006,   660,   661,   662,   663,   664,   665,
     124,   353,   282,   283,   262,   637,   639,   856,   122,  1007,
     259,   260,   724,   195,   196,   184,   265,   185,   265,   265,
     265,   265,   265,   123,   265,   265,   265,   671,   624,   691,
      10,   241,    11,   265,   265,   401,   538,   265,   265,   406,
     431,   209,   211,   137,   255,   690,   311,   125,   191,   193,
     194,   198,  -252,   214,   215,  -252,   216,   218,   219,   715,
     208,   223,   446,   897,   220,   227,  1079,   380,   725,   538,
     233,   234,   673,   236,   239,   257,   243,   244,   257,   626,
     859,   126,   228,   915,   393,   207,   191,   257,   191,   913,
     851,   651,   436,   437,   438,   287,   335,   426,   439,   207,
     207,   207,   207,   207,   207,   329,   720,   326,   957,   287,
     127,   197,   287,   356,   861,   169,   490,   258,  -269,   134,
     258,   468,   210,   212,   135,   896,   959,     6,   862,   258,
     262,   908,   287,   262,   136,   982,   259,   260,   440,   259,
     260,   138,   262,   229,   287,   960,   169,   139,   259,   260,
     287,  1010,   242,   882,   195,   196,   457,   187,   866,   224,
     458,   230,   868,  1031,   869,   287,   870,   871,   872,  1075,
     902,   225,   982,   226,   287,   231,   265,   232,   276,   235,
     278,   279,   287,   257,  1089,   223,   277,   643,   287,   333,
     645,   546,  1017,  1090,   441,   548,   549,   550,   551,   552,
     459,  1099,   286,   538,   132,   199,   316,  1100,   442,   200,
     323,   475,   716,   443,   476,   207,   195,   196,   435,   181,
     182,   183,   397,   323,   394,   258,   329,   621,   622,   717,
       6,   405,   460,   898,     6,   945,   538,   424,   262,   992,
     993,   994,   425,   330,   259,   260,   178,   179,   180,   201,
     181,   182,   183,   553,   554,   445,   461,     6,   497,   498,
     499,  1064,   721,   554,   500,  1066,   478,   479,   480,   716,
     462,   336,   989,   990,   991,   463,   992,   993,   994,   -82,
     464,   -82,   -82,   -82,   621,   622,   855,   481,   261,   337,
     348,   338,   535,  1019,  1000,   535,   343,   349,   655,   339,
     357,   716,   359,   722,   501,   202,   560,   561,  1083,   367,
     368,     6,   424,  1085,   341,   350,   621,   622,   940,   203,
     621,   622,   507,    41,   204,   354,   287,  1093,   539,   205,
     365,   539,   369,   627,   445,   628,   535,  1097,   445,   445,
     445,   445,   445,   195,   196,   667,   883,   360,   559,   361,
     362,   363,   847,   370,   569,   371,   140,   141,   142,   143,
     502,   160,   372,   373,   329,   625,     1,     2,     3,   374,
     954,   538,   539,   398,   503,   640,   641,   642,   375,   504,
     376,   676,     6,   377,   505,     6,   535,   378,    50,   384,
     424,  1055,   507,   379,   686,   999,   685,   381,   382,   507,
     507,   507,   507,   507,   507,   669,   383,   385,   386,   625,
     399,   452,   402,   407,   261,   133,   895,   261,   510,   535,
     408,   409,   131,   410,   447,   470,   261,  -268,   469,   471,
     473,   474,   483,    61,   507,   484,   487,   488,   489,   631,
      63,   495,   496,   625,   557,   563,   445,   562,   540,   547,
     564,   571,   554,   397,   648,   539,  1015,   538,   649,   652,
     654,   265,   544,   169,   569,   659,   492,   236,   494,   677,
     681,   849,   674,   850,  1025,   538,   680,   852,   860,   688,
     875,   876,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   718,   312,   195,   196,   853,   314,   854,
     863,   877,   878,   667,   982,   671,   899,   904,   879,   909,
     881,   397,   261,   907,   856,  1062,   538,   635,   635,   635,
     360,   941,   361,   619,   620,   943,   947,   946,   901,   949,
     900,   950,   955,   903,   951,   958,   905,   906,   621,   622,
      50,   961,   669,   535,   962,   963,   342,   964,   507,   965,
     966,   176,   177,   178,   179,   180,   397,   181,   182,   183,
     625,   996,   995,  1081,   538,   507,   998,   938,     7,     8,
       9,    10,  1001,    11,    12,    13,   535,   911,  1003,  1004,
     625,  1012,  1021,  1022,  1016,    61,  1020,  1023,  1024,  1065,
    1030,   631,    63,  1057,  1056,   632,  1067,   387,   388,  1058,
     452,  1059,   987,   988,   989,   990,   991,   911,   992,   993,
     994,   884,   539,  1063,  1068,  1070,  1069,  1071,  1072,  1082,
    1084,  1091,  1086,  1098,  1087,   846,   334,   885,   895,   895,
     895,   895,  1092,   895,   396,    22,  1094,   956,  1014,  1054,
     997,   657,   493,   195,   196,   658,   633,   633,   633,   167,
     168,   345,    27,   880,   678,   644,   845,   948,   452,   169,
       0,   886,     0,     0,   887,   434,     0,     0,    32,     0,
     865,   635,   867,     0,   456,   635,     0,   635,     0,   635,
     635,   635,     0,     0,  1002,     0,     0,     0,    50,   132,
       0,   888,   195,   196,     0,   889,   890,     0,     0,   891,
     472,   892,     0,     0,     0,   893,     0,     0,     0,     0,
     559,   535,     0,     0,   895,   895,   895,   895,   895,   895,
     895,   895,   895,   895,   895,   895,   895,   895,   895,   895,
     895,   895,   895,    61,     0,     0,     0,    50,     0,   631,
      63,     0,     0,   636,     0,     0,   972,   539,   971,     0,
       0,     0,   911,     0,     0,     0,     0,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   568,     0,     0,     0,
     895,   163,   164,   165,   166,   167,   168,     0,     0,     0,
       0,     0,    61,     0,     0,   169,     0,   630,   631,    63,
     507,   625,   638,   265,     0,     0,     0,   535,     0,     0,
     633,     0,     0,     0,   633,     0,   633,     0,   633,   633,
     633,     0,     0,     0,   895,   535,     0,     0,     0,  1026,
    1027,  1028,  1029,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   539,     0,     0,   911,     0,   682,   683,
     684,   569,   687,     0,     0,     0,     0,  1052,     0,     0,
       0,   539,   161,   162,   163,   164,   165,   166,   167,   168,
       0,     0,     0,     0,     0,   396,   535,     0,   169,     0,
       0,     0,     0,     0,     0,     0,   568,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   625,   181,
     182,   183,     0,     0,     0,     0,   967,   968,   969,   970,
       0,   973,   539,     0,     0,   911,     0,     0,     0,   911,
    1077,     0,  1078,     0,   535,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   857,     0,   396,     0,     0,     0,     0,     0,     0,
    1095,  1096,   161,   162,   163,   164,   165,   166,   167,   168,
     539,     0,   911,     0,     0,     0,   413,   911,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   911,   181,   182,   183,   414,     0,     0,   396,     0,
       0,   911,  1032,  1033,  1034,  1035,  1036,  1037,  1038,  1039,
    1040,  1041,  1042,  1043,  1044,  1045,  1046,  1047,  1048,  1049,
    1050,     0,     0,   916,   917,   918,   919,   920,   921,   922,
     923,   924,   925,   926,   927,   928,   929,   930,   931,   932,
     933,   934,   935,   936,     0,   939,   511,   512,   513,    10,
       0,    11,   514,   515,    44,     0,     0,   516,  1073,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,     0,     0,     0,   391,   517,
      45,     0,     0,    46,     0,    47,    48,    49,    50,   518,
       0,    52,  1088,     0,    53,   519,     0,     0,    54,     0,
       0,     0,     0,   520,    55,     0,     0,     0,  1080,     0,
      56,    57,    58,     0,     0,     0,     0,     0,   521,     0,
     522,     0,     0,     0,     0,   523,     0,    59,    60,   524,
       0,     0,   525,    61,     0,     0,   526,     0,     0,    62,
      63,    64,     0,     0,    65,     0,    66,   511,   512,   513,
      10,     0,    11,   514,   515,    44,     0,     0,   912,   527,
       0,     0,     0,   528,     0,     0,     0,   529,     0,   530,
       0,   953,     0,   531,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,     0,     0,     0,     0,     0,
     517,    45,     0,   169,    46,     0,    47,    48,    49,    50,
     518,     0,    52,     0,     0,    53,   519,     0,     0,    54,
       0,     0,     0,     0,   520,    55,     0,     0,     0,     0,
       0,    56,    57,    58,     0,     0,     0,     0,  1005,   521,
       0,   522,     0,     0,     0,  1008,   523,     0,    59,    60,
     524,     0,     0,   525,    61,     0,     0,   526,     0,     0,
      62,    63,    64,     0,     0,    65,     0,    66,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     527,     0,     0,   568,   528,     0,     0,     0,   529,     0,
     530,     0,     0,     0,   531,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,   183,
       0,     0,     0,  1011,     0,   726,   727,   728,   729,   730,
     731,   732,   733,   734,   735,  1053,   736,   737,   738,   739,
     740,   741,   742,   743,   744,   745,   746,     0,     0,     0,
    1060,     0,     0,   747,   748,   749,   750,   751,   752,   753,
     754,   755,   756,   757,   758,   759,   760,   761,   762,   763,
       0,     0,   764,   765,   766,   767,   768,   769,   770,   771,
     772,   773,   774,   775,   776,   777,     0,   778,     0,   779,
     780,   781,   782,   783,   784,   785,   786,   787,   788,   789,
     790,     0,     0,     0,     0,   791,   792,   793,     0,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,     0,   808,   809,   810,   811,   812,   813,
     814,   815,   816,   817,   818,   819,   820,     0,     0,     0,
     821,   822,   823,   824,   825,   826,   827,   828,   829,   830,
     831,   832,   833,   834,   835,   836,   837,   838,   839,   840,
     841,  1018,   842,   843,   726,   727,   728,   729,   730,   731,
     732,   733,   734,   735,     0,   736,   737,   738,   739,   740,
     741,   742,   743,   744,   745,   746,     0,     0,     0,     0,
       0,     0,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,     0,
       0,   764,   765,   766,   767,   768,   769,   770,   771,   772,
     773,   774,   775,   776,   777,     0,   778,     0,   779,   780,
     781,   782,   783,   784,   785,   786,   787,   788,   789,   790,
       0,     0,     0,     0,   791,   792,   793,     0,   794,   795,
     796,   797,   798,   799,   800,   801,   802,   803,   804,   805,
     806,   807,     0,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,     0,     0,     0,   821,
     822,   823,   824,   825,   826,   827,   828,   829,   830,   831,
     832,   833,   834,   835,   836,   837,   838,   839,   840,   841,
       0,   842,   843,     7,     8,     9,    10,     0,    11,    12,
      13,   144,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,     0,     0,     0,     0,     0,    15,    45,     0,   169,
     145,     0,   146,   147,   148,    50,    51,     0,    52,     0,
       0,   149,    21,     0,     0,    54,     0,     0,     0,     0,
      22,   150,     0,     0,     0,     0,     0,   151,   152,    58,
       0,     0,     0,     0,     0,    26,     0,    27,     0,     0,
       0,     0,     0,     0,   153,   154,    30,     0,     0,    31,
      61,     0,     0,    32,     0,     0,    62,    63,   155,     0,
       0,    65,     0,   156,   511,   512,   513,    10,     0,    11,
     514,   515,    44,     0,     0,     0,    35,     0,     0,     0,
      36,    37,     0,     0,    38,     0,    39,     0,     0,     0,
      40,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,     0,   517,    45,  1076,
       0,    46,     0,    47,    48,    49,    50,   518,     0,    52,
       0,     0,    53,   519,     0,     0,    54,     0,     0,     0,
       0,   520,    55,     0,     0,     0,     0,     0,    56,    57,
      58,     0,     0,     0,     0,     0,   521,     0,   522,     0,
       0,     0,     0,   523,     0,    59,    60,   524,     0,     0,
     525,    61,     0,     0,   526,     0,     0,    62,    63,    64,
       0,     0,    65,     0,    66,     7,     8,     9,    10,     0,
      11,    12,    13,    14,     0,     0,     0,   527,     0,     0,
       0,   528,     0,     0,     0,   529,     0,   530,     0,     0,
       0,   531,   976,   977,   978,   979,   980,   981,     0,     0,
       0,    46,     0,    47,    48,    49,   982,     0,    15,     0,
       0,     0,    16,     0,    17,    18,    19,     0,     0,     0,
       0,   453,   454,    20,    21,     0,     0,     0,    56,   192,
      58,     0,    22,    23,     0,     0,     0,     0,     0,    24,
      25,     0,     0,     0,     0,    59,    60,    26,     0,    27,
       0,     0,     0,     0,     0,     0,    28,    29,    30,    64,
       0,    31,     0,     0,    66,    32,     7,     8,     9,    10,
      33,    11,    12,    13,    14,    34,   980,   981,     0,     0,
     455,     0,     0,     0,     0,     0,   982,   134,    35,     0,
       0,     0,    36,    37,     0,     0,    38,     0,    39,   984,
     985,   986,    40,     0,   987,   988,   989,   990,   991,    15,
     992,   993,   994,    16,     0,    17,    18,    19,     0,     0,
       0,     0,     0,     0,    20,    21,     0,     0,     0,     0,
       0,     0,     0,    22,    23,     0,     0,     0,     0,     0,
      24,    25,     0,     0,     0,     0,     0,     0,    26,     0,
      27,     0,     0,     0,     0,     0,     0,    28,    29,    30,
       0,     0,    31,     0,     0,     0,    32,     7,     8,     9,
      10,    33,    11,    12,    13,    14,    34,     0,     0,     0,
       0,     0,     0,     0,   987,   988,   989,   990,   991,    35,
     992,   993,   994,    36,    37,     0,     0,    38,     0,    39,
       0,   310,     0,    40,     0,     0,     0,     0,     0,     0,
      15,     0,     0,     0,    16,     0,    17,    18,    19,     0,
       0,     0,     0,     0,     0,    20,    21,     0,     0,     0,
       0,     0,     0,     0,    22,    23,     0,     0,     0,     0,
       0,    24,    25,     0,     0,     0,     0,     0,     0,    26,
       0,    27,     0,     0,     0,     0,     0,     0,    28,    29,
      30,     0,     0,    31,     0,     0,     0,    32,     7,     8,
       9,    10,    33,    11,    12,    13,    14,    34,     0,     0,
       0,     0,   565,     0,     0,     0,     0,     0,     0,     0,
      35,     0,     0,     0,    36,    37,     0,     0,    38,     0,
      39,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,    15,     0,     0,     0,    16,     0,    17,    18,    19,
       0,     0,     0,     0,     0,     0,    20,    21,     0,     0,
       0,     0,     0,     0,     0,    22,    23,     0,     0,     0,
       0,     0,    24,    25,     0,     0,     0,     0,     0,     0,
      26,     0,    27,     0,     0,     0,     0,     0,     0,    28,
      29,    30,     0,     0,    31,     0,     0,     0,    32,     7,
       8,     9,    10,    33,    11,    12,    13,    14,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    35,     0,     0,     0,    36,    37,     0,     0,    38,
       0,    39,     0,   937,     0,    40,     0,     0,     0,     0,
       0,     0,    15,     0,     0,     0,    16,     0,    17,    18,
      19,     0,     0,     0,     0,     0,     0,    20,    21,     0,
       0,     0,     0,     0,     0,     0,    22,    23,     0,     0,
       0,     0,     0,    24,    25,     0,     0,     0,     0,     0,
       0,    26,     0,    27,     0,     0,     0,     0,     0,     0,
      28,    29,    30,     0,     0,    31,     0,     0,     0,    32,
       7,     8,     9,    10,    33,    11,    12,    13,    14,    34,
       0,     0,     0,     0,   952,     0,     0,     0,     0,     0,
       0,     0,    35,     0,     0,     0,    36,    37,     0,     0,
      38,     0,    39,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,    15,     0,     0,     0,    16,     0,    17,
      18,    19,     0,     0,     0,     0,     0,     0,    20,    21,
       0,     0,     0,     0,     0,     0,     0,    22,    23,     0,
       0,     0,     0,     0,    24,    25,     0,     0,     0,     0,
       0,     0,    26,     0,    27,     0,     0,     0,     0,     0,
       0,    28,    29,    30,     0,     0,    31,     0,     0,     0,
      32,     7,     8,     9,    10,    33,    11,    12,    13,    14,
      34,     0,   217,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,    36,    37,     0,
       0,    38,     0,    39,     0,  1051,     0,    40,     0,     0,
       0,     0,     0,     0,    15,     0,     0,     0,    16,     0,
      17,    18,    19,     0,     0,    81,     0,     0,     0,    20,
      21,     0,     0,    82,     0,     0,     0,     0,    22,    23,
       0,     0,    84,    85,    86,    24,    25,     0,     0,     0,
       0,     0,   213,    26,     0,    27,     0,     0,     0,    93,
       0,     0,    28,    29,    30,     0,     0,    31,    98,     0,
       0,    32,     0,    99,     0,     0,    33,     0,     0,     0,
       0,    34,     0,     0,     0,     0,   104,     0,   105,     0,
       0,     0,    -2,     0,    35,     0,     0,     0,    36,    37,
     574,     0,    38,     0,    39,     0,     0,     0,    40,   575,
     576,   577,   578,   579,   580,   581,   582,     0,     0,     0,
       0,     0,     0,     0,     0,   583,     0,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   594,   595,     0,
      80,    81,     0,     0,     0,     0,     0,     0,     0,    82,
       0,     0,     0,     0,   596,     0,    83,     0,    84,    85,
      86,    87,     0,     0,    88,     0,     0,     0,    89,     0,
       0,     0,    90,    91,    92,    93,    94,     0,     0,   597,
       0,    95,    96,    97,    98,     0,     0,     0,     0,    99,
     100,     0,     0,   101,     0,   245,   246,   102,     0,     0,
       0,   103,   104,     0,   105,     0,     0,     0,     0,     0,
       0,     0,   106,   598,     0,     0,   599,     0,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,     0,
     611,   612,   247,     0,   613,    46,     0,    47,    48,    49,
      50,   248,     0,   249,     0,     0,    53,     0,     0,     0,
      54,     0,     0,     0,     0,     0,    55,     0,     0,     0,
       0,     0,    56,    57,    58,   245,   246,     0,     0,     0,
       0,     0,     0,   250,     0,     0,     0,     0,     0,    59,
      60,     0,     0,     0,     0,    61,     0,     0,     0,     0,
       0,   251,    63,    64,     0,     0,    65,     0,    66,     0,
       0,     0,   247,   252,     0,    46,     0,    47,    48,    49,
      50,   248,     0,   249,     0,     0,    53,     0,     0,   253,
      54,     0,     0,     0,     0,     0,    55,   245,   246,     0,
       0,     0,    56,    57,    58,     0,     0,     0,     0,     0,
       0,     0,     0,   250,     0,     0,     0,     0,     0,    59,
      60,     0,     0,     0,     0,    61,     0,     0,     0,     0,
       0,   251,    63,    64,   247,     0,    65,    46,    66,    47,
      48,    49,    50,   344,     0,   249,     0,     0,    53,     0,
       0,     0,    54,     0,     0,     0,     0,     0,    55,   253,
       0,     0,     0,     0,    56,    57,    58,   161,   162,   163,
     164,   165,   166,   167,   168,   250,     0,     0,     0,     0,
       0,    59,    60,   169,     0,     0,     0,    61,     0,     0,
       0,     0,     0,   251,    63,    64,     0,     0,    65,     0,
      66,   161,   162,   163,   164,   165,   166,   167,   168,     0,
       0,     0,     0,     0,     0,     0,     0,   169,     0,     0,
       0,   253,   161,   162,   163,   164,   165,   166,   167,   168,
       0,     0,     0,     0,     0,     0,     0,     0,   169,     0,
     161,   162,   163,   164,   165,   166,   167,   168,     0,     0,
       0,     0,     0,     0,     0,     0,   169,   161,   162,   163,
     164,   165,   166,   167,   168,     0,     0,     0,     0,     0,
       0,     0,     0,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,   183,
     392,   161,   162,   163,   164,   165,   166,   167,   168,     0,
       0,     0,     0,     0,     0,     0,     0,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,   183,   545,     0,     0,     0,   389,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,   570,     0,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,   183,  1009,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,   183,
     161,   162,   163,   164,   165,   166,   167,   168,     0,     0,
       0,     0,     0,     0,     0,   864,   169,     0,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,   183,   692,   693,   694,   695,   696,   697,
     698,   699,     0,     0,     0,     0,     0,     0,     0,     0,
     700,   974,   975,   976,   977,   978,   979,   980,   981,     0,
       0,     0,     0,     0,     0,     0,     0,   982,   974,   975,
     976,   977,   978,   979,   980,   981,     0,     0,     0,     0,
       0,     0,     0,     0,   982,   162,   163,   164,   165,   166,
     167,   168,     0,     0,     0,     0,     0,     0,     0,     0,
     169,     0,     0,     0,     0,     0,     0,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,   183,   975,   976,   977,   978,   979,   980,   981,
       0,     0,     0,     0,     0,     0,     0,     0,   982,     0,
       0,     0,   701,   702,   703,   704,   705,   706,   707,   708,
     709,   710,   711,     0,   712,   713,   714,  1074,     0,   983,
     984,   985,   986,     0,     0,   987,   988,   989,   990,   991,
       0,   992,   993,   994,     0,     0,   983,   984,   985,   986,
       0,     0,   987,   988,   989,   990,   991,     0,   992,   993,
     994,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,   183,   163,   164,   165,
     166,   167,   168,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,     0,    46,     0,    47,    48,    49,     0,
       0,   984,   985,   986,     0,     0,   987,   988,   989,   990,
     991,     0,   992,   993,   994,   163,   164,   165,   166,   167,
     168,    56,   192,    58,     0,     0,     0,     0,     0,   169,
     163,   164,   165,   166,   167,   168,     0,     0,    59,    60,
       0,     0,     0,     0,   169,   976,   977,   978,   979,   980,
     981,     0,    64,     0,     0,     0,     0,    66,     0,   982,
     976,   977,   978,   979,   980,   981,     0,     0,     0,     0,
       0,     0,     0,     0,   982,     0,     0,     0,     0,     0,
     135,     0,     0,     0,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,   183,   976,   977,
     978,   979,   980,   981,     0,     0,     0,     0,     0,     0,
       0,     0,   982,     0,     0,     0,     0,     0,     0,     0,
     165,   166,   167,   168,   173,   174,   175,   176,   177,   178,
     179,   180,   169,   181,   182,   183,     0,     0,     0,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
     183,     0,     0,   985,   986,     0,     0,   987,   988,   989,
     990,   991,     0,   992,   993,   994,     0,     0,     0,   986,
       0,     0,   987,   988,   989,   990,   991,     0,   992,   993,
     994,   978,   979,   980,   981,     0,     0,     0,     0,     0,
       0,     0,     0,   982,     0,     0,     0,    46,     0,    47,
      48,    49,     0,     0,     0,     0,     0,     0,     0,     0,
     987,   988,   989,   990,   991,     0,   992,   993,   994,   351,
     352,     0,     0,     0,    56,   192,    58,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   415,
     416,    59,    60,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    64,   247,     0,     0,    46,
      66,    47,    48,    49,    50,     0,     0,   249,     0,     0,
      53,     0,     0,     0,    54,     0,     0,     0,     0,    46,
      55,    47,    48,    49,   417,   418,    56,    57,    58,     0,
      53,   987,   988,   989,   990,   991,     0,   992,   993,   994,
      55,   415,   416,    59,    60,     0,    56,    57,    58,    61,
       0,     0,     0,     0,     0,   251,    63,    64,     0,     0,
      65,     0,    66,    59,    60,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   419,     0,    64,     0,     0,
      65,    46,    66,    47,    48,    49,     0,     0,     0,     0,
       0,    44,    53,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    55,     0,     0,     0,     0,     0,    56,    57,
      58,     0,     0,     0,     0,     0,     0,     0,     0,    46,
       0,    47,    48,    49,     0,    59,    60,    45,     0,     0,
      46,     0,    47,    48,    49,    50,    51,     0,    52,    64,
       0,    53,    65,     0,    66,    54,    56,   192,    58,     0,
       0,    55,     0,    44,     0,     0,     0,    56,    57,    58,
       0,     0,     0,    59,    60,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    59,    60,     0,    64,     0,     0,
      61,    46,    66,    47,    48,    49,    62,    63,    64,    45,
       0,    65,    46,    66,    47,    48,    49,    50,   355,     0,
      52,     0,   315,    53,   327,   138,     0,    54,    56,   192,
      58,     0,     0,    55,     0,    44,     0,     0,     0,    56,
      57,    58,     0,     0,     0,    59,    60,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    59,    60,     0,    64,
       0,     0,    61,    46,    66,    47,    48,    49,    62,    63,
      64,    45,     0,    65,    46,    66,    47,    48,    49,    50,
       0,     0,    52,     0,     0,    53,     0,     0,     0,    54,
      56,   192,    58,     0,     0,    55,     0,    44,     0,     0,
       0,    56,    57,    58,     0,     0,     0,    59,    60,     0,
       0,     0,     0,     0,     0,     0,   675,   128,    59,    60,
       0,    64,     0,     0,    61,     0,    66,     0,     0,     0,
      62,    63,    64,    45,     0,    65,    46,    66,    47,    48,
      49,    50,     0,     0,    52,     0,     0,    53,     0,     0,
       0,    54,     0,     0,     0,     0,    46,    55,    47,    48,
      49,    50,     0,    56,    57,    58,     0,    53,     0,     0,
       0,    54,     0,     0,     0,     0,     0,    55,     0,     0,
      59,    60,     0,    56,    57,    58,    61,     0,     0,     0,
       0,     0,    62,    63,    64,     0,     0,    65,     0,    66,
      59,    60,    80,    81,     0,     0,    61,     0,     0,     0,
       0,    82,   129,    63,    64,     0,     0,    65,    83,    66,
      84,    85,    86,    87,     0,     0,    88,     0,     0,     0,
      89,     0,     0,     0,    90,    91,    92,    93,    94,     0,
       0,     0,     0,    95,    96,    97,    98,     0,     0,     0,
       0,    99,   100,     0,     0,   101,     0,     0,     0,   102,
       0,     0,     0,   103,   104,     0,   105,    80,    81,     0,
       0,     0,     0,     0,   106,     0,    82,     0,     0,     0,
       0,     0,     0,    83,     0,    84,    85,    86,    87,     0,
       0,    88,     0,   411,     0,    89,     0,     0,     0,    90,
      91,    92,    93,    94,     0,     0,     0,     0,    95,    96,
      97,    98,     0,     0,     0,     0,    99,   100,     0,     0,
     101,     0,     0,     0,   102,     0,     0,     0,   103,   104,
       0,   105,    80,    81,     0,     0,     0,     0,     0,   106,
       0,    82,     0,     0,     0,     0,     0,     0,    83,     0,
      84,    85,    86,    87,     0,     0,    88,     0,   477,     0,
      89,     0,     0,     0,    90,    91,    92,    93,    94,     0,
       0,     0,     0,    95,    96,    97,    98,     0,     0,     0,
       0,    99,   100,     0,     0,   101,     0,     0,     0,   102,
       0,     0,     0,   103,   104,     0,   105,    80,    81,     0,
       0,     0,     0,     0,   106,     0,    82,     0,     0,     0,
       0,     0,     0,    83,     0,    84,    85,    86,    87,     0,
       0,    88,     0,   485,     0,    89,     0,     0,     0,    90,
      91,    92,    93,    94,     0,     0,     0,     0,    95,    96,
      97,    98,     0,     0,     0,     0,    99,   100,     0,     0,
     101,     0,     0,     0,   102,     0,     0,     0,   103,   104,
       0,   105,    80,    81,     0,     0,     0,     0,     0,   106,
       0,    82,     0,     0,     0,     0,     0,     0,    83,     0,
      84,    85,    86,    87,     0,     0,    88,     0,   555,     0,
      89,     0,     0,     0,    90,    91,    92,    93,    94,     0,
       0,     0,     0,    95,    96,    97,    98,     0,     0,     0,
       0,    99,   100,     0,     0,   101,     0,     0,     0,   102,
       0,     0,     0,   103,   104,     0,   105,    80,    81,     0,
       0,     0,     0,     0,   106,     0,    82,     0,     0,     0,
       0,     0,     0,    83,     0,    84,    85,    86,    87,     0,
       0,    88,     0,   650,     0,    89,     0,     0,     0,    90,
      91,    92,    93,    94,     0,     0,     0,     0,    95,    96,
      97,    98,     0,     0,     0,     0,    99,   100,     0,     0,
     101,     0,     0,     0,   102,     0,     0,     0,   103,   104,
       0,   105,    80,    81,     0,     0,     0,     0,     0,   106,
       0,    82,     0,     0,     0,     0,     0,     0,    83,     0,
      84,    85,    86,    87,     0,     0,    88,     0,   873,     0,
      89,     0,     0,     0,    90,    91,    92,    93,    94,     0,
       0,     0,     0,    95,    96,    97,    98,     0,     0,     0,
       0,    99,   100,     0,    46,   101,    47,    48,    49,   102,
      81,     0,     0,   103,   104,   188,   105,     0,    82,     0,
       0,     0,     0,     0,   106,   189,     0,    84,    85,    86,
       0,    56,   190,    58,     0,     0,     0,   213,     0,     0,
       0,     0,     0,   874,    93,     0,     0,     0,    59,    60,
       0,     0,     0,    98,     0,     0,     0,     0,    99,    80,
      81,     0,    64,     0,     0,     0,     0,    66,    82,     0,
       0,   104,     0,   105,     0,    83,     0,    84,    85,    86,
      87,     0,     0,    88,     0,     0,     0,    89,  -129,     0,
     127,    90,    91,    92,    93,    94,     0,     0,     0,     0,
      95,    96,    97,    98,     0,     0,     0,     0,    99,   100,
       0,    46,   101,    47,    48,    49,   102,    81,     0,     0,
     103,   104,   188,   105,     0,    82,     0,     0,     0,     0,
       0,     0,   189,     0,    84,    85,    86,     0,    56,   190,
      58,     0,     0,     0,   213,    81,     0,     0,     0,     0,
       0,    93,   222,    82,     0,    59,    60,     0,     0,     0,
      98,     0,    84,    85,    86,    99,     0,    81,     0,    64,
       0,     0,   213,     0,    66,    82,     0,     0,   104,    93,
     105,     0,     0,     0,    84,    85,    86,     0,    98,     0,
       0,     0,     0,    99,   213,     0,     0,   101,     0,     0,
       0,    93,     0,     0,     0,     0,   104,     0,   105,     0,
      98,     0,     0,     0,     0,    99,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   104,     0,
     105
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-656)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       1,   136,   510,    39,   101,    39,   565,   345,   122,   119,
     120,   121,   122,   123,    51,   125,   126,   127,   110,     0,
      26,    12,   523,   137,   134,   135,   413,    26,   138,   139,
      10,    11,   228,   136,    10,    11,   544,   136,    10,    11,
      14,   330,   429,   119,   432,   432,   119,   428,   119,   110,
     431,   136,   433,    57,   186,    59,    60,    10,    11,     6,
      64,     8,   138,   718,   122,   138,    67,   138,   200,   201,
     202,   203,   204,   205,    10,    11,   136,   458,   459,   137,
     461,   462,   463,   464,   118,   473,   473,   493,    10,    11,
     124,   110,   239,    86,   500,   501,   502,   503,   504,   505,
     127,   248,   136,   137,   110,   479,   480,     4,   136,   102,
     110,   110,   554,    10,    11,     6,   117,     8,   119,   120,
     121,   122,   123,   136,   125,   126,   127,   508,   466,   535,
       6,    84,     8,   134,   135,   331,   523,   138,   139,   335,
     131,   121,   118,   127,   236,   119,   182,   136,   152,   153,
     154,   155,   118,    81,    82,   121,    84,    85,    86,   540,
     118,    89,   358,   671,   121,    93,   138,   277,   556,   556,
      98,    99,   510,   101,   102,   236,   104,   105,   239,   468,
     622,   136,   118,   691,   316,   186,   190,   248,   192,   690,
     571,   138,    10,    11,    12,   119,   118,   344,    16,   200,
     201,   202,   203,   204,   205,   209,   544,   208,   863,   119,
     136,    62,   119,   250,   138,    31,   412,   236,   118,   136,
     239,   121,    73,    74,   136,   667,   119,   228,   138,   248,
     236,   138,   119,   239,   136,    31,   236,   236,    56,   239,
     239,   136,   248,    94,   119,   138,    31,   136,   248,   248,
     119,   138,   103,   659,    10,    11,    12,   136,   632,   136,
      16,   121,   636,   138,   638,   119,   640,   641,   642,   138,
     676,   136,    31,   136,   119,   121,   277,   121,   129,   136,
     131,   132,   119,   344,   138,   213,   136,   483,   119,   217,
     486,   435,   947,   138,   112,   439,   440,   441,   442,   443,
      56,   138,   138,   690,    26,    12,   131,   138,   126,    16,
     137,   119,   121,   131,   122,   316,    10,    11,   355,   135,
     136,   137,   323,   137,   138,   344,   330,   136,   137,   138,
     331,   332,    88,   671,   335,   723,   723,   343,   344,   135,
     136,   137,   343,   121,   344,   344,   131,   132,   133,    56,
     135,   136,   137,   136,   137,   356,   112,   358,    10,    11,
      12,  1016,   136,   137,    16,  1020,    89,    90,    91,   121,
     126,   222,   131,   132,   133,   131,   135,   136,   137,   118,
     136,   120,   121,   122,   136,   137,   138,   110,   110,    10,
     241,    10,   429,   952,   902,   432,   127,   136,   495,    10,
     251,   121,   253,   547,    56,   112,   118,   119,  1063,   260,
     261,   412,   418,  1068,   118,   136,   136,   137,   138,   126,
     136,   137,   423,     2,   131,   136,   119,  1082,   429,   136,
     120,   432,   138,   469,   435,   471,   473,  1092,   439,   440,
     441,   442,   443,    10,    11,   137,   138,   118,   449,   120,
     121,   122,   562,   138,   455,   138,    35,    36,    37,    38,
     112,    40,   138,   138,   468,   466,   115,   116,   117,   138,
     858,   858,   473,   324,   126,    89,    90,    91,   138,   131,
     128,   518,   483,   138,   136,   486,   523,   138,    55,   128,
     496,   999,   493,   138,   530,   901,   530,   138,   138,   500,
     501,   502,   503,   504,   505,   506,   138,   138,   138,   510,
     139,   362,   121,   118,   236,   521,   666,   239,   899,   556,
     119,   119,   521,   119,   136,   138,   248,   118,   136,   136,
     136,   141,   118,   100,   535,   119,    10,    10,    10,   106,
     107,   128,   119,   544,   139,   120,   547,   136,   131,   131,
     120,   131,   137,   554,   119,   556,   944,   944,   119,   122,
     122,   562,   943,    31,   565,   131,   417,   495,   419,   127,
     127,   139,   136,   119,   962,   962,   136,    10,   119,   138,
      10,   120,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   138,   183,    10,    11,   138,   187,   141,
     138,    10,    10,   137,    31,   996,   119,   136,   652,    56,
     654,   622,   344,   138,     4,  1013,  1013,   478,   479,   480,
     118,   136,   120,   121,   122,   119,   138,   141,   675,   139,
     674,   138,   141,   677,   139,   138,   680,   681,   136,   137,
      55,   138,   653,   690,   136,   136,   235,   127,   659,   136,
     127,   129,   130,   131,   132,   133,   667,   135,   136,   137,
     671,   119,   141,  1061,  1061,   676,   138,   713,     3,     4,
       5,     6,   128,     8,     9,    10,   723,   688,   138,   128,
     691,   136,   120,    10,   138,   100,   138,   120,   120,   139,
     138,   106,   107,   138,   136,   110,   119,   286,   287,   136,
     561,   136,   129,   130,   131,   132,   133,   718,   135,   136,
     137,    46,   723,   138,   138,   128,   138,   138,   128,   138,
      10,   138,   136,   120,   136,   561,   221,    62,   888,   889,
     890,   891,   138,   893,   323,    70,   138,   860,   943,   996,
     899,   495,   418,    10,    11,   496,   478,   479,   480,    21,
      22,   239,    87,   653,   521,   484,   560,   821,   619,    31,
      -1,    96,    -1,    -1,    99,   354,    -1,    -1,   103,    -1,
     631,   632,   633,    -1,   363,   636,    -1,   638,    -1,   640,
     641,   642,    -1,    -1,   904,    -1,    -1,    -1,    55,   521,
      -1,   126,    10,    11,    -1,   130,   131,    -1,    -1,   134,
     389,   136,    -1,    -1,    -1,   140,    -1,    -1,    -1,    -1,
     821,   858,    -1,    -1,   974,   975,   976,   977,   978,   979,
     980,   981,   982,   983,   984,   985,   986,   987,   988,   989,
     990,   991,   992,   100,    -1,    -1,    -1,    55,    -1,   106,
     107,    -1,    -1,   110,    -1,    -1,   892,   858,   892,    -1,
      -1,    -1,   863,    -1,    -1,    -1,    -1,   129,   130,   131,
     132,   133,    -1,   135,   136,   137,   455,    -1,    -1,    -1,
    1030,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    31,    -1,   476,   106,   107,
     901,   902,   110,   904,    -1,    -1,    -1,   944,    -1,    -1,
     632,    -1,    -1,    -1,   636,    -1,   638,    -1,   640,   641,
     642,    -1,    -1,    -1,  1074,   962,    -1,    -1,    -1,   963,
     964,   965,   966,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   944,    -1,    -1,   947,    -1,   527,   528,
     529,   952,   531,    -1,    -1,    -1,    -1,   993,    -1,    -1,
      -1,   962,    15,    16,    17,    18,    19,    20,    21,    22,
      -1,    -1,    -1,    -1,    -1,   554,  1013,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   565,    -1,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   999,   135,
     136,   137,    -1,    -1,    -1,    -1,   888,   889,   890,   891,
      -1,   893,  1013,    -1,    -1,  1016,    -1,    -1,    -1,  1020,
    1056,    -1,  1058,    -1,  1061,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   620,    -1,   622,    -1,    -1,    -1,    -1,    -1,    -1,
    1086,  1087,    15,    16,    17,    18,    19,    20,    21,    22,
    1061,    -1,  1063,    -1,    -1,    -1,   119,  1068,    31,    -1,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,  1082,   135,   136,   137,   138,    -1,    -1,   667,    -1,
      -1,  1092,   974,   975,   976,   977,   978,   979,   980,   981,
     982,   983,   984,   985,   986,   987,   988,   989,   990,   991,
     992,    -1,    -1,   692,   693,   694,   695,   696,   697,   698,
     699,   700,   701,   702,   703,   704,   705,   706,   707,   708,
     709,   710,   711,   712,    -1,   714,     3,     4,     5,     6,
      -1,     8,     9,    10,    11,    -1,    -1,    14,  1030,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    -1,    -1,    -1,   141,    46,
      47,    -1,    -1,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,  1074,    -1,    61,    62,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    70,    71,    -1,    -1,    -1,  1059,    -1,
      77,    78,    79,    -1,    -1,    -1,    -1,    -1,    85,    -1,
      87,    -1,    -1,    -1,    -1,    92,    -1,    94,    95,    96,
      -1,    -1,    99,   100,    -1,    -1,   103,    -1,    -1,   106,
     107,   108,    -1,    -1,   111,    -1,   113,     3,     4,     5,
       6,    -1,     8,     9,    10,    11,    -1,    -1,    14,   126,
      -1,    -1,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,
      -1,   850,    -1,   140,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      46,    47,    -1,    31,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    -1,    -1,    61,    62,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,
      -1,    77,    78,    79,    -1,    -1,    -1,    -1,   907,    85,
      -1,    87,    -1,    -1,    -1,   914,    92,    -1,    94,    95,
      96,    -1,    -1,    99,   100,    -1,    -1,   103,    -1,    -1,
     106,   107,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    -1,    -1,   952,   130,    -1,    -1,    -1,   134,    -1,
     136,    -1,    -1,    -1,   140,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      -1,    -1,    -1,   141,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,   994,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
    1009,    -1,    -1,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      -1,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    -1,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    -1,    -1,    -1,    -1,    83,    84,    85,    -1,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,    -1,    -1,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    -1,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
      -1,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    -1,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,    -1,    -1,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
      -1,   140,   141,     3,     4,     5,     6,    -1,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    46,    47,    -1,    31,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    -1,
      -1,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,    79,
      -1,    -1,    -1,    -1,    -1,    85,    -1,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    94,    95,    96,    -1,    -1,    99,
     100,    -1,    -1,   103,    -1,    -1,   106,   107,   108,    -1,
      -1,   111,    -1,   113,     3,     4,     5,     6,    -1,     8,
       9,    10,    11,    -1,    -1,    -1,   126,    -1,    -1,    -1,
     130,   131,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,
     140,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,    -1,   135,   136,   137,    -1,    46,    47,   141,
      -1,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      -1,    -1,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,
      79,    -1,    -1,    -1,    -1,    -1,    85,    -1,    87,    -1,
      -1,    -1,    -1,    92,    -1,    94,    95,    96,    -1,    -1,
      99,   100,    -1,    -1,   103,    -1,    -1,   106,   107,   108,
      -1,    -1,   111,    -1,   113,     3,     4,     5,     6,    -1,
       8,     9,    10,    11,    -1,    -1,    -1,   126,    -1,    -1,
      -1,   130,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,   140,    17,    18,    19,    20,    21,    22,    -1,    -1,
      -1,    50,    -1,    52,    53,    54,    31,    -1,    46,    -1,
      -1,    -1,    50,    -1,    52,    53,    54,    -1,    -1,    -1,
      -1,    59,    60,    61,    62,    -1,    -1,    -1,    77,    78,
      79,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    77,
      78,    -1,    -1,    -1,    -1,    94,    95,    85,    -1,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,   108,
      -1,    99,    -1,    -1,   113,   103,     3,     4,     5,     6,
     108,     8,     9,    10,    11,   113,    21,    22,    -1,    -1,
     118,    -1,    -1,    -1,    -1,    -1,    31,   136,   126,    -1,
      -1,    -1,   130,   131,    -1,    -1,   134,    -1,   136,   124,
     125,   126,   140,    -1,   129,   130,   131,   132,   133,    46,
     135,   136,   137,    50,    -1,    52,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    62,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,
      77,    78,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,
      -1,    -1,    99,    -1,    -1,    -1,   103,     3,     4,     5,
       6,   108,     8,     9,    10,    11,   113,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   129,   130,   131,   132,   133,   126,
     135,   136,   137,   130,   131,    -1,    -1,   134,    -1,   136,
      -1,   138,    -1,   140,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    50,    -1,    52,    53,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,
      -1,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,    85,
      -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
      96,    -1,    -1,    99,    -1,    -1,    -1,   103,     3,     4,
       5,     6,   108,     8,     9,    10,    11,   113,    -1,    -1,
      -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    -1,    -1,    -1,   130,   131,    -1,    -1,   134,    -1,
     136,    -1,    -1,    -1,   140,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    50,    -1,    52,    53,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,
      -1,    -1,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,    94,
      95,    96,    -1,    -1,    99,    -1,    -1,    -1,   103,     3,
       4,     5,     6,   108,     8,     9,    10,    11,   113,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126,    -1,    -1,    -1,   130,   131,    -1,    -1,   134,
      -1,   136,    -1,   138,    -1,   140,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    52,    53,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    -1,    -1,
      -1,    -1,    -1,    77,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      94,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,   103,
       3,     4,     5,     6,   108,     8,     9,    10,    11,   113,
      -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   126,    -1,    -1,    -1,   130,   131,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,   140,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    52,
      53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    -1,
      -1,    -1,    -1,    -1,    77,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    94,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,
     103,     3,     4,     5,     6,   108,     8,     9,    10,    11,
     113,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   126,    -1,    -1,    -1,   130,   131,    -1,
      -1,   134,    -1,   136,    -1,   138,    -1,   140,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,    -1,
      52,    53,    54,    -1,    -1,    49,    -1,    -1,    -1,    61,
      62,    -1,    -1,    57,    -1,    -1,    -1,    -1,    70,    71,
      -1,    -1,    66,    67,    68,    77,    78,    -1,    -1,    -1,
      -1,    -1,    76,    85,    -1,    87,    -1,    -1,    -1,    83,
      -1,    -1,    94,    95,    96,    -1,    -1,    99,    92,    -1,
      -1,   103,    -1,    97,    -1,    -1,   108,    -1,    -1,    -1,
      -1,   113,    -1,    -1,    -1,    -1,   110,    -1,   112,    -1,
      -1,    -1,     0,    -1,   126,    -1,    -1,    -1,   130,   131,
       6,    -1,   134,    -1,   136,    -1,    -1,    -1,   140,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    -1,
      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    60,    -1,    64,    -1,    66,    67,
      68,    69,    -1,    -1,    72,    -1,    -1,    -1,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    -1,    -1,    85,
      -1,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    97,
      98,    -1,    -1,   101,    -1,    10,    11,   105,    -1,    -1,
      -1,   109,   110,    -1,   112,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   119,    -1,    -1,   122,    -1,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,    -1,
     136,   137,    47,    -1,   140,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    -1,    -1,    61,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,
      -1,    -1,    77,    78,    79,    10,    11,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,
      95,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,    47,   118,    -1,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    -1,    -1,    61,    -1,    -1,   134,
      65,    -1,    -1,    -1,    -1,    -1,    71,    10,    11,    -1,
      -1,    -1,    77,    78,    79,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,
      95,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,    47,    -1,   111,    50,   113,    52,
      53,    54,    55,    56,    -1,    58,    -1,    -1,    61,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,   134,
      -1,    -1,    -1,    -1,    77,    78,    79,    15,    16,    17,
      18,    19,    20,    21,    22,    88,    -1,    -1,    -1,    -1,
      -1,    94,    95,    31,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,
     113,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,   134,    15,    16,    17,    18,    19,    20,    21,    22,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    15,    16,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
     138,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
      -1,   135,   136,   137,   138,    -1,    -1,    -1,   121,    -1,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,   120,    -1,    -1,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,   121,    -1,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,    31,    -1,    -1,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
      -1,   135,   136,   137,    15,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    15,    16,
      17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,    -1,
     135,   136,   137,    16,    17,    18,    19,    20,    21,    22,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,   121,    -1,   123,
     124,   125,   126,    -1,    -1,   129,   130,   131,   132,   133,
      -1,   135,   136,   137,    -1,    -1,   123,   124,   125,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,    -1,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,    -1,   135,   136,   137,    17,    18,    19,
      20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    50,    -1,    52,    53,    54,    -1,
      -1,   124,   125,   126,    -1,    -1,   129,   130,   131,   132,
     133,    -1,   135,   136,   137,    17,    18,    19,    20,    21,
      22,    77,    78,    79,    -1,    -1,    -1,    -1,    -1,    31,
      17,    18,    19,    20,    21,    22,    -1,    -1,    94,    95,
      -1,    -1,    -1,    -1,    31,    17,    18,    19,    20,    21,
      22,    -1,   108,    -1,    -1,    -1,    -1,   113,    -1,    31,
      17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
     136,    -1,    -1,    -1,    -1,   125,   126,   127,   128,   129,
     130,   131,   132,   133,    -1,   135,   136,   137,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,   126,   127,   128,   129,   130,   131,
     132,   133,    31,   135,   136,   137,    -1,    -1,    -1,    -1,
     127,   128,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    -1,    -1,   125,   126,    -1,    -1,   129,   130,   131,
     132,   133,    -1,   135,   136,   137,    -1,    -1,    -1,   126,
      -1,    -1,   129,   130,   131,   132,   133,    -1,   135,   136,
     137,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    50,    -1,    52,
      53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    10,
      11,    -1,    -1,    -1,    77,    78,    79,    -1,   127,   128,
     129,   130,   131,   132,   133,    -1,   135,   136,   137,    10,
      11,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    47,    -1,    -1,    50,
     113,    52,    53,    54,    55,    -1,    -1,    58,    -1,    -1,
      61,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    50,
      71,    52,    53,    54,    55,    56,    77,    78,    79,    -1,
      61,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
      71,    10,    11,    94,    95,    -1,    77,    78,    79,   100,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,    -1,    -1,
     111,    -1,   113,    94,    95,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    50,   113,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    11,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    77,    78,
      79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    52,    53,    54,    -1,    94,    95,    47,    -1,    -1,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,   108,
      -1,    61,   111,    -1,   113,    65,    77,    78,    79,    -1,
      -1,    71,    -1,    11,    -1,    -1,    -1,    77,    78,    79,
      -1,    -1,    -1,    94,    95,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    94,    95,    -1,   108,    -1,    -1,
     100,    50,   113,    52,    53,    54,   106,   107,   108,    47,
      -1,   111,    50,   113,    52,    53,    54,    55,    56,    -1,
      58,    -1,    71,    61,    11,   136,    -1,    65,    77,    78,
      79,    -1,    -1,    71,    -1,    11,    -1,    -1,    -1,    77,
      78,    79,    -1,    -1,    -1,    94,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,   108,
      -1,    -1,   100,    50,   113,    52,    53,    54,   106,   107,
     108,    47,    -1,   111,    50,   113,    52,    53,    54,    55,
      -1,    -1,    58,    -1,    -1,    61,    -1,    -1,    -1,    65,
      77,    78,    79,    -1,    -1,    71,    -1,    11,    -1,    -1,
      -1,    77,    78,    79,    -1,    -1,    -1,    94,    95,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    11,    94,    95,
      -1,   108,    -1,    -1,   100,    -1,   113,    -1,    -1,    -1,
     106,   107,   108,    47,    -1,   111,    50,   113,    52,    53,
      54,    55,    -1,    -1,    58,    -1,    -1,    61,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    50,    71,    52,    53,
      54,    55,    -1,    77,    78,    79,    -1,    61,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,
      94,    95,    -1,    77,    78,    79,   100,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,    -1,    -1,   111,    -1,   113,
      94,    95,    48,    49,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    57,   106,   107,   108,    -1,    -1,   111,    64,   113,
      66,    67,    68,    69,    -1,    -1,    72,    -1,    -1,    -1,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    84,    -1,
      -1,    -1,    -1,    89,    90,    91,    92,    -1,    -1,    -1,
      -1,    97,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,    -1,   112,    48,    49,    -1,
      -1,    -1,    -1,    -1,   120,    -1,    57,    -1,    -1,    -1,
      -1,    -1,    -1,    64,    -1,    66,    67,    68,    69,    -1,
      -1,    72,    -1,   139,    -1,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    -1,    -1,    -1,    -1,    89,    90,
      91,    92,    -1,    -1,    -1,    -1,    97,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,
      -1,   112,    48,    49,    -1,    -1,    -1,    -1,    -1,   120,
      -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    64,    -1,
      66,    67,    68,    69,    -1,    -1,    72,    -1,   139,    -1,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    84,    -1,
      -1,    -1,    -1,    89,    90,    91,    92,    -1,    -1,    -1,
      -1,    97,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,    -1,   112,    48,    49,    -1,
      -1,    -1,    -1,    -1,   120,    -1,    57,    -1,    -1,    -1,
      -1,    -1,    -1,    64,    -1,    66,    67,    68,    69,    -1,
      -1,    72,    -1,   139,    -1,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    -1,    -1,    -1,    -1,    89,    90,
      91,    92,    -1,    -1,    -1,    -1,    97,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,
      -1,   112,    48,    49,    -1,    -1,    -1,    -1,    -1,   120,
      -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    64,    -1,
      66,    67,    68,    69,    -1,    -1,    72,    -1,   139,    -1,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    84,    -1,
      -1,    -1,    -1,    89,    90,    91,    92,    -1,    -1,    -1,
      -1,    97,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
      -1,    -1,    -1,   109,   110,    -1,   112,    48,    49,    -1,
      -1,    -1,    -1,    -1,   120,    -1,    57,    -1,    -1,    -1,
      -1,    -1,    -1,    64,    -1,    66,    67,    68,    69,    -1,
      -1,    72,    -1,   139,    -1,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    -1,    -1,    -1,    -1,    89,    90,
      91,    92,    -1,    -1,    -1,    -1,    97,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,
      -1,   112,    48,    49,    -1,    -1,    -1,    -1,    -1,   120,
      -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    64,    -1,
      66,    67,    68,    69,    -1,    -1,    72,    -1,   139,    -1,
      76,    -1,    -1,    -1,    80,    81,    82,    83,    84,    -1,
      -1,    -1,    -1,    89,    90,    91,    92,    -1,    -1,    -1,
      -1,    97,    98,    -1,    50,   101,    52,    53,    54,   105,
      49,    -1,    -1,   109,   110,    61,   112,    -1,    57,    -1,
      -1,    -1,    -1,    -1,   120,    71,    -1,    66,    67,    68,
      -1,    77,    78,    79,    -1,    -1,    -1,    76,    -1,    -1,
      -1,    -1,    -1,   139,    83,    -1,    -1,    -1,    94,    95,
      -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,    97,    48,
      49,    -1,   108,    -1,    -1,    -1,    -1,   113,    57,    -1,
      -1,   110,    -1,   112,    -1,    64,    -1,    66,    67,    68,
      69,    -1,    -1,    72,    -1,    -1,    -1,    76,   127,    -1,
     136,    80,    81,    82,    83,    84,    -1,    -1,    -1,    -1,
      89,    90,    91,    92,    -1,    -1,    -1,    -1,    97,    98,
      -1,    50,   101,    52,    53,    54,   105,    49,    -1,    -1,
     109,   110,    61,   112,    -1,    57,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    -1,    66,    67,    68,    -1,    77,    78,
      79,    -1,    -1,    -1,    76,    49,    -1,    -1,    -1,    -1,
      -1,    83,    84,    57,    -1,    94,    95,    -1,    -1,    -1,
      92,    -1,    66,    67,    68,    97,    -1,    49,    -1,   108,
      -1,    -1,    76,    -1,   113,    57,    -1,    -1,   110,    83,
     112,    -1,    -1,    -1,    66,    67,    68,    -1,    92,    -1,
      -1,    -1,    -1,    97,    76,    -1,    -1,   101,    -1,    -1,
      -1,    83,    -1,    -1,    -1,    -1,   110,    -1,   112,    -1,
      92,    -1,    -1,    -1,    -1,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
     112
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,   115,   116,   117,   143,   144,   236,     3,     4,     5,
       6,     8,     9,    10,    11,    46,    50,    52,    53,    54,
      61,    62,    70,    71,    77,    78,    85,    87,    94,    95,
      96,    99,   103,   108,   113,   126,   130,   131,   134,   136,
     140,   229,   230,   235,    11,    47,    50,    52,    53,    54,
      55,    56,    58,    61,    65,    71,    77,    78,    79,    94,
      95,   100,   106,   107,   108,   111,   113,   194,   198,   199,
     201,   206,   207,   211,   212,   217,   218,   219,   220,     0,
      48,    49,    57,    64,    66,    67,    68,    69,    72,    76,
      80,    81,    82,    83,    84,    89,    90,    91,    92,    97,
      98,   101,   105,   109,   110,   112,   120,   147,   149,   150,
     152,   153,   154,   175,   213,   216,   236,   136,   136,   136,
     136,   136,   136,   136,   127,   136,   136,   136,    11,   106,
     196,   211,   212,   217,   136,   136,   136,   127,   136,   136,
     229,   229,   229,   229,    11,    50,    52,    53,    54,    61,
      71,    77,    78,    94,    95,   108,   113,   198,   227,   229,
     229,    15,    16,    17,    18,    19,    20,    21,    22,    31,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   135,   136,   137,     6,     8,   194,   136,    61,    71,
      78,   218,    78,   218,   218,    10,    11,   234,   218,    12,
      16,    56,   112,   126,   131,   136,   193,   236,   118,   121,
     234,   118,   234,    76,   152,   152,   152,     6,   152,   152,
     121,   151,    84,   152,   136,   136,   136,   152,   118,   234,
     121,   121,   121,   152,   152,   136,   152,   153,   176,   152,
     159,    84,   234,   152,   152,    10,    11,    47,    56,    58,
      88,   106,   118,   134,   164,   195,   197,   199,   201,   206,
     211,   212,   217,   226,   227,   236,   198,   226,   226,   226,
     226,   226,   198,   226,   226,   226,   234,   136,   234,   234,
     226,   226,   198,   198,   226,   226,   138,   119,   138,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     138,   227,   229,   193,   229,    71,   131,   193,   193,   193,
     193,   193,   193,   137,   209,   210,   236,    11,   208,   218,
     121,   200,   202,   152,   149,   118,   234,    10,    10,    10,
     144,   118,   229,   127,    56,   164,   195,   197,   234,   136,
     136,    10,    11,   197,   136,    56,   194,   234,   148,   234,
     118,   120,   121,   122,   187,   120,   155,   234,   234,   138,
     138,   138,   138,   138,   138,   138,   128,   138,   138,   138,
     226,   138,   138,   138,   128,   138,   138,   229,   229,   121,
     138,   141,   138,   193,   138,   225,   229,   236,   234,   139,
     208,   144,   121,   203,   204,   236,   144,   118,   119,   119,
     119,   139,   214,   119,   138,    10,    11,    55,    56,   106,
     177,   178,   179,   180,   217,   236,   197,   187,   160,   165,
      12,   131,   166,   156,   229,   194,    10,    11,    12,    16,
      56,   112,   126,   131,   191,   236,   144,   136,   221,   222,
     145,   146,   234,    59,    60,   118,   229,    12,    16,    56,
      88,   112,   126,   131,   136,   157,   181,   234,   121,   136,
     138,   136,   229,   136,   141,   119,   122,   139,    89,    90,
      91,   110,   205,   118,   119,   139,   215,    10,    10,    10,
     144,   235,   234,   180,   234,   128,   119,    10,    11,    12,
      16,    56,   112,   126,   131,   136,   192,   236,   161,   162,
     181,     3,     4,     5,     9,    10,    14,    46,    56,    62,
      70,    85,    87,    92,    96,    99,   103,   126,   130,   134,
     136,   140,   183,   184,   190,   194,   231,   232,   235,   236,
     131,   181,   183,   158,   181,   138,   191,   131,   191,   191,
     191,   191,   191,   136,   137,   139,   167,   139,   223,   236,
     118,   119,   136,   120,   120,   118,   188,   189,   229,   236,
     120,   131,   181,   181,     6,    15,    16,    17,    18,    19,
      20,    21,    22,    31,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    60,    85,   119,   122,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   136,   137,   140,   173,   181,   181,   181,   181,   121,
     122,   136,   137,   186,   187,   236,   208,   227,   227,   183,
     229,   106,   110,   212,   233,   234,   110,   233,   110,   233,
      89,    90,    91,   144,   205,   144,   119,   138,   119,   119,
     139,   138,   122,   192,   122,   153,   174,   175,   179,   131,
     192,   192,   192,   192,   192,   192,   122,   137,   185,   236,
     163,   181,   186,   187,   136,    92,   194,   127,   196,   190,
     136,   127,   229,   229,   229,   198,   227,   229,   138,    14,
     119,   192,    15,    16,    17,    18,    19,    20,    21,    22,
      31,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   135,   136,   137,   181,   121,   138,   138,   186,
     187,   136,   191,   170,   225,   183,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    65,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    83,    84,    85,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   140,   141,   224,   221,   146,   226,   188,   139,
     119,   181,    10,   138,   141,   138,     4,   229,   182,   225,
     119,   138,   138,   138,   119,   234,   233,   234,   233,   233,
     233,   233,   233,   139,   139,    10,   120,    10,    10,   198,
     185,   198,   192,   138,    46,    62,    96,    99,   126,   130,
     131,   134,   136,   140,   228,   230,   225,   186,   187,   119,
     198,   194,   192,   198,   136,   198,   198,   138,   138,    56,
     172,   236,    14,   190,   122,   186,   229,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   138,   227,   229,
     138,   136,   172,   119,   171,   183,   141,   138,   223,   139,
     138,   139,   118,   229,   183,   141,   157,   172,   138,   119,
     138,   138,   136,   136,   127,   136,   127,   228,   228,   228,
     228,   198,   227,   228,    15,    16,    17,    18,    19,    20,
      21,    22,    31,   123,   124,   125,   126,   129,   130,   131,
     132,   133,   135,   136,   137,   141,   119,   162,   138,   192,
     186,   128,   226,   138,   128,   229,    86,   102,   229,   121,
     138,   141,   136,   168,   158,   183,   138,   172,   139,   188,
     138,   120,    10,   120,   120,   183,   198,   198,   198,   198,
     138,   138,   228,   228,   228,   228,   228,   228,   228,   228,
     228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
     228,   138,   227,   229,   163,   186,   136,   138,   136,   136,
     229,   169,   183,   138,   172,   139,   172,   119,   138,   138,
     128,   138,   128,   228,   121,   138,   141,   227,   227,   138,
     234,   183,   138,   172,    10,   172,   136,   136,   228,   138,
     138,   138,   138,   172,   138,   227,   227,   172,   120,   138,
     138
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
        break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}




/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;


#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc = yyloc_default;


    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
/* Line 1792 of yacc.c  */
#line 408 "dtool/src/cppparser/cppBison.yxx"
    {
  current_expr = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 4:
/* Line 1792 of yacc.c  */
#line 412 "dtool/src/cppparser/cppBison.yxx"
    {
  current_type = (yyvsp[(2) - (2)].u.type);
}
    break;

  case 10:
/* Line 1792 of yacc.c  */
#line 430 "dtool/src/cppparser/cppBison.yxx"
    {
  delete (yyvsp[(3) - (4)].u.expr);
}
    break;

  case 11:
/* Line 1792 of yacc.c  */
#line 442 "dtool/src/cppparser/cppBison.yxx"
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[(1) - (2)].u.integer) & CPPInstance::SC_c_binding));
}
    break;

  case 12:
/* Line 1792 of yacc.c  */
#line 447 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 20:
/* Line 1792 of yacc.c  */
#line 461 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[(1) - (1)]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
    break;

  case 21:
/* Line 1792 of yacc.c  */
#line 474 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[(1) - (1)]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
    break;

  case 22:
/* Line 1792 of yacc.c  */
#line 483 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_published);
}
    break;

  case 23:
/* Line 1792 of yacc.c  */
#line 487 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
    break;

  case 24:
/* Line 1792 of yacc.c  */
#line 495 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_protected);
}
    break;

  case 25:
/* Line 1792 of yacc.c  */
#line 499 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_private);
}
    break;

  case 26:
/* Line 1792 of yacc.c  */
#line 503 "dtool/src/cppparser/cppBison.yxx"
    {

  CPPDeclaration *getter = (yyvsp[(5) - (7)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(5) - (7)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (7)]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (7)].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[(1) - (7)]).file);
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (7)]));
}
    break;

  case 27:
/* Line 1792 of yacc.c  */
#line 514 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *getter = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));

  } else {
    CPPDeclaration *setter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (9)]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (9)].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[(1) - (9)]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (9)]));
  }
}
    break;

  case 28:
/* Line 1792 of yacc.c  */
#line 535 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *hasser = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));
  }

  CPPDeclaration *getter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (9)]));
  }

  if (hasser && getter) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[(3) - (9)].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        NULL, NULL,
                                        current_scope, (yylsp[(1) - (9)]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (9)]));
  }
}
    break;

  case 29:
/* Line 1792 of yacc.c  */
#line 557 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *hasser = (yyvsp[(5) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[(5) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (13)]));
  }

  CPPDeclaration *getter = (yyvsp[(7) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(7) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (13)]));
  }

  CPPDeclaration *setter = (yyvsp[(9) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid setter: " + (yyvsp[(9) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(9) - (13)]));
  }

  CPPDeclaration *clearer = (yyvsp[(11) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (clearer == (CPPDeclaration *)NULL || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid clear-function: " + (yyvsp[(11) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(11) - (13)]));
  }

  if (hasser && getter && setter && clearer) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[(3) - (13)].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        setter->as_function_group(),
                                        clearer->as_function_group(),
                                        current_scope, (yylsp[(1) - (13)]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (13)]));
  }
}
    break;

  case 30:
/* Line 1792 of yacc.c  */
#line 590 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *length_getter = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));
    length_getter = NULL;
  }

  CPPDeclaration *element_getter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == (CPPDeclaration *)NULL || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));
    element_getter = NULL;
  }

  if (length_getter != (CPPDeclaration *)NULL && element_getter != (CPPDeclaration *)NULL) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[(3) - (9)].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[(1) - (9)]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[(1) - (9)]));
  }
}
    break;

  case 31:
/* Line 1792 of yacc.c  */
#line 612 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPExpression::Result result = (yyvsp[(3) - (6)].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[(3) - (6)]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[(5) - (6)].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[(3) - (6)]));
  }
}
    break;

  case 32:
/* Line 1792 of yacc.c  */
#line 623 "dtool/src/cppparser/cppBison.yxx"
    {
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[(3) - (4)].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[(3) - (4)]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[(3) - (4)]));
  }
}
    break;

  case 33:
/* Line 1792 of yacc.c  */
#line 636 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
    break;

  case 34:
/* Line 1792 of yacc.c  */
#line 642 "dtool/src/cppparser/cppBison.yxx"
    {
  delete current_scope;
  pop_scope();
}
    break;

  case 35:
/* Line 1792 of yacc.c  */
#line 651 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 36:
/* Line 1792 of yacc.c  */
#line 655 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_extern;
}
    break;

  case 37:
/* Line 1792 of yacc.c  */
#line 659 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(3) - (3)].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[(2) - (3)].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[(2) - (3)].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[(2) - (3)].str) + "\"", (yylsp[(2) - (3)]));
  }
}
    break;

  case 38:
/* Line 1792 of yacc.c  */
#line 670 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_static;
}
    break;

  case 39:
/* Line 1792 of yacc.c  */
#line 674 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_inline;
}
    break;

  case 40:
/* Line 1792 of yacc.c  */
#line 678 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_virtual;
}
    break;

  case 41:
/* Line 1792 of yacc.c  */
#line 682 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_explicit;
}
    break;

  case 42:
/* Line 1792 of yacc.c  */
#line 686 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_register;
}
    break;

  case 43:
/* Line 1792 of yacc.c  */
#line 690 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_volatile;
}
    break;

  case 44:
/* Line 1792 of yacc.c  */
#line 694 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_mutable;
}
    break;

  case 45:
/* Line 1792 of yacc.c  */
#line 698 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_constexpr;
}
    break;

  case 46:
/* Line 1792 of yacc.c  */
#line 702 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_blocking;
}
    break;

  case 47:
/* Line 1792 of yacc.c  */
#line 706 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_extension;
}
    break;

  case 48:
/* Line 1792 of yacc.c  */
#line 713 "dtool/src/cppparser/cppBison.yxx"
    {
  /* multiple_var_declaration adds itself to the scope. */
}
    break;

  case 49:
/* Line 1792 of yacc.c  */
#line 717 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[(2) - (3)].u.decl), global_scope, current_lexer, (yylsp[(2) - (3)]));
}
    break;

  case 50:
/* Line 1792 of yacc.c  */
#line 726 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[(2) - (3)].u.instance)->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
    current_scope->add_declaration((yyvsp[(2) - (3)].u.instance), global_scope, current_lexer, (yylsp[(2) - (3)]));
    (yyvsp[(2) - (3)].u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
  }
}
    break;

  case 51:
/* Line 1792 of yacc.c  */
#line 737 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(2) - (2)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (2)].u.integer));
}
    break;

  case 52:
/* Line 1792 of yacc.c  */
#line 748 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 53:
/* Line 1792 of yacc.c  */
#line 752 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(3) - (3)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(3) - (3)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(3) - (3)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (3)].u.integer));
}
    break;

  case 54:
/* Line 1792 of yacc.c  */
#line 763 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 55:
/* Line 1792 of yacc.c  */
#line 774 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (2)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (2)]).file);
  inst->set_initializer((yyvsp[(2) - (2)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 56:
/* Line 1792 of yacc.c  */
#line 782 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (4)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (4)]).file);
  inst->set_initializer((yyvsp[(2) - (4)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 57:
/* Line 1792 of yacc.c  */
#line 793 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (2)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (2)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (2)]).file);
  inst->set_initializer((yyvsp[(2) - (2)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 58:
/* Line 1792 of yacc.c  */
#line 802 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (4)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (4)]).file);
  inst->set_initializer((yyvsp[(2) - (4)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 59:
/* Line 1792 of yacc.c  */
#line 815 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(2) - (2)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (2)].u.integer));
}
    break;

  case 60:
/* Line 1792 of yacc.c  */
#line 826 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 61:
/* Line 1792 of yacc.c  */
#line 830 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(3) - (3)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(3) - (3)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(3) - (3)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (3)].u.integer));
}
    break;

  case 62:
/* Line 1792 of yacc.c  */
#line 841 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 63:
/* Line 1792 of yacc.c  */
#line 845 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPDeclaration *)NULL) {
    CPPInstance *inst = (yyvsp[(2) - (3)].u.instance)->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(2) - (3)]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(2) - (3)]));
    }
  }
}
    break;

  case 64:
/* Line 1792 of yacc.c  */
#line 860 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (2)].u.inst_ident), current_scope, (yylsp[(1) - (2)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 65:
/* Line 1792 of yacc.c  */
#line 866 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (4)].u.inst_ident), current_scope, (yylsp[(1) - (4)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 66:
/* Line 1792 of yacc.c  */
#line 875 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (2)].u.inst_ident)->add_modifier(IIT_const);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (2)].u.inst_ident), current_scope, (yylsp[(1) - (2)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 67:
/* Line 1792 of yacc.c  */
#line 882 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (4)].u.inst_ident), current_scope, (yylsp[(1) - (4)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 68:
/* Line 1792 of yacc.c  */
#line 894 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 69:
/* Line 1792 of yacc.c  */
#line 898 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type;
  if ((yyvsp[(1) - (6)].u.identifier)->get_simple_name() == current_scope->get_simple_name() ||
      (yyvsp[(1) - (6)].u.identifier)->get_simple_name() == string("~") + current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[(1) - (6)]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[(1) - (6)].u.identifier));
  ii->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (6)]).file);
}
    break;

  case 70:
/* Line 1792 of yacc.c  */
#line 918 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 71:
/* Line 1792 of yacc.c  */
#line 922 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[(1) - (6)].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[(1) - (6)].u.identifier));
  ii->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (6)]).file);
}
    break;

  case 72:
/* Line 1792 of yacc.c  */
#line 942 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(2) - (3)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 73:
/* Line 1792 of yacc.c  */
#line 946 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  if ((yyvsp[(2) - (7)].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[(2) - (7)].u.identifier)->get_fully_scoped_name(), (yylsp[(2) - (7)]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[(2) - (7)].u.identifier)->get_simple_name(), (yylsp[(2) - (7)]));
    delete (yyvsp[(2) - (7)].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(2) - (7)]).file);
  }
}
    break;

  case 74:
/* Line 1792 of yacc.c  */
#line 972 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(4) - (6)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 75:
/* Line 1792 of yacc.c  */
#line 976 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[(1) - (10)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (10)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (10)]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[(4) - (10)].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[(8) - (10)].u.param_list), (yyvsp[(10) - (10)].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (10)]).file);
}
    break;

  case 76:
/* Line 1792 of yacc.c  */
#line 990 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(5) - (7)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 77:
/* Line 1792 of yacc.c  */
#line 994 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[(1) - (11)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (11)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (11)]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[(5) - (11)].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[(3) - (11)].u.identifier));
  ii->add_func_modifier((yyvsp[(9) - (11)].u.param_list), (yyvsp[(11) - (11)].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (11)]).file);
}
    break;

  case 78:
/* Line 1792 of yacc.c  */
#line 1010 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (4)].u.identifier) != NULL) {
    push_scope((yyvsp[(1) - (4)].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 79:
/* Line 1792 of yacc.c  */
#line 1016 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (8)].u.identifier) != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[(2) - (8)].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[(1) - (8)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier(name, (yylsp[(2) - (8)]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[(2) - (8)].u.type), (yyvsp[(3) - (8)].u.inst_ident), 0, (yylsp[(3) - (8)]).file), ident, (yyvsp[(6) - (8)].u.param_list), (yyvsp[(8) - (8)].u.integer));
}
    break;

  case 80:
/* Line 1792 of yacc.c  */
#line 1041 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (5)].u.identifier) != NULL) {
    push_scope((yyvsp[(1) - (5)].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 81:
/* Line 1792 of yacc.c  */
#line 1047 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (9)].u.identifier) != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[(1) - (9)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", (yylsp[(4) - (9)]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[(4) - (9)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[(3) - (9)].u.type), (yyvsp[(4) - (9)].u.inst_ident), 0, (yylsp[(4) - (9)]).file), ident, (yyvsp[(7) - (9)].u.param_list), (yyvsp[(9) - (9)].u.integer));
}
    break;

  case 82:
/* Line 1792 of yacc.c  */
#line 1067 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *decl =
    (yyvsp[(1) - (1)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = (CPPInstance *)NULL;
  }
}
    break;

  case 83:
/* Line 1792 of yacc.c  */
#line 1080 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 84:
/* Line 1792 of yacc.c  */
#line 1084 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_const_method;
}
    break;

  case 85:
/* Line 1792 of yacc.c  */
#line 1088 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_noexcept;
}
    break;

  case 86:
/* Line 1792 of yacc.c  */
#line 1092 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (4)].u.integer);
}
    break;

  case 87:
/* Line 1792 of yacc.c  */
#line 1096 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (5)].u.integer);
}
    break;

  case 88:
/* Line 1792 of yacc.c  */
#line 1103 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "!";
}
    break;

  case 89:
/* Line 1792 of yacc.c  */
#line 1107 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "~";
}
    break;

  case 90:
/* Line 1792 of yacc.c  */
#line 1111 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "*";
}
    break;

  case 91:
/* Line 1792 of yacc.c  */
#line 1115 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "/";
}
    break;

  case 92:
/* Line 1792 of yacc.c  */
#line 1119 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "%";
}
    break;

  case 93:
/* Line 1792 of yacc.c  */
#line 1123 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "+";
}
    break;

  case 94:
/* Line 1792 of yacc.c  */
#line 1127 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "-";
}
    break;

  case 95:
/* Line 1792 of yacc.c  */
#line 1131 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "|";
}
    break;

  case 96:
/* Line 1792 of yacc.c  */
#line 1135 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&";
}
    break;

  case 97:
/* Line 1792 of yacc.c  */
#line 1139 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "^";
}
    break;

  case 98:
/* Line 1792 of yacc.c  */
#line 1143 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "||";
}
    break;

  case 99:
/* Line 1792 of yacc.c  */
#line 1147 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&&";
}
    break;

  case 100:
/* Line 1792 of yacc.c  */
#line 1151 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "==";
}
    break;

  case 101:
/* Line 1792 of yacc.c  */
#line 1155 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "!=";
}
    break;

  case 102:
/* Line 1792 of yacc.c  */
#line 1159 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<=";
}
    break;

  case 103:
/* Line 1792 of yacc.c  */
#line 1163 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">=";
}
    break;

  case 104:
/* Line 1792 of yacc.c  */
#line 1167 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<";
}
    break;

  case 105:
/* Line 1792 of yacc.c  */
#line 1171 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">";
}
    break;

  case 106:
/* Line 1792 of yacc.c  */
#line 1175 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<<";
}
    break;

  case 107:
/* Line 1792 of yacc.c  */
#line 1179 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">>";
}
    break;

  case 108:
/* Line 1792 of yacc.c  */
#line 1183 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "=";
}
    break;

  case 109:
/* Line 1792 of yacc.c  */
#line 1187 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ",";
}
    break;

  case 110:
/* Line 1792 of yacc.c  */
#line 1191 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "++";
}
    break;

  case 111:
/* Line 1792 of yacc.c  */
#line 1195 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "--";
}
    break;

  case 112:
/* Line 1792 of yacc.c  */
#line 1199 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "*=";
}
    break;

  case 113:
/* Line 1792 of yacc.c  */
#line 1203 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "/=";
}
    break;

  case 114:
/* Line 1792 of yacc.c  */
#line 1207 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "%=";
}
    break;

  case 115:
/* Line 1792 of yacc.c  */
#line 1211 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "+=";
}
    break;

  case 116:
/* Line 1792 of yacc.c  */
#line 1215 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "-=";
}
    break;

  case 117:
/* Line 1792 of yacc.c  */
#line 1219 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "|=";
}
    break;

  case 118:
/* Line 1792 of yacc.c  */
#line 1223 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&=";
}
    break;

  case 119:
/* Line 1792 of yacc.c  */
#line 1227 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "^=";
}
    break;

  case 120:
/* Line 1792 of yacc.c  */
#line 1231 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<<=";
}
    break;

  case 121:
/* Line 1792 of yacc.c  */
#line 1235 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">>=";
}
    break;

  case 122:
/* Line 1792 of yacc.c  */
#line 1239 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "->";
}
    break;

  case 123:
/* Line 1792 of yacc.c  */
#line 1243 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "[]";
}
    break;

  case 124:
/* Line 1792 of yacc.c  */
#line 1247 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "()";
}
    break;

  case 125:
/* Line 1792 of yacc.c  */
#line 1251 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "new";
}
    break;

  case 126:
/* Line 1792 of yacc.c  */
#line 1255 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "delete";
}
    break;

  case 129:
/* Line 1792 of yacc.c  */
#line 1267 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope(new CPPTemplateScope(current_scope));
}
    break;

  case 130:
/* Line 1792 of yacc.c  */
#line 1271 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 134:
/* Line 1792 of yacc.c  */
#line 1284 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[(1) - (1)].u.decl));
}
    break;

  case 135:
/* Line 1792 of yacc.c  */
#line 1290 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[(3) - (3)].u.decl));
}
    break;

  case 136:
/* Line 1792 of yacc.c  */
#line 1299 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 137:
/* Line 1792 of yacc.c  */
#line 1303 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type)));
}
    break;

  case 138:
/* Line 1792 of yacc.c  */
#line 1307 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 139:
/* Line 1792 of yacc.c  */
#line 1311 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type)));
}
    break;

  case 140:
/* Line 1792 of yacc.c  */
#line 1315 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance((yyvsp[(1) - (3)].u.type), (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  inst->set_initializer((yyvsp[(3) - (3)].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 141:
/* Line 1792 of yacc.c  */
#line 1321 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[(2) - (4)].u.type), (yyvsp[(3) - (4)].u.inst_ident), 0, (yylsp[(3) - (4)]).file);
  inst->set_initializer((yyvsp[(4) - (4)].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 142:
/* Line 1792 of yacc.c  */
#line 1331 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 143:
/* Line 1792 of yacc.c  */
#line 1335 "dtool/src/cppparser/cppBison.yxx"
    {
  yywarning("Not a type: " + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;

  case 144:
/* Line 1792 of yacc.c  */
#line 1340 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 145:
/* Line 1792 of yacc.c  */
#line 1352 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 146:
/* Line 1792 of yacc.c  */
#line 1356 "dtool/src/cppparser/cppBison.yxx"
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[(1) - (2)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+(yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[(2) - (2)].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
    break;

  case 147:
/* Line 1792 of yacc.c  */
#line 1370 "dtool/src/cppparser/cppBison.yxx"
    {
  // A C++11 literal operator.
  if (!(yyvsp[(2) - (3)].str).empty()) {
    yyerror("expected empty string", (yylsp[(2) - (3)]));
  }
  CPPIdentifier *ident = (yyvsp[(1) - (3)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[(3) - (3)].u.identifier)->get_simple_name(), (yylsp[(3) - (3)]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[(3) - (3)].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
    break;

  case 148:
/* Line 1792 of yacc.c  */
#line 1385 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 149:
/* Line 1792 of yacc.c  */
#line 1390 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 150:
/* Line 1792 of yacc.c  */
#line 1395 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 151:
/* Line 1792 of yacc.c  */
#line 1400 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 152:
/* Line 1792 of yacc.c  */
#line 1405 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 153:
/* Line 1792 of yacc.c  */
#line 1410 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 154:
/* Line 1792 of yacc.c  */
#line 1415 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 155:
/* Line 1792 of yacc.c  */
#line 1420 "dtool/src/cppparser/cppBison.yxx"
    {
  // bitfield definition.  We ignore the bitfield for now.
  (yyval.u.inst_ident) = (yyvsp[(1) - (3)].u.inst_ident);
}
    break;

  case 156:
/* Line 1792 of yacc.c  */
#line 1425 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 157:
/* Line 1792 of yacc.c  */
#line 1430 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 158:
/* Line 1792 of yacc.c  */
#line 1434 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[(1) - (6)].u.inst_ident);
  if ((yyvsp[(4) - (6)].u.param_list)->is_parameter_expr() && (yyvsp[(6) - (6)].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[(4) - (6)].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));
  }
}
    break;

  case 159:
/* Line 1792 of yacc.c  */
#line 1452 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
}
    break;

  case 160:
/* Line 1792 of yacc.c  */
#line 1456 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 161:
/* Line 1792 of yacc.c  */
#line 1461 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (1)].u.param_list);
}
    break;

  case 162:
/* Line 1792 of yacc.c  */
#line 1465 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 163:
/* Line 1792 of yacc.c  */
#line 1470 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (2)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 164:
/* Line 1792 of yacc.c  */
#line 1478 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(1) - (1)].u.instance));
}
    break;

  case 165:
/* Line 1792 of yacc.c  */
#line 1483 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(3) - (3)].u.instance));
}
    break;

  case 166:
/* Line 1792 of yacc.c  */
#line 1491 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 167:
/* Line 1792 of yacc.c  */
#line 1495 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 168:
/* Line 1792 of yacc.c  */
#line 1502 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 169:
/* Line 1792 of yacc.c  */
#line 1506 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 170:
/* Line 1792 of yacc.c  */
#line 1513 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 171:
/* Line 1792 of yacc.c  */
#line 1517 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 172:
/* Line 1792 of yacc.c  */
#line 1521 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 173:
/* Line 1792 of yacc.c  */
#line 1525 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 174:
/* Line 1792 of yacc.c  */
#line 1529 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
    break;

  case 175:
/* Line 1792 of yacc.c  */
#line 1533 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
    break;

  case 176:
/* Line 1792 of yacc.c  */
#line 1537 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 180:
/* Line 1792 of yacc.c  */
#line 1550 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 184:
/* Line 1792 of yacc.c  */
#line 1559 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[(1) - (3)].u.type), (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
}
    break;

  case 185:
/* Line 1792 of yacc.c  */
#line 1564 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (4)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[(2) - (4)].u.type), (yyvsp[(3) - (4)].u.inst_ident), 0, (yylsp[(3) - (4)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(4) - (4)].u.expr));
}
    break;

  case 186:
/* Line 1792 of yacc.c  */
#line 1570 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(4) - (5)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[(3) - (5)].u.type), (yyvsp[(4) - (5)].u.inst_ident), 0, (yylsp[(3) - (5)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(5) - (5)].u.expr));
}
    break;

  case 187:
/* Line 1792 of yacc.c  */
#line 1576 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = (yyvsp[(2) - (2)].u.instance);
}
    break;

  case 188:
/* Line 1792 of yacc.c  */
#line 1580 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[(1) - (1)].u.expr));
}
    break;

  case 189:
/* Line 1792 of yacc.c  */
#line 1590 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 190:
/* Line 1792 of yacc.c  */
#line 1594 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 191:
/* Line 1792 of yacc.c  */
#line 1598 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 192:
/* Line 1792 of yacc.c  */
#line 1602 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 193:
/* Line 1792 of yacc.c  */
#line 1607 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 194:
/* Line 1792 of yacc.c  */
#line 1612 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 195:
/* Line 1792 of yacc.c  */
#line 1617 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 196:
/* Line 1792 of yacc.c  */
#line 1622 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 197:
/* Line 1792 of yacc.c  */
#line 1627 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 198:
/* Line 1792 of yacc.c  */
#line 1632 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 199:
/* Line 1792 of yacc.c  */
#line 1640 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 200:
/* Line 1792 of yacc.c  */
#line 1644 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 201:
/* Line 1792 of yacc.c  */
#line 1648 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 202:
/* Line 1792 of yacc.c  */
#line 1652 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 203:
/* Line 1792 of yacc.c  */
#line 1657 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 204:
/* Line 1792 of yacc.c  */
#line 1662 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 205:
/* Line 1792 of yacc.c  */
#line 1667 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 206:
/* Line 1792 of yacc.c  */
#line 1672 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 207:
/* Line 1792 of yacc.c  */
#line 1677 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 208:
/* Line 1792 of yacc.c  */
#line 1682 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 209:
/* Line 1792 of yacc.c  */
#line 1687 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (7)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));
}
    break;

  case 210:
/* Line 1792 of yacc.c  */
#line 1693 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 211:
/* Line 1792 of yacc.c  */
#line 1701 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 212:
/* Line 1792 of yacc.c  */
#line 1705 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 213:
/* Line 1792 of yacc.c  */
#line 1710 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 214:
/* Line 1792 of yacc.c  */
#line 1715 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 215:
/* Line 1792 of yacc.c  */
#line 1720 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 216:
/* Line 1792 of yacc.c  */
#line 1725 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 217:
/* Line 1792 of yacc.c  */
#line 1730 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 218:
/* Line 1792 of yacc.c  */
#line 1735 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 219:
/* Line 1792 of yacc.c  */
#line 1740 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (7)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));
}
    break;

  case 220:
/* Line 1792 of yacc.c  */
#line 1749 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 221:
/* Line 1792 of yacc.c  */
#line 1753 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 222:
/* Line 1792 of yacc.c  */
#line 1761 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 223:
/* Line 1792 of yacc.c  */
#line 1765 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 224:
/* Line 1792 of yacc.c  */
#line 1769 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 225:
/* Line 1792 of yacc.c  */
#line 1773 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.enum_type));
}
    break;

  case 226:
/* Line 1792 of yacc.c  */
#line 1777 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 227:
/* Line 1792 of yacc.c  */
#line 1793 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (4)].u.extension_enum), (yyvsp[(2) - (4)].u.identifier), current_scope, (yylsp[(1) - (4)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (4)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 228:
/* Line 1792 of yacc.c  */
#line 1809 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(3) - (4)].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[(3) - (4)].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[(3) - (4)]));
  }
}
    break;

  case 229:
/* Line 1792 of yacc.c  */
#line 1818 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = new CPPSimpleType(CPPSimpleType::T_auto);
}
    break;

  case 230:
/* Line 1792 of yacc.c  */
#line 1825 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 231:
/* Line 1792 of yacc.c  */
#line 1829 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.decl) != NULL);
}
    break;

  case 232:
/* Line 1792 of yacc.c  */
#line 1837 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 233:
/* Line 1792 of yacc.c  */
#line 1841 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 234:
/* Line 1792 of yacc.c  */
#line 1845 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[(1) - (1)].u.struct_type)));
}
    break;

  case 235:
/* Line 1792 of yacc.c  */
#line 1849 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[(1) - (1)].u.enum_type)));
}
    break;

  case 236:
/* Line 1792 of yacc.c  */
#line 1853 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 237:
/* Line 1792 of yacc.c  */
#line 1869 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (4)].u.extension_enum), (yyvsp[(2) - (4)].u.identifier), current_scope, (yylsp[(1) - (4)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (4)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 238:
/* Line 1792 of yacc.c  */
#line 1885 "dtool/src/cppparser/cppBison.yxx"
    {
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[(2) - (2)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (2)]));

  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 239:
/* Line 1792 of yacc.c  */
#line 1903 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(3) - (4)].u.expr)->determine_type();
  if ((yyval.u.decl) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[(3) - (4)].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[(3) - (4)]));
  }
}
    break;

  case 240:
/* Line 1792 of yacc.c  */
#line 1912 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPSimpleType(CPPSimpleType::T_auto);
}
    break;

  case 241:
/* Line 1792 of yacc.c  */
#line 1919 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 242:
/* Line 1792 of yacc.c  */
#line 1923 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 243:
/* Line 1792 of yacc.c  */
#line 1931 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 244:
/* Line 1792 of yacc.c  */
#line 1935 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 245:
/* Line 1792 of yacc.c  */
#line 1951 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 246:
/* Line 1792 of yacc.c  */
#line 1970 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(1) - (1)].u.decl);
}
    break;

  case 247:
/* Line 1792 of yacc.c  */
#line 1974 "dtool/src/cppparser/cppBison.yxx"
    {
  yyerror(string("unknown type '") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name() + "'", (yylsp[(1) - (1)]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;

  case 248:
/* Line 1792 of yacc.c  */
#line 1982 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance((yyvsp[(1) - (2)].u.type), (yyvsp[(2) - (2)].u.inst_ident), 0, (yylsp[(1) - (2)]).file);
  (yyval.u.type) = inst->_type;
  delete inst;
}
    break;

  case 249:
/* Line 1792 of yacc.c  */
#line 1988 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (3)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[(2) - (3)].u.type), (yyvsp[(3) - (3)].u.inst_ident), 0, (yylsp[(1) - (3)]).file);
  (yyval.u.type) = inst->_type;
  delete inst;
}
    break;

  case 250:
/* Line 1792 of yacc.c  */
#line 1998 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPVisibility starting_vis =
  ((yyvsp[(1) - (2)].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[(1) - (2)].u.extension_enum), NULL, current_scope,
                                        new_scope, (yylsp[(1) - (2)]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 251:
/* Line 1792 of yacc.c  */
#line 2012 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 252:
/* Line 1792 of yacc.c  */
#line 2022 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPVisibility starting_vis =
  ((yyvsp[(1) - (2)].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[(2) - (2)].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope,
                                        new_scope, (yylsp[(1) - (2)]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 253:
/* Line 1792 of yacc.c  */
#line 2042 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 258:
/* Line 1792 of yacc.c  */
#line 2062 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_public, false);
}
    break;

  case 259:
/* Line 1792 of yacc.c  */
#line 2066 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_protected, false);
}
    break;

  case 260:
/* Line 1792 of yacc.c  */
#line 2070 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_private, false);
}
    break;

  case 261:
/* Line 1792 of yacc.c  */
#line 2074 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_public, true);
}
    break;

  case 262:
/* Line 1792 of yacc.c  */
#line 2078 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_protected, true);
}
    break;

  case 263:
/* Line 1792 of yacc.c  */
#line 2082 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_private, true);
}
    break;

  case 264:
/* Line 1792 of yacc.c  */
#line 2086 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_public, true);
}
    break;

  case 265:
/* Line 1792 of yacc.c  */
#line 2090 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_protected, true);
}
    break;

  case 266:
/* Line 1792 of yacc.c  */
#line 2094 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_private, true);
}
    break;

  case 267:
/* Line 1792 of yacc.c  */
#line 2101 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
    break;

  case 268:
/* Line 1792 of yacc.c  */
#line 2109 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type), current_scope, (yylsp[(1) - (4)]).file);
}
    break;

  case 269:
/* Line 1792 of yacc.c  */
#line 2113 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType((yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file);
}
    break;

  case 270:
/* Line 1792 of yacc.c  */
#line 2117 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType(NULL, (yyvsp[(3) - (3)].u.type), current_scope, (yylsp[(1) - (3)]).file);
}
    break;

  case 271:
/* Line 1792 of yacc.c  */
#line 2121 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType(NULL, current_scope, (yylsp[(1) - (1)]).file);
}
    break;

  case 272:
/* Line 1792 of yacc.c  */
#line 2128 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 273:
/* Line 1792 of yacc.c  */
#line 2132 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
    break;

  case 275:
/* Line 1792 of yacc.c  */
#line 2140 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (3)].u.identifier)->get_simple_name());
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (3)]));
}
    break;

  case 276:
/* Line 1792 of yacc.c  */
#line 2146 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (5)].u.identifier)->get_simple_name(), (yyvsp[(4) - (5)].u.expr));
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (5)]));
}
    break;

  case 278:
/* Line 1792 of yacc.c  */
#line 2155 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (2)].u.identifier)->get_simple_name());
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (2)]));
}
    break;

  case 279:
/* Line 1792 of yacc.c  */
#line 2161 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (4)].u.identifier)->get_simple_name(), (yyvsp[(4) - (4)].u.expr));
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (4)]));
}
    break;

  case 280:
/* Line 1792 of yacc.c  */
#line 2170 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
    break;

  case 281:
/* Line 1792 of yacc.c  */
#line 2177 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
    break;

  case 282:
/* Line 1792 of yacc.c  */
#line 2181 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
    break;

  case 283:
/* Line 1792 of yacc.c  */
#line 2185 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
    break;

  case 284:
/* Line 1792 of yacc.c  */
#line 2192 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *scope = (yyvsp[(2) - (3)].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[(2) - (3)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[(2) - (3)].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[(2) - (3)].u.identifier), scope, (yylsp[(1) - (3)]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[(1) - (3)]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;

  case 285:
/* Line 1792 of yacc.c  */
#line 2210 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 286:
/* Line 1792 of yacc.c  */
#line 2214 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *scope = (yyvsp[(3) - (4)].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[(3) - (4)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[(3) - (4)].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[(3) - (4)].u.identifier), scope, (yylsp[(2) - (4)]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[(2) - (4)]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;

  case 287:
/* Line 1792 of yacc.c  */
#line 2233 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 290:
/* Line 1792 of yacc.c  */
#line 2242 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[(2) - (2)].u.identifier), false, (yylsp[(1) - (2)]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[(1) - (2)]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 291:
/* Line 1792 of yacc.c  */
#line 2248 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[(3) - (3)].u.identifier), true, (yylsp[(1) - (3)]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[(1) - (3)]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 295:
/* Line 1792 of yacc.c  */
#line 2263 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
    break;

  case 296:
/* Line 1792 of yacc.c  */
#line 2267 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
    break;

  case 297:
/* Line 1792 of yacc.c  */
#line 2271 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
    break;

  case 298:
/* Line 1792 of yacc.c  */
#line 2275 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
    break;

  case 299:
/* Line 1792 of yacc.c  */
#line 2279 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
    break;

  case 300:
/* Line 1792 of yacc.c  */
#line 2283 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
    break;

  case 301:
/* Line 1792 of yacc.c  */
#line 2288 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
    break;

  case 302:
/* Line 1792 of yacc.c  */
#line 2293 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_longlong);
}
    break;

  case 303:
/* Line 1792 of yacc.c  */
#line 2298 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
    break;

  case 304:
/* Line 1792 of yacc.c  */
#line 2303 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
    break;

  case 305:
/* Line 1792 of yacc.c  */
#line 2308 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
    break;

  case 306:
/* Line 1792 of yacc.c  */
#line 2312 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
    break;

  case 307:
/* Line 1792 of yacc.c  */
#line 2317 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
    break;

  case 308:
/* Line 1792 of yacc.c  */
#line 2326 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
    break;

  case 309:
/* Line 1792 of yacc.c  */
#line 2331 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
    break;

  case 310:
/* Line 1792 of yacc.c  */
#line 2339 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
    break;

  case 311:
/* Line 1792 of yacc.c  */
#line 2343 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_long);
}
    break;

  case 312:
/* Line 1792 of yacc.c  */
#line 2348 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
    break;

  case 313:
/* Line 1792 of yacc.c  */
#line 2352 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_longlong);
}
    break;

  case 314:
/* Line 1792 of yacc.c  */
#line 2357 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
    break;

  case 315:
/* Line 1792 of yacc.c  */
#line 2365 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
    break;

  case 316:
/* Line 1792 of yacc.c  */
#line 2374 "dtool/src/cppparser/cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = false;
}
    break;

  case 317:
/* Line 1792 of yacc.c  */
#line 2378 "dtool/src/cppparser/cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = true;
}
    break;

  case 414:
/* Line 1792 of yacc.c  */
#line 2418 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 438:
/* Line 1792 of yacc.c  */
#line 2427 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 439:
/* Line 1792 of yacc.c  */
#line 2431 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 440:
/* Line 1792 of yacc.c  */
#line 2438 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 441:
/* Line 1792 of yacc.c  */
#line 2442 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 442:
/* Line 1792 of yacc.c  */
#line 2449 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 443:
/* Line 1792 of yacc.c  */
#line 2453 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 444:
/* Line 1792 of yacc.c  */
#line 2460 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 445:
/* Line 1792 of yacc.c  */
#line 2464 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 446:
/* Line 1792 of yacc.c  */
#line 2468 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 447:
/* Line 1792 of yacc.c  */
#line 2472 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 448:
/* Line 1792 of yacc.c  */
#line 2476 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 449:
/* Line 1792 of yacc.c  */
#line 2480 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 450:
/* Line 1792 of yacc.c  */
#line 2484 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 451:
/* Line 1792 of yacc.c  */
#line 2488 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 452:
/* Line 1792 of yacc.c  */
#line 2492 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 453:
/* Line 1792 of yacc.c  */
#line 2496 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 454:
/* Line 1792 of yacc.c  */
#line 2500 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 455:
/* Line 1792 of yacc.c  */
#line 2504 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 456:
/* Line 1792 of yacc.c  */
#line 2508 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 457:
/* Line 1792 of yacc.c  */
#line 2512 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 458:
/* Line 1792 of yacc.c  */
#line 2516 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 459:
/* Line 1792 of yacc.c  */
#line 2520 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 460:
/* Line 1792 of yacc.c  */
#line 2524 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 461:
/* Line 1792 of yacc.c  */
#line 2528 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 462:
/* Line 1792 of yacc.c  */
#line 2532 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 463:
/* Line 1792 of yacc.c  */
#line 2536 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 464:
/* Line 1792 of yacc.c  */
#line 2540 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 465:
/* Line 1792 of yacc.c  */
#line 2544 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 466:
/* Line 1792 of yacc.c  */
#line 2548 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 467:
/* Line 1792 of yacc.c  */
#line 2552 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 468:
/* Line 1792 of yacc.c  */
#line 2556 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 469:
/* Line 1792 of yacc.c  */
#line 2560 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 470:
/* Line 1792 of yacc.c  */
#line 2564 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 471:
/* Line 1792 of yacc.c  */
#line 2568 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 472:
/* Line 1792 of yacc.c  */
#line 2572 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 473:
/* Line 1792 of yacc.c  */
#line 2576 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 474:
/* Line 1792 of yacc.c  */
#line 2580 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 475:
/* Line 1792 of yacc.c  */
#line 2584 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 476:
/* Line 1792 of yacc.c  */
#line 2588 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 477:
/* Line 1792 of yacc.c  */
#line 2592 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 478:
/* Line 1792 of yacc.c  */
#line 2600 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 479:
/* Line 1792 of yacc.c  */
#line 2604 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 480:
/* Line 1792 of yacc.c  */
#line 2608 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 481:
/* Line 1792 of yacc.c  */
#line 2612 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 482:
/* Line 1792 of yacc.c  */
#line 2616 "dtool/src/cppparser/cppBison.yxx"
    {
  // A constructor call.
  CPPType *type = (yyvsp[(1) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (4)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (4)]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 483:
/* Line 1792 of yacc.c  */
#line 2626 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 484:
/* Line 1792 of yacc.c  */
#line 2632 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 485:
/* Line 1792 of yacc.c  */
#line 2638 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 486:
/* Line 1792 of yacc.c  */
#line 2644 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 487:
/* Line 1792 of yacc.c  */
#line 2650 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 488:
/* Line 1792 of yacc.c  */
#line 2656 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 489:
/* Line 1792 of yacc.c  */
#line 2662 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 490:
/* Line 1792 of yacc.c  */
#line 2669 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 491:
/* Line 1792 of yacc.c  */
#line 2676 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 492:
/* Line 1792 of yacc.c  */
#line 2683 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 493:
/* Line 1792 of yacc.c  */
#line 2690 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 494:
/* Line 1792 of yacc.c  */
#line 2696 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 495:
/* Line 1792 of yacc.c  */
#line 2702 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 496:
/* Line 1792 of yacc.c  */
#line 2706 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 497:
/* Line 1792 of yacc.c  */
#line 2710 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (2)].u.type)));
}
    break;

  case 498:
/* Line 1792 of yacc.c  */
#line 2714 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (5)].u.type), (yyvsp[(4) - (5)].u.expr)));
}
    break;

  case 499:
/* Line 1792 of yacc.c  */
#line 2718 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 500:
/* Line 1792 of yacc.c  */
#line 2722 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 501:
/* Line 1792 of yacc.c  */
#line 2726 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 502:
/* Line 1792 of yacc.c  */
#line 2730 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 503:
/* Line 1792 of yacc.c  */
#line 2734 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 504:
/* Line 1792 of yacc.c  */
#line 2738 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 505:
/* Line 1792 of yacc.c  */
#line 2742 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 506:
/* Line 1792 of yacc.c  */
#line 2746 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 507:
/* Line 1792 of yacc.c  */
#line 2750 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 508:
/* Line 1792 of yacc.c  */
#line 2754 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 509:
/* Line 1792 of yacc.c  */
#line 2758 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 510:
/* Line 1792 of yacc.c  */
#line 2762 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 511:
/* Line 1792 of yacc.c  */
#line 2766 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 512:
/* Line 1792 of yacc.c  */
#line 2770 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 513:
/* Line 1792 of yacc.c  */
#line 2774 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 514:
/* Line 1792 of yacc.c  */
#line 2778 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 515:
/* Line 1792 of yacc.c  */
#line 2782 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 516:
/* Line 1792 of yacc.c  */
#line 2786 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 517:
/* Line 1792 of yacc.c  */
#line 2790 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 518:
/* Line 1792 of yacc.c  */
#line 2794 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 519:
/* Line 1792 of yacc.c  */
#line 2798 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 520:
/* Line 1792 of yacc.c  */
#line 2802 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 521:
/* Line 1792 of yacc.c  */
#line 2806 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 522:
/* Line 1792 of yacc.c  */
#line 2810 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 523:
/* Line 1792 of yacc.c  */
#line 2814 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 524:
/* Line 1792 of yacc.c  */
#line 2818 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 525:
/* Line 1792 of yacc.c  */
#line 2822 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 526:
/* Line 1792 of yacc.c  */
#line 2826 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 527:
/* Line 1792 of yacc.c  */
#line 2830 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 528:
/* Line 1792 of yacc.c  */
#line 2834 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 529:
/* Line 1792 of yacc.c  */
#line 2841 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 530:
/* Line 1792 of yacc.c  */
#line 2845 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 531:
/* Line 1792 of yacc.c  */
#line 2849 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 532:
/* Line 1792 of yacc.c  */
#line 2853 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 533:
/* Line 1792 of yacc.c  */
#line 2857 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.real));
}
    break;

  case 534:
/* Line 1792 of yacc.c  */
#line 2861 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 535:
/* Line 1792 of yacc.c  */
#line 2865 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 536:
/* Line 1792 of yacc.c  */
#line 2869 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.identifier), current_scope, global_scope, current_lexer);
}
    break;

  case 537:
/* Line 1792 of yacc.c  */
#line 2873 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
    break;

  case 538:
/* Line 1792 of yacc.c  */
#line 2887 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 539:
/* Line 1792 of yacc.c  */
#line 2891 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 540:
/* Line 1792 of yacc.c  */
#line 2895 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 541:
/* Line 1792 of yacc.c  */
#line 2899 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr)));
}
    break;

  case 542:
/* Line 1792 of yacc.c  */
#line 2903 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 543:
/* Line 1792 of yacc.c  */
#line 2907 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 544:
/* Line 1792 of yacc.c  */
#line 2911 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (2)].u.type)));
}
    break;

  case 545:
/* Line 1792 of yacc.c  */
#line 2915 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (5)].u.type), (yyvsp[(4) - (5)].u.expr)));
}
    break;

  case 546:
/* Line 1792 of yacc.c  */
#line 2919 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 547:
/* Line 1792 of yacc.c  */
#line 2923 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 548:
/* Line 1792 of yacc.c  */
#line 2927 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 549:
/* Line 1792 of yacc.c  */
#line 2931 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 550:
/* Line 1792 of yacc.c  */
#line 2935 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 551:
/* Line 1792 of yacc.c  */
#line 2939 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 552:
/* Line 1792 of yacc.c  */
#line 2943 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 553:
/* Line 1792 of yacc.c  */
#line 2947 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 554:
/* Line 1792 of yacc.c  */
#line 2951 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 555:
/* Line 1792 of yacc.c  */
#line 2955 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 556:
/* Line 1792 of yacc.c  */
#line 2959 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 557:
/* Line 1792 of yacc.c  */
#line 2963 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 558:
/* Line 1792 of yacc.c  */
#line 2967 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 559:
/* Line 1792 of yacc.c  */
#line 2971 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 560:
/* Line 1792 of yacc.c  */
#line 2975 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 561:
/* Line 1792 of yacc.c  */
#line 2979 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 562:
/* Line 1792 of yacc.c  */
#line 2983 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 563:
/* Line 1792 of yacc.c  */
#line 2987 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 564:
/* Line 1792 of yacc.c  */
#line 2991 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 565:
/* Line 1792 of yacc.c  */
#line 2995 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 566:
/* Line 1792 of yacc.c  */
#line 2999 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 567:
/* Line 1792 of yacc.c  */
#line 3003 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 568:
/* Line 1792 of yacc.c  */
#line 3007 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 569:
/* Line 1792 of yacc.c  */
#line 3011 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 570:
/* Line 1792 of yacc.c  */
#line 3015 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 571:
/* Line 1792 of yacc.c  */
#line 3019 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 572:
/* Line 1792 of yacc.c  */
#line 3023 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 573:
/* Line 1792 of yacc.c  */
#line 3027 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 574:
/* Line 1792 of yacc.c  */
#line 3031 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 575:
/* Line 1792 of yacc.c  */
#line 3038 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 576:
/* Line 1792 of yacc.c  */
#line 3042 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 577:
/* Line 1792 of yacc.c  */
#line 3046 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 578:
/* Line 1792 of yacc.c  */
#line 3050 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 579:
/* Line 1792 of yacc.c  */
#line 3054 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.real));
}
    break;

  case 580:
/* Line 1792 of yacc.c  */
#line 3058 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 581:
/* Line 1792 of yacc.c  */
#line 3062 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 582:
/* Line 1792 of yacc.c  */
#line 3066 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.identifier), current_scope, global_scope, current_lexer);
}
    break;

  case 583:
/* Line 1792 of yacc.c  */
#line 3070 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
    break;

  case 584:
/* Line 1792 of yacc.c  */
#line 3077 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[(1) - (1)].u.identifier)));
  }
  (yyval.u.type) = type;
}
    break;

  case 585:
/* Line 1792 of yacc.c  */
#line 3085 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, true, current_lexer);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
  }
  (yyval.u.type) = type;
}
    break;

  case 586:
/* Line 1792 of yacc.c  */
#line 3093 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 587:
/* Line 1792 of yacc.c  */
#line 3119 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 588:
/* Line 1792 of yacc.c  */
#line 3123 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 589:
/* Line 1792 of yacc.c  */
#line 3130 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].str));
}
    break;

  case 590:
/* Line 1792 of yacc.c  */
#line 3134 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 591:
/* Line 1792 of yacc.c  */
#line 3138 "dtool/src/cppparser/cppBison.yxx"
    {
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[(1) - (2)].u.expr);
  (yyval.u.expr)->_str += (yyvsp[(2) - (2)].str);
}
    break;

  case 592:
/* Line 1792 of yacc.c  */
#line 3144 "dtool/src/cppparser/cppBison.yxx"
    {
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[(1) - (2)].u.expr);
  if ((yyvsp[(2) - (2)].u.expr)->_type != CPPExpression::T_string && (yyvsp[(2) - (2)].u.expr)->_type != (yyvsp[(1) - (2)].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[(2) - (2)].u.expr)->_str;
}
    break;


/* Line 1792 of yacc.c  */
#line 7819 "built/tmp/cppBison.yxx.c"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


