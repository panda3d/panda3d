/* A Bison parser, made by GNU Bison 2.7.  */

/* Bison implementation for Yacc-like parsers in C

      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yylval          cppyylval
#define yychar          cppyychar
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs
#define yylloc          cppyylloc

/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 7 "dtool/src/cppparser/cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppClosureType.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL;
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static CPPClosureType *current_closure = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


/* Line 371 of yacc.c  */
#line 272 "built_x64/tmp/cppBison.yxx.c"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "cppBison.yxx.h".  */
#ifndef YY_CPPYY_BUILT_X64_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_X64_TMP_CPPBISON_YXX_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     REAL = 258,
     INTEGER = 259,
     CHAR_TOK = 260,
     SIMPLE_STRING = 261,
     SIMPLE_IDENTIFIER = 262,
     STRING_LITERAL = 263,
     CUSTOM_LITERAL = 264,
     IDENTIFIER = 265,
     TYPENAME_IDENTIFIER = 266,
     TYPEPACK_IDENTIFIER = 267,
     SCOPING = 268,
     TYPEDEFNAME = 269,
     ELLIPSIS = 270,
     OROR = 271,
     ANDAND = 272,
     EQCOMPARE = 273,
     NECOMPARE = 274,
     LECOMPARE = 275,
     GECOMPARE = 276,
     LSHIFT = 277,
     RSHIFT = 278,
     POINTSAT_STAR = 279,
     DOT_STAR = 280,
     UNARY = 281,
     UNARY_NOT = 282,
     UNARY_NEGATE = 283,
     UNARY_MINUS = 284,
     UNARY_PLUS = 285,
     UNARY_STAR = 286,
     UNARY_REF = 287,
     POINTSAT = 288,
     SCOPE = 289,
     PLUSPLUS = 290,
     MINUSMINUS = 291,
     TIMESEQUAL = 292,
     DIVIDEEQUAL = 293,
     MODEQUAL = 294,
     PLUSEQUAL = 295,
     MINUSEQUAL = 296,
     OREQUAL = 297,
     ANDEQUAL = 298,
     XOREQUAL = 299,
     LSHIFTEQUAL = 300,
     RSHIFTEQUAL = 301,
     ATTR_LEFT = 302,
     ATTR_RIGHT = 303,
     KW_ALIGNAS = 304,
     KW_ALIGNOF = 305,
     KW_AUTO = 306,
     KW_BEGIN_PUBLISH = 307,
     KW_BLOCKING = 308,
     KW_BOOL = 309,
     KW_CATCH = 310,
     KW_CHAR = 311,
     KW_CHAR16_T = 312,
     KW_CHAR32_T = 313,
     KW_CLASS = 314,
     KW_CONST = 315,
     KW_CONSTEXPR = 316,
     KW_CONST_CAST = 317,
     KW_DECLTYPE = 318,
     KW_DEFAULT = 319,
     KW_DELETE = 320,
     KW_DOUBLE = 321,
     KW_DYNAMIC_CAST = 322,
     KW_ELSE = 323,
     KW_END_PUBLISH = 324,
     KW_ENUM = 325,
     KW_EXTENSION = 326,
     KW_EXTERN = 327,
     KW_EXPLICIT = 328,
     KW_PUBLISHED = 329,
     KW_FALSE = 330,
     KW_FINAL = 331,
     KW_FLOAT = 332,
     KW_FRIEND = 333,
     KW_FOR = 334,
     KW_GOTO = 335,
     KW_HAS_VIRTUAL_DESTRUCTOR = 336,
     KW_IF = 337,
     KW_INLINE = 338,
     KW_INT = 339,
     KW_IS_ABSTRACT = 340,
     KW_IS_BASE_OF = 341,
     KW_IS_CLASS = 342,
     KW_IS_CONSTRUCTIBLE = 343,
     KW_IS_CONVERTIBLE_TO = 344,
     KW_IS_DESTRUCTIBLE = 345,
     KW_IS_EMPTY = 346,
     KW_IS_ENUM = 347,
     KW_IS_FINAL = 348,
     KW_IS_FUNDAMENTAL = 349,
     KW_IS_POD = 350,
     KW_IS_POLYMORPHIC = 351,
     KW_IS_STANDARD_LAYOUT = 352,
     KW_IS_TRIVIAL = 353,
     KW_IS_UNION = 354,
     KW_LONG = 355,
     KW_MAKE_MAP_PROPERTY = 356,
     KW_MAKE_PROPERTY = 357,
     KW_MAKE_PROPERTY2 = 358,
     KW_MAKE_SEQ = 359,
     KW_MAKE_SEQ_PROPERTY = 360,
     KW_MUTABLE = 361,
     KW_NAMESPACE = 362,
     KW_NEW = 363,
     KW_NOEXCEPT = 364,
     KW_NULLPTR = 365,
     KW_OPERATOR = 366,
     KW_OVERRIDE = 367,
     KW_PRIVATE = 368,
     KW_PROTECTED = 369,
     KW_PUBLIC = 370,
     KW_REGISTER = 371,
     KW_REINTERPRET_CAST = 372,
     KW_RETURN = 373,
     KW_SHORT = 374,
     KW_SIGNED = 375,
     KW_SIZEOF = 376,
     KW_STATIC = 377,
     KW_STATIC_ASSERT = 378,
     KW_STATIC_CAST = 379,
     KW_STRUCT = 380,
     KW_TEMPLATE = 381,
     KW_THREAD_LOCAL = 382,
     KW_THROW = 383,
     KW_TRUE = 384,
     KW_TRY = 385,
     KW_TYPEDEF = 386,
     KW_TYPEID = 387,
     KW_TYPENAME = 388,
     KW_UNDERLYING_TYPE = 389,
     KW_UNION = 390,
     KW_UNSIGNED = 391,
     KW_USING = 392,
     KW_VIRTUAL = 393,
     KW_VOID = 394,
     KW_VOLATILE = 395,
     KW_WCHAR_T = 396,
     KW_WHILE = 397,
     START_CPP = 398,
     START_CONST_EXPR = 399,
     START_TYPE = 400
   };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define SIMPLE_STRING 261
#define SIMPLE_IDENTIFIER 262
#define STRING_LITERAL 263
#define CUSTOM_LITERAL 264
#define IDENTIFIER 265
#define TYPENAME_IDENTIFIER 266
#define TYPEPACK_IDENTIFIER 267
#define SCOPING 268
#define TYPEDEFNAME 269
#define ELLIPSIS 270
#define OROR 271
#define ANDAND 272
#define EQCOMPARE 273
#define NECOMPARE 274
#define LECOMPARE 275
#define GECOMPARE 276
#define LSHIFT 277
#define RSHIFT 278
#define POINTSAT_STAR 279
#define DOT_STAR 280
#define UNARY 281
#define UNARY_NOT 282
#define UNARY_NEGATE 283
#define UNARY_MINUS 284
#define UNARY_PLUS 285
#define UNARY_STAR 286
#define UNARY_REF 287
#define POINTSAT 288
#define SCOPE 289
#define PLUSPLUS 290
#define MINUSMINUS 291
#define TIMESEQUAL 292
#define DIVIDEEQUAL 293
#define MODEQUAL 294
#define PLUSEQUAL 295
#define MINUSEQUAL 296
#define OREQUAL 297
#define ANDEQUAL 298
#define XOREQUAL 299
#define LSHIFTEQUAL 300
#define RSHIFTEQUAL 301
#define ATTR_LEFT 302
#define ATTR_RIGHT 303
#define KW_ALIGNAS 304
#define KW_ALIGNOF 305
#define KW_AUTO 306
#define KW_BEGIN_PUBLISH 307
#define KW_BLOCKING 308
#define KW_BOOL 309
#define KW_CATCH 310
#define KW_CHAR 311
#define KW_CHAR16_T 312
#define KW_CHAR32_T 313
#define KW_CLASS 314
#define KW_CONST 315
#define KW_CONSTEXPR 316
#define KW_CONST_CAST 317
#define KW_DECLTYPE 318
#define KW_DEFAULT 319
#define KW_DELETE 320
#define KW_DOUBLE 321
#define KW_DYNAMIC_CAST 322
#define KW_ELSE 323
#define KW_END_PUBLISH 324
#define KW_ENUM 325
#define KW_EXTENSION 326
#define KW_EXTERN 327
#define KW_EXPLICIT 328
#define KW_PUBLISHED 329
#define KW_FALSE 330
#define KW_FINAL 331
#define KW_FLOAT 332
#define KW_FRIEND 333
#define KW_FOR 334
#define KW_GOTO 335
#define KW_HAS_VIRTUAL_DESTRUCTOR 336
#define KW_IF 337
#define KW_INLINE 338
#define KW_INT 339
#define KW_IS_ABSTRACT 340
#define KW_IS_BASE_OF 341
#define KW_IS_CLASS 342
#define KW_IS_CONSTRUCTIBLE 343
#define KW_IS_CONVERTIBLE_TO 344
#define KW_IS_DESTRUCTIBLE 345
#define KW_IS_EMPTY 346
#define KW_IS_ENUM 347
#define KW_IS_FINAL 348
#define KW_IS_FUNDAMENTAL 349
#define KW_IS_POD 350
#define KW_IS_POLYMORPHIC 351
#define KW_IS_STANDARD_LAYOUT 352
#define KW_IS_TRIVIAL 353
#define KW_IS_UNION 354
#define KW_LONG 355
#define KW_MAKE_MAP_PROPERTY 356
#define KW_MAKE_PROPERTY 357
#define KW_MAKE_PROPERTY2 358
#define KW_MAKE_SEQ 359
#define KW_MAKE_SEQ_PROPERTY 360
#define KW_MUTABLE 361
#define KW_NAMESPACE 362
#define KW_NEW 363
#define KW_NOEXCEPT 364
#define KW_NULLPTR 365
#define KW_OPERATOR 366
#define KW_OVERRIDE 367
#define KW_PRIVATE 368
#define KW_PROTECTED 369
#define KW_PUBLIC 370
#define KW_REGISTER 371
#define KW_REINTERPRET_CAST 372
#define KW_RETURN 373
#define KW_SHORT 374
#define KW_SIGNED 375
#define KW_SIZEOF 376
#define KW_STATIC 377
#define KW_STATIC_ASSERT 378
#define KW_STATIC_CAST 379
#define KW_STRUCT 380
#define KW_TEMPLATE 381
#define KW_THREAD_LOCAL 382
#define KW_THROW 383
#define KW_TRUE 384
#define KW_TRY 385
#define KW_TYPEDEF 386
#define KW_TYPEID 387
#define KW_TYPENAME 388
#define KW_UNDERLYING_TYPE 389
#define KW_UNION 390
#define KW_UNSIGNED 391
#define KW_USING 392
#define KW_VIRTUAL 393
#define KW_VOID 394
#define KW_VOLATILE 395
#define KW_WCHAR_T 396
#define KW_WHILE 397
#define START_CPP 398
#define START_CONST_EXPR 399
#define START_TYPE 400



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void *YYPARSE_PARAM);
#else
int cppyyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void);
#else
int cppyyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_CPPYY_BUILT_X64_TMP_CPPBISON_YXX_H_INCLUDED  */

/* Copy the second part of user declarations.  */

/* Line 390 of yacc.c  */
#line 639 "built_x64/tmp/cppBison.yxx.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  104
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   7002

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  170
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  108
/* YYNRULES -- Number of rules.  */
#define YYNRULES  753
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1535

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   400

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   168,     2,     2,     2,   161,   154,     2,
     164,   166,   159,   157,   147,   158,   163,   160,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   149,   148,
     155,   150,   156,   151,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   165,     2,   169,   153,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   146,   152,   167,   162,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    17,    20,    22,
      26,    31,    37,    42,    43,    49,    51,    53,    55,    57,
      59,    62,    64,    66,    69,    72,    75,    78,    86,    96,
     108,   118,   130,   144,   154,   168,   178,   186,   192,   193,
     197,   199,   202,   205,   209,   212,   215,   218,   221,   224,
     227,   230,   233,   236,   239,   242,   247,   253,   259,   261,
     265,   267,   272,   277,   278,   283,   287,   291,   295,   297,
     300,   305,   306,   311,   315,   318,   323,   324,   331,   332,
     339,   340,   348,   349,   361,   362,   375,   376,   385,   386,
     396,   398,   400,   403,   406,   409,   412,   415,   418,   421,
     424,   427,   432,   438,   445,   450,   452,   454,   456,   458,
     460,   462,   464,   466,   468,   470,   472,   474,   476,   478,
     480,   482,   484,   486,   488,   490,   492,   494,   496,   498,
     500,   502,   504,   506,   508,   510,   512,   514,   516,   518,
     520,   523,   526,   528,   530,   532,   534,   537,   538,   545,
     548,   550,   552,   554,   558,   560,   562,   564,   567,   572,
     575,   579,   583,   588,   591,   595,   597,   599,   601,   603,
     605,   608,   612,   615,   618,   621,   624,   627,   631,   636,
     640,   641,   648,   651,   655,   657,   661,   666,   668,   670,
     672,   676,   679,   681,   685,   687,   689,   691,   695,   698,
     700,   704,   706,   709,   711,   714,   716,   720,   726,   730,
     734,   736,   740,   744,   748,   752,   757,   759,   761,   764,
     766,   770,   774,   780,   784,   789,   795,   799,   804,   810,
     813,   818,   820,   822,   824,   826,   829,   832,   835,   838,
     841,   845,   850,   852,   854,   857,   860,   863,   866,   869,
     873,   878,   886,   890,   892,   895,   898,   901,   904,   907,
     910,   914,   919,   927,   931,   933,   935,   938,   941,   944,
     947,   950,   953,   957,   962,   964,   966,   969,   972,   975,
     978,   981,   984,   988,   993,   999,  1009,  1019,  1029,  1031,
    1033,  1036,  1038,  1040,  1042,  1046,  1051,  1056,  1061,  1066,
    1068,  1070,  1072,  1074,  1077,  1079,  1081,  1083,  1087,  1092,
    1095,  1100,  1105,  1110,  1112,  1114,  1116,  1119,  1123,  1126,
    1131,  1136,  1138,  1140,  1142,  1145,  1149,  1152,  1156,  1158,
    1163,  1169,  1175,  1176,  1183,  1184,  1194,  1196,  1198,  1200,
    1202,  1205,  1209,  1211,  1214,  1217,  1220,  1224,  1228,  1232,
    1236,  1240,  1244,  1249,  1253,  1255,  1260,  1263,  1265,  1267,
    1269,  1273,  1279,  1281,  1284,  1289,  1291,  1294,  1297,  1299,
    1301,  1303,  1304,  1311,  1312,  1320,  1325,  1331,  1335,  1341,
    1346,  1348,  1350,  1352,  1354,  1356,  1358,  1360,  1362,  1364,
    1366,  1368,  1370,  1372,  1375,  1378,  1381,  1384,  1386,  1388,
    1391,  1393,  1394,  1397,  1399,  1402,  1404,  1406,  1408,  1410,
    1412,  1414,  1416,  1418,  1420,  1422,  1424,  1426,  1428,  1430,
    1432,  1434,  1436,  1438,  1440,  1442,  1444,  1446,  1448,  1450,
    1452,  1454,  1456,  1458,  1460,  1462,  1464,  1466,  1468,  1470,
    1472,  1474,  1476,  1478,  1480,  1482,  1484,  1486,  1488,  1490,
    1492,  1494,  1496,  1498,  1500,  1502,  1504,  1506,  1508,  1510,
    1512,  1514,  1516,  1518,  1520,  1522,  1524,  1526,  1528,  1530,
    1532,  1534,  1536,  1538,  1540,  1542,  1544,  1546,  1548,  1550,
    1552,  1554,  1556,  1558,  1560,  1562,  1564,  1566,  1568,  1570,
    1572,  1574,  1576,  1578,  1580,  1582,  1584,  1586,  1588,  1590,
    1592,  1594,  1596,  1598,  1600,  1602,  1604,  1606,  1608,  1610,
    1612,  1614,  1616,  1618,  1620,  1622,  1624,  1626,  1628,  1630,
    1632,  1634,  1636,  1638,  1640,  1642,  1644,  1646,  1648,  1650,
    1652,  1654,  1656,  1658,  1662,  1664,  1666,  1668,  1670,  1672,
    1676,  1678,  1683,  1691,  1699,  1707,  1715,  1720,  1725,  1731,
    1736,  1739,  1742,  1745,  1748,  1751,  1754,  1758,  1762,  1766,
    1770,  1774,  1778,  1782,  1786,  1790,  1794,  1798,  1802,  1806,
    1810,  1814,  1818,  1824,  1829,  1834,  1838,  1842,  1846,  1850,
    1852,  1857,  1865,  1873,  1881,  1889,  1894,  1899,  1904,  1909,
    1914,  1919,  1924,  1929,  1934,  1939,  1944,  1949,  1954,  1959,
    1964,  1969,  1975,  1980,  1983,  1989,  1994,  1999,  2002,  2005,
    2008,  2011,  2014,  2017,  2021,  2025,  2029,  2033,  2037,  2041,
    2045,  2049,  2053,  2057,  2061,  2065,  2069,  2073,  2077,  2081,
    2085,  2089,  2095,  2100,  2105,  2109,  2113,  2117,  2121,  2123,
    2125,  2127,  2129,  2131,  2133,  2135,  2137,  2139,  2141,  2143,
    2152,  2164,  2169,  2174,  2181,  2186,  2191,  2198,  2205,  2210,
    2215,  2220,  2225,  2230,  2235,  2240,  2245,  2250,  2255,  2257,
    2262,  2270,  2278,  2286,  2294,  2299,  2304,  2310,  2315,  2318,
    2324,  2329,  2334,  2337,  2340,  2343,  2346,  2349,  2353,  2357,
    2361,  2365,  2369,  2373,  2377,  2381,  2385,  2389,  2393,  2397,
    2401,  2405,  2409,  2413,  2417,  2421,  2427,  2432,  2437,  2441,
    2445,  2449,  2453,  2455,  2457,  2459,  2461,  2463,  2465,  2467,
    2469,  2471,  2473,  2475,  2477,  2479,  2481,  2484,  2489,  2492,
    2496,  2498,  2501,  2503,  2506,  2509,  2511,  2513,  2515,  2517,
    2519,  2521,  2523,  2525,  2527,  2529,  2531,  2533,  2535,  2537,
    2539,  2541,  2544,  2547
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     171,     0,    -1,   143,   172,    -1,   144,   267,    -1,   145,
     234,    -1,   277,    -1,   172,   148,    -1,   172,   177,    -1,
     174,    -1,   173,   147,   174,    -1,   274,   164,   264,   166,
      -1,   274,   164,   264,   166,    15,    -1,   274,   146,   264,
     167,    -1,    -1,   180,   146,   176,   172,   167,    -1,   183,
      -1,   201,    -1,   175,    -1,   251,    -1,   178,    -1,   131,
     186,    -1,    52,    -1,    69,    -1,    74,   149,    -1,   115,
     149,    -1,   114,   149,    -1,   113,   149,    -1,   102,   164,
     274,   147,    10,   166,   148,    -1,   102,   164,   274,   147,
      10,   147,    10,   166,   148,    -1,   102,   164,   274,   147,
      10,   147,    10,   147,    10,   166,   148,    -1,   105,   164,
     274,   147,    10,   147,    10,   166,   148,    -1,   105,   164,
     274,   147,    10,   147,    10,   147,    10,   166,   148,    -1,
     105,   164,   274,   147,    10,   147,    10,   147,    10,   147,
      10,   166,   148,    -1,   103,   164,   274,   147,    10,   147,
      10,   166,   148,    -1,   103,   164,   274,   147,    10,   147,
      10,   147,    10,   147,    10,   166,   148,    -1,   104,   164,
     274,   147,    10,   147,    10,   166,   148,    -1,   123,   164,
     267,   147,   276,   166,   148,    -1,   123,   164,   267,   166,
     148,    -1,    -1,    78,   179,   177,    -1,   277,    -1,    60,
     180,    -1,    72,   180,    -1,    72,     6,   180,    -1,   122,
     180,    -1,    83,   180,    -1,   138,   180,    -1,    73,   180,
      -1,   116,   180,    -1,   140,   180,    -1,   106,   180,    -1,
      61,   180,    -1,    53,   180,    -1,    71,   180,    -1,   127,
     180,    -1,    47,   181,    48,   180,    -1,    49,   164,   267,
     166,   180,    -1,    49,   164,   231,   166,   180,    -1,   182,
      -1,   182,   147,   181,    -1,   274,    -1,   274,   164,   214,
     166,    -1,   137,   274,   149,   182,    -1,    -1,   180,   233,
     184,   185,    -1,   180,   231,   148,    -1,   180,   189,   218,
      -1,   180,   192,   219,    -1,   254,    -1,   210,   219,    -1,
     210,   217,   147,   185,    -1,    -1,   180,   233,   187,   188,
      -1,   180,   192,   219,    -1,   210,   219,    -1,   210,   217,
     147,   188,    -1,    -1,    10,   164,   190,   212,   166,   198,
      -1,    -1,    11,   164,   191,   212,   166,   198,    -1,    -1,
     162,   274,   164,   193,   212,   166,   198,    -1,    -1,    11,
     164,   159,   208,   166,   164,   194,   212,   166,   198,   211,
      -1,    -1,    11,   164,    13,   159,   208,   166,   164,   195,
     212,   166,   198,   211,    -1,    -1,   111,   229,   224,   164,
     196,   212,   166,   198,    -1,    -1,   111,    60,   229,   224,
     164,   197,   212,   166,   198,    -1,    10,    -1,   277,    -1,
     198,    60,    -1,   198,   140,    -1,   198,   109,    -1,   198,
      76,    -1,   198,   112,    -1,   198,   154,    -1,   198,    17,
      -1,   198,   106,    -1,   198,    61,    -1,   198,   128,   164,
     166,    -1,   198,   128,   164,   274,   166,    -1,   198,   128,
     164,   274,    15,   166,    -1,   198,    47,   181,    48,    -1,
     168,    -1,   162,    -1,   159,    -1,   160,    -1,   161,    -1,
     157,    -1,   158,    -1,   152,    -1,   154,    -1,   153,    -1,
      16,    -1,    17,    -1,    18,    -1,    19,    -1,    20,    -1,
      21,    -1,   155,    -1,   156,    -1,    22,    -1,    23,    -1,
     150,    -1,   147,    -1,    35,    -1,    36,    -1,    37,    -1,
      38,    -1,    39,    -1,    40,    -1,    41,    -1,    42,    -1,
      43,    -1,    44,    -1,    45,    -1,    46,    -1,    33,    -1,
     165,   169,    -1,   164,   166,    -1,   108,    -1,    65,    -1,
     183,    -1,   201,    -1,    72,   201,    -1,    -1,   126,   202,
     155,   203,   156,   200,    -1,   126,   183,    -1,   277,    -1,
     204,    -1,   206,    -1,   204,   147,   206,    -1,    59,    -1,
     133,    -1,   205,    -1,   205,   274,    -1,   205,   274,   150,
     234,    -1,   205,    15,    -1,   205,    15,   274,    -1,   207,
     225,   216,    -1,    60,   207,   225,   216,    -1,   207,   226,
      -1,    60,   207,   226,    -1,   255,    -1,    10,    -1,    11,
      -1,    12,    -1,   275,    -1,   111,   199,    -1,   111,     6,
      10,    -1,    60,   208,    -1,   140,   208,    -1,   159,   208,
      -1,   154,   208,    -1,    17,   208,    -1,    13,   159,   208,
      -1,   208,   165,   263,   169,    -1,   164,   208,   166,    -1,
      -1,   208,   164,   209,   214,   166,   198,    -1,   208,   211,
      -1,   208,   149,     4,    -1,   277,    -1,    33,   232,   228,
      -1,    33,    60,   232,   228,    -1,   277,    -1,    15,    -1,
     213,    -1,   213,   147,    15,    -1,   213,    15,    -1,   222,
      -1,   213,   147,   222,    -1,   277,    -1,    15,    -1,   215,
      -1,   215,   147,    15,    -1,   215,    15,    -1,   223,    -1,
     215,   147,   223,    -1,   277,    -1,   150,   266,    -1,   277,
      -1,   150,   267,    -1,   148,    -1,   146,   259,   167,    -1,
     149,   173,   146,   259,   167,    -1,   150,    64,   148,    -1,
     150,    65,   148,    -1,   148,    -1,   146,   259,   167,    -1,
     150,   267,   148,    -1,   150,    64,   148,    -1,   150,    65,
     148,    -1,   150,   146,   220,   167,    -1,   277,    -1,   221,
      -1,   221,   147,    -1,   267,    -1,   146,   220,   167,    -1,
     221,   147,   267,    -1,   221,   147,   146,   220,   167,    -1,
     229,   225,   217,    -1,    60,   229,   225,   217,    -1,    60,
     116,   229,   225,   217,    -1,   230,   226,   217,    -1,    60,
     230,   226,   217,    -1,    60,   116,   230,   226,   217,    -1,
     116,   222,    -1,    47,   181,    48,   222,    -1,   222,    -1,
     269,    -1,   277,    -1,   275,    -1,    60,   224,    -1,   140,
     224,    -1,   159,   224,    -1,   154,   224,    -1,    17,   224,
      -1,    13,   159,   224,    -1,   224,   165,   263,   169,    -1,
     277,    -1,   275,    -1,    60,   225,    -1,   140,   225,    -1,
     159,   225,    -1,   154,   225,    -1,    17,   225,    -1,    13,
     159,   225,    -1,   225,   165,   263,   169,    -1,   164,   225,
     166,   164,   212,   166,   198,    -1,   164,   225,   166,    -1,
      15,    -1,    15,   274,    -1,    60,   226,    -1,   140,   226,
      -1,   159,   226,    -1,   154,   226,    -1,    17,   226,    -1,
      13,   159,   226,    -1,   226,   165,   263,   169,    -1,   164,
     226,   166,   164,   212,   166,   198,    -1,   164,   226,   166,
      -1,   277,    -1,    15,    -1,    15,   274,    -1,    60,   227,
      -1,   140,   227,    -1,   159,   227,    -1,   154,   227,    -1,
      17,   227,    -1,    13,   159,   227,    -1,   227,   165,   263,
     169,    -1,   277,    -1,    15,    -1,    15,   274,    -1,    60,
     228,    -1,   140,   228,    -1,   159,   227,    -1,   154,   227,
      -1,    17,   227,    -1,    13,   159,   227,    -1,   227,   165,
     263,   169,    -1,   164,   212,   166,   198,   211,    -1,   164,
     159,   227,   166,   164,   212,   166,   198,   211,    -1,   164,
     154,   227,   166,   164,   212,   166,   198,   211,    -1,   164,
      17,   227,   166,   164,   212,   166,   198,   211,    -1,   255,
      -1,    11,    -1,   133,   274,    -1,   236,    -1,   238,    -1,
     244,    -1,   250,   235,   274,    -1,   249,   275,   149,   246,
      -1,    63,   164,   267,   166,    -1,    63,   164,    51,   166,
      -1,   134,   164,   234,   166,    -1,    51,    -1,    12,    -1,
     255,    -1,    11,    -1,   133,   274,    -1,   236,    -1,   238,
      -1,   244,    -1,   250,   235,   274,    -1,   249,   275,   149,
     246,    -1,   249,   274,    -1,    63,   164,   267,   166,    -1,
      63,   164,    51,   166,    -1,   134,   164,   234,   166,    -1,
      51,    -1,   255,    -1,    11,    -1,   133,   274,    -1,   250,
     235,   274,    -1,   249,   274,    -1,    63,   164,   267,   166,
      -1,   134,   164,   234,   166,    -1,    51,    -1,   231,    -1,
      10,    -1,   229,   228,    -1,    60,   229,   228,    -1,   230,
     228,    -1,    60,   230,   228,    -1,   277,    -1,   235,    47,
     181,    48,    -1,   235,    49,   164,   267,   166,    -1,   235,
      49,   164,   231,   166,    -1,    -1,   250,   235,   146,   237,
     172,   167,    -1,    -1,   250,   235,   275,   239,   240,   241,
     146,   172,   167,    -1,   277,    -1,    76,    -1,   277,    -1,
     242,    -1,   149,   243,    -1,   242,   147,   243,    -1,   273,
      -1,   115,   273,    -1,   114,   273,    -1,   113,   273,    -1,
     138,   115,   273,    -1,   138,   114,   273,    -1,   138,   113,
     273,    -1,   115,   138,   273,    -1,   114,   138,   273,    -1,
     113,   138,   273,    -1,   245,   146,   248,   167,    -1,   249,
     149,   246,    -1,   249,    -1,   249,   275,   149,   246,    -1,
     249,   275,    -1,   256,    -1,    11,    -1,   277,    -1,   247,
     274,   147,    -1,   247,   274,   150,   267,   147,    -1,   247,
      -1,   247,   274,    -1,   247,   274,   150,   267,    -1,    70,
      -1,    70,    59,    -1,    70,   125,    -1,    59,    -1,   125,
      -1,   135,    -1,    -1,   107,   274,   146,   252,   172,   167,
      -1,    -1,    83,   107,   274,   146,   253,   172,   167,    -1,
     107,   146,   172,   167,    -1,    83,   107,   146,   172,   167,
      -1,   137,   274,   148,    -1,   137,   274,   150,   234,   148,
      -1,   137,   107,   274,   148,    -1,   256,    -1,   257,    -1,
     258,    -1,    54,    -1,    56,    -1,   141,    -1,    57,    -1,
      58,    -1,   119,    -1,   100,    -1,   136,    -1,   120,    -1,
      84,    -1,   119,   256,    -1,   100,   256,    -1,   136,   256,
      -1,   120,   256,    -1,    77,    -1,    66,    -1,   100,    66,
      -1,   139,    -1,    -1,   260,   261,    -1,   277,    -1,   261,
     262,    -1,     3,    -1,     4,    -1,     6,    -1,     8,    -1,
       9,    -1,     5,    -1,    10,    -1,    11,    -1,    12,    -1,
      13,    -1,     7,    -1,    15,    -1,    16,    -1,    17,    -1,
      18,    -1,    19,    -1,    20,    -1,    21,    -1,    22,    -1,
      23,    -1,    24,    -1,    25,    -1,    33,    -1,    34,    -1,
      35,    -1,    36,    -1,    37,    -1,    38,    -1,    39,    -1,
      40,    -1,    41,    -1,    42,    -1,    43,    -1,    44,    -1,
      45,    -1,    46,    -1,    47,    -1,    48,    -1,    49,    -1,
      50,    -1,    51,    -1,    54,    -1,    55,    -1,    56,    -1,
      57,    -1,    58,    -1,    59,    -1,    60,    -1,    61,    -1,
      62,    -1,    63,    -1,    64,    -1,    65,    -1,    66,    -1,
      67,    -1,    68,    -1,    70,    -1,    72,    -1,    73,    -1,
      75,    -1,    76,    -1,    77,    -1,    78,    -1,    79,    -1,
      80,    -1,    82,    -1,    83,    -1,    84,    -1,   100,    -1,
     106,    -1,   107,    -1,   108,    -1,   110,    -1,   111,    -1,
     112,    -1,   113,    -1,   114,    -1,   115,    -1,    74,    -1,
     116,    -1,   117,    -1,   118,    -1,   119,    -1,   120,    -1,
     121,    -1,   122,    -1,   123,    -1,   124,    -1,   125,    -1,
     126,    -1,   127,    -1,   128,    -1,   129,    -1,   130,    -1,
     131,    -1,   132,    -1,   133,    -1,   134,    -1,   135,    -1,
     136,    -1,   137,    -1,   138,    -1,   139,    -1,   140,    -1,
     141,    -1,   142,    -1,   157,    -1,   158,    -1,   159,    -1,
     160,    -1,   154,    -1,   152,    -1,   153,    -1,   168,    -1,
     162,    -1,   150,    -1,   161,    -1,   155,    -1,   156,    -1,
     164,    -1,   166,    -1,   163,    -1,   147,    -1,   148,    -1,
     149,    -1,   165,    -1,   169,    -1,   151,    -1,   146,   261,
     167,    -1,   277,    -1,   267,    -1,   277,    -1,   265,    -1,
     267,    -1,   265,   147,   267,    -1,   268,    -1,   164,   234,
     166,   266,    -1,   124,   155,   234,   156,   164,   265,   166,
      -1,    67,   155,   234,   156,   164,   265,   166,    -1,    62,
     155,   234,   156,   164,   265,   166,    -1,   117,   155,   234,
     156,   164,   265,   166,    -1,   121,   164,   234,   166,    -1,
     121,   164,    10,   166,    -1,   121,    15,   164,   274,   166,
      -1,    50,   164,   234,   166,    -1,   168,   266,    -1,   162,
     266,    -1,   158,   266,    -1,   157,   266,    -1,   159,   266,
      -1,   154,   266,    -1,   266,   159,   266,    -1,   266,   160,
     266,    -1,   266,   161,   266,    -1,   266,   157,   266,    -1,
     266,   158,   266,    -1,   266,   152,   266,    -1,   266,   153,
     266,    -1,   266,   154,   266,    -1,   266,    16,   266,    -1,
     266,    17,   266,    -1,   266,    18,   266,    -1,   266,    19,
     266,    -1,   266,    20,   266,    -1,   266,    21,   266,    -1,
     266,    22,   266,    -1,   266,    23,   266,    -1,   266,   151,
     266,   149,   266,    -1,   266,   165,   267,   169,    -1,   266,
     164,   265,   166,    -1,   266,   164,   166,    -1,   266,   163,
     266,    -1,   266,    33,   266,    -1,   164,   265,   166,    -1,
     268,    -1,   164,   234,   166,   267,    -1,   124,   155,   234,
     156,   164,   265,   166,    -1,    67,   155,   234,   156,   164,
     265,   166,    -1,    62,   155,   234,   156,   164,   265,   166,
      -1,   117,   155,   234,   156,   164,   265,   166,    -1,    11,
     164,   264,   166,    -1,    11,   146,   264,   167,    -1,    84,
     164,   264,   166,    -1,    56,   164,   264,   166,    -1,   141,
     164,   264,   166,    -1,    57,   164,   264,   166,    -1,    58,
     164,   264,   166,    -1,    54,   164,   264,   166,    -1,   119,
     164,   264,   166,    -1,   100,   164,   264,   166,    -1,   136,
     164,   264,   166,    -1,   120,   164,   264,   166,    -1,    77,
     164,   264,   166,    -1,    66,   164,   264,   166,    -1,   121,
     164,   234,   166,    -1,   121,   164,    10,   166,    -1,   121,
      15,   164,   274,   166,    -1,    50,   164,   234,   166,    -1,
     108,   232,    -1,   108,   232,   164,   264,   166,    -1,   132,
     164,   234,   166,    -1,   132,   164,   267,   166,    -1,   168,
     267,    -1,   162,   267,    -1,   158,   267,    -1,   157,   267,
      -1,   159,   267,    -1,   154,   267,    -1,   267,   159,   267,
      -1,   267,   160,   267,    -1,   267,   161,   267,    -1,   267,
     157,   267,    -1,   267,   158,   267,    -1,   267,   152,   267,
      -1,   267,   153,   267,    -1,   267,   154,   267,    -1,   267,
      16,   267,    -1,   267,    17,   267,    -1,   267,    18,   267,
      -1,   267,    19,   267,    -1,   267,    20,   267,    -1,   267,
      21,   267,    -1,   267,   155,   267,    -1,   267,   156,   267,
      -1,   267,    22,   267,    -1,   267,    23,   267,    -1,   267,
     151,   267,   149,   267,    -1,   267,   165,   267,   169,    -1,
     267,   164,   265,   166,    -1,   267,   164,   166,    -1,   267,
     163,   267,    -1,   267,    33,   267,    -1,   164,   265,   166,
      -1,     4,    -1,   129,    -1,    75,    -1,     5,    -1,     3,
      -1,   276,    -1,     9,    -1,    10,    -1,    76,    -1,   112,
      -1,   110,    -1,   165,   271,   169,   198,   211,   146,   259,
     167,    -1,   165,   271,   169,   164,   212,   166,   198,   211,
     146,   259,   167,    -1,    81,   164,   234,   166,    -1,    85,
     164,   234,   166,    -1,    86,   164,   234,   147,   234,   166,
      -1,    87,   164,   234,   166,    -1,    88,   164,   234,   166,
      -1,    88,   164,   234,   147,   234,   166,    -1,    89,   164,
     234,   147,   234,   166,    -1,    90,   164,   234,   166,    -1,
      91,   164,   234,   166,    -1,    92,   164,   234,   166,    -1,
      93,   164,   234,   166,    -1,    94,   164,   234,   166,    -1,
      95,   164,   234,   166,    -1,    96,   164,   234,   166,    -1,
      97,   164,   234,   166,    -1,    98,   164,   234,   166,    -1,
      99,   164,   234,   166,    -1,   270,    -1,   164,   234,   166,
     267,    -1,   124,   155,   234,   156,   164,   265,   166,    -1,
      67,   155,   234,   156,   164,   265,   166,    -1,    62,   155,
     234,   156,   164,   265,   166,    -1,   117,   155,   234,   156,
     164,   265,   166,    -1,   121,   164,   234,   166,    -1,   121,
     164,    10,   166,    -1,   121,    15,   164,   274,   166,    -1,
      50,   164,   234,   166,    -1,   108,   232,    -1,   108,   232,
     164,   264,   166,    -1,   132,   164,   234,   166,    -1,   132,
     164,   267,   166,    -1,   168,   267,    -1,   162,   267,    -1,
     158,   267,    -1,   157,   267,    -1,   154,   267,    -1,   269,
     159,   267,    -1,   269,   160,   267,    -1,   269,   161,   267,
      -1,   269,   157,   267,    -1,   269,   158,   267,    -1,   269,
     152,   267,    -1,   269,   153,   267,    -1,   269,   154,   267,
      -1,   269,    16,   267,    -1,   269,    17,   267,    -1,   269,
      18,   267,    -1,   269,    19,   267,    -1,   269,    20,   267,
      -1,   269,    21,   267,    -1,   269,   155,   267,    -1,   269,
     156,   267,    -1,   269,    22,   267,    -1,   269,    23,   267,
      -1,   269,   151,   267,   149,   267,    -1,   269,   165,   267,
     169,    -1,   269,   164,   265,   166,    -1,   269,   164,   166,
      -1,   269,   163,   267,    -1,   269,    33,   267,    -1,   164,
     265,   166,    -1,     4,    -1,   129,    -1,    75,    -1,     5,
      -1,     3,    -1,   276,    -1,     9,    -1,    10,    -1,    76,
      -1,   112,    -1,   110,    -1,   277,    -1,   150,    -1,   154,
      -1,   272,   217,    -1,   271,   147,   272,   217,    -1,   154,
     274,    -1,   154,   274,    15,    -1,   274,    -1,   159,   274,
      -1,   274,    -1,   133,   274,    -1,   274,    15,    -1,    10,
      -1,    11,    -1,    12,    -1,    76,    -1,   112,    -1,   120,
      -1,    77,    -1,   115,    -1,   113,    -1,   122,    -1,    10,
      -1,    11,    -1,    12,    -1,   112,    -1,     6,    -1,     8,
      -1,   276,     6,    -1,   276,     8,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   448,   448,   449,   453,   460,   461,   462,   466,   467,
     471,   475,   479,   492,   491,   503,   504,   505,   506,   507,
     508,   509,   522,   531,   535,   543,   547,   551,   562,   583,
     613,   630,   658,   695,   717,   750,   772,   783,   797,   796,
     811,   815,   820,   824,   835,   839,   843,   847,   851,   855,
     859,   863,   867,   871,   875,   879,   884,   888,   895,   896,
     900,   901,   902,   907,   906,   922,   931,   939,   947,   955,
     966,   982,   981,   996,  1011,  1020,  1035,  1034,  1059,  1058,
    1086,  1085,  1116,  1115,  1134,  1133,  1154,  1153,  1185,  1184,
    1210,  1223,  1227,  1231,  1235,  1248,  1252,  1256,  1260,  1264,
    1269,  1274,  1278,  1282,  1286,  1293,  1297,  1301,  1305,  1309,
    1313,  1317,  1321,  1325,  1329,  1333,  1337,  1341,  1345,  1349,
    1353,  1357,  1361,  1365,  1369,  1373,  1377,  1381,  1385,  1389,
    1393,  1397,  1401,  1405,  1409,  1413,  1417,  1421,  1425,  1429,
    1433,  1437,  1441,  1445,  1452,  1453,  1457,  1459,  1458,  1466,
    1470,  1471,  1475,  1481,  1490,  1491,  1495,  1499,  1503,  1507,
    1513,  1519,  1525,  1532,  1537,  1546,  1550,  1555,  1563,  1575,
    1579,  1593,  1608,  1613,  1618,  1623,  1628,  1633,  1638,  1643,
    1649,  1648,  1679,  1689,  1699,  1703,  1707,  1716,  1720,  1725,
    1729,  1734,  1742,  1747,  1755,  1759,  1764,  1768,  1773,  1781,
    1786,  1794,  1798,  1805,  1809,  1816,  1820,  1824,  1828,  1832,
    1839,  1843,  1847,  1851,  1855,  1859,  1866,  1867,  1868,  1872,
    1875,  1876,  1877,  1881,  1886,  1892,  1898,  1903,  1909,  1915,
    1919,  1930,  1934,  1944,  1948,  1952,  1957,  1962,  1967,  1972,
    1977,  1982,  1990,  1994,  1998,  2003,  2008,  2013,  2018,  2023,
    2028,  2033,  2039,  2047,  2052,  2057,  2062,  2067,  2072,  2077,
    2082,  2087,  2092,  2098,  2106,  2110,  2115,  2120,  2125,  2130,
    2135,  2140,  2145,  2150,  2158,  2162,  2167,  2172,  2177,  2182,
    2187,  2192,  2197,  2202,  2207,  2213,  2220,  2227,  2237,  2241,
    2249,  2253,  2257,  2261,  2265,  2281,  2297,  2306,  2310,  2320,
    2327,  2338,  2342,  2350,  2354,  2358,  2362,  2366,  2382,  2398,
    2416,  2425,  2429,  2439,  2446,  2450,  2458,  2462,  2478,  2494,
    2503,  2513,  2520,  2524,  2532,  2536,  2541,  2545,  2553,  2554,
    2555,  2556,  2561,  2560,  2585,  2584,  2614,  2615,  2622,  2623,
    2627,  2628,  2632,  2636,  2640,  2644,  2648,  2652,  2656,  2660,
    2664,  2668,  2675,  2683,  2687,  2691,  2696,  2704,  2708,  2715,
    2716,  2721,  2728,  2729,  2734,  2742,  2746,  2750,  2757,  2761,
    2765,  2773,  2772,  2795,  2794,  2817,  2818,  2822,  2828,  2835,
    2844,  2845,  2846,  2850,  2854,  2858,  2862,  2866,  2870,  2875,
    2880,  2885,  2890,  2894,  2899,  2908,  2913,  2921,  2925,  2929,
    2937,  2947,  2947,  2957,  2958,  2962,  2963,  2964,  2965,  2966,
    2967,  2968,  2969,  2970,  2971,  2972,  2973,  2973,  2973,  2974,
    2974,  2974,  2974,  2975,  2975,  2975,  2975,  2975,  2976,  2976,
    2976,  2977,  2977,  2977,  2977,  2977,  2978,  2978,  2978,  2978,
    2978,  2979,  2979,  2980,  2980,  2980,  2980,  2980,  2981,  2981,
    2981,  2981,  2981,  2982,  2982,  2982,  2982,  2983,  2983,  2983,
    2983,  2983,  2984,  2984,  2984,  2984,  2984,  2985,  2985,  2985,
    2985,  2985,  2985,  2986,  2986,  2986,  2986,  2986,  2987,  2987,
    2987,  2987,  2988,  2988,  2988,  2988,  2989,  2989,  2989,  2989,
    2989,  2990,  2990,  2990,  2990,  2991,  2991,  2991,  2991,  2991,
    2992,  2992,  2992,  2992,  2993,  2993,  2993,  2993,  2993,  2994,
    2994,  2997,  2997,  2997,  2997,  2997,  2997,  2997,  2997,  2997,
    2997,  2997,  2998,  2998,  2998,  2998,  2998,  2998,  2998,  2998,
    2998,  2998,  2999,  2999,  3003,  3007,  3014,  3018,  3025,  3029,
    3036,  3040,  3044,  3048,  3052,  3056,  3060,  3064,  3076,  3080,
    3084,  3088,  3092,  3096,  3100,  3104,  3108,  3112,  3116,  3120,
    3124,  3128,  3132,  3136,  3140,  3144,  3148,  3152,  3156,  3160,
    3164,  3168,  3172,  3176,  3180,  3184,  3188,  3192,  3196,  3204,
    3208,  3212,  3216,  3220,  3224,  3228,  3238,  3248,  3254,  3260,
    3266,  3272,  3278,  3284,  3291,  3298,  3305,  3312,  3318,  3324,
    3328,  3340,  3344,  3348,  3352,  3356,  3367,  3378,  3382,  3386,
    3390,  3394,  3398,  3402,  3406,  3410,  3414,  3418,  3422,  3426,
    3430,  3434,  3438,  3442,  3446,  3450,  3454,  3458,  3462,  3466,
    3470,  3474,  3478,  3482,  3486,  3490,  3494,  3498,  3505,  3509,
    3513,  3517,  3521,  3525,  3529,  3533,  3537,  3543,  3549,  3553,
    3559,  3566,  3570,  3574,  3578,  3582,  3586,  3590,  3594,  3598,
    3602,  3606,  3610,  3614,  3618,  3622,  3626,  3630,  3644,  3648,
    3652,  3656,  3660,  3664,  3668,  3672,  3684,  3688,  3692,  3696,
    3700,  3711,  3722,  3726,  3730,  3734,  3738,  3742,  3746,  3750,
    3754,  3758,  3762,  3766,  3770,  3774,  3778,  3782,  3786,  3790,
    3794,  3798,  3802,  3806,  3810,  3814,  3818,  3822,  3826,  3830,
    3834,  3838,  3845,  3849,  3853,  3857,  3861,  3865,  3869,  3873,
    3877,  3883,  3889,  3897,  3901,  3905,  3909,  3916,  3926,  3932,
    3938,  3948,  3960,  3968,  3972,  4002,  4006,  4010,  4014,  4018,
    4022,  4028,  4032,  4036,  4040,  4051,  4055,  4059,  4063,  4071,
    4075,  4079,  4085,  4096
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK",
  "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL", "CUSTOM_LITERAL",
  "IDENTIFIER", "TYPENAME_IDENTIFIER", "TYPEPACK_IDENTIFIER", "SCOPING",
  "TYPEDEFNAME", "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE",
  "LECOMPARE", "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR",
  "DOT_STAR", "UNARY", "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS",
  "UNARY_PLUS", "UNARY_STAR", "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS",
  "MINUSMINUS", "TIMESEQUAL", "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL",
  "MINUSEQUAL", "OREQUAL", "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL",
  "RSHIFTEQUAL", "ATTR_LEFT", "ATTR_RIGHT", "KW_ALIGNAS", "KW_ALIGNOF",
  "KW_AUTO", "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL", "KW_CATCH",
  "KW_CHAR", "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS", "KW_CONST",
  "KW_CONSTEXPR", "KW_CONST_CAST", "KW_DECLTYPE", "KW_DEFAULT",
  "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH",
  "KW_ENUM", "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED",
  "KW_FALSE", "KW_FINAL", "KW_FLOAT", "KW_FRIEND", "KW_FOR", "KW_GOTO",
  "KW_HAS_VIRTUAL_DESTRUCTOR", "KW_IF", "KW_INLINE", "KW_INT",
  "KW_IS_ABSTRACT", "KW_IS_BASE_OF", "KW_IS_CLASS", "KW_IS_CONSTRUCTIBLE",
  "KW_IS_CONVERTIBLE_TO", "KW_IS_DESTRUCTIBLE", "KW_IS_EMPTY",
  "KW_IS_ENUM", "KW_IS_FINAL", "KW_IS_FUNDAMENTAL", "KW_IS_POD",
  "KW_IS_POLYMORPHIC", "KW_IS_STANDARD_LAYOUT", "KW_IS_TRIVIAL",
  "KW_IS_UNION", "KW_LONG", "KW_MAKE_MAP_PROPERTY", "KW_MAKE_PROPERTY",
  "KW_MAKE_PROPERTY2", "KW_MAKE_SEQ", "KW_MAKE_SEQ_PROPERTY", "KW_MUTABLE",
  "KW_NAMESPACE", "KW_NEW", "KW_NOEXCEPT", "KW_NULLPTR", "KW_OPERATOR",
  "KW_OVERRIDE", "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER",
  "KW_REINTERPRET_CAST", "KW_RETURN", "KW_SHORT", "KW_SIGNED", "KW_SIZEOF",
  "KW_STATIC", "KW_STATIC_ASSERT", "KW_STATIC_CAST", "KW_STRUCT",
  "KW_TEMPLATE", "KW_THREAD_LOCAL", "KW_THROW", "KW_TRUE", "KW_TRY",
  "KW_TYPEDEF", "KW_TYPEID", "KW_TYPENAME", "KW_UNDERLYING_TYPE",
  "KW_UNION", "KW_UNSIGNED", "KW_USING", "KW_VIRTUAL", "KW_VOID",
  "KW_VOLATILE", "KW_WCHAR_T", "KW_WHILE", "START_CPP", "START_CONST_EXPR",
  "START_TYPE", "'{'", "','", "';'", "':'", "'='", "'?'", "'|'", "'^'",
  "'&'", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'.'",
  "'('", "'['", "')'", "'}'", "'!'", "']'", "$accept", "grammar", "cpp",
  "constructor_inits", "constructor_init", "extern_c", "$@1",
  "declaration", "friend_declaration", "$@2", "storage_class",
  "attribute_specifiers", "attribute_specifier", "type_like_declaration",
  "$@3", "multiple_instance_identifiers", "typedef_declaration", "$@4",
  "typedef_instance_identifiers", "constructor_prototype", "$@5", "$@6",
  "function_prototype", "$@7", "$@8", "$@9", "$@10", "$@11",
  "function_post", "function_operator", "more_template_declaration",
  "template_declaration", "$@12", "template_formal_parameters",
  "template_nonempty_formal_parameters", "typename_keyword",
  "template_formal_parameter", "template_formal_parameter_type",
  "instance_identifier", "$@13",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "function_parameter_list",
  "function_parameters", "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "parameter_pack_identifier", "not_paren_empty_instance_identifier",
  "empty_instance_identifier", "type", "type_pack", "type_decl",
  "predefined_type", "var_type_decl", "full_type", "struct_attributes",
  "anonymous_struct", "$@14", "named_struct", "$@15", "maybe_final",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "enum", "enum_decl", "enum_element_type", "enum_body_trailing_comma",
  "enum_body", "enum_keyword", "struct_keyword", "namespace_declaration",
  "$@16", "$@17", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@18", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   123,    44,    59,    58,
      61,    63,   124,    94,    38,    60,    62,    43,    45,    42,
      47,    37,   126,    46,    40,    91,    41,   125,    33,    93
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   170,   171,   171,   171,   172,   172,   172,   173,   173,
     174,   174,   174,   176,   175,   177,   177,   177,   177,   177,
     177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
     177,   177,   177,   177,   177,   177,   177,   177,   179,   178,
     180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
     180,   180,   180,   180,   180,   180,   180,   180,   181,   181,
     182,   182,   182,   184,   183,   183,   183,   183,   183,   185,
     185,   187,   186,   186,   188,   188,   190,   189,   191,   189,
     193,   192,   194,   192,   195,   192,   196,   192,   197,   192,
     192,   198,   198,   198,   198,   198,   198,   198,   198,   198,
     198,   198,   198,   198,   198,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   200,   200,   201,   202,   201,   201,
     203,   203,   204,   204,   205,   205,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   207,   207,   207,   207,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     209,   208,   210,   210,   211,   211,   211,   212,   212,   212,
     212,   212,   213,   213,   214,   214,   214,   214,   214,   215,
     215,   216,   216,   217,   217,   218,   218,   218,   218,   218,
     219,   219,   219,   219,   219,   219,   220,   220,   220,   221,
     221,   221,   221,   222,   222,   222,   222,   222,   222,   222,
     222,   223,   223,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   225,   225,   225,   225,   225,   225,   225,   225,
     225,   225,   225,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   227,   227,   227,   227,   227,   227,
     227,   227,   227,   227,   228,   228,   228,   228,   228,   228,
     228,   228,   228,   228,   228,   228,   228,   228,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     230,   231,   231,   231,   231,   231,   231,   231,   231,   231,
     231,   231,   231,   231,   232,   232,   232,   232,   232,   232,
     232,   232,   233,   233,   234,   234,   234,   234,   235,   235,
     235,   235,   237,   236,   239,   238,   240,   240,   241,   241,
     242,   242,   243,   243,   243,   243,   243,   243,   243,   243,
     243,   243,   244,   245,   245,   245,   245,   246,   246,   247,
     247,   247,   248,   248,   248,   249,   249,   249,   250,   250,
     250,   252,   251,   253,   251,   251,   251,   254,   254,   254,
     255,   255,   255,   256,   256,   256,   256,   256,   256,   256,
     256,   256,   256,   256,   256,   256,   256,   257,   257,   257,
     258,   260,   259,   261,   261,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   263,   263,   264,   264,   265,   265,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   271,   271,   271,   271,   271,   272,   272,
     272,   272,   273,   273,   273,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   275,   275,   275,   275,   276,
     276,   276,   276,   277
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     5,     4,     0,     5,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     2,     2,     2,     7,     9,    11,
       9,    11,    13,     9,    13,     9,     7,     5,     0,     3,
       1,     2,     2,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     4,     5,     5,     1,     3,
       1,     4,     4,     0,     4,     3,     3,     3,     1,     2,
       4,     0,     4,     3,     2,     4,     0,     6,     0,     6,
       0,     7,     0,    11,     0,    12,     0,     8,     0,     9,
       1,     1,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     4,     5,     6,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     1,     1,     1,     2,     0,     6,     2,
       1,     1,     1,     3,     1,     1,     1,     2,     4,     2,
       3,     3,     4,     2,     3,     1,     1,     1,     1,     1,
       2,     3,     2,     2,     2,     2,     2,     3,     4,     3,
       0,     6,     2,     3,     1,     3,     4,     1,     1,     1,
       3,     2,     1,     3,     1,     1,     1,     3,     2,     1,
       3,     1,     2,     1,     2,     1,     3,     5,     3,     3,
       1,     3,     3,     3,     3,     4,     1,     1,     2,     1,
       3,     3,     5,     3,     4,     5,     3,     4,     5,     2,
       4,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       3,     4,     1,     1,     2,     2,     2,     2,     2,     3,
       4,     7,     3,     1,     2,     2,     2,     2,     2,     2,
       3,     4,     7,     3,     1,     1,     2,     2,     2,     2,
       2,     2,     3,     4,     1,     1,     2,     2,     2,     2,
       2,     2,     3,     4,     5,     9,     9,     9,     1,     1,
       2,     1,     1,     1,     3,     4,     4,     4,     4,     1,
       1,     1,     1,     2,     1,     1,     1,     3,     4,     2,
       4,     4,     4,     1,     1,     1,     2,     3,     2,     4,
       4,     1,     1,     1,     2,     3,     2,     3,     1,     4,
       5,     5,     0,     6,     0,     9,     1,     1,     1,     1,
       2,     3,     1,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     4,     3,     1,     4,     2,     1,     1,     1,
       3,     5,     1,     2,     4,     1,     2,     2,     1,     1,
       1,     0,     6,     0,     7,     4,     5,     3,     5,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     2,     2,     1,     1,     2,
       1,     0,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     3,
       1,     4,     7,     7,     7,     7,     4,     4,     5,     4,
       2,     2,     2,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     4,     4,     3,     3,     3,     3,     1,
       4,     7,     7,     7,     7,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     5,     4,     2,     5,     4,     4,     2,     2,     2,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     4,     4,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     8,
      11,     4,     4,     6,     4,     4,     6,     6,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     1,     4,
       7,     7,     7,     7,     4,     4,     5,     4,     2,     5,
       4,     4,     2,     2,     2,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     4,     4,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     4,     2,     3,
       1,     2,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     0
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   753,     0,     0,     0,   753,     5,   642,   638,   641,
     749,   750,   644,   645,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   640,   646,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   648,   647,     0,     0,     0,
       0,     0,   639,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   753,     0,     3,   579,   643,   289,   300,   299,
     383,   384,   386,   387,   368,     0,     0,   398,   365,   397,
     392,   389,   388,   391,   369,     0,     0,   370,   390,   400,
     385,   753,   753,     4,   291,   292,   293,     0,   354,   753,
     288,   380,   381,   382,     1,     0,     0,    21,   753,   753,
     753,    22,   753,   753,   753,     0,    38,   753,     0,     0,
       0,     0,   753,     0,     0,     0,     0,   753,   753,     0,
     753,   753,   753,     0,   753,   753,     6,    17,     7,    19,
       0,    15,    16,    18,    68,    40,   753,   753,     0,   753,
     753,   753,   753,     0,   753,     0,   753,     0,   753,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   753,   315,   321,     0,     0,     0,
     603,     0,   753,   314,     0,   753,   753,     0,     0,     0,
       0,   753,   753,   612,   610,   609,   611,   608,   289,   383,
     384,   386,   387,   398,   397,   392,   389,   388,   391,   390,
     385,     0,     0,   538,   735,   736,   737,   738,   741,   739,
     743,   742,   740,   744,   724,   725,     0,     0,   753,   730,
     723,   607,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   751,   752,   753,   753,     0,
     366,   367,   399,   389,   394,   393,   396,   290,     0,   395,
       0,   275,   753,   753,   753,   753,   753,   753,     0,   324,
     274,   326,   753,   745,   746,   747,   748,     0,   356,     0,
     328,     0,     0,    58,    60,     0,   753,   753,    52,    41,
      51,    53,   753,    42,   146,    47,    23,   753,     0,    45,
       0,     0,     0,     0,    50,   753,     0,    26,    25,    24,
      48,    44,     0,     0,   149,     0,    54,     0,    20,     0,
       0,    46,    49,   323,   302,   313,     0,     0,     0,     0,
      13,     0,     0,     0,   322,    63,   304,   305,   306,   354,
     753,   301,     0,   537,   536,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   316,     0,   753,   318,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   637,   728,   731,     0,   753,     0,   726,   203,
     621,   622,   623,   624,   625,   626,   629,   630,   636,     0,
     618,   619,   620,   627,   628,   616,   617,   613,   614,   615,
     635,   634,     0,     0,   325,   327,     0,     0,     0,   753,
     276,     0,   265,   753,   753,   753,   753,   753,   281,   264,
       0,   277,     0,   278,   280,   279,   188,   753,     0,     0,
       0,   753,   753,     0,   189,   192,   753,     0,   187,   753,
     362,     0,   359,   358,   353,   357,     0,   735,   736,   737,
       0,     0,   739,   332,   294,   334,     0,   753,     0,   753,
     302,     0,     0,    43,    39,   753,     0,     0,     0,     0,
       0,   753,   371,     0,   753,   323,   302,     0,   322,    71,
       0,   377,     0,    76,    78,     0,     0,   753,   303,     0,
     753,     0,   401,   205,     0,     0,    66,   401,   210,     0,
      67,    65,     0,   309,   356,     0,   586,   585,   602,   592,
     588,   590,   591,     0,   598,     0,   597,   651,   587,   652,
       0,   654,     0,   655,     0,   658,   659,   660,   661,   662,
     663,   664,   665,   666,   667,   594,     0,     0,     0,   317,
       0,   593,   596,     0,   600,   599,     0,   605,   606,   595,
     589,   580,   539,   729,     0,   753,   753,   753,    91,   204,
       0,   633,   632,   297,   296,   298,   282,   753,   266,   271,
     267,   268,   270,   269,   753,     0,     0,     0,   753,     0,
     229,     0,     0,   753,   191,     0,     0,   753,   753,   753,
     753,   753,   753,   753,   243,   242,     0,   253,     0,     0,
       0,     0,     0,     0,   753,     0,   535,   534,   363,   352,
     295,     0,     0,   753,   753,     0,    55,    59,   716,   712,
     715,   718,   719,   195,     0,     0,     0,   714,   720,     0,
     722,   721,     0,     0,     0,   713,     0,     0,     0,     0,
       0,     0,     0,     0,   196,   231,   199,   232,   668,   717,
     194,   753,   753,   753,   373,     0,     0,     0,     0,   375,
     753,     0,     0,   166,   167,   168,   154,     0,   155,     0,
     151,   156,   152,   753,   165,   150,     0,    73,     0,   379,
       0,   753,     0,     0,   753,     0,     0,   753,     0,   753,
     753,   753,   753,   753,     0,   234,   233,     0,   753,    80,
       0,   753,     0,     8,     0,     0,     0,     0,     0,     0,
     753,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      64,   753,   753,   169,     0,   307,     0,     0,     0,     0,
       0,   319,   320,   604,     0,   601,     0,   727,     0,    98,
       0,     0,    92,   100,    95,    99,    94,    96,     0,    93,
      97,     0,   184,   631,   272,     0,     0,     0,   753,     0,
     753,   753,     0,     0,   753,   190,   193,   753,   248,   244,
     245,   247,   246,     0,   753,   223,     0,   254,   259,   255,
     256,   258,   257,     0,   753,   226,   283,   360,     0,   329,
       0,     0,   753,   337,   753,   336,    62,     0,     0,     0,
     678,     0,     0,     0,     0,     0,   686,   685,   684,   683,
       0,     0,   682,    61,   198,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    57,
      56,   376,   753,     0,     0,     0,     0,   753,     0,    37,
     753,   753,     0,   159,   157,     0,   753,   753,   753,   753,
     753,   753,   753,   163,    72,   753,   378,     0,     0,     0,
       0,   311,   310,     0,   753,   239,   235,   236,   238,   237,
      86,   753,   312,    14,   753,   206,   402,   403,   401,     0,
     753,   753,   208,   209,   211,   213,   214,   753,     0,   217,
     219,   216,   212,     0,   176,   172,     0,   115,   116,   117,
     118,   119,   120,   123,   124,   139,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   143,   142,
     126,   125,   112,   114,   113,   121,   122,   110,   111,   107,
     108,   109,   106,     0,     0,   105,   170,   173,   175,   174,
       0,     0,   180,   753,   182,     0,     0,    69,   308,     0,
       0,   653,   656,   657,     0,     0,   753,     0,   753,     0,
       0,   401,   273,   753,   230,   753,   753,   224,   227,   753,
     753,   284,   249,   252,     0,   260,   263,     0,   364,   331,
     330,   333,     0,     0,   339,   338,     0,     0,     0,   753,
       0,     0,     0,     0,     0,     0,     0,     0,   711,   197,
     200,   695,   696,   697,   698,   699,   700,   703,   704,   710,
       0,   692,   693,   694,   701,   702,   690,   691,   687,   688,
     689,   709,   708,     0,     0,   753,     0,     0,     0,     0,
       0,   372,     0,   753,   164,   144,   148,   145,   153,   160,
       0,   753,     0,   161,   201,     0,    74,   753,     0,     0,
     753,    88,   240,   753,     0,     0,   405,   406,   410,   407,
     415,   408,   409,   411,   412,   413,   414,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   483,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   753,   527,   528,   529,   520,   532,   516,   517,
     515,   522,   523,   511,   512,   513,   514,   521,   519,   526,
     524,   530,   525,   518,   531,   404,     0,     9,     0,     0,
       0,   215,   218,   177,   171,   141,   140,   179,   183,   753,
       0,   204,     0,   583,   582,   584,   581,   753,   753,   185,
     104,   101,     0,     0,     0,   225,   228,     0,     0,   753,
     250,   753,   261,   361,   743,     0,   742,     0,     0,   340,
     342,   732,   753,     0,   677,     0,     0,     0,     0,     0,
     675,   674,     0,   680,   681,   669,     0,   707,   706,   374,
       0,    27,     0,     0,     0,    36,   162,   158,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   202,   540,     0,    77,     0,    82,    79,   753,     0,
     241,   753,     0,   207,    12,    10,   220,   753,   221,     0,
     178,    70,     0,   186,     0,   102,   649,   753,   753,   753,
       0,     0,     0,   345,     0,   344,     0,   343,   733,     0,
       0,     0,   734,   753,   341,     0,     0,   679,     0,   676,
       0,   705,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   555,   553,   552,   554,
     551,     0,     0,   550,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    75,    84,   753,     0,   753,
      81,   533,    11,     0,   753,   401,   103,   753,   753,   753,
     753,   753,   351,   350,   349,   348,   347,   346,   335,     0,
       0,     0,     0,     0,    28,     0,    33,    35,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   578,
     564,   565,   566,   567,   568,   569,   570,   571,   577,     0,
     561,   562,   563,   559,   560,   556,   557,   558,   576,   575,
       0,     0,   753,     0,   753,    87,   222,   181,     0,   287,
     286,   285,   251,   262,   672,   671,   673,   670,     0,     0,
       0,     0,   549,     0,     0,     0,     0,   547,   546,     0,
     541,     0,   574,   573,     0,   753,    89,   650,    29,     0,
       0,    31,     0,     0,     0,   548,     0,   572,   753,   753,
       0,     0,     0,     0,     0,     0,   753,    83,    34,    32,
     544,   543,   545,   542,    85
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   732,   733,   137,   520,   138,   139,   307,
     140,   292,   293,   141,   532,   750,   328,   708,   894,   342,
     711,   714,   343,   914,  1407,  1472,  1093,  1318,   587,   976,
    1076,   142,   325,   699,   700,   701,   702,   703,   751,  1239,
     752,   781,   463,   464,   673,   674,  1083,   408,   526,   530,
     928,   929,   465,   676,   724,   798,   808,   278,   279,    91,
      92,   344,   180,   345,    93,   289,    94,   643,    95,   644,
     824,  1023,  1024,  1269,    96,    97,   474,   470,   471,    98,
      99,   143,   690,   872,   144,   100,   101,   102,   103,   730,
     731,   916,  1225,   635,   352,   353,  1311,   213,    65,   677,
     678,   227,   228,  1270,  1271,   624,    66,   145
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -922
static const yytype_int16 yypact[] =
{
     238,  -922,  3707,  5766,    80,  4877,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,   -20,   -68,   -54,   -43,   -37,   -23,
     -49,     2,     3,  -922,  -922,    36,    90,    94,   120,   131,
     141,   166,   171,   181,   186,   204,   224,   233,   250,   252,
     265,   270,   288,   300,  6077,  -922,  -922,    59,   306,   308,
      30,   112,  -922,   325,   331,   338,  3707,  3707,  3707,  3707,
    3707,  2266,   923,  3707,  3915,  -922,   146,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  5876,   344,  -922,     8,  -922,
    -922,  1691,   379,   379,  -922,  3040,   346,  -922,   379,  -922,
    -922,   220,   220,  -922,  -922,  -922,  -922,   -11,   104,  -922,
    -922,  -922,  -922,  -922,  -922,  1704,   348,  -922,  6862,  6862,
    6862,  -922,  6862,  5244,  6862,   -31,  -922,  6834,   350,   357,
     359,   362,  6862,  1687,   161,   188,   258,  6862,  6862,   371,
    6652,  6862,  6862,  2382,  6862,  6862,  -922,  -922,  -922,  -922,
    4341,  -922,  -922,  -922,  -922,  -922,  3707,  3707,  5766,  3707,
    3707,  3707,  3707,  5766,  3707,  5766,  3707,  5766,  3707,  5766,
    5766,  5766,  5766,  5766,  5766,  5766,  5766,  5766,  5766,  5766,
    5766,  5766,  5766,  5766,  3707,  -922,  -922,   372,  3040,   373,
     374,  3040,  -922,  -922,  5766,  3707,  3707,   398,  5362,  5766,
    2266,  3707,  3707,    60,    60,    60,    60,    60,   -20,   -54,
     -43,   -37,   -23,     2,    36,    94,  1169,  5295,  5415,  5670,
     338,   321,   -74,  3915,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  3040,  3040,   -87,   413,  -922,
    -922,    60,  3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,
    3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,
    3707,  3707,  3707,  2769,  3707,  -922,  -922,   220,   220,  2903,
    -922,  -922,  -922,   379,  -922,  -922,  -922,  -922,  5766,  -922,
     405,   560,   273,   220,   220,   273,   273,  4990,   400,  -922,
     402,  -922,  -922,  -922,  -922,  -922,  -922,   901,   419,  2827,
    -922,  3040,   525,   427,   412,  2469,  5271,  6862,  -922,  -922,
    -922,  -922,  6862,  -922,  -922,  -922,  -922,  6748,  2638,  -922,
    3040,  3040,  3040,  3040,  -922,  -922,   432,  -922,  -922,  -922,
    -922,  -922,  3707,  4434,  -922,   433,  -922,  4520,  -922,  3040,
     -63,  -922,  -922,   225,   423,  -922,   425,  5962,  3040,   426,
    -922,  3040,   198,   205,   443,  -922,  -922,  -922,  -922,   942,
    -922,  -922,   428,   447,  -922,   434,   438,   439,   442,   458,
     459,   453,   460,   471,   462,   468,   469,   472,   452,   474,
     -69,   494,   480,   481,   482,   483,   484,   486,   487,   488,
     489,   490,   491,  3707,  -922,  5766,  3707,  -922,  2291,   507,
     498,   499,  3040,   500,   501,   513,   504,  4205,   505,   510,
    3707,  3707,  -922,   668,  -922,   936,   520,  3707,  -922,  -922,
    4171,  1444,  1377,  1377,   260,   260,    11,    11,  -922,  2653,
    5043,  5059,  5099,   260,   260,   695,   695,    60,    60,    60,
    -922,  -922,   -66,  1527,  -922,  -922,   519,  4589,   521,   273,
     523,   527,  3040,   273,   273,   273,   273,   273,   526,  -922,
     400,  -922,   400,  -922,   526,   526,  -922,   273,  1704,  5852,
    5737,   273,   273,   528,    50,  -922,  1127,   232,  -922,  3707,
    3040,   531,  -922,  -922,  -922,  -922,   901,   -12,   -10,    -6,
    1704,   529,    10,  -922,  -922,  -922,   543,  6862,  1704,  3841,
     -20,   533,  4646,  -922,  -922,  -922,   549,   553,   556,   558,
     564,  6192,  -922,  3860,  5511,   280,   548,   205,  -922,  -922,
     567,  -922,  5766,  -922,    29,  3037,  6101,  1091,  -922,  5766,
    -922,   559,  -922,  -922,  3040,   294,  -922,  -922,  -922,  2635,
    -922,  -922,  1168,  -922,   575,  2827,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,   562,  -922,   563,  -922,  -922,  -922,  -922,
    5766,  -922,  5766,  -922,  5766,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  4667,   565,   566,  -922,
     572,  -922,  -922,   571,  -922,  -922,   578,  -922,  -922,  -922,
    -922,    60,  3915,  -922,  3040,   413,  5617,  4489,  -922,  3915,
    3707,  -922,  -922,  -922,  -922,  -922,   526,   273,  -922,   526,
     526,   526,   526,   526,  3707,   212,   681,  5876,  1127,   232,
    -922,   311,   320,  -922,  -922,  5646,   585,  1127,  1127,  1127,
    1127,  1127,  1127,   -33,  -922,  -922,   586,  3040,   232,   232,
     232,   232,   232,   232,    39,   577,  3915,  -922,    32,  -922,
     601,   700,  2469,  -922,   673,  1704,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,   588,   598,   600,  -922,  -922,  6077,
    -922,  -922,   604,    35,   606,  -922,   602,  3707,  3707,  3707,
    3707,  2266,  3707,   596,    64,  -922,  -922,  4758,  -922,   146,
    -922,  6862,  6862,  6264,  -922,   754,   758,   763,   764,  -922,
    -922,   256,   617,  -922,  -922,  -922,  -922,  5579,  -922,   621,
     633,  2906,  -922,  1367,  -922,  -922,    29,  -922,  1168,  -922,
     634,  5617,   622,  1168,  5617,   619,  4685,  1091,   624,  1091,
    1091,  1091,  1091,  1091,   328,  -922,  -922,   625,  6336,  -922,
     627,  -922,   354,  -922,    19,   647,   651,   637,   653,   657,
    3171,  3059,   649,  1168,  1168,  4274,  1168,  1168,  1168,  1168,
    -922,    79,   323,  -922,   901,  -922,  3707,  3707,   640,   643,
     644,  -922,  -922,  -922,  3707,  -922,  3707,  -922,   646,  -922,
    5991,  1704,  -922,  -922,  -922,  -922,  -922,  -922,   650,  -922,
    -922,   671,  -922,  3915,   526,   652,   654,  5737,  1127,   232,
     -33,    39,   655,   656,  4489,  -922,  -922,  1127,   659,   659,
     659,   659,   659,   339,  3707,  -922,   232,  -922,   660,   660,
     660,   660,   660,   363,  3707,  -922,   662,  -922,  3707,  -922,
     663,  4703,  6408,  -922,   683,  -922,  -922,  5766,  5766,  5766,
     666,  5766,   670,  5391,  5766,  2266,    60,    60,    60,    60,
     672,   -64,    60,  -922,  -922,  3981,  3707,  3707,  3707,  3707,
    3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,  3707,
    3707,  3707,  3707,  3707,  3707,  3707,  3707,  3305,  3707,  -922,
    -922,  -922,  -922,   -59,   688,   690,   699,  6480,    41,  -922,
    1367,  6776,  5511,  3040,   701,   691,  1367,  1367,  1367,  1367,
    1367,  1367,    71,   660,  -922,   323,  -922,   696,  1168,   228,
     697,  -922,  -922,   366,  1091,   692,   692,   692,   692,   692,
    -922,  3707,  -922,  -922,  5617,  -922,  2099,  -922,  -922,  3040,
    3707,  3707,  -922,  -922,  -922,  -922,  -922,  3171,   698,   719,
    3915,  -922,  -922,  1168,   369,   369,   858,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,   704,   703,  -922,  -922,   369,   369,   369,
     293,   869,  -922,  3707,  -922,  2635,   727,  -922,   601,   -58,
     -46,  -922,  -922,  -922,   -44,   -42,  -922,  6077,   220,   829,
     119,  -922,  -922,  5617,  -922,   -33,    39,  -922,  -922,  5617,
    5617,  -922,   659,   714,   711,   660,   717,   713,  3327,  -922,
    -922,  -922,  1439,   738,   751,  -922,   734,   745,   746,  3707,
     748,  3040,   739,   741,   752,   750,  4740,  3707,  -922,  -922,
    -922,  4171,  1444,  1377,  1377,   260,   260,    11,    11,  -922,
    3595,  5043,  5059,  5099,   260,   260,   695,   695,    60,    60,
      60,  -922,  -922,   -38,  1909,  6552,   904,   769,   908,   911,
     912,  -922,   775,    71,   660,  -922,  -922,  -922,  -922,  -922,
    5766,  1367,  4120,  -922,  -922,   778,  -922,  -922,   316,   765,
    -922,  -922,   692,  5617,   759,   766,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,   783,  -922,   800,   770,
     804,  -922,  3439,   369,  -922,  -922,  -922,  -922,  -922,  3841,
     762,  3059,  1168,  -922,  -922,  -922,  -922,  4489,   220,  -922,
    -922,  -922,     1,   806,   779,  -922,  -922,   812,   815,  5617,
    -922,  5617,  -922,  -922,  5836,  6061,  6110,  3040,   326,  -922,
    -922,   968,  -922,  1439,  -922,   820,   824,   827,   830,   832,
    -922,  -922,   839,  -922,  -922,    60,  3707,  -922,  -922,  -922,
     -28,  -922,   -24,   840,    82,  -922,  -922,  -922,   843,   841,
     855,   856,    37,   859,  4120,  4120,  4120,  4120,  4120,  2266,
    4120,  4356,  -922,  1168,   755,   851,  -922,   755,  5617,   850,
    -922,  -922,  1840,  -922,  -922,  1002,  -922,  3171,  3915,   857,
    -922,  -922,   876,  -922,   860,  -922,  -922,  -922,  -922,  -922,
     863,   865,  2075,  -922,  2075,  -922,  2075,  -922,  -922,  2075,
    2075,  2075,  -922,  6624,  -922,  3707,  3707,  -922,  3707,  -922,
    3707,  3915,  1014,   884,  1029,   892,   893,  1034,   898,  5766,
    5766,  5766,  5766,   886,  5482,  5766,   114,   114,   114,   114,
     114,   887,    99,   114,  4120,  4120,  4120,  4120,  4120,  4120,
    4120,  4120,  4120,  4120,  4120,  4120,  4120,  4120,  4120,  4120,
    4120,  4120,  4120,  3573,  3707,  -922,  -922,  5617,   894,  -922,
     755,  -922,  -922,   885,  -922,  -922,  -922,  4489,  4489,  4489,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,   103,
     123,   152,   168,   895,  -922,   916,  -922,  -922,   170,  -922,
     902,   903,   918,   920,  3040,   913,   915,   922,  4120,  -922,
    5001,  5075,  1543,  1543,   290,   290,   684,   684,  -922,  1472,
    5115,  5149,  4141,   906,   906,   114,   114,   114,  -922,  -922,
     172,  2288,  5617,   917,  -922,   755,  -922,   755,   921,  -922,
    -922,  -922,   755,   755,  -922,  -922,  -922,  -922,   937,  1074,
    1077,   945,  -922,   930,   932,   933,   934,  -922,  -922,   941,
     114,  4120,  -922,  -922,   940,  -922,   755,  -922,  -922,   943,
     946,  -922,  3707,  3707,  3707,  -922,  3707,  4356,  -922,  4489,
     950,   959,   173,   195,   196,   210,  4489,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -922,  -922,  -303,  -922,   197,  -922,  -922,   807,  -922,  -922,
     194,  -440,   470,  -127,  -922,  -129,  -922,  -922,  -195,  -922,
    -922,  -922,   793,  -922,  -922,  -922,  -922,  -922,  -581,  -922,
    -922,  -111,  -922,  -922,  -922,  -922,   240,   429,  -672,  -922,
    -699,  -740,  -492,  -922,  -116,  -922,    51,  -539,  -922,  -497,
    -921,  -922,  -455,   282,  -664,   322,  -229,   136,   -71,   185,
      24,  -288,  -645,   801,  1201,  -152,  -118,  -922,  -117,  -922,
    -922,  -922,  -922,  -144,  -115,  -922,  -457,  -922,  -922,   -36,
     -27,  -922,  -922,  -922,  -922,   -29,   -45,  -922,  -922,  -523,
    -922,   -72,  -922,  -584,  -123,   -60,   341,   307,   275,  -922,
    -922,  -922,   726,   669,  1170,   243,  -476,    -1
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -749
static const yytype_int16 yytable[] =
{
       6,   212,   304,   324,   737,   610,  1230,   491,   181,   895,
     707,   984,   501,   679,   830,   183,  1334,   182,   606,   640,
     785,   281,   346,   347,   355,   348,   357,   358,   359,   360,
     388,   362,   794,   364,   675,   366,   264,   265,   266,   508,
     641,   899,   712,   269,   240,   187,   767,   255,   647,   256,
     832,   382,  1373,   903,  1011,   905,   906,   907,   908,   909,
     405,   230,   390,   391,  -745,   614,  -746,   260,   398,   399,
    -747,   934,   935,   401,   977,   978,   979,   980,   552,   844,
     104,   401,   406,   401,   805,   511,  -748,   512,  1066,   401,
     280,   280,   402,   240,   768,   815,   148,   553,   290,   258,
     591,   401,  1038,   401,   349,   401,   153,  1067,  1243,   401,
     149,   351,   770,   350,   283,   284,   285,   407,   306,  1362,
    1244,   150,  1245,  1364,  1246,   998,   146,   151,  1287,   214,
     215,   216,   804,   261,  -745,   282,  -746,  -745,  1363,  -746,
    -747,   152,  1365,  -747,   147,   354,   354,  1392,   354,   354,
     354,   354,   255,   354,   256,   354,  -748,   354,   155,  -748,
     796,   264,   265,   266,   269,   920,   154,  1335,   247,   248,
     249,   250,   251,   354,   252,   253,   254,   346,   347,   817,
     348,   290,   818,   921,   354,   354,   434,   435,   713,   407,
     354,   354,   683,   432,   188,   217,   218,   615,   535,   833,
     156,  1374,   451,   453,   814,   346,   347,  1072,   348,   346,
     347,   845,   348,   986,   184,   878,   286,   728,   264,   897,
    1014,  1082,   900,   252,   253,   254,  1088,   409,   981,  1367,
    1017,   219,   220,   270,   221,   271,   804,   272,   634,   222,
    1092,   223,   475,   982,   983,   626,   401,   627,  1368,   628,
     401,  1007,  1008,   287,   157,   987,   280,   280,   158,   349,
     257,  1233,    10,   568,    11,  1449,   351,   189,   350,  1484,
     401,   449,   280,   280,   449,   449,   468,  1402,  1403,  1404,
     273,   472,   238,   239,   159,  1251,   441,   349,   442,  1485,
     443,   349,   629,   240,   351,   160,   350,   988,   351,   401,
     350,   467,   298,   299,   300,   161,   301,   303,   305,    64,
     317,   309,  1390,  1391,     6,   401,   314,  1490,  1486,   401,
     401,   320,   321,  1392,   323,   326,   327,  1094,   331,   332,
     162,   999,  1004,   444,  1487,   163,  1491,   318,  1502,  1530,
     822,   288,   401,   401,   522,   164,   523,   524,   525,   290,
     165,   527,  1248,   528,   820,   529,  1085,   401,   735,   736,
     274,  1531,  1532,   193,   194,   195,   196,   197,   166,   679,
     231,   -90,   630,   -90,   275,   -90,  1533,   604,   786,   276,
     791,     1,     2,     3,   277,   354,   631,   877,   167,   513,
     675,   632,   982,   983,  1089,  1226,   633,   168,  1086,  1240,
     809,   810,   811,   812,   813,   588,  1413,   319,   448,   450,
     452,   454,   455,   445,   169,  1247,   170,   247,   248,   249,
     250,   251,  1095,   252,   253,   254,   -90,   446,   -90,   171,
     -90,   475,   447,    70,   172,    71,    72,    73,   449,  1349,
    1350,  1351,   449,   449,   449,   449,   449,  1397,  1398,  1399,
    1400,  1401,   173,  1402,  1403,  1404,   449,   982,   983,  1237,
     449,   449,   466,    80,   174,   625,  1255,  1256,   637,   527,
     185,   528,   186,   985,   893,   704,   604,   792,  1253,   263,
     982,   983,  1315,   609,   467,   604,   793,   400,   680,   190,
     303,   309,   910,   911,     6,   191,   493,   397,    82,    83,
     918,   919,   192,   705,   804,  1013,  1314,  1332,   259,  1317,
     268,  1254,   295,   467,   310,    88,   726,  1257,  1258,     6,
      90,   311,   517,   312,   346,   347,   313,   348,   814,  1016,
    1091,   911,   485,   982,   983,   322,   383,   385,   386,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
    1006,   433,   392,   407,   439,   469,   437,  -264,   476,  1065,
     214,   215,   216,   487,   488,   596,   489,  1015,   502,   599,
     600,   601,   602,   603,   409,   468,   782,   514,   504,   515,
     519,   531,   534,   605,   401,   536,   449,   611,   612,   550,
     537,  1319,   492,   637,   538,   539,   349,   625,   540,   543,
     467,   841,   588,   351,   895,   350,   625,   625,   625,   625,
     625,   625,   409,   181,   541,   542,   544,   545,   546,   503,
     183,   789,   182,   409,   547,   548,   217,   218,   549,   467,
     551,   554,     6,   825,   608,   466,   555,   556,   557,   558,
     559,  1074,   560,   561,   562,   563,   564,   565,   809,   810,
     811,   812,   813,   570,   571,   572,   574,   575,   704,   576,
     577,   579,   219,   220,   466,   221,   580,  1479,  1480,  1481,
     222,   646,   223,   583,   586,   593,   597,   595,  -266,     6,
     566,   604,   645,   642,   613,   684,   989,   990,   639,   681,
     685,   717,   625,   686,   994,   687,   995,   581,   582,   475,
     468,   688,   706,   468,   589,   709,   726,  1392,   726,   726,
     726,   726,   726,   729,   754,  -265,   756,   757,   240,   787,
     917,   762,   763,   784,   181,   467,   764,   765,   467,   931,
    1410,   183,   766,   182,   797,   806,   816,  -355,   819,   823,
     782,   409,   827,   828,  1075,   829,  1417,  1418,  1419,   831,
     725,   834,   843,   679,   873,   879,   835,  1340,   874,  1341,
    1077,   466,   769,   875,   876,   753,   636,   881,   485,  1527,
     882,   898,   896,   904,   675,   901,  1534,   625,   623,   409,
     409,   912,   788,   782,   915,   922,   625,  1228,  1229,   923,
     466,   925,   771,   637,   924,   926,   991,  1063,   933,   992,
     993,   467,   996,   637,  1000,   772,   773,  1001,  1003,  1009,
    1010,  1002,   716,  1025,   804,   814,  1408,  -273,  1475,  1019,
    1029,   774,  1022,  1477,  1031,  1068,   741,  1069,  1037,  1482,
    1483,  1397,  1398,  1399,  1400,  1401,  1070,  1402,  1403,  1404,
    1081,  1080,  1015,   704,   249,   250,   251,   911,   252,   253,
     254,   775,  1087,  1090,   776,  1231,  1232,   777,  1234,   467,
    1235,     6,  1236,  1238,  1242,   869,   870,  1250,  1259,   625,
    1260,  1261,  1262,   778,  1272,   625,   625,   625,   625,   625,
     625,  1084,  1478,  1506,   409,   779,   466,   783,  1273,   466,
    1274,  1275,  1276,   726,  1278,  1280,  1277,  1281,  1282,   780,
     637,   636,   473,   468,  1290,  1473,  1283,  1291,  1292,   354,
     354,  1293,  1294,  1295,  1519,  1313,   931,  1249,  1320,  1316,
     790,  1330,  1321,   214,   215,   216,  1325,  1526,   467,  1392,
     799,   800,   801,   802,   803,  1337,   214,   215,   216,   821,
    1323,   753,   477,   478,   479,    70,   753,    71,    72,    73,
     725,   181,   725,   725,   725,   725,   725,  1324,   183,  1353,
     182,  1326,   466,  1336,   836,   837,   838,   839,  1338,   842,
    1504,  1339,   637,  1352,  1355,    80,   753,   753,  1356,   753,
     753,   753,   753,  1357,  1358,   588,  1370,   280,  1359,   217,
     218,   263,   468,  1360,   409,   409,  1366,  1369,   468,   468,
    1371,  1372,   217,   218,  1375,  1406,  1409,  1412,   217,   218,
      82,    83,  1415,  1414,  1433,   892,  1416,   467,   354,  1420,
     466,  1421,  1434,   467,   467,   219,   220,    88,   221,  1435,
    1436,  1437,    90,   222,  1438,   223,  1439,   930,   219,   220,
    1444,   221,  1476,  1448,   482,   220,   222,   221,   223,  1493,
    1474,  1488,   222,  1489,   223,  1399,  1400,  1401,  1492,  1402,
    1403,  1404,  1084,   224,  1494,   323,  1495,   225,  1499,  1497,
     625,  1498,   226,  1505,  1509,  1508,   588,  1510,  1507,   588,
     584,   287,   468,  1511,  1512,   226,  1513,  1514,  1528,   466,
    1515,   283,   284,   285,   718,  1516,  1518,  1529,   719,  1520,
    1005,   636,  1521,  1331,   494,   826,  1227,   467,  1405,  1012,
     507,   636,  1078,  1329,  1296,  1018,   880,  1040,   509,  1354,
    1322,   585,     0,     0,     0,     0,     0,   283,   284,   285,
     616,   753,  1036,     0,   617,     0,     0,   725,     0,     0,
       0,   720,     0,  1041,  1042,  1043,  1044,  1045,  1046,  1047,
    1048,  1049,  1050,  1051,  1052,  1053,  1054,  1055,  1056,  1057,
    1058,  1059,  1060,  1061,     0,  1064,   753,  1333,   283,   284,
     285,   742,     0,     0,     0,   743,     0,   618,   466,     0,
       0,     0,     0,     0,   466,   466,     0,     0,     0,     0,
       0,   917,  1073,   286,     0,     0,     0,     0,     0,   799,
     800,   801,   802,   803,     0,     0,     0,     0,   636,     0,
       0,     0,     0,    70,     0,    71,    72,    73,   744,     0,
       0,   721,   229,     0,   930,   262,     0,     0,   680,   286,
       0,     0,     0,     0,     0,   722,   782,   280,     0,  1382,
     723,     0,     0,    80,     0,   267,     0,     0,   468,     0,
     468,     0,   211,   467,     0,     0,     0,   619,     0,   263,
       0,     6,     0,     0,     0,   294,     0,     0,   466,   745,
     286,   620,     0,   467,     0,   467,   621,     0,    82,    83,
     636,   622,  1241,   316,     0,  1429,  1430,     0,  1431,     0,
    1432,     0,     0,   330,     0,    88,     0,     0,   746,     0,
      90,     0,     0,     0,     0,     0,     0,   468,     0,     0,
     588,     0,   747,     0,     0,     0,   931,   748,     0,     0,
       0,     0,   749,   174,     0,     0,   588,   588,   588,     0,
       0,     0,   467,  1470,  1285,     0,     0,     0,   384,   356,
       0,   387,     0,     0,   361,     0,   363,  1312,   365,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,     0,     0,   283,   284,   285,
     885,     0,   627,     0,   886,   389,     0,     0,     0,   394,
     395,   396,     0,     0,     0,   403,   404,   236,   237,   238,
     239,     0,     0,  1012,     0,     0,   468,     0,   588,     0,
     240,     0,     0,   588,     0,     0,   782,   782,   782,   588,
     588,     0,     0,     0,   466,     0,     0,   887,     0,     0,
       0,   467,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   440,     0,     0,   466,     0,   466,     0,     0,   214,
     215,   216,  1522,  1523,  1524,     0,  1525,     0,     0,   484,
       0,   486,   234,   235,   236,   237,   238,   239,     0,   438,
       0,   468,     0,   588,     0,     0,     0,   240,   496,   286,
     497,   498,   499,   500,     0,   753,     0,     0,  1384,  1385,
    1386,  1387,  1388,  1389,  1390,  1391,   467,     0,     0,   510,
       0,     0,     0,   466,   588,  1392,     0,   888,   518,     0,
       0,   521,     0,     0,     0,   217,   218,   588,   782,   533,
       0,   889,     0,     0,     0,   782,   890,     0,     0,     0,
       0,   891,   245,   246,   247,   248,   249,   250,   251,  1328,
     252,   253,   254,   232,   233,   234,   235,   236,   237,   238,
     239,   219,  1264,  1265,  1266,     0,   753,     0,   569,   222,
     240,   223,   573,  1388,  1389,  1390,  1391,     0,     0,     0,
       0,     0,  1267,     0,     0,   229,  1392,  1268,     0,  1312,
    1312,  1312,  1312,  1312,     0,  1312,   567,     0,     0,     0,
       0,     0,   466,  1361,     0,     0,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,     0,   252,   253,   254,
       0,     0,   598,     0,     0,     0,     0,     0,     0,     0,
       0,  1501,     0,  1393,  1394,  1395,  1396,     0,   294,  1397,
    1398,  1399,  1400,  1401,   930,  1402,  1403,  1404,     0,     0,
     638,     0,     0,     0,     0,  1376,  1377,  1378,  1379,  1380,
     294,  1383,     0,     0,     0,     0,     0,   466,   294,  1312,
    1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,
    1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,     0,
     252,   253,   254,     0,   734,     0,   592,   214,   215,   216,
    1397,  1398,  1399,  1400,  1401,   755,  1402,  1403,  1404,     0,
       0,  1471,     0,   710,   214,   215,   216,     0,     0,     0,
     727,     0,     0,  1312,     0,  1450,  1451,  1452,  1453,  1454,
    1455,  1456,  1457,  1458,  1459,  1460,  1461,  1462,  1463,  1464,
    1465,  1466,  1467,  1468,     0,    70,     0,    71,    72,    73,
       0,   758,     0,   759,   403,   760,     0,   262,     0,     0,
       0,     0,     0,   217,   218,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    80,  1312,     0,     0,     0,
     217,   218,     0,     0,     0,     0,     0,     0,     0,  1500,
       0,   263,     0,     0,     0,     0,     0,   807,     0,   219,
     220,     0,   221,     0,     0,     0,     0,   222,     0,   223,
      82,    83,     0,     0,     0,   294,   219,   220,     0,   221,
       0,     0,     0,     0,   222,     0,   223,    88,     0,     0,
       0,     0,    90,   315,     0,     0,     0,     0,     0,     0,
       0,   291,  1517,  1096,  1097,  1098,  1099,  1100,  1101,  1102,
    1103,  1104,  1105,  1106,     0,  1107,  1108,  1109,  1110,  1111,
    1112,  1113,  1114,  1115,  1116,  1117,     0,     0,     0,     0,
       0,   884,   840,  1118,  1119,  1120,  1121,  1122,  1123,  1124,
    1125,  1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,
    1135,  1136,     0,     0,  1137,  1138,  1139,  1140,  1141,  1142,
    1143,  1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,     0,
    1152,     0,  1153,  1154,  1155,  1156,  1157,  1158,  1159,  1160,
    1161,     0,  1162,  1163,  1164,   232,   233,   234,   235,   236,
     237,   238,   239,  1343,  1345,  1347,     0,     0,     0,     0,
    1165,   294,   240,     0,     0,     0,  1166,  1167,  1168,     0,
    1169,  1170,  1171,  1172,  1173,  1174,  1175,  1176,  1177,  1178,
    1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  1188,
    1189,  1190,  1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,
    1199,  1200,  1201,     0,     0,     0,  1202,  1203,  1204,  1205,
    1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,  1214,  1215,
    1216,  1217,  1218,  1219,  1220,  1221,  1222,  1411,  1223,  1224,
       0,  1422,     0,  1423,     0,  1424,     0,     0,  1425,  1426,
    1427,     0,     0,     0,     0,     0,     0,     0,  1026,  1027,
    1028,     0,  1030,     0,  1033,  1034,  1035,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1079,     0,     0,     0,     0,     0,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,     0,   252,   253,   254,     0,     0,     0,  1288,     0,
       0,     0,     0,     0,     0,   214,   215,   216,     0,   734,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1096,  1097,  1098,  1099,  1100,  1101,  1102,  1103,
    1104,  1105,  1106,     0,  1107,  1108,  1109,  1110,  1111,  1112,
    1113,  1114,  1115,  1116,  1117,     0,     0,     0,     0,     0,
       0,     0,  1118,  1119,  1120,  1121,  1122,  1123,  1124,  1125,
    1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,  1135,
    1136,   217,   218,  1137,  1138,  1139,  1140,  1141,  1142,  1143,
    1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,     0,  1152,
    1252,  1153,  1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,
       0,  1162,  1163,  1164,     0,     0,     0,   219,   220,     0,
     221,     0,     0,     0,     0,   222,     0,   223,     0,  1165,
       0,  1279,     0,     0,     0,  1166,  1167,  1168,  1267,  1169,
    1170,  1171,  1172,  1173,  1174,  1175,  1176,  1177,  1178,  1179,
    1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  1188,  1189,
    1190,  1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,  1199,
    1200,  1201,     0,     0,     0,  1202,  1203,  1204,  1205,  1206,
    1207,  1208,  1209,  1210,  1211,  1212,  1213,  1214,  1215,  1216,
    1217,  1218,  1219,  1220,  1221,  1222,     0,  1223,  1224,     7,
       8,     9,    10,     0,    11,    12,    13,   198,    68,     0,
       0,  1297,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   214,   215,   216,   232,   233,   234,   235,   236,   237,
     238,   239,     0,     0,     0,     0,    15,    69,     0,     0,
     199,   240,   200,   201,   202,    74,    75,     0,    20,    76,
       0,     0,   203,    22,     0,     0,    78,     0,   480,     0,
     481,    23,    24,   204,     0,     0,     0,    26,     0,     0,
     205,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,   206,   217,   218,     0,
       0,     0,     0,     0,    44,     0,    45,     0,    46,     0,
       0,     0,     0,    47,     0,   207,   208,    50,     0,     0,
      51,    84,   214,   215,   216,    52,     0,     0,    53,    85,
      86,    87,   209,   219,   220,    89,   221,   210,     0,     0,
       0,   222,     0,   223,     0,     0,     0,     0,     0,     0,
      56,     0,     0,    57,    58,    59,     0,     0,    60,     0,
      61,    62,     0,     0,    63,     0,     0,  1348,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
       0,   252,   253,   254,     0,     0,     0,  1503,   217,   218,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     7,     8,     9,    10,     0,    11,    12,    13,
     490,     0,     0,     0,     0,     0,     0,     0,     0,   329,
       0,     0,     0,     0,   219,   220,     0,   221,     0,     0,
       0,     0,   222,     0,   223,     0,     0,     0,     0,     0,
    1381,     0,     0,     0,     0,     0,     0,     0,     0,    15,
     335,     0,     0,   199,     0,   200,   201,   202,    74,     0,
       0,    20,   336,     0,     0,   203,    22,     0,     0,    78,
       0,     0,     0,     0,    23,    24,   204,     0,     0,     0,
      26,     0,     0,   205,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,   206,
    1440,  1441,  1442,  1443,     0,  1446,  1447,    44,     0,    45,
       0,    46,     0,     0,     0,     0,    47,     0,   207,   208,
      50,     0,     0,    51,    84,     0,     0,     0,    52,     0,
       0,    53,   338,   339,    87,   209,     0,     0,    89,     0,
     210,     0,     0,     0,  1496,     0,     0,     0,     0,     0,
       0,     0,     0,    56,     0,     0,    57,    58,    59,     0,
       0,    60,     0,    61,    62,     0,     0,    63,     7,     8,
       9,    10,     0,    11,    12,    13,    14,     0,   214,   215,
     216,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   232,
     233,   234,   235,   236,   237,   238,   239,     0,     0,     0,
       0,     0,     0,     0,     0,    15,   240,     0,     0,    16,
       0,    17,    18,    19,     0,     0,     0,    20,     0,   738,
     739,    21,    22,     0,     0,     0,     0,     0,     0,     0,
      23,    24,    25,     0,   217,   218,    26,     0,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,     0,     0,     0,
       0,     0,     0,    44,     0,    45,     0,    46,     0,     0,
     219,   220,    47,   221,    48,    49,    50,     0,   222,    51,
     223,     0,     0,     0,    52,     0,     0,    53,     0,     0,
       0,    54,     7,     8,     9,    10,    55,    11,    12,    13,
      14,   740,     0,     0,   495,     0,     0,     0,     0,    56,
       0,     0,    57,    58,    59,     0,     0,    60,     0,    61,
      62,     0,   590,    63,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,     0,   252,   253,   254,    15,
       0,     0,     0,    16,     0,    17,    18,    19,     0,     0,
       0,    20,     0,     0,     0,    21,    22,   477,   478,   479,
       0,     0,     0,     0,    23,    24,    25,     0,     0,     0,
      26,     0,     0,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,     0,     0,     0,   480,     0,   481,    44,     0,    45,
       0,    46,     0,     0,     0,     0,    47,     0,    48,    49,
      50,     0,     0,    51,     0,     0,     0,     0,    52,     0,
       0,    53,     0,   217,   218,    54,     7,     8,     9,    10,
      55,    11,    12,    13,    14,     0,   214,   215,   216,     0,
       0,   883,     0,    56,     0,     0,    57,    58,    59,     0,
       0,    60,     0,    61,    62,   431,     0,    63,     0,   482,
     220,     0,   221,     0,     0,     0,     0,   222,     0,   223,
       0,     0,     0,    15,   436,     0,     0,    16,     0,    17,
      18,    19,     0,     0,     0,    20,     0,     0,     0,    21,
      22,     0,     0,   483,     0,     0,     0,     0,    23,    24,
      25,     0,   217,   218,    26,     0,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,     0,     0,     0,     0,     0,
       0,    44,     0,    45,     0,    46,     0,     0,   219,   220,
      47,   221,    48,    49,    50,     0,   222,    51,   223,     0,
       0,     0,    52,     0,     0,    53,     0,     0,     0,    54,
       7,     8,     9,    10,    55,    11,    12,    13,    14,     0,
     214,   215,   216,     0,     0,     0,     0,    56,     0,     0,
      57,    58,    59,     0,     0,    60,     0,    61,    62,     0,
       0,    63,     0,     0,     0,   232,   233,   234,   235,   236,
     237,   238,   239,     0,     0,     0,     0,    15,   715,     0,
       0,    16,   240,    17,    18,    19,     0,     0,     0,    20,
       0,     0,     0,    21,    22,     0,     0,     0,     0,     0,
       0,     0,    23,    24,    25,     0,   217,   218,    26,     0,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,    44,     0,    45,     0,    46,
       0,     0,   219,   220,    47,   221,    48,    49,    50,     0,
     222,    51,   223,     0,     0,     0,    52,     0,     0,    53,
       0,     0,     0,    54,     7,     8,     9,    10,    55,    11,
      12,    13,    14,     0,     0,     0,     0,     0,     0,     0,
       0,    56,     0,     0,    57,    58,    59,     0,     0,    60,
       0,    61,    62,     0,     0,    63,     0,   932,     0,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    15,   252,   253,   254,    16,     0,    17,    18,    19,
       0,     0,     0,    20,     0,     0,     0,    21,    22,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,     0,
       0,     0,    26,     0,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,    44,
       0,    45,     0,    46,     0,     0,     0,     0,    47,     0,
      48,    49,    50,     0,     0,    51,     0,     0,     0,     0,
      52,     0,     0,    53,     0,     0,     0,    54,     7,     8,
       9,    10,    55,    11,    12,    13,    14,   927,     0,     0,
       0,     0,     0,     0,     0,    56,     0,     0,    57,    58,
      59,     0,     0,    60,     0,    61,    62,     0,     0,    63,
       0,     0,     0,   232,   233,   234,   235,   236,   237,   238,
     239,     0,     0,     0,     0,    15,     0,     0,     0,    16,
     240,    17,    18,    19,     0,     0,     0,    20,     0,     0,
       0,    21,    22,     0,     0,     0,     0,     0,     0,     0,
      23,    24,    25,     0,     0,     0,    26,     0,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,     0,     0,     0,     0,
       0,     0,     0,    44,     0,    45,     0,    46,     0,     0,
       0,     0,    47,     0,    48,    49,    50,     0,     0,    51,
       0,     0,     0,     0,    52,     0,     0,    53,     0,     0,
       0,    54,     7,     8,     9,    10,    55,    11,    12,    13,
      14,     0,     0,     0,     0,     0,     0,     0,     0,    56,
       0,     0,    57,    58,    59,     0,     0,    60,     0,    61,
      62,  1062,     0,    63,  1263,     0,     0,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,    15,
     252,   253,   254,    16,     0,    17,    18,    19,     0,     0,
       0,    20,     0,     0,     0,    21,    22,     0,     0,     0,
       0,     0,     0,     0,    23,    24,    25,     0,     0,     0,
      26,     0,     0,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
       0,     0,     0,     0,     0,     0,     0,    44,     0,    45,
       0,    46,     0,     0,     0,     0,    47,     0,    48,    49,
      50,     0,     0,    51,     0,     0,     0,     0,    52,     0,
       0,    53,     0,     0,     0,    54,     7,     8,     9,    10,
      55,    11,    12,    13,    14,  1327,     0,     0,     0,     0,
       0,     0,     0,    56,     0,     0,    57,    58,    59,     0,
       0,    60,     0,    61,    62,     0,     0,    63,     0,     0,
       0,   232,   233,   234,   235,   236,   237,   238,   239,     0,
       0,     0,     0,    15,     0,     0,     0,    16,   240,    17,
      18,    19,     0,     0,     0,    20,     0,     0,     0,    21,
      22,     0,     0,     0,     0,     0,     0,     0,    23,    24,
      25,     0,     0,     0,    26,     0,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,     0,     0,     0,     0,     0,     0,
       0,    44,     0,    45,     0,    46,     0,     0,     0,     0,
      47,     0,    48,    49,    50,     0,     0,    51,     0,     0,
       0,     0,    52,     0,     0,    53,     0,     0,     0,    54,
       7,     8,     9,    10,    55,    11,    12,    13,    14,     0,
       0,     0,     0,     0,     0,     0,     0,    56,     0,     0,
      57,    58,    59,     0,     0,    60,     0,    61,    62,  1469,
       0,    63,     0,     0,  1286,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,    15,   252,   253,
     254,    16,     0,    17,    18,    19,     0,     0,     0,    20,
       0,     0,     0,    21,    22,     0,     0,     0,     0,     0,
       0,     0,    23,    24,    25,     0,     0,     0,    26,     0,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,    44,     0,    45,     0,    46,
       0,     0,     0,     0,    47,     0,    48,    49,    50,     0,
       0,    51,     0,     0,     0,     0,    52,     0,     0,    53,
       0,     0,     0,    54,   648,   649,   650,    10,    55,    11,
     651,   652,    67,    68,     0,     0,   653,     0,     0,     0,
       0,    56,     0,     0,    57,    58,    59,     0,     0,    60,
       0,    61,    62,     0,     0,    63,   232,   233,   234,   235,
     236,   237,   238,   239,     0,     0,     0,     0,   458,     0,
       0,   654,    69,   240,     0,    70,     0,    71,    72,    73,
      74,   459,     0,   655,    76,     0,     0,    77,   656,     0,
       0,    78,     0,     0,     0,     0,   657,   658,    79,     0,
       0,     0,     0,     0,     0,    80,     0,     0,     0,     0,
       0,   232,   233,   234,   235,   236,   237,   238,   239,     0,
       0,    81,     0,     0,     0,     0,     0,     0,   240,   659,
       0,   660,     0,   661,     0,     0,     0,   460,   662,     0,
      82,    83,   663,     0,     0,   664,    84,     0,     0,     0,
     665,     0,     0,   666,    85,    86,    87,    88,     0,     0,
      89,     0,    90,     0,   648,   649,   650,    10,     0,    11,
     651,   652,    67,    68,     0,   667,  1039,     0,   668,   669,
       0,     0,     0,   670,     0,   671,     0,   691,     0,   672,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,     0,   252,   253,   254,   692,     0,   458,     0,
       0,   654,    69,     0,     0,    70,     0,    71,    72,    73,
      74,   459,     0,   655,    76,     0,     0,    77,   656,     0,
       0,    78,     0,     0,     0,     0,   657,   658,    79,     0,
       0,     0,     0,     0,     0,    80,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,     0,   252,   253,
     254,    81,     0,     0,     0,     0,     0,     0,     0,   659,
       0,   660,     0,   661,     0,     0,     0,   460,   662,     0,
      82,    83,   663,     0,     0,   664,    84,     0,     0,     0,
     665,     0,     0,   666,    85,    86,    87,    88,     0,     0,
      89,     0,    90,     7,     8,     9,    10,     0,    11,    12,
      13,     0,     0,     0,     0,   667,     0,     0,   668,   669,
       0,     0,     0,   670,     0,   671,     0,     0,     0,   672,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1386,
    1387,  1388,  1389,  1390,  1391,     0,     0,     0,     0,     0,
    1298,     0,     0,     0,  1392,     0,     0,     0,     0,     0,
       0,     0,  1299,     0,     0,     0,     0,  1300,   233,   234,
     235,   236,   237,   238,   239,    23,    24,     0,     0,     0,
       0,    26,     0,     0,   240,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
       0,   232,   233,   234,   235,   236,   237,   238,   239,     0,
      45,     0,    46,     0,     0,     0,     0,  1301,   240,     0,
       0,  1302,     0,     0,  1303,     0,     0,     0,     0,    52,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1304,     0,     0,  1305,  1306,  1307,
     936,     0,  1308,     0,  1309,    62,     0,     0,  1310,     0,
     937,   938,   939,   940,   941,   942,   943,   944,  1397,  1398,
    1399,  1400,  1401,     0,  1402,  1403,  1404,   945,     0,   946,
     947,   948,   949,   950,   951,   952,   953,   954,   955,   956,
     957,     0,     0,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,     0,   252,   253,   254,     0,     0,   958,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   333,   334,     0,     0,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,     0,   252,   253,
     254,   578,  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,
       0,     0,   959,     0,     0,     0,     0,     0,     0,  1392,
       0,     0,   335,     0,     0,    70,     0,    71,    72,    73,
      74,     0,     0,     0,   336,     0,     0,    77,     0,     0,
       0,    78,     0,     0,     0,     0,     0,     0,    79,     0,
       0,   960,     0,     0,   961,    80,   962,   963,   964,   965,
     966,   967,   968,   969,   970,   971,   972,     0,   973,   974,
       0,    81,   975,     0,   333,   334,     0,     0,     0,     0,
       0,     0,   337,     0,     0,     0,     0,     0,     0,     0,
      82,    83,     0,     0,     0,     0,    84,     0,     0,     0,
       0,     0,     0,     0,   338,   339,    87,    88,     0,     0,
      89,     0,    90,     0,     0,   335,     0,   340,    70,     0,
      71,    72,    73,    74,     0,     0,     0,   336,     0,     0,
      77,     0,     0,   341,    78,     0,   769,  1393,  1394,  1395,
    1396,    79,     0,  1397,  1398,  1399,  1400,  1401,    80,  1402,
    1403,  1404,   770,     0,     0,     0,     0,     0,     0,     0,
     505,   506,     0,     0,    81,     0,   771,     0,     0,     0,
       0,     0,     0,     0,     0,   337,     0,     0,     0,   772,
     773,     0,     0,    82,    83,     0,     0,     0,     0,    84,
       0,     0,     0,     0,     0,   774,     0,   338,   339,    87,
      88,   335,     0,    89,    70,    90,    71,    72,    73,    74,
       0,     0,     0,   336,     0,     0,    77,     0,     0,     0,
      78,     0,     0,     0,     0,   775,   341,    79,   776,     0,
       0,   777,     0,     0,    80,   232,   233,   234,   235,   236,
     237,   238,   239,     0,     0,     0,     0,   778,     0,     0,
      81,     0,   240,     0,     0,     0,     0,     0,     0,   779,
       0,   337,     0,     0,     0,     0,     0,     0,     0,    82,
      83,     0,     0,   780,     0,    84,     0,     0,     0,     0,
       0,     0,     0,   338,   339,    87,    88,     0,     0,    89,
       0,    90,   232,   233,   234,   235,   236,   237,   238,   239,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   240,
       0,     0,   341,   232,   233,   234,   235,   236,   237,   238,
     239,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     240,   232,   233,   234,   235,   236,   237,   238,   239,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   240,   232,
     233,   234,   235,   236,   237,   238,   239,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   240,     0,     0,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,     0,   252,   253,   254,   594,   232,   233,   234,   235,
     236,   237,   238,   239,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   240,   846,   847,   848,   849,   850,   851,
     852,   853,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   854,     0,     0,     0,     0,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,     0,   252,
     253,   254,   682,     0,     0,     0,     0,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,     0,
     252,   253,   254,   761,     0,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,     0,   252,   253,
     254,   902,     0,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,     0,   252,   253,   254,  1020,
       0,     0,     0,     0,     0,     0,     0,    -2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,     0,   252,   253,   254,  1284,     0,     0,   855,
     856,   857,   858,   859,   860,   861,   862,   863,   864,   865,
       0,   866,   867,   868,   105,     0,   106,     0,     0,   107,
     108,     0,     0,     0,     0,     0,     0,   109,   110,     0,
       0,     0,     0,     0,     0,     0,   111,     0,   112,   113,
     114,   115,     0,     0,     0,   116,     0,     0,     0,     0,
     117,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,     0,     0,     0,     0,     0,
     124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
     129,    67,    68,   130,   131,   456,     0,   457,   132,     0,
       0,     0,     0,     0,   133,   134,     0,   135,  1385,  1386,
    1387,  1388,  1389,  1390,  1391,   136,     0,     0,     0,     0,
       0,     0,     0,     0,  1392,     0,     0,   458,     0,     0,
       0,    69,     0,     0,    70,     0,    71,    72,    73,    74,
     459,     0,     0,    76,     0,     0,    77,     0,     0,     0,
      78,   234,   235,   236,   237,   238,   239,    79,     0,     0,
       0,     0,     0,     0,    80,     0,   240,   234,   235,   236,
     237,   238,   239,     0,     0,     0,     0,     0,     0,     0,
      81,     0,   240,  1386,  1387,  1388,  1389,  1390,  1391,     0,
       0,     0,     0,     0,     0,     0,   460,     0,  1392,    82,
      83,     0,     0,     0,     0,    84,     0,   234,   235,   236,
     237,   238,   239,    85,    86,    87,    88,     0,     0,    89,
       0,    90,   240,  1386,  1387,  1388,  1389,  1390,  1391,     0,
       0,     0,     0,     0,   461,     0,     0,     0,  1392,   462,
       0,     0,     0,  1394,  1395,  1396,     0,     0,  1397,  1398,
    1399,  1400,  1401,     0,  1402,  1403,  1404,  1386,  1387,  1388,
    1389,  1390,  1391,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1392,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   243,   244,   245,   246,
     247,   248,   249,   250,   251,     0,   252,   253,   254,     0,
       0,     0,     0,   244,   245,   246,   247,   248,   249,   250,
     251,     0,   252,   253,   254,     0,     0,  1394,  1395,  1396,
       0,     0,  1397,  1398,  1399,  1400,  1401,     0,  1402,  1403,
    1404,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     302,     0,     0,     0,   245,   246,   247,   248,   249,   250,
     251,     0,   252,   253,   254,     0,     0,     0,  1395,  1396,
       0,     0,  1397,  1398,  1399,  1400,  1401,   302,  1402,  1403,
    1404,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   105,     0,   106,     0,     0,     0,   108,     0,     0,
       0,     0,     0,  1396,   109,   110,  1397,  1398,  1399,  1400,
    1401,     0,  1402,  1403,  1404,   112,   113,   114,   105,     0,
     106,     0,     0,     0,   108,     0,     0,   297,     0,     0,
       0,   109,   110,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   296,   114,     0,     0,     0,     0,    70,
     122,    71,    72,    73,   297,     0,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,   128,     0,     0,     0,
     130,   131,   393,    67,    68,     0,     0,   122,     0,    80,
       0,     0,   134,     0,   135,     0,     0,   127,     0,     0,
       0,     0,     0,   128,     0,   263,     0,     0,   131,     0,
       0,  1032,    67,    68,     0,     0,     0,     0,     0,   134,
       0,   135,     0,    69,    82,    83,    70,     0,    71,    72,
      73,    74,    75,     0,     0,    76,     0,     0,    77,     0,
       0,    88,    78,     0,     0,     0,    90,     0,     0,    79,
       0,     0,    69,     0,     0,    70,    80,    71,    72,    73,
      74,    75,     0,     0,    76,     0,     0,    77,     0,   185,
       0,    78,    81,     0,     0,     0,     0,     0,    79,    70,
       0,    71,    72,    73,     0,    80,     0,     0,     0,     0,
       0,    82,    83,     0,     0,     0,     0,    84,     0,     0,
       0,    81,  1445,    67,    68,    85,    86,    87,    88,    80,
       0,    89,     0,    90,     0,     0,     0,     0,     0,     0,
      82,    83,     0,     0,     0,   263,    84,     0,     0,     0,
       0,   693,   694,   695,    85,    86,    87,    88,     0,     0,
      89,     0,    90,    69,    82,    83,    70,     0,    71,    72,
      73,    74,    75,     0,     0,    76,     0,     0,    77,     0,
       0,    88,    78,     0,     0,     0,    90,     0,     0,    79,
       0,     0,     0,     0,     0,    70,    80,    71,    72,    73,
     696,   697,     0,     0,     0,     0,     0,    77,     0,   186,
       0,     0,    81,     0,     0,     0,     0,     0,    79,   693,
     694,   695,     0,     0,     0,    80,     0,     0,     0,     0,
       0,    82,    83,     0,     0,     0,     0,    84,     0,     0,
       0,    81,     0,     0,     0,    85,    86,    87,    88,     0,
       0,    89,     0,    90,     0,     0,     0,     0,    67,    68,
      82,    83,   456,    70,     0,    71,    72,    73,     0,     0,
       0,     0,     0,     0,   698,    77,     0,    88,     0,     0,
      89,     0,    90,     0,     0,     0,    79,    67,    68,     0,
       0,   795,     0,    80,   458,     0,     0,     0,    69,     0,
       0,    70,     0,    71,    72,    73,    74,   459,     0,    81,
      76,     0,     0,    77,     0,     0,     0,    78,     0,     0,
       0,     0,     0,   458,    79,     0,     0,    69,    82,    83,
      70,    80,    71,    72,    73,    74,   459,     0,     0,    76,
       0,     0,    77,     0,     0,    88,    78,    81,    89,     0,
      90,     0,     0,    79,    70,     0,    71,    72,    73,     0,
      80,     0,     0,   460,     0,     0,    82,    83,     0,     0,
       0,     0,    84,     0,     0,     0,    81,     0,    67,    68,
      85,    86,    87,    88,    80,     0,    89,     0,    90,     0,
       0,     0,   460,     0,     0,    82,    83,     0,     0,     0,
     263,    84,     0,     0,     0,     0,     0,    67,    68,    85,
      86,    87,    88,     0,   458,    89,     0,    90,    69,    82,
      83,    70,     0,    71,    72,    73,    74,   459,     0,     0,
      76,     0,     0,    77,     0,     0,    88,    78,     0,     0,
       0,    90,     0,     0,    79,     0,     0,    69,     0,     0,
      70,    80,    71,    72,    73,    74,    75,     0,     0,    76,
       0,     0,    77,     0,   191,     0,    78,    81,     0,     0,
       0,     0,     0,    79,     0,     0,   214,   215,   216,     0,
      80,     0,     0,   460,     0,     0,    82,    83,     0,     0,
       0,     0,    84,    67,    68,     0,    81,     0,     0,     0,
      85,    86,    87,    88,     0,     0,    89,     0,    90,     0,
       0,     0,     0,     0,     0,    82,    83,    67,    68,     0,
       0,    84,     0,     0,     0,     0,     0,     0,     0,    85,
      86,    87,    88,    69,     0,    89,    70,    90,    71,    72,
      73,    74,   217,   218,     0,    76,     0,     0,    77,     0,
       0,     0,    78,     0,     0,     0,     0,    69,     0,    79,
      70,     0,    71,    72,    73,    74,    80,     0,     0,    76,
       0,     0,    77,     0,     0,     0,    78,     0,   219,   220,
       0,   221,    81,    79,     0,     0,   222,     0,   223,     0,
      80,     0,     0,     0,     0,     0,     0,     0,   607,  1267,
       0,    82,    83,    67,  1342,     0,    81,    84,     0,     0,
       0,     0,     0,     0,     0,    85,    86,    87,    88,     0,
       0,    89,     0,    90,     0,    82,    83,     0,     0,     0,
       0,    84,   175,     0,     0,     0,     0,     0,     0,    85,
      86,    87,    88,    69,     0,    89,    70,    90,    71,    72,
      73,    74,   516,     0,     0,    76,     0,     0,    77,     0,
       0,     0,    78,     0,     0,     0,     0,     0,     0,    79,
       0,     0,   176,     0,     0,    70,    80,    71,    72,    73,
      74,   997,     0,     0,   177,     0,     0,    77,     0,     0,
       0,    78,    81,     0,     0,     0,     0,     0,    79,     0,
       0,   214,   215,   216,     0,    80,     0,     0,     0,     0,
       0,    82,    83,     0,     0,     0,     0,    84,   175,     0,
       0,    81,     0,     0,     0,    85,    86,    87,    88,     0,
       0,    89,     0,    90,     0,     0,     0,     0,     0,     0,
      82,    83,    67,     0,     0,     0,    84,     0,     0,     0,
     214,   215,   216,     0,   178,   179,    87,    88,   176,     0,
      89,    70,    90,    71,    72,    73,    74,   217,   218,     0,
     177,     0,     0,    77,     0,     0,     0,    78,     0,     0,
       0,     0,    69,     0,    79,    70,     0,    71,    72,    73,
      74,    80,     0,     0,    76,     0,     0,    77,     0,     0,
       0,    78,     0,   219,   220,     0,   221,    81,    79,     0,
       0,   222,     0,   223,     0,    80,   217,   218,     0,     0,
       0,     0,     0,     0,  1267,     0,    82,    83,     0,  1344,
       0,    81,    84,     0,     0,     0,     0,     0,     0,     0,
     178,   179,    87,    88,     0,     0,    89,     0,    90,     0,
      82,    83,   219,   220,     0,   221,    84,     0,     0,     0,
     222,     0,   223,     0,    85,    86,    87,    88,     0,   105,
      89,   106,    90,  1267,   107,   108,     0,     0,  1346,     0,
       0,     0,   109,   110,     0,     0,     0,     0,     0,     0,
       0,   111,     0,   112,   113,   114,   115,     0,     0,     0,
     116,     0,     0,     0,     0,   117,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
       0,     0,     0,     0,     0,   124,   125,   126,   127,     0,
       0,   105,     0,   106,   128,   129,   107,   108,   130,   131,
       0,     0,     0,   132,   109,   110,     0,     0,     0,   133,
     134,     0,   135,   111,     0,   112,   113,   114,   115,     0,
     136,     0,   116,     0,     0,     0,     0,   117,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   689,
       0,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,     0,     0,     0,     0,     0,   124,   125,   126,
     127,     0,     0,   105,     0,   106,   128,   129,   107,   108,
     130,   131,     0,     0,     0,   132,   109,   110,     0,     0,
       0,   133,   134,     0,   135,   111,     0,   112,   113,   114,
     115,     0,   136,     0,   116,     0,     0,     0,     0,   117,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   871,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,     0,     0,     0,     0,     0,   124,
     125,   126,   127,     0,     0,   105,     0,   106,   128,   129,
     107,   108,   130,   131,     0,     0,     0,   132,   109,   110,
       0,     0,     0,   133,   134,     0,   135,   111,     0,   112,
     113,   114,   115,     0,   136,     0,   116,     0,     0,     0,
       0,   117,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   913,     0,     0,     0,     0,     0,     0,
     118,   119,   120,   121,   122,   123,     0,     0,     0,     0,
       0,   124,   125,   126,   127,     0,     0,   105,     0,   106,
     128,   129,   107,   108,   130,   131,     0,     0,     0,   132,
     109,   110,     0,     0,     0,   133,   134,     0,   135,   111,
       0,   112,   113,   114,   115,     0,   136,     0,   116,     0,
       0,     0,     0,   117,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1021,     0,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,     0,     0,
       0,     0,     0,   124,   125,   126,   127,     0,     0,   105,
       0,   106,   128,   129,   107,   108,   130,   131,     0,     0,
       0,   132,   109,   110,     0,     0,     0,   133,   134,     0,
     135,   111,     0,   112,   113,   114,   115,     0,   136,     0,
     116,     0,     0,     0,     0,   117,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1071,     0,     0,
       0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
       0,     0,     0,     0,     0,   124,   125,   126,   127,     0,
       0,   105,     0,   106,   128,   129,   107,   108,   130,   131,
       0,     0,     0,   132,   109,   110,     0,     0,     0,   133,
     134,     0,   135,   111,     0,   112,   113,   114,   115,   105,
     136,   106,   116,     0,     0,   108,     0,   117,     0,     0,
       0,     0,   109,   110,     0,     0,     0,     0,     0,  1289,
       0,     0,     0,   112,   296,   114,   118,   119,   120,   121,
     122,   123,     0,     0,     0,   297,     0,   124,   125,   126,
     127,     0,     0,     0,     0,     0,   128,   129,     0,     0,
     130,   131,     0,     0,     0,   132,     0,     0,   122,     0,
       0,   133,   134,     0,   135,     0,     0,     0,   127,     0,
       0,     0,   136,     0,   128,     0,     0,     0,     0,   131,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   133,
     134,  1428,   135,     0,     0,   105,     0,   106,     0,     0,
     107,   108,     0,     0,     0,     0,     0,  -147,   109,   110,
       0,     0,     0,     0,     0,     0,     0,   111,     0,   112,
     113,   114,   115,   105,     0,   106,   116,     0,     0,   108,
       0,   117,     0,     0,     0,     0,   109,   110,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   112,   113,   114,
     118,   119,   120,   121,   122,   123,     0,     0,     0,   297,
       0,   124,   125,   126,   127,     0,     0,     0,     0,     0,
     128,   129,     0,     0,   130,   131,     0,     0,     0,   132,
       0,   105,   122,   106,     0,   133,   134,   108,   135,     0,
       0,     0,   127,     0,   109,   110,     0,     0,   128,     0,
       0,     0,   130,   131,     0,   112,   296,   114,     0,   105,
       0,   106,     0,   133,   134,   108,   135,   297,     0,     0,
       0,     0,   109,   110,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   112,   296,   114,     0,     0,     0,     0,
     122,   308,     0,     0,     0,   297,     0,     0,     0,     0,
     127,     0,     0,     0,     0,     0,   128,     0,     0,     0,
       0,   131,     0,     0,     0,     0,     0,     0,   122,     0,
       0,     0,   134,     0,   135,     0,     0,     0,   127,     0,
       0,     0,     0,     0,   128,     0,     0,     0,     0,   131,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     134,     0,   135
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-922)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       1,    61,   113,   130,   527,   460,   927,   295,    44,   708,
     507,   751,   315,   489,   659,    44,    15,    44,   458,   476,
     604,    92,   140,   140,   147,   140,   149,   150,   151,   152,
     182,   154,   613,   156,   489,   158,    81,    82,    83,   327,
     480,   713,    13,    88,    33,    15,   585,     6,   488,     8,
      15,   174,    15,   717,   794,   719,   720,   721,   722,   723,
     147,    62,   185,   186,    76,    15,    76,    59,   191,   192,
      76,   743,   744,   147,   746,   747,   748,   749,   147,    15,
       0,   147,   169,   147,   623,   148,    76,   150,   147,   147,
      91,    92,   166,    33,   586,   634,   164,   166,    99,    75,
     166,   147,   166,   147,   140,   147,   155,   166,   166,   147,
     164,   140,    33,   140,    10,    11,    12,   150,   149,   147,
     166,   164,   166,   147,   166,   770,   146,   164,   166,    10,
      11,    12,   165,   125,   146,   146,   146,   149,   166,   149,
     146,   164,   166,   149,   164,   146,   147,    33,   149,   150,
     151,   152,     6,   154,     8,   156,   146,   158,   155,   149,
     615,   206,   207,   208,   209,   146,   164,   166,   157,   158,
     159,   160,   161,   174,   163,   164,   165,   295,   295,   147,
     295,   182,   150,   164,   185,   186,   257,   258,   159,   150,
     191,   192,   495,   253,   164,    76,    77,   147,   350,   164,
     164,   164,   273,   274,   165,   323,   323,   166,   323,   327,
     327,   147,   327,   752,   155,   691,   112,   520,   263,   711,
     804,   150,   714,   163,   164,   165,   898,   228,   149,   147,
     814,   112,   113,    13,   115,    15,   165,    17,   467,   120,
     904,   122,   287,   164,   165,    13,   147,    15,   166,    17,
     147,   790,   791,   149,   164,   752,   257,   258,   164,   295,
      75,   933,     6,   386,     8,   166,   295,   155,   295,   166,
     147,   272,   273,   274,   275,   276,   277,   163,   164,   165,
      60,   282,    22,    23,   164,   166,    13,   323,    15,   166,
      17,   327,    60,    33,   323,   164,   323,   754,   327,   147,
     327,   277,   108,   109,   110,   164,   112,   113,   114,     2,
     149,   117,    22,    23,   315,   147,   122,   147,   166,   147,
     147,   127,   128,    33,   130,   131,   132,   911,   134,   135,
     164,   771,   787,    60,   166,   164,   166,   149,   166,   166,
     643,    98,   147,   147,   146,   164,   148,   149,   150,   350,
     164,   146,   997,   148,   642,   150,   895,   147,    64,    65,
     140,   166,   166,    56,    57,    58,    59,    60,   164,   845,
      63,   146,   140,   148,   154,   150,   166,   165,   166,   159,
     609,   143,   144,   145,   164,   386,   154,   690,   164,   164,
     845,   159,   164,   165,   166,   918,   164,   164,   895,   983,
     629,   630,   631,   632,   633,   406,  1327,   149,   272,   273,
     274,   275,   276,   140,   164,   996,   164,   157,   158,   159,
     160,   161,   914,   163,   164,   165,   146,   154,   148,   164,
     150,   476,   159,    54,   164,    56,    57,    58,   439,   113,
     114,   115,   443,   444,   445,   446,   447,   157,   158,   159,
     160,   161,   164,   163,   164,   165,   457,   164,   165,   166,
     461,   462,   277,    84,   164,   466,  1005,  1006,   469,   146,
     164,   148,   164,   150,   703,   504,   165,   166,  1001,   100,
     164,   165,   166,   459,   460,   165,   166,   166,   489,   164,
     296,   297,   164,   165,   495,   164,   302,   190,   119,   120,
     146,   147,   164,   504,   165,   166,  1087,  1247,   164,  1090,
     164,  1003,   164,   489,   164,   136,   517,  1009,  1010,   520,
     141,   164,   337,   164,   642,   642,   164,   642,   165,   166,
     164,   165,   289,   164,   165,   164,   164,   164,   164,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     789,   254,   164,   150,   159,   165,   259,   165,   149,   872,
      10,    11,    12,    48,   147,   439,   164,   806,   146,   443,
     444,   445,   446,   447,   585,   586,   587,   164,   155,   164,
     164,   148,   349,   457,   147,   167,   597,   461,   462,   147,
     166,  1093,   295,   604,   166,   166,   642,   608,   166,   156,
     586,   671,   613,   642,  1313,   642,   617,   618,   619,   620,
     621,   622,   623,   659,   166,   166,   166,   156,   166,   322,
     659,   607,   659,   634,   166,   166,    76,    77,   166,   615,
     166,   147,   643,   644,   459,   460,   166,   166,   166,   166,
     166,   880,   166,   166,   166,   166,   166,   166,   887,   888,
     889,   890,   891,   156,   166,   166,   166,   166,   697,   156,
     166,   166,   112,   113,   489,   115,   166,  1417,  1418,  1419,
     120,   487,   122,    15,   164,   166,   159,   166,   165,   690,
     383,   165,   149,   164,   166,   146,   756,   757,   167,   166,
     147,   516,   703,   147,   764,   147,   766,   400,   401,   754,
     711,   147,   164,   714,   407,   148,   717,    33,   719,   720,
     721,   722,   723,   164,   149,   165,   164,   164,    33,    48,
     731,   166,   166,   597,   770,   711,   164,   166,   714,   740,
    1321,   770,   164,   770,   159,   159,   169,   146,    48,    76,
     751,   752,   164,   155,   881,   155,  1337,  1338,  1339,   155,
     517,   155,   166,  1239,    10,   148,   164,  1259,    10,  1261,
     881,   586,    17,    10,    10,   532,   469,   156,   535,  1519,
     147,   159,   148,   159,  1239,   166,  1526,   788,   466,   790,
     791,   166,   607,   794,   167,   148,   797,   920,   921,   148,
     615,   148,    47,   804,   167,   148,   166,   867,   159,   166,
     166,   787,   166,   814,   164,    60,    61,   146,   164,   164,
     164,   169,   515,   824,   165,   165,  1318,   165,  1409,   166,
     164,    76,   149,  1414,   164,   147,   529,   147,   166,  1420,
    1421,   157,   158,   159,   160,   161,   147,   163,   164,   165,
     159,   150,  1081,   882,   159,   160,   161,   165,   163,   164,
     165,   106,   166,   166,   109,   167,   147,   112,    10,   845,
     166,   872,   169,     4,   147,   681,   682,    48,   164,   880,
     169,   164,   169,   128,   146,   886,   887,   888,   889,   890,
     891,   892,  1415,  1474,   895,   140,   711,   590,   147,   714,
     166,   156,   156,   904,   156,   166,  1029,   166,   156,   154,
     911,   604,    11,   914,    10,  1407,   166,   148,    10,   920,
     921,    10,    10,   148,  1505,   147,   927,   998,   169,   164,
     608,   169,   166,    10,    11,    12,   166,  1518,   914,    33,
     618,   619,   620,   621,   622,   166,    10,    11,    12,   642,
     167,   708,    10,    11,    12,    54,   713,    56,    57,    58,
     717,   997,   719,   720,   721,   722,   723,   167,   997,  1272,
     997,   167,   787,   167,   667,   668,   669,   670,   166,   672,
    1472,   166,   983,    15,   164,    84,   743,   744,   164,   746,
     747,   748,   749,   166,   164,   996,   155,   998,   166,    76,
      77,   100,  1003,   164,  1005,  1006,   166,   164,  1009,  1010,
     155,   155,    76,    77,   155,   164,   166,    15,    76,    77,
     119,   120,   146,   166,    10,   703,   166,  1003,  1029,   166,
     845,   166,   148,  1009,  1010,   112,   113,   136,   115,    10,
     148,   148,   141,   120,    10,   122,   148,   740,   112,   113,
     164,   115,   167,   166,   112,   113,   120,   115,   122,   156,
     166,   166,   120,   147,   122,   159,   160,   161,   166,   163,
     164,   165,  1073,   150,   156,   881,   156,   154,   156,   166,
    1081,   166,   159,   166,    10,   148,  1087,    10,   167,  1090,
     154,   149,  1093,   148,   164,   159,   164,   164,   148,   914,
     166,    10,    11,    12,    13,   164,   166,   148,    17,   166,
     788,   804,   166,  1242,   307,   645,   919,  1093,  1313,   797,
     327,   814,   882,  1239,  1073,   818,   697,   845,   327,  1273,
    1202,   405,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,
      13,   898,   835,    -1,    17,    -1,    -1,   904,    -1,    -1,
      -1,    60,    -1,   846,   847,   848,   849,   850,   851,   852,
     853,   854,   855,   856,   857,   858,   859,   860,   861,   862,
     863,   864,   865,   866,    -1,   868,   933,  1248,    10,    11,
      12,    13,    -1,    -1,    -1,    17,    -1,    60,  1003,    -1,
      -1,    -1,    -1,    -1,  1009,  1010,    -1,    -1,    -1,    -1,
      -1,  1202,   880,   112,    -1,    -1,    -1,    -1,    -1,   887,
     888,   889,   890,   891,    -1,    -1,    -1,    -1,   911,    -1,
      -1,    -1,    -1,    54,    -1,    56,    57,    58,    60,    -1,
      -1,   140,    62,    -1,   927,    66,    -1,    -1,  1239,   112,
      -1,    -1,    -1,    -1,    -1,   154,  1247,  1248,    -1,  1309,
     159,    -1,    -1,    84,    -1,    85,    -1,    -1,  1259,    -1,
    1261,    -1,    61,  1239,    -1,    -1,    -1,   140,    -1,   100,
      -1,  1272,    -1,    -1,    -1,   105,    -1,    -1,  1093,   111,
     112,   154,    -1,  1259,    -1,  1261,   159,    -1,   119,   120,
     983,   164,   985,   123,    -1,  1355,  1356,    -1,  1358,    -1,
    1360,    -1,    -1,   133,    -1,   136,    -1,    -1,   140,    -1,
     141,    -1,    -1,    -1,    -1,    -1,    -1,  1318,    -1,    -1,
    1321,    -1,   154,    -1,    -1,    -1,  1327,   159,    -1,    -1,
      -1,    -1,   164,   164,    -1,    -1,  1337,  1338,  1339,    -1,
      -1,    -1,  1318,  1403,  1037,    -1,    -1,    -1,   178,   148,
      -1,   181,    -1,    -1,   153,    -1,   155,  1082,   157,    -1,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,    -1,    -1,    10,    11,    12,
      13,    -1,    15,    -1,    17,   184,    -1,    -1,    -1,   188,
     189,   190,    -1,    -1,    -1,   225,   226,    20,    21,    22,
      23,    -1,    -1,  1081,    -1,    -1,  1407,    -1,  1409,    -1,
      33,    -1,    -1,  1414,    -1,    -1,  1417,  1418,  1419,  1420,
    1421,    -1,    -1,    -1,  1239,    -1,    -1,    60,    -1,    -1,
      -1,  1407,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   271,    -1,    -1,  1259,    -1,  1261,    -1,    -1,    10,
      11,    12,  1512,  1513,  1514,    -1,  1516,    -1,    -1,   289,
      -1,   291,    18,    19,    20,    21,    22,    23,    -1,   268,
      -1,  1472,    -1,  1474,    -1,    -1,    -1,    33,   308,   112,
     310,   311,   312,   313,    -1,  1242,    -1,    -1,    16,    17,
      18,    19,    20,    21,    22,    23,  1472,    -1,    -1,   329,
      -1,    -1,    -1,  1318,  1505,    33,    -1,   140,   338,    -1,
      -1,   341,    -1,    -1,    -1,    76,    77,  1518,  1519,   349,
      -1,   154,    -1,    -1,    -1,  1526,   159,    -1,    -1,    -1,
      -1,   164,   155,   156,   157,   158,   159,   160,   161,  1232,
     163,   164,   165,    16,    17,    18,    19,    20,    21,    22,
      23,   112,   113,   114,   115,    -1,  1313,    -1,   388,   120,
      33,   122,   392,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    -1,   133,    -1,    -1,   405,    33,   138,    -1,  1304,
    1305,  1306,  1307,  1308,    -1,  1310,   385,    -1,    -1,    -1,
      -1,    -1,  1407,  1286,    -1,    -1,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   149,    -1,   151,   152,   153,   154,    -1,   458,   157,
     158,   159,   160,   161,  1327,   163,   164,   165,    -1,    -1,
     470,    -1,    -1,    -1,    -1,  1304,  1305,  1306,  1307,  1308,
     480,  1310,    -1,    -1,    -1,    -1,    -1,  1472,   488,  1384,
    1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,  1393,  1394,
    1395,  1396,  1397,  1398,  1399,  1400,  1401,  1402,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,    -1,   524,    -1,   169,    10,    11,    12,
     157,   158,   159,   160,   161,   535,   163,   164,   165,    -1,
      -1,  1404,    -1,   512,    10,    11,    12,    -1,    -1,    -1,
     519,    -1,    -1,  1448,    -1,  1384,  1385,  1386,  1387,  1388,
    1389,  1390,  1391,  1392,  1393,  1394,  1395,  1396,  1397,  1398,
    1399,  1400,  1401,  1402,    -1,    54,    -1,    56,    57,    58,
      -1,   550,    -1,   552,   584,   554,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    84,  1501,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1448,
      -1,   100,    -1,    -1,    -1,    -1,    -1,   627,    -1,   112,
     113,    -1,   115,    -1,    -1,    -1,    -1,   120,    -1,   122,
     119,   120,    -1,    -1,    -1,   645,   112,   113,    -1,   115,
      -1,    -1,    -1,    -1,   120,    -1,   122,   136,    -1,    -1,
      -1,    -1,   141,   146,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,  1501,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    -1,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    -1,
      -1,   701,   671,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    16,    17,    18,    19,    20,
      21,    22,    23,  1264,  1265,  1266,    -1,    -1,    -1,    -1,
     100,   771,    33,    -1,    -1,    -1,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,    -1,    -1,    -1,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
      -1,  1342,    -1,  1344,    -1,  1346,    -1,    -1,  1349,  1350,
    1351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   827,   828,
     829,    -1,   831,    -1,   833,   834,   835,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   883,    -1,    -1,    -1,    -1,    -1,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,    -1,    -1,    -1,   169,    -1,
      -1,    -1,    -1,    -1,    -1,    10,    11,    12,    -1,   919,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    -1,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    76,    77,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
    1000,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    -1,    -1,    -1,   112,   113,    -1,
     115,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,   100,
      -1,  1031,    -1,    -1,    -1,   106,   107,   108,   133,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,    -1,    -1,    -1,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,     3,
       4,     5,     6,    -1,     8,     9,    10,    11,    12,    -1,
      -1,  1080,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    10,    11,    12,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    50,    51,    -1,    -1,
      54,    33,    56,    57,    58,    59,    60,    -1,    62,    63,
      -1,    -1,    66,    67,    -1,    -1,    70,    -1,    47,    -1,
      49,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    76,    77,    -1,
      -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,   120,   121,    -1,    -1,
     124,   125,    10,    11,    12,   129,    -1,    -1,   132,   133,
     134,   135,   136,   112,   113,   139,   115,   141,    -1,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,    -1,
     164,   165,    -1,    -1,   168,    -1,    -1,  1267,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,    -1,    -1,    -1,   169,    76,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,    -1,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,    -1,    -1,
    1309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      51,    -1,    -1,    54,    -1,    56,    57,    58,    59,    -1,
      -1,    62,    63,    -1,    -1,    66,    67,    -1,    -1,    70,
      -1,    -1,    -1,    -1,    75,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
    1369,  1370,  1371,  1372,    -1,  1374,  1375,   108,    -1,   110,
      -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,
     121,    -1,    -1,   124,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,   133,   134,   135,   136,    -1,    -1,   139,    -1,
     141,    -1,    -1,    -1,  1444,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,    -1,   164,   165,    -1,    -1,   168,     3,     4,
       5,     6,    -1,     8,     9,    10,    11,    -1,    10,    11,
      12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    33,    -1,    -1,    54,
      -1,    56,    57,    58,    -1,    -1,    -1,    62,    -1,    64,
      65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    77,    -1,    76,    77,    81,    -1,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,    -1,
     112,   113,   117,   115,   119,   120,   121,    -1,   120,   124,
     122,    -1,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,
      -1,   136,     3,     4,     5,     6,   141,     8,     9,    10,
      11,   146,    -1,    -1,   146,    -1,    -1,    -1,    -1,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,    -1,   164,
     165,    -1,   149,   168,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,    50,
      -1,    -1,    -1,    54,    -1,    56,    57,    58,    -1,    -1,
      -1,    62,    -1,    -1,    -1,    66,    67,    10,    11,    12,
      -1,    -1,    -1,    -1,    75,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,    47,    -1,    49,   108,    -1,   110,
      -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,    -1,    -1,    -1,   129,    -1,
      -1,   132,    -1,    76,    77,   136,     3,     4,     5,     6,
     141,     8,     9,    10,    11,    -1,    10,    11,    12,    -1,
      -1,    15,    -1,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,    -1,   164,   165,   166,    -1,   168,    -1,   112,
     113,    -1,   115,    -1,    -1,    -1,    -1,   120,    -1,   122,
      -1,    -1,    -1,    50,    51,    -1,    -1,    54,    -1,    56,
      57,    58,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,
      67,    -1,    -1,   146,    -1,    -1,    -1,    -1,    75,    76,
      77,    -1,    76,    77,    81,    -1,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,   110,    -1,   112,    -1,    -1,   112,   113,
     117,   115,   119,   120,   121,    -1,   120,   124,   122,    -1,
      -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,   136,
       3,     4,     5,     6,   141,     8,     9,    10,    11,    -1,
      10,    11,    12,    -1,    -1,    -1,    -1,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,    -1,   164,   165,    -1,
      -1,   168,    -1,    -1,    -1,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    50,    51,    -1,
      -1,    54,    33,    56,    57,    58,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    -1,    76,    77,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,
      -1,    -1,   112,   113,   117,   115,   119,   120,   121,    -1,
     120,   124,   122,    -1,    -1,    -1,   129,    -1,    -1,   132,
      -1,    -1,    -1,   136,     3,     4,     5,     6,   141,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
      -1,   164,   165,    -1,    -1,   168,    -1,   148,    -1,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    50,   163,   164,   165,    54,    -1,    56,    57,    58,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,   110,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,
     129,    -1,    -1,   132,    -1,    -1,    -1,   136,     3,     4,
       5,     6,   141,     8,     9,    10,    11,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,   157,   158,
     159,    -1,    -1,   162,    -1,   164,   165,    -1,    -1,   168,
      -1,    -1,    -1,    16,    17,    18,    19,    20,    21,    22,
      23,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    54,
      33,    56,    57,    58,    -1,    -1,    -1,    62,    -1,    -1,
      -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,    -1,
      -1,    -1,   117,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,
      -1,   136,     3,     4,     5,     6,   141,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,
      -1,    -1,   157,   158,   159,    -1,    -1,   162,    -1,   164,
     165,   166,    -1,   168,   147,    -1,    -1,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    50,
     163,   164,   165,    54,    -1,    56,    57,    58,    -1,    -1,
      -1,    62,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,   110,
      -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,    -1,    -1,    -1,   129,    -1,
      -1,   132,    -1,    -1,    -1,   136,     3,     4,     5,     6,
     141,     8,     9,    10,    11,   146,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,    -1,   157,   158,   159,    -1,
      -1,   162,    -1,   164,   165,    -1,    -1,   168,    -1,    -1,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    54,    33,    56,
      57,    58,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,   110,    -1,   112,    -1,    -1,    -1,    -1,
     117,    -1,   119,   120,   121,    -1,    -1,   124,    -1,    -1,
      -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,   136,
       3,     4,     5,     6,   141,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,
     157,   158,   159,    -1,    -1,   162,    -1,   164,   165,   166,
      -1,   168,    -1,    -1,   149,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    50,   163,   164,
     165,    54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,
      -1,    -1,    -1,    -1,   117,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,   132,
      -1,    -1,    -1,   136,     3,     4,     5,     6,   141,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      -1,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
      -1,   164,   165,    -1,    -1,   168,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,    -1,    47,    -1,
      -1,    50,    51,    33,    -1,    54,    -1,    56,    57,    58,
      59,    60,    -1,    62,    63,    -1,    -1,    66,    67,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    33,   108,
      -1,   110,    -1,   112,    -1,    -1,    -1,   116,   117,    -1,
     119,   120,   121,    -1,    -1,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,    -1,   141,    -1,     3,     4,     5,     6,    -1,     8,
       9,    10,    11,    12,    -1,   154,    15,    -1,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,    -1,   147,    -1,   168,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,    47,    -1,
      -1,    50,    51,    -1,    -1,    54,    -1,    56,    57,    58,
      59,    60,    -1,    62,    63,    -1,    -1,    66,    67,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    84,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,   110,    -1,   112,    -1,    -1,    -1,   116,   117,    -1,
     119,   120,   121,    -1,    -1,   124,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,    -1,   141,     3,     4,     5,     6,    -1,     8,     9,
      10,    -1,    -1,    -1,    -1,   154,    -1,    -1,   157,   158,
      -1,    -1,    -1,   162,    -1,   164,    -1,    -1,    -1,   168,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
      19,    20,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,
      50,    -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    -1,    -1,    -1,    -1,    67,    17,    18,
      19,    20,    21,    22,    23,    75,    76,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    33,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
     110,    -1,   112,    -1,    -1,    -1,    -1,   117,    33,    -1,
      -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,   129,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,    -1,    -1,   157,   158,   159,
       6,    -1,   162,    -1,   164,   165,    -1,    -1,   168,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,    33,    -1,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    -1,    -1,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    10,    11,    -1,    -1,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    58,
      59,    -1,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,   147,    -1,    -1,   150,    84,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,   165,
      -1,   100,   168,    -1,    10,    11,    -1,    -1,    -1,    -1,
      -1,    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,   136,    -1,    -1,
     139,    -1,   141,    -1,    -1,    51,    -1,   146,    54,    -1,
      56,    57,    58,    59,    -1,    -1,    -1,    63,    -1,    -1,
      66,    -1,    -1,   162,    70,    -1,    17,   151,   152,   153,
     154,    77,    -1,   157,   158,   159,   160,   161,    84,   163,
     164,   165,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      10,    11,    -1,    -1,   100,    -1,    47,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,    60,
      61,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
      -1,    -1,    -1,    -1,    -1,    76,    -1,   133,   134,   135,
     136,    51,    -1,   139,    54,   141,    56,    57,    58,    59,
      -1,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,
      70,    -1,    -1,    -1,    -1,   106,   162,    77,   109,    -1,
      -1,   112,    -1,    -1,    84,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,   128,    -1,    -1,
     100,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,   140,
      -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,    -1,    -1,   154,    -1,   125,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,   134,   135,   136,    -1,    -1,   139,
      -1,   141,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      -1,    -1,   162,    16,    17,    18,    19,    20,    21,    22,
      23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      33,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,    -1,    -1,    -1,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,    -1,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,    47,    -1,    49,    -1,    -1,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,
     113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,   122,
     123,    11,    12,   126,   127,    15,    -1,    17,   131,    -1,
      -1,    -1,    -1,    -1,   137,   138,    -1,   140,    17,    18,
      19,    20,    21,    22,    23,   148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    -1,    -1,    47,    -1,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    58,    59,
      60,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,
      70,    18,    19,    20,    21,    22,    23,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    33,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    33,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   116,    -1,    33,   119,
     120,    -1,    -1,    -1,    -1,   125,    -1,    18,    19,    20,
      21,    22,    23,   133,   134,   135,   136,    -1,    -1,   139,
      -1,   141,    33,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,    -1,   154,    -1,    -1,    -1,    33,   159,
      -1,    -1,    -1,   152,   153,   154,    -1,    -1,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,    -1,
      -1,    -1,    -1,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   152,   153,   154,
      -1,    -1,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       6,    -1,    -1,    -1,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,    -1,    -1,    -1,   153,   154,
      -1,    -1,   157,   158,   159,   160,   161,     6,   163,   164,
     165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    -1,    49,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,   154,    60,    61,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,    71,    72,    73,    47,    -1,
      49,    -1,    -1,    -1,    53,    -1,    -1,    83,    -1,    -1,
      -1,    60,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    54,
     106,    56,    57,    58,    83,    -1,    -1,    -1,    -1,    -1,
     116,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,
     126,   127,    10,    11,    12,    -1,    -1,   106,    -1,    84,
      -1,    -1,   138,    -1,   140,    -1,    -1,   116,    -1,    -1,
      -1,    -1,    -1,   122,    -1,   100,    -1,    -1,   127,    -1,
      -1,    10,    11,    12,    -1,    -1,    -1,    -1,    -1,   138,
      -1,   140,    -1,    51,   119,   120,    54,    -1,    56,    57,
      58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    -1,
      -1,   136,    70,    -1,    -1,    -1,   141,    -1,    -1,    77,
      -1,    -1,    51,    -1,    -1,    54,    84,    56,    57,    58,
      59,    60,    -1,    -1,    63,    -1,    -1,    66,    -1,   164,
      -1,    70,   100,    -1,    -1,    -1,    -1,    -1,    77,    54,
      -1,    56,    57,    58,    -1,    84,    -1,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,
      -1,   100,    10,    11,    12,   133,   134,   135,   136,    84,
      -1,   139,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,   100,   125,    -1,    -1,    -1,
      -1,    10,    11,    12,   133,   134,   135,   136,    -1,    -1,
     139,    -1,   141,    51,   119,   120,    54,    -1,    56,    57,
      58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    -1,
      -1,   136,    70,    -1,    -1,    -1,   141,    -1,    -1,    77,
      -1,    -1,    -1,    -1,    -1,    54,    84,    56,    57,    58,
      59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,   164,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    77,    10,
      11,    12,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   133,   134,   135,   136,    -1,
      -1,   139,    -1,   141,    -1,    -1,    -1,    -1,    11,    12,
     119,   120,    15,    54,    -1,    56,    57,    58,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    66,    -1,   136,    -1,    -1,
     139,    -1,   141,    -1,    -1,    -1,    77,    11,    12,    -1,
      -1,    15,    -1,    84,    47,    -1,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    58,    59,    60,    -1,   100,
      63,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    -1,    47,    77,    -1,    -1,    51,   119,   120,
      54,    84,    56,    57,    58,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    -1,    -1,   136,    70,   100,   139,    -1,
     141,    -1,    -1,    77,    54,    -1,    56,    57,    58,    -1,
      84,    -1,    -1,   116,    -1,    -1,   119,   120,    -1,    -1,
      -1,    -1,   125,    -1,    -1,    -1,   100,    -1,    11,    12,
     133,   134,   135,   136,    84,    -1,   139,    -1,   141,    -1,
      -1,    -1,   116,    -1,    -1,   119,   120,    -1,    -1,    -1,
     100,   125,    -1,    -1,    -1,    -1,    -1,    11,    12,   133,
     134,   135,   136,    -1,    47,   139,    -1,   141,    51,   119,
     120,    54,    -1,    56,    57,    58,    59,    60,    -1,    -1,
      63,    -1,    -1,    66,    -1,    -1,   136,    70,    -1,    -1,
      -1,   141,    -1,    -1,    77,    -1,    -1,    51,    -1,    -1,
      54,    84,    56,    57,    58,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    -1,   164,    -1,    70,   100,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    10,    11,    12,    -1,
      84,    -1,    -1,   116,    -1,    -1,   119,   120,    -1,    -1,
      -1,    -1,   125,    11,    12,    -1,   100,    -1,    -1,    -1,
     133,   134,   135,   136,    -1,    -1,   139,    -1,   141,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,    11,    12,    -1,
      -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
     134,   135,   136,    51,    -1,   139,    54,   141,    56,    57,
      58,    59,    76,    77,    -1,    63,    -1,    -1,    66,    -1,
      -1,    -1,    70,    -1,    -1,    -1,    -1,    51,    -1,    77,
      54,    -1,    56,    57,    58,    59,    84,    -1,    -1,    63,
      -1,    -1,    66,    -1,    -1,    -1,    70,    -1,   112,   113,
      -1,   115,   100,    77,    -1,    -1,   120,    -1,   122,    -1,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   116,   133,
      -1,   119,   120,    11,   138,    -1,   100,   125,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,   134,   135,   136,    -1,
      -1,   139,    -1,   141,    -1,   119,   120,    -1,    -1,    -1,
      -1,   125,    11,    -1,    -1,    -1,    -1,    -1,    -1,   133,
     134,   135,   136,    51,    -1,   139,    54,   141,    56,    57,
      58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    -1,
      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      -1,    -1,    51,    -1,    -1,    54,    84,    56,    57,    58,
      59,    60,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,
      -1,    70,   100,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    10,    11,    12,    -1,    84,    -1,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,    -1,    -1,   125,    11,    -1,
      -1,   100,    -1,    -1,    -1,   133,   134,   135,   136,    -1,
      -1,   139,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,    11,    -1,    -1,    -1,   125,    -1,    -1,    -1,
      10,    11,    12,    -1,   133,   134,   135,   136,    51,    -1,
     139,    54,   141,    56,    57,    58,    59,    76,    77,    -1,
      63,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    51,    -1,    77,    54,    -1,    56,    57,    58,
      59,    84,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,
      -1,    70,    -1,   112,   113,    -1,   115,   100,    77,    -1,
      -1,   120,    -1,   122,    -1,    84,    76,    77,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    -1,   119,   120,    -1,   138,
      -1,   100,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     133,   134,   135,   136,    -1,    -1,   139,    -1,   141,    -1,
     119,   120,   112,   113,    -1,   115,   125,    -1,    -1,    -1,
     120,    -1,   122,    -1,   133,   134,   135,   136,    -1,    47,
     139,    49,   141,   133,    52,    53,    -1,    -1,   138,    -1,
      -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
      -1,    -1,    -1,    -1,    -1,   113,   114,   115,   116,    -1,
      -1,    47,    -1,    49,   122,   123,    52,    53,   126,   127,
      -1,    -1,    -1,   131,    60,    61,    -1,    -1,    -1,   137,
     138,    -1,   140,    69,    -1,    71,    72,    73,    74,    -1,
     148,    -1,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,
      -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,    -1,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,    -1,    -1,    47,    -1,    49,   122,   123,    52,    53,
     126,   127,    -1,    -1,    -1,   131,    60,    61,    -1,    -1,
      -1,   137,   138,    -1,   140,    69,    -1,    71,    72,    73,
      74,    -1,   148,    -1,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,    -1,    -1,    47,    -1,    49,   122,   123,
      52,    53,   126,   127,    -1,    -1,    -1,   131,    60,    61,
      -1,    -1,    -1,   137,   138,    -1,   140,    69,    -1,    71,
      72,    73,    74,    -1,   148,    -1,    78,    -1,    -1,    -1,
      -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,
      -1,   113,   114,   115,   116,    -1,    -1,    47,    -1,    49,
     122,   123,    52,    53,   126,   127,    -1,    -1,    -1,   131,
      60,    61,    -1,    -1,    -1,   137,   138,    -1,   140,    69,
      -1,    71,    72,    73,    74,    -1,   148,    -1,    78,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,    -1,    -1,
      -1,    -1,    -1,   113,   114,   115,   116,    -1,    -1,    47,
      -1,    49,   122,   123,    52,    53,   126,   127,    -1,    -1,
      -1,   131,    60,    61,    -1,    -1,    -1,   137,   138,    -1,
     140,    69,    -1,    71,    72,    73,    74,    -1,   148,    -1,
      78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,
      -1,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
      -1,    -1,    -1,    -1,    -1,   113,   114,   115,   116,    -1,
      -1,    47,    -1,    49,   122,   123,    52,    53,   126,   127,
      -1,    -1,    -1,   131,    60,    61,    -1,    -1,    -1,   137,
     138,    -1,   140,    69,    -1,    71,    72,    73,    74,    47,
     148,    49,    78,    -1,    -1,    53,    -1,    83,    -1,    -1,
      -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,   167,
      -1,    -1,    -1,    71,    72,    73,   102,   103,   104,   105,
     106,   107,    -1,    -1,    -1,    83,    -1,   113,   114,   115,
     116,    -1,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,
     126,   127,    -1,    -1,    -1,   131,    -1,    -1,   106,    -1,
      -1,   137,   138,    -1,   140,    -1,    -1,    -1,   116,    -1,
      -1,    -1,   148,    -1,   122,    -1,    -1,    -1,    -1,   127,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,
     138,   167,   140,    -1,    -1,    47,    -1,    49,    -1,    -1,
      52,    53,    -1,    -1,    -1,    -1,    -1,   155,    60,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    71,
      72,    73,    74,    47,    -1,    49,    78,    -1,    -1,    53,
      -1,    83,    -1,    -1,    -1,    -1,    60,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
     102,   103,   104,   105,   106,   107,    -1,    -1,    -1,    83,
      -1,   113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,
     122,   123,    -1,    -1,   126,   127,    -1,    -1,    -1,   131,
      -1,    47,   106,    49,    -1,   137,   138,    53,   140,    -1,
      -1,    -1,   116,    -1,    60,    61,    -1,    -1,   122,    -1,
      -1,    -1,   126,   127,    -1,    71,    72,    73,    -1,    47,
      -1,    49,    -1,   137,   138,    53,   140,    83,    -1,    -1,
      -1,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
     106,   107,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,
     116,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,
      -1,    -1,   138,    -1,   140,    -1,    -1,    -1,   116,    -1,
      -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     138,    -1,   140
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   143,   144,   145,   171,   172,   277,     3,     4,     5,
       6,     8,     9,    10,    11,    50,    54,    56,    57,    58,
      62,    66,    67,    75,    76,    77,    81,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   108,   110,   112,   117,   119,   120,
     121,   124,   129,   132,   136,   141,   154,   157,   158,   159,
     162,   164,   165,   168,   267,   268,   276,    11,    12,    51,
      54,    56,    57,    58,    59,    60,    63,    66,    70,    77,
      84,   100,   119,   120,   125,   133,   134,   135,   136,   139,
     141,   229,   230,   234,   236,   238,   244,   245,   249,   250,
     255,   256,   257,   258,     0,    47,    49,    52,    53,    60,
      61,    69,    71,    72,    73,    74,    78,    83,   102,   103,
     104,   105,   106,   107,   113,   114,   115,   116,   122,   123,
     126,   127,   131,   137,   138,   140,   148,   175,   177,   178,
     180,   183,   201,   251,   254,   277,   146,   164,   164,   164,
     164,   164,   164,   155,   164,   155,   164,   164,   164,   164,
     164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
     164,   164,   164,   164,   164,    11,    51,    63,   133,   134,
     232,   249,   250,   255,   155,   164,   164,    15,   164,   155,
     164,   164,   164,   267,   267,   267,   267,   267,    11,    54,
      56,    57,    58,    66,    77,    84,   100,   119,   120,   136,
     141,   234,   265,   267,    10,    11,    12,    76,    77,   112,
     113,   115,   120,   122,   150,   154,   159,   271,   272,   274,
     277,   267,    16,    17,    18,    19,    20,    21,    22,    23,
      33,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   163,   164,   165,     6,     8,   229,   230,   164,
      59,   125,    66,   100,   256,   256,   256,   274,   164,   256,
      13,    15,    17,    60,   140,   154,   159,   164,   227,   228,
     277,   228,   146,    10,    11,    12,   112,   149,   275,   235,
     277,   137,   181,   182,   274,   164,    72,    83,   180,   180,
     180,   180,     6,   180,   201,   180,   149,   179,   107,   180,
     164,   164,   164,   164,   180,   146,   274,   149,   149,   149,
     180,   180,   164,   180,   183,   202,   180,   180,   186,   107,
     274,   180,   180,    10,    11,    51,    63,   111,   133,   134,
     146,   162,   189,   192,   231,   233,   236,   238,   244,   249,
     250,   255,   264,   265,   277,   264,   234,   264,   264,   264,
     264,   234,   264,   234,   264,   234,   264,   234,   234,   234,
     234,   234,   234,   234,   234,   234,   234,   234,   234,   234,
     234,   234,   264,   164,   274,   164,   164,   274,   235,   234,
     264,   264,   164,    10,   234,   234,   234,   267,   264,   264,
     166,   147,   166,   274,   274,   147,   169,   150,   217,   277,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   166,   265,   267,   228,   228,    51,   267,   234,   159,
     274,    13,    15,    17,    60,   140,   154,   159,   227,   277,
     227,   228,   227,   228,   227,   227,    15,    17,    47,    60,
     116,   154,   159,   212,   213,   222,   229,   230,   277,   165,
     247,   248,   277,    11,   246,   256,   149,    10,    11,    12,
      47,    49,   112,   146,   274,   275,   274,    48,   147,   164,
      11,   231,   267,   180,   177,   146,   274,   274,   274,   274,
     274,   172,   146,   267,   155,    10,    11,   192,   231,   233,
     274,   148,   150,   164,   164,   164,    60,   229,   274,   164,
     176,   274,   146,   148,   149,   150,   218,   146,   148,   150,
     219,   148,   184,   274,   275,   235,   167,   166,   166,   166,
     166,   166,   166,   156,   166,   156,   166,   166,   166,   166,
     147,   166,   147,   166,   147,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   267,   234,   264,   274,
     156,   166,   166,   274,   166,   166,   156,   166,   166,   166,
     166,   267,   267,    15,   154,   272,   164,   198,   277,   267,
     149,   166,   169,   166,   166,   166,   227,   159,   274,   227,
     227,   227,   227,   227,   165,   227,   181,   116,   229,   230,
     222,   227,   227,   166,    15,   147,    13,    17,    60,   140,
     154,   159,   164,   225,   275,   277,    13,    15,    17,    60,
     140,   154,   159,   164,   226,   263,   267,   277,   274,   167,
     246,   181,   164,   237,   239,   149,   180,   181,     3,     4,
       5,     9,    10,    15,    50,    62,    67,    75,    76,   108,
     110,   112,   117,   121,   124,   129,   132,   154,   157,   158,
     162,   164,   168,   214,   215,   222,   223,   269,   270,   276,
     277,   166,   166,   172,   146,   147,   147,   147,   147,   167,
     252,   147,   166,    10,    11,    12,    59,    60,   133,   203,
     204,   205,   206,   207,   255,   277,   164,   219,   187,   148,
     234,   190,    13,   159,   191,    51,   267,   229,    13,    17,
      60,   140,   154,   159,   224,   275,   277,   234,   172,   164,
     259,   260,   173,   174,   274,    64,    65,   259,    64,    65,
     146,   267,    13,    17,    60,   111,   140,   154,   159,   164,
     185,   208,   210,   275,   149,   274,   164,   164,   234,   234,
     234,   166,   166,   166,   164,   166,   164,   217,   212,    17,
      33,    47,    60,    61,    76,   106,   109,   112,   128,   140,
     154,   211,   277,   267,   227,   263,   166,    48,   229,   230,
     225,   226,   166,   166,   198,    15,   222,   159,   225,   225,
     225,   225,   225,   225,   165,   217,   159,   274,   226,   226,
     226,   226,   226,   226,   165,   217,   169,   147,   150,    48,
     231,   267,   172,    76,   240,   277,   182,   164,   155,   155,
     232,   155,    15,   164,   155,   164,   267,   267,   267,   267,
     234,   265,   267,   166,    15,   147,    16,    17,    18,    19,
      20,    21,    22,    23,    33,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   163,   164,   165,   180,
     180,   167,   253,    10,    10,    10,    10,   172,   276,   148,
     207,   156,   147,    15,   274,    13,    17,    60,   140,   154,
     159,   164,   225,   226,   188,   210,   148,   212,   159,   208,
     212,   166,   166,   224,   159,   224,   224,   224,   224,   224,
     164,   165,   166,   167,   193,   167,   261,   277,   146,   147,
     146,   164,   148,   148,   167,   148,   148,   146,   220,   221,
     267,   277,   148,   159,   208,   208,     6,    16,    17,    18,
      19,    20,    21,    22,    23,    33,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    65,   108,
     147,   150,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   164,   165,   168,   199,   208,   208,   208,
     208,   149,   164,   165,   211,   150,   217,   219,   246,   265,
     265,   166,   166,   166,   265,   265,   166,    60,   232,   181,
     164,   146,   169,   164,   222,   225,   226,   217,   217,   164,
     164,   211,   225,   166,   263,   226,   166,   263,   267,   166,
     166,   167,   149,   241,   242,   277,   234,   234,   234,   164,
     234,   164,    10,   234,   234,   234,   267,   166,   166,    15,
     223,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   166,   265,   267,   172,   147,   166,   147,   147,
     147,   167,   166,   225,   226,   183,   200,   201,   206,   274,
     150,   159,   150,   216,   277,   217,   219,   166,   208,   166,
     166,   164,   224,   196,   263,   212,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    70,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    82,    83,    84,   100,   106,   107,   108,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   168,   169,   262,   259,   174,   264,   264,
     220,   167,   147,   208,    10,   166,   169,   166,     4,   209,
     263,   267,   147,   166,   166,   166,   166,   198,   232,   228,
      48,   166,   274,   259,   212,   217,   217,   212,   212,   164,
     169,   164,   169,   147,   113,   114,   115,   133,   138,   243,
     273,   274,   146,   147,   166,   156,   156,   264,   156,   274,
     166,   166,   156,   166,   166,   267,   149,   166,   169,   167,
      10,   148,    10,    10,    10,   148,   216,   234,    50,    62,
      67,   117,   121,   124,   154,   157,   158,   159,   162,   164,
     168,   266,   268,   147,   198,   166,   164,   198,   197,   212,
     169,   166,   261,   167,   167,   166,   167,   146,   267,   214,
     169,   185,   211,   228,    15,   166,   167,   166,   166,   166,
     212,   212,   138,   273,   138,   273,   138,   273,   274,   113,
     114,   115,    15,   172,   243,   164,   164,   166,   164,   166,
     164,   267,   147,   166,   147,   166,   166,   147,   166,   164,
     155,   155,   155,    15,   164,   155,   266,   266,   266,   266,
     266,   234,   265,   266,    16,    17,    18,    19,    20,    21,
      22,    23,    33,   151,   152,   153,   154,   157,   158,   159,
     160,   161,   163,   164,   165,   188,   164,   194,   212,   166,
     198,   167,    15,   220,   166,   146,   166,   198,   198,   198,
     166,   166,   273,   273,   273,   273,   273,   273,   167,   265,
     265,   265,   265,    10,   148,    10,   148,   148,    10,   148,
     234,   234,   234,   234,   164,    10,   234,   234,   166,   166,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   166,
     265,   267,   195,   212,   166,   198,   167,   198,   259,   211,
     211,   211,   198,   198,   166,   166,   166,   166,   166,   147,
     147,   166,   166,   156,   156,   156,   274,   166,   166,   156,
     266,   149,   166,   169,   212,   166,   198,   167,   148,    10,
      10,   148,   164,   164,   164,   166,   164,   266,   166,   198,
     166,   166,   265,   265,   265,   265,   198,   211,   148,   148,
     166,   166,   166,   166,   211
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
# endif
#endif

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
        break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}




/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;


#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc = yyloc_default;


    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
/* Line 1792 of yacc.c  */
#line 450 "dtool/src/cppparser/cppBison.yxx"
    {
  current_expr = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 4:
/* Line 1792 of yacc.c  */
#line 454 "dtool/src/cppparser/cppBison.yxx"
    {
  current_type = (yyvsp[(2) - (2)].u.type);
}
    break;

  case 10:
/* Line 1792 of yacc.c  */
#line 472 "dtool/src/cppparser/cppBison.yxx"
    {
  delete (yyvsp[(3) - (4)].u.expr);
}
    break;

  case 11:
/* Line 1792 of yacc.c  */
#line 476 "dtool/src/cppparser/cppBison.yxx"
    {
  delete (yyvsp[(3) - (5)].u.expr);
}
    break;

  case 12:
/* Line 1792 of yacc.c  */
#line 480 "dtool/src/cppparser/cppBison.yxx"
    {
  delete (yyvsp[(3) - (4)].u.expr);
}
    break;

  case 13:
/* Line 1792 of yacc.c  */
#line 492 "dtool/src/cppparser/cppBison.yxx"
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[(1) - (2)].u.integer) & CPPInstance::SC_c_binding));
}
    break;

  case 14:
/* Line 1792 of yacc.c  */
#line 497 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 21:
/* Line 1792 of yacc.c  */
#line 510 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[(1) - (1)]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
    break;

  case 22:
/* Line 1792 of yacc.c  */
#line 523 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[(1) - (1)]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
    break;

  case 23:
/* Line 1792 of yacc.c  */
#line 532 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_published);
}
    break;

  case 24:
/* Line 1792 of yacc.c  */
#line 536 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
    break;

  case 25:
/* Line 1792 of yacc.c  */
#line 544 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_protected);
}
    break;

  case 26:
/* Line 1792 of yacc.c  */
#line 548 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_private);
}
    break;

  case 27:
/* Line 1792 of yacc.c  */
#line 552 "dtool/src/cppparser/cppBison.yxx"
    {

  CPPDeclaration *getter = (yyvsp[(5) - (7)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(5) - (7)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (7)]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (7)].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[(1) - (7)]).file);
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (7)]));
}
    break;

  case 28:
/* Line 1792 of yacc.c  */
#line 563 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *getter = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));

  } else {
    CPPDeclaration *setter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (9)]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (9)].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[(1) - (9)]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (9)]));
  }
}
    break;

  case 29:
/* Line 1792 of yacc.c  */
#line 584 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *getter = (yyvsp[(5) - (11)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(5) - (11)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (11)]));

  } else {
    CPPDeclaration *setter = (yyvsp[(7) - (11)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[(7) - (11)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (11)]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[(9) - (11)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == (CPPDeclaration *)NULL || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[(9) - (11)].u.identifier)->get_fully_scoped_name(), (yylsp[(9) - (11)]));
      deleter = NULL;
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (11)].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[(1) - (11)]).file);
    if (deleter) {
      make_property->_del_function = deleter->as_function_group();
    }
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (11)]));
  }
}
    break;

  case 30:
/* Line 1792 of yacc.c  */
#line 614 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *length_getter = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));
    length_getter = NULL;
  }

  CPPDeclaration *getter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (9)]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (9)].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[(1) - (9)]).file);
  make_property->_length_function = length_getter->as_function_group();
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (9)]));
}
    break;

  case 31:
/* Line 1792 of yacc.c  */
#line 631 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *length_getter = (yyvsp[(5) - (11)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[(5) - (11)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (11)]));
    length_getter = NULL;
  }

  CPPDeclaration *getter = (yyvsp[(7) - (11)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(7) - (11)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (11)]));

  } else {
    CPPDeclaration *setter = (yyvsp[(9) - (11)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[(9) - (11)].u.identifier)->get_fully_scoped_name(), (yylsp[(9) - (11)]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (11)].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[(1) - (11)]).file);
    make_property->_length_function = length_getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (11)]));
  }
}
    break;

  case 32:
/* Line 1792 of yacc.c  */
#line 659 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *length_getter = (yyvsp[(5) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[(5) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (13)]));
    length_getter = NULL;
  }

  CPPDeclaration *getter = (yyvsp[(7) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(7) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (13)]));

  } else {
    CPPDeclaration *setter = (yyvsp[(9) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[(9) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(9) - (13)]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[(11) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == (CPPDeclaration *)NULL || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[(11) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(11) - (13)]));
      deleter = NULL;
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (13)].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[(1) - (13)]).file);
    make_property->_length_function = length_getter->as_function_group();
    if (deleter) {
      make_property->_del_function = deleter->as_function_group();
    }
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (13)]));
  }
}
    break;

  case 33:
/* Line 1792 of yacc.c  */
#line 696 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *hasser = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));
  }

  CPPDeclaration *getter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (9)]));
  }

  if (hasser && getter) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[(3) - (9)].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        NULL, NULL,
                                        current_scope, (yylsp[(1) - (9)]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (9)]));
  }
}
    break;

  case 34:
/* Line 1792 of yacc.c  */
#line 718 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *hasser = (yyvsp[(5) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[(5) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (13)]));
  }

  CPPDeclaration *getter = (yyvsp[(7) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(7) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (13)]));
  }

  CPPDeclaration *setter = (yyvsp[(9) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid setter: " + (yyvsp[(9) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(9) - (13)]));
  }

  CPPDeclaration *clearer = (yyvsp[(11) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (clearer == (CPPDeclaration *)NULL || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid clear-function: " + (yyvsp[(11) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(11) - (13)]));
  }

  if (hasser && getter && setter && clearer) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[(3) - (13)].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        setter->as_function_group(),
                                        clearer->as_function_group(),
                                        current_scope, (yylsp[(1) - (13)]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (13)]));
  }
}
    break;

  case 35:
/* Line 1792 of yacc.c  */
#line 751 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *length_getter = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));
    length_getter = NULL;
  }

  CPPDeclaration *element_getter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == (CPPDeclaration *)NULL || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));
    element_getter = NULL;
  }

  if (length_getter != (CPPDeclaration *)NULL && element_getter != (CPPDeclaration *)NULL) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[(3) - (9)].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[(1) - (9)]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[(1) - (9)]));
  }
}
    break;

  case 36:
/* Line 1792 of yacc.c  */
#line 773 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPExpression::Result result = (yyvsp[(3) - (7)].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[(3) - (7)]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[(5) - (7)].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[(3) - (7)]));
  }
}
    break;

  case 37:
/* Line 1792 of yacc.c  */
#line 784 "dtool/src/cppparser/cppBison.yxx"
    {
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[(3) - (5)].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[(3) - (5)]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[(3) - (5)]));
  }
}
    break;

  case 38:
/* Line 1792 of yacc.c  */
#line 797 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
    break;

  case 39:
/* Line 1792 of yacc.c  */
#line 803 "dtool/src/cppparser/cppBison.yxx"
    {
  delete current_scope;
  pop_scope();
}
    break;

  case 40:
/* Line 1792 of yacc.c  */
#line 812 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 41:
/* Line 1792 of yacc.c  */
#line 816 "dtool/src/cppparser/cppBison.yxx"
    {
  // This isn't really a storage class, but it helps with parsing.
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_const;
}
    break;

  case 42:
/* Line 1792 of yacc.c  */
#line 821 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_extern;
}
    break;

  case 43:
/* Line 1792 of yacc.c  */
#line 825 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(3) - (3)].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[(2) - (3)].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[(2) - (3)].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[(2) - (3)].str) + "\"", (yylsp[(2) - (3)]));
  }
}
    break;

  case 44:
/* Line 1792 of yacc.c  */
#line 836 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_static;
}
    break;

  case 45:
/* Line 1792 of yacc.c  */
#line 840 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_inline;
}
    break;

  case 46:
/* Line 1792 of yacc.c  */
#line 844 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_virtual;
}
    break;

  case 47:
/* Line 1792 of yacc.c  */
#line 848 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_explicit;
}
    break;

  case 48:
/* Line 1792 of yacc.c  */
#line 852 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_register;
}
    break;

  case 49:
/* Line 1792 of yacc.c  */
#line 856 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_volatile;
}
    break;

  case 50:
/* Line 1792 of yacc.c  */
#line 860 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_mutable;
}
    break;

  case 51:
/* Line 1792 of yacc.c  */
#line 864 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_constexpr;
}
    break;

  case 52:
/* Line 1792 of yacc.c  */
#line 868 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_blocking;
}
    break;

  case 53:
/* Line 1792 of yacc.c  */
#line 872 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_extension;
}
    break;

  case 54:
/* Line 1792 of yacc.c  */
#line 876 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_thread_local;
}
    break;

  case 55:
/* Line 1792 of yacc.c  */
#line 880 "dtool/src/cppparser/cppBison.yxx"
    {
  // Ignore attribute specifiers for now.
  (yyval.u.integer) = (yyvsp[(4) - (4)].u.integer);
}
    break;

  case 56:
/* Line 1792 of yacc.c  */
#line 885 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(5) - (5)].u.integer);
}
    break;

  case 57:
/* Line 1792 of yacc.c  */
#line 889 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(5) - (5)].u.integer);
}
    break;

  case 63:
/* Line 1792 of yacc.c  */
#line 907 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // type_like_declaration.
  if ((yyvsp[(2) - (2)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (2)].u.integer));
}
    break;

  case 64:
/* Line 1792 of yacc.c  */
#line 918 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 65:
/* Line 1792 of yacc.c  */
#line 923 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[(2) - (3)].u.decl), global_scope, current_lexer, (yylsp[(2) - (3)]));
}
    break;

  case 66:
/* Line 1792 of yacc.c  */
#line 932 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[(2) - (3)].u.instance)->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
    current_scope->add_declaration((yyvsp[(2) - (3)].u.instance), global_scope, current_lexer, (yylsp[(2) - (3)]));
    (yyvsp[(2) - (3)].u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
  }
}
    break;

  case 67:
/* Line 1792 of yacc.c  */
#line 940 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[(2) - (3)].u.instance)->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
    current_scope->add_declaration((yyvsp[(2) - (3)].u.instance), global_scope, current_lexer, (yylsp[(2) - (3)]));
    (yyvsp[(2) - (3)].u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
  }
}
    break;

  case 69:
/* Line 1792 of yacc.c  */
#line 956 "dtool/src/cppparser/cppBison.yxx"
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[(1) - (2)].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (2)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (2)]).file);
  inst->set_initializer((yyvsp[(2) - (2)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 70:
/* Line 1792 of yacc.c  */
#line 967 "dtool/src/cppparser/cppBison.yxx"
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[(1) - (4)].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (4)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (4)]).file);
  inst->set_initializer((yyvsp[(2) - (4)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 71:
/* Line 1792 of yacc.c  */
#line 982 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(2) - (2)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (2)].u.integer));
}
    break;

  case 72:
/* Line 1792 of yacc.c  */
#line 993 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 73:
/* Line 1792 of yacc.c  */
#line 997 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPDeclaration *)NULL) {
    CPPInstance *inst = (yyvsp[(2) - (3)].u.instance)->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(2) - (3)]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(2) - (3)]));
    }
  }
}
    break;

  case 74:
/* Line 1792 of yacc.c  */
#line 1012 "dtool/src/cppparser/cppBison.yxx"
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[(1) - (2)].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (2)].u.inst_ident), current_scope, (yylsp[(1) - (2)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 75:
/* Line 1792 of yacc.c  */
#line 1021 "dtool/src/cppparser/cppBison.yxx"
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[(1) - (4)].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (4)].u.inst_ident), current_scope, (yylsp[(1) - (4)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 76:
/* Line 1792 of yacc.c  */
#line 1035 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 77:
/* Line 1792 of yacc.c  */
#line 1039 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type;
  if ((yyvsp[(1) - (6)].u.identifier)->get_simple_name() == current_scope->get_simple_name() ||
      (yyvsp[(1) - (6)].u.identifier)->get_simple_name() == string("~") + current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[(1) - (6)]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[(1) - (6)].u.identifier));
  ii->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (6)]).file);
}
    break;

  case 78:
/* Line 1792 of yacc.c  */
#line 1059 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 79:
/* Line 1792 of yacc.c  */
#line 1063 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[(1) - (6)].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[(1) - (6)].u.identifier));
  ii->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (6)]).file);
}
    break;

  case 80:
/* Line 1792 of yacc.c  */
#line 1086 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(2) - (3)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 81:
/* Line 1792 of yacc.c  */
#line 1090 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  if ((yyvsp[(2) - (7)].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[(2) - (7)].u.identifier)->get_fully_scoped_name(), (yylsp[(2) - (7)]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[(2) - (7)].u.identifier)->get_simple_name(), (yylsp[(2) - (7)]));
    delete (yyvsp[(2) - (7)].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(2) - (7)]).file);
  }
}
    break;

  case 82:
/* Line 1792 of yacc.c  */
#line 1116 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(4) - (6)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 83:
/* Line 1792 of yacc.c  */
#line 1120 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[(1) - (11)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (11)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (11)]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[(4) - (11)].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[(8) - (11)].u.param_list), (yyvsp[(10) - (11)].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (11)]).file);
}
    break;

  case 84:
/* Line 1792 of yacc.c  */
#line 1134 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(5) - (7)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 85:
/* Line 1792 of yacc.c  */
#line 1138 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[(1) - (12)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (12)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (12)]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[(5) - (12)].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[(3) - (12)].u.identifier));
  ii->add_func_modifier((yyvsp[(9) - (12)].u.param_list), (yyvsp[(11) - (12)].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (12)]).file);
}
    break;

  case 86:
/* Line 1792 of yacc.c  */
#line 1154 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (4)].u.identifier) != NULL) {
    push_scope((yyvsp[(1) - (4)].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 87:
/* Line 1792 of yacc.c  */
#line 1160 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (8)].u.identifier) != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[(2) - (8)].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[(1) - (8)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier(name, (yylsp[(2) - (8)]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[(2) - (8)].u.type), (yyvsp[(3) - (8)].u.inst_ident), 0, (yylsp[(3) - (8)]).file), ident, (yyvsp[(6) - (8)].u.param_list), (yyvsp[(8) - (8)].u.integer));
}
    break;

  case 88:
/* Line 1792 of yacc.c  */
#line 1185 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (5)].u.identifier) != NULL) {
    push_scope((yyvsp[(1) - (5)].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 89:
/* Line 1792 of yacc.c  */
#line 1191 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (9)].u.identifier) != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[(1) - (9)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", (yylsp[(4) - (9)]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[(4) - (9)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[(3) - (9)].u.type), (yyvsp[(4) - (9)].u.inst_ident), 0, (yylsp[(4) - (9)]).file), ident, (yyvsp[(7) - (9)].u.param_list), (yyvsp[(9) - (9)].u.integer));
}
    break;

  case 90:
/* Line 1792 of yacc.c  */
#line 1211 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *decl =
    (yyvsp[(1) - (1)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = (CPPInstance *)NULL;
  }
}
    break;

  case 91:
/* Line 1792 of yacc.c  */
#line 1224 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 92:
/* Line 1792 of yacc.c  */
#line 1228 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPFunctionType::F_const_method;
}
    break;

  case 93:
/* Line 1792 of yacc.c  */
#line 1232 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPFunctionType::F_volatile_method;
}
    break;

  case 94:
/* Line 1792 of yacc.c  */
#line 1236 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPFunctionType::F_noexcept;
}
    break;

  case 95:
/* Line 1792 of yacc.c  */
#line 1249 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPFunctionType::F_final;
}
    break;

  case 96:
/* Line 1792 of yacc.c  */
#line 1253 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPFunctionType::F_override;
}
    break;

  case 97:
/* Line 1792 of yacc.c  */
#line 1257 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPFunctionType::F_lvalue_method;
}
    break;

  case 98:
/* Line 1792 of yacc.c  */
#line 1261 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer) | (int)CPPFunctionType::F_rvalue_method;
}
    break;

  case 99:
/* Line 1792 of yacc.c  */
#line 1265 "dtool/src/cppparser/cppBison.yxx"
    {
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer);
}
    break;

  case 100:
/* Line 1792 of yacc.c  */
#line 1270 "dtool/src/cppparser/cppBison.yxx"
    {
  // Used for lambdas in C++17, currently ignored.
  (yyval.u.integer) = (yyvsp[(1) - (2)].u.integer);
}
    break;

  case 101:
/* Line 1792 of yacc.c  */
#line 1275 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (4)].u.integer);
}
    break;

  case 102:
/* Line 1792 of yacc.c  */
#line 1279 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (5)].u.integer);
}
    break;

  case 103:
/* Line 1792 of yacc.c  */
#line 1283 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (6)].u.integer);
}
    break;

  case 104:
/* Line 1792 of yacc.c  */
#line 1287 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (4)].u.integer);
}
    break;

  case 105:
/* Line 1792 of yacc.c  */
#line 1294 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "!";
}
    break;

  case 106:
/* Line 1792 of yacc.c  */
#line 1298 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "~";
}
    break;

  case 107:
/* Line 1792 of yacc.c  */
#line 1302 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "*";
}
    break;

  case 108:
/* Line 1792 of yacc.c  */
#line 1306 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "/";
}
    break;

  case 109:
/* Line 1792 of yacc.c  */
#line 1310 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "%";
}
    break;

  case 110:
/* Line 1792 of yacc.c  */
#line 1314 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "+";
}
    break;

  case 111:
/* Line 1792 of yacc.c  */
#line 1318 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "-";
}
    break;

  case 112:
/* Line 1792 of yacc.c  */
#line 1322 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "|";
}
    break;

  case 113:
/* Line 1792 of yacc.c  */
#line 1326 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&";
}
    break;

  case 114:
/* Line 1792 of yacc.c  */
#line 1330 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "^";
}
    break;

  case 115:
/* Line 1792 of yacc.c  */
#line 1334 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "||";
}
    break;

  case 116:
/* Line 1792 of yacc.c  */
#line 1338 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&&";
}
    break;

  case 117:
/* Line 1792 of yacc.c  */
#line 1342 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "==";
}
    break;

  case 118:
/* Line 1792 of yacc.c  */
#line 1346 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "!=";
}
    break;

  case 119:
/* Line 1792 of yacc.c  */
#line 1350 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<=";
}
    break;

  case 120:
/* Line 1792 of yacc.c  */
#line 1354 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">=";
}
    break;

  case 121:
/* Line 1792 of yacc.c  */
#line 1358 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<";
}
    break;

  case 122:
/* Line 1792 of yacc.c  */
#line 1362 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">";
}
    break;

  case 123:
/* Line 1792 of yacc.c  */
#line 1366 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<<";
}
    break;

  case 124:
/* Line 1792 of yacc.c  */
#line 1370 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">>";
}
    break;

  case 125:
/* Line 1792 of yacc.c  */
#line 1374 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "=";
}
    break;

  case 126:
/* Line 1792 of yacc.c  */
#line 1378 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ",";
}
    break;

  case 127:
/* Line 1792 of yacc.c  */
#line 1382 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "++";
}
    break;

  case 128:
/* Line 1792 of yacc.c  */
#line 1386 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "--";
}
    break;

  case 129:
/* Line 1792 of yacc.c  */
#line 1390 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "*=";
}
    break;

  case 130:
/* Line 1792 of yacc.c  */
#line 1394 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "/=";
}
    break;

  case 131:
/* Line 1792 of yacc.c  */
#line 1398 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "%=";
}
    break;

  case 132:
/* Line 1792 of yacc.c  */
#line 1402 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "+=";
}
    break;

  case 133:
/* Line 1792 of yacc.c  */
#line 1406 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "-=";
}
    break;

  case 134:
/* Line 1792 of yacc.c  */
#line 1410 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "|=";
}
    break;

  case 135:
/* Line 1792 of yacc.c  */
#line 1414 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&=";
}
    break;

  case 136:
/* Line 1792 of yacc.c  */
#line 1418 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "^=";
}
    break;

  case 137:
/* Line 1792 of yacc.c  */
#line 1422 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<<=";
}
    break;

  case 138:
/* Line 1792 of yacc.c  */
#line 1426 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">>=";
}
    break;

  case 139:
/* Line 1792 of yacc.c  */
#line 1430 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "->";
}
    break;

  case 140:
/* Line 1792 of yacc.c  */
#line 1434 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "[]";
}
    break;

  case 141:
/* Line 1792 of yacc.c  */
#line 1438 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "()";
}
    break;

  case 142:
/* Line 1792 of yacc.c  */
#line 1442 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "new";
}
    break;

  case 143:
/* Line 1792 of yacc.c  */
#line 1446 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "delete";
}
    break;

  case 147:
/* Line 1792 of yacc.c  */
#line 1459 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope(new CPPTemplateScope(current_scope));
}
    break;

  case 148:
/* Line 1792 of yacc.c  */
#line 1463 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 152:
/* Line 1792 of yacc.c  */
#line 1476 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[(1) - (1)].u.decl));
}
    break;

  case 153:
/* Line 1792 of yacc.c  */
#line 1482 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[(3) - (3)].u.decl));
}
    break;

  case 156:
/* Line 1792 of yacc.c  */
#line 1496 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((CPPIdentifier *)NULL));
}
    break;

  case 157:
/* Line 1792 of yacc.c  */
#line 1500 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 158:
/* Line 1792 of yacc.c  */
#line 1504 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type)));
}
    break;

  case 159:
/* Line 1792 of yacc.c  */
#line 1508 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((CPPIdentifier *)NULL);
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
    break;

  case 160:
/* Line 1792 of yacc.c  */
#line 1514 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[(3) - (3)].u.identifier));
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
    break;

  case 161:
/* Line 1792 of yacc.c  */
#line 1520 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance((yyvsp[(1) - (3)].u.type), (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  inst->set_initializer((yyvsp[(3) - (3)].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 162:
/* Line 1792 of yacc.c  */
#line 1526 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[(2) - (4)].u.type), (yyvsp[(3) - (4)].u.inst_ident), 0, (yylsp[(3) - (4)]).file);
  inst->set_initializer((yyvsp[(4) - (4)].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 163:
/* Line 1792 of yacc.c  */
#line 1533 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance((yyvsp[(1) - (2)].u.type), (yyvsp[(2) - (2)].u.inst_ident), 0, (yylsp[(2) - (2)]).file);
  (yyval.u.decl) = inst;
}
    break;

  case 164:
/* Line 1792 of yacc.c  */
#line 1538 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (3)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[(2) - (3)].u.type), (yyvsp[(3) - (3)].u.inst_ident), 0, (yylsp[(3) - (3)]).file);
  (yyval.u.decl) = inst;
}
    break;

  case 165:
/* Line 1792 of yacc.c  */
#line 1547 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 166:
/* Line 1792 of yacc.c  */
#line 1551 "dtool/src/cppparser/cppBison.yxx"
    {
  yywarning("Not a type: " + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;

  case 167:
/* Line 1792 of yacc.c  */
#line 1556 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 168:
/* Line 1792 of yacc.c  */
#line 1564 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 169:
/* Line 1792 of yacc.c  */
#line 1576 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 170:
/* Line 1792 of yacc.c  */
#line 1580 "dtool/src/cppparser/cppBison.yxx"
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[(1) - (2)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+(yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[(2) - (2)].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
    break;

  case 171:
/* Line 1792 of yacc.c  */
#line 1594 "dtool/src/cppparser/cppBison.yxx"
    {
  // A C++11 literal operator.
  if (!(yyvsp[(2) - (3)].str).empty()) {
    yyerror("expected empty string", (yylsp[(2) - (3)]));
  }
  CPPIdentifier *ident = (yyvsp[(1) - (3)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[(3) - (3)].u.identifier)->get_simple_name(), (yylsp[(3) - (3)]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[(3) - (3)].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
    break;

  case 172:
/* Line 1792 of yacc.c  */
#line 1609 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 173:
/* Line 1792 of yacc.c  */
#line 1614 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 174:
/* Line 1792 of yacc.c  */
#line 1619 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 175:
/* Line 1792 of yacc.c  */
#line 1624 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 176:
/* Line 1792 of yacc.c  */
#line 1629 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 177:
/* Line 1792 of yacc.c  */
#line 1634 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 178:
/* Line 1792 of yacc.c  */
#line 1639 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 179:
/* Line 1792 of yacc.c  */
#line 1644 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 180:
/* Line 1792 of yacc.c  */
#line 1649 "dtool/src/cppparser/cppBison.yxx"
    {
  // Create a scope for this function (in case it is a function)
  CPPScope *scope = new CPPScope((yyvsp[(1) - (2)].u.inst_ident)->get_scope(current_scope, global_scope),
                                 CPPNameComponent(""), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
    break;

  case 181:
/* Line 1792 of yacc.c  */
#line 1662 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[(1) - (6)].u.inst_ident);
  if ((yyvsp[(4) - (6)].u.param_list)->is_parameter_expr() && (yyvsp[(6) - (6)].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[(4) - (6)].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));
  }
}
    break;

  case 182:
/* Line 1792 of yacc.c  */
#line 1680 "dtool/src/cppparser/cppBison.yxx"
    {
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[(2) - (2)].u.type) != NULL) {
    (yyvsp[(1) - (2)].u.inst_ident)->add_trailing_return_type((yyvsp[(2) - (2)].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[(1) - (2)].u.inst_ident);
}
    break;

  case 183:
/* Line 1792 of yacc.c  */
#line 1690 "dtool/src/cppparser/cppBison.yxx"
    {
  // Bitfield definition.
  (yyvsp[(1) - (3)].u.inst_ident)->_bit_width = (yyvsp[(3) - (3)].u.integer);
  (yyval.u.inst_ident) = (yyvsp[(1) - (3)].u.inst_ident);
}
    break;

  case 184:
/* Line 1792 of yacc.c  */
#line 1700 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = NULL;
}
    break;

  case 185:
/* Line 1792 of yacc.c  */
#line 1704 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(3) - (3)].u.inst_ident)->unroll_type((yyvsp[(2) - (3)].u.type));
}
    break;

  case 186:
/* Line 1792 of yacc.c  */
#line 1708 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(4) - (4)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[(4) - (4)].u.inst_ident)->unroll_type((yyvsp[(3) - (4)].u.type));
}
    break;

  case 187:
/* Line 1792 of yacc.c  */
#line 1717 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
}
    break;

  case 188:
/* Line 1792 of yacc.c  */
#line 1721 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 189:
/* Line 1792 of yacc.c  */
#line 1726 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (1)].u.param_list);
}
    break;

  case 190:
/* Line 1792 of yacc.c  */
#line 1730 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 191:
/* Line 1792 of yacc.c  */
#line 1735 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (2)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 192:
/* Line 1792 of yacc.c  */
#line 1743 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(1) - (1)].u.instance));
}
    break;

  case 193:
/* Line 1792 of yacc.c  */
#line 1748 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(3) - (3)].u.instance));
}
    break;

  case 194:
/* Line 1792 of yacc.c  */
#line 1756 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
}
    break;

  case 195:
/* Line 1792 of yacc.c  */
#line 1760 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 196:
/* Line 1792 of yacc.c  */
#line 1765 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (1)].u.param_list);
}
    break;

  case 197:
/* Line 1792 of yacc.c  */
#line 1769 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 198:
/* Line 1792 of yacc.c  */
#line 1774 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (2)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 199:
/* Line 1792 of yacc.c  */
#line 1782 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(1) - (1)].u.instance));
}
    break;

  case 200:
/* Line 1792 of yacc.c  */
#line 1787 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(3) - (3)].u.instance));
}
    break;

  case 201:
/* Line 1792 of yacc.c  */
#line 1795 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 202:
/* Line 1792 of yacc.c  */
#line 1799 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 203:
/* Line 1792 of yacc.c  */
#line 1806 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 204:
/* Line 1792 of yacc.c  */
#line 1810 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 205:
/* Line 1792 of yacc.c  */
#line 1817 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 206:
/* Line 1792 of yacc.c  */
#line 1821 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 207:
/* Line 1792 of yacc.c  */
#line 1825 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 208:
/* Line 1792 of yacc.c  */
#line 1829 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
    break;

  case 209:
/* Line 1792 of yacc.c  */
#line 1833 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
    break;

  case 210:
/* Line 1792 of yacc.c  */
#line 1840 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 211:
/* Line 1792 of yacc.c  */
#line 1844 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 212:
/* Line 1792 of yacc.c  */
#line 1848 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 213:
/* Line 1792 of yacc.c  */
#line 1852 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
    break;

  case 214:
/* Line 1792 of yacc.c  */
#line 1856 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
    break;

  case 215:
/* Line 1792 of yacc.c  */
#line 1860 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 219:
/* Line 1792 of yacc.c  */
#line 1873 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 223:
/* Line 1792 of yacc.c  */
#line 1882 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[(1) - (3)].u.type), (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
}
    break;

  case 224:
/* Line 1792 of yacc.c  */
#line 1887 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (4)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[(2) - (4)].u.type), (yyvsp[(3) - (4)].u.inst_ident), 0, (yylsp[(3) - (4)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(4) - (4)].u.expr));
}
    break;

  case 225:
/* Line 1792 of yacc.c  */
#line 1893 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(4) - (5)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[(3) - (5)].u.type), (yyvsp[(4) - (5)].u.inst_ident), 0, (yylsp[(3) - (5)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(5) - (5)].u.expr));
}
    break;

  case 226:
/* Line 1792 of yacc.c  */
#line 1899 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[(1) - (3)].u.type), (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
}
    break;

  case 227:
/* Line 1792 of yacc.c  */
#line 1904 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (4)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[(2) - (4)].u.type), (yyvsp[(3) - (4)].u.inst_ident), 0, (yylsp[(3) - (4)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(4) - (4)].u.expr));
}
    break;

  case 228:
/* Line 1792 of yacc.c  */
#line 1910 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(4) - (5)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[(3) - (5)].u.type), (yyvsp[(4) - (5)].u.inst_ident), 0, (yylsp[(3) - (5)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(5) - (5)].u.expr));
}
    break;

  case 229:
/* Line 1792 of yacc.c  */
#line 1916 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = (yyvsp[(2) - (2)].u.instance);
}
    break;

  case 230:
/* Line 1792 of yacc.c  */
#line 1920 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = (yyvsp[(4) - (4)].u.instance);
}
    break;

  case 231:
/* Line 1792 of yacc.c  */
#line 1931 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = (yyvsp[(1) - (1)].u.instance);
}
    break;

  case 232:
/* Line 1792 of yacc.c  */
#line 1935 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[(1) - (1)].u.expr));
}
    break;

  case 233:
/* Line 1792 of yacc.c  */
#line 1945 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 234:
/* Line 1792 of yacc.c  */
#line 1949 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 235:
/* Line 1792 of yacc.c  */
#line 1953 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 236:
/* Line 1792 of yacc.c  */
#line 1958 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 237:
/* Line 1792 of yacc.c  */
#line 1963 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 238:
/* Line 1792 of yacc.c  */
#line 1968 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 239:
/* Line 1792 of yacc.c  */
#line 1973 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 240:
/* Line 1792 of yacc.c  */
#line 1978 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 241:
/* Line 1792 of yacc.c  */
#line 1983 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 242:
/* Line 1792 of yacc.c  */
#line 1991 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 243:
/* Line 1792 of yacc.c  */
#line 1995 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 244:
/* Line 1792 of yacc.c  */
#line 1999 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 245:
/* Line 1792 of yacc.c  */
#line 2004 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 246:
/* Line 1792 of yacc.c  */
#line 2009 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 247:
/* Line 1792 of yacc.c  */
#line 2014 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 248:
/* Line 1792 of yacc.c  */
#line 2019 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 249:
/* Line 1792 of yacc.c  */
#line 2024 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 250:
/* Line 1792 of yacc.c  */
#line 2029 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 251:
/* Line 1792 of yacc.c  */
#line 2034 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (7)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));
}
    break;

  case 252:
/* Line 1792 of yacc.c  */
#line 2040 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 253:
/* Line 1792 of yacc.c  */
#line 2048 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
    break;

  case 254:
/* Line 1792 of yacc.c  */
#line 2053 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(2) - (2)].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
    break;

  case 255:
/* Line 1792 of yacc.c  */
#line 2058 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 256:
/* Line 1792 of yacc.c  */
#line 2063 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 257:
/* Line 1792 of yacc.c  */
#line 2068 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 258:
/* Line 1792 of yacc.c  */
#line 2073 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 259:
/* Line 1792 of yacc.c  */
#line 2078 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 260:
/* Line 1792 of yacc.c  */
#line 2083 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 261:
/* Line 1792 of yacc.c  */
#line 2088 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 262:
/* Line 1792 of yacc.c  */
#line 2093 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (7)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));
}
    break;

  case 263:
/* Line 1792 of yacc.c  */
#line 2099 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 264:
/* Line 1792 of yacc.c  */
#line 2107 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 265:
/* Line 1792 of yacc.c  */
#line 2111 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
    break;

  case 266:
/* Line 1792 of yacc.c  */
#line 2116 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(2) - (2)].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
    break;

  case 267:
/* Line 1792 of yacc.c  */
#line 2121 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 268:
/* Line 1792 of yacc.c  */
#line 2126 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 269:
/* Line 1792 of yacc.c  */
#line 2131 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 270:
/* Line 1792 of yacc.c  */
#line 2136 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 271:
/* Line 1792 of yacc.c  */
#line 2141 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 272:
/* Line 1792 of yacc.c  */
#line 2146 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 273:
/* Line 1792 of yacc.c  */
#line 2151 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 274:
/* Line 1792 of yacc.c  */
#line 2159 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 275:
/* Line 1792 of yacc.c  */
#line 2163 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
    break;

  case 276:
/* Line 1792 of yacc.c  */
#line 2168 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(2) - (2)].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
    break;

  case 277:
/* Line 1792 of yacc.c  */
#line 2173 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 278:
/* Line 1792 of yacc.c  */
#line 2178 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 279:
/* Line 1792 of yacc.c  */
#line 2183 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 280:
/* Line 1792 of yacc.c  */
#line 2188 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 281:
/* Line 1792 of yacc.c  */
#line 2193 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 282:
/* Line 1792 of yacc.c  */
#line 2198 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 283:
/* Line 1792 of yacc.c  */
#line 2203 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 284:
/* Line 1792 of yacc.c  */
#line 2208 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(2) - (5)].u.param_list), (yyvsp[(4) - (5)].u.integer), (yyvsp[(5) - (5)].u.type));
}
    break;

  case 285:
/* Line 1792 of yacc.c  */
#line 2214 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (9)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(6) - (9)].u.param_list), (yyvsp[(8) - (9)].u.integer), (yyvsp[(9) - (9)].u.type));
}
    break;

  case 286:
/* Line 1792 of yacc.c  */
#line 2221 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (9)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(6) - (9)].u.param_list), (yyvsp[(8) - (9)].u.integer), (yyvsp[(9) - (9)].u.type));
}
    break;

  case 287:
/* Line 1792 of yacc.c  */
#line 2228 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (9)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(6) - (9)].u.param_list), (yyvsp[(8) - (9)].u.integer), (yyvsp[(9) - (9)].u.type));
}
    break;

  case 288:
/* Line 1792 of yacc.c  */
#line 2238 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 289:
/* Line 1792 of yacc.c  */
#line 2242 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 290:
/* Line 1792 of yacc.c  */
#line 2250 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 291:
/* Line 1792 of yacc.c  */
#line 2254 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 292:
/* Line 1792 of yacc.c  */
#line 2258 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 293:
/* Line 1792 of yacc.c  */
#line 2262 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.enum_type));
}
    break;

  case 294:
/* Line 1792 of yacc.c  */
#line 2266 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(3) - (3)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (3)].u.extension_enum), (yyvsp[(3) - (3)].u.identifier), current_scope, (yylsp[(1) - (3)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(3) - (3)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 295:
/* Line 1792 of yacc.c  */
#line 2282 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (4)].u.extension_enum), (yyvsp[(2) - (4)].u.identifier), current_scope, (yylsp[(1) - (4)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (4)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 296:
/* Line 1792 of yacc.c  */
#line 2298 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(3) - (4)].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[(3) - (4)].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[(3) - (4)]));
  }
}
    break;

  case 297:
/* Line 1792 of yacc.c  */
#line 2307 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
    break;

  case 298:
/* Line 1792 of yacc.c  */
#line 2311 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPEnumType *enum_type = (yyvsp[(3) - (4)].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[(3) - (4)]));
    (yyval.u.type) = (yyvsp[(3) - (4)].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
    break;

  case 299:
/* Line 1792 of yacc.c  */
#line 2321 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
    break;

  case 300:
/* Line 1792 of yacc.c  */
#line 2328 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 301:
/* Line 1792 of yacc.c  */
#line 2339 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 302:
/* Line 1792 of yacc.c  */
#line 2343 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.decl) != NULL);
}
    break;

  case 303:
/* Line 1792 of yacc.c  */
#line 2351 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 304:
/* Line 1792 of yacc.c  */
#line 2355 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 305:
/* Line 1792 of yacc.c  */
#line 2359 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[(1) - (1)].u.struct_type)));
}
    break;

  case 306:
/* Line 1792 of yacc.c  */
#line 2363 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[(1) - (1)].u.enum_type)));
}
    break;

  case 307:
/* Line 1792 of yacc.c  */
#line 2367 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(3) - (3)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (3)].u.extension_enum), (yyvsp[(3) - (3)].u.identifier), current_scope, (yylsp[(1) - (3)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(3) - (3)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 308:
/* Line 1792 of yacc.c  */
#line 2383 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (4)].u.extension_enum), (yyvsp[(2) - (4)].u.identifier), current_scope, (yylsp[(1) - (4)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (4)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 309:
/* Line 1792 of yacc.c  */
#line 2399 "dtool/src/cppparser/cppBison.yxx"
    {
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[(2) - (2)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (2)]));

  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 310:
/* Line 1792 of yacc.c  */
#line 2417 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(3) - (4)].u.expr)->determine_type();
  if ((yyval.u.decl) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[(3) - (4)].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[(3) - (4)]));
  }
}
    break;

  case 311:
/* Line 1792 of yacc.c  */
#line 2426 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
    break;

  case 312:
/* Line 1792 of yacc.c  */
#line 2430 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPEnumType *enum_type = (yyvsp[(3) - (4)].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[(3) - (4)]));
    (yyval.u.decl) = (yyvsp[(3) - (4)].u.type);
  } else {
    (yyval.u.decl) = enum_type->get_underlying_type();
  }
}
    break;

  case 313:
/* Line 1792 of yacc.c  */
#line 2440 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
    break;

  case 314:
/* Line 1792 of yacc.c  */
#line 2447 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 315:
/* Line 1792 of yacc.c  */
#line 2451 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 316:
/* Line 1792 of yacc.c  */
#line 2459 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 317:
/* Line 1792 of yacc.c  */
#line 2463 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(3) - (3)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (3)].u.extension_enum), (yyvsp[(3) - (3)].u.identifier), current_scope, (yylsp[(1) - (3)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(3) - (3)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 318:
/* Line 1792 of yacc.c  */
#line 2479 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 319:
/* Line 1792 of yacc.c  */
#line 2495 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(3) - (4)].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[(3) - (4)].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[(3) - (4)]));
  }
}
    break;

  case 320:
/* Line 1792 of yacc.c  */
#line 2504 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPEnumType *enum_type = (yyvsp[(3) - (4)].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[(3) - (4)]));
    (yyval.u.type) = (yyvsp[(3) - (4)].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
    break;

  case 321:
/* Line 1792 of yacc.c  */
#line 2514 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
    break;

  case 322:
/* Line 1792 of yacc.c  */
#line 2521 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(1) - (1)].u.decl);
}
    break;

  case 323:
/* Line 1792 of yacc.c  */
#line 2525 "dtool/src/cppparser/cppBison.yxx"
    {
  yyerror(string("unknown type '") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name() + "'", (yylsp[(1) - (1)]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;

  case 324:
/* Line 1792 of yacc.c  */
#line 2533 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(2) - (2)].u.inst_ident)->unroll_type((yyvsp[(1) - (2)].u.type));
}
    break;

  case 325:
/* Line 1792 of yacc.c  */
#line 2537 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (3)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[(3) - (3)].u.inst_ident)->unroll_type((yyvsp[(2) - (3)].u.type));
}
    break;

  case 326:
/* Line 1792 of yacc.c  */
#line 2542 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(2) - (2)].u.inst_ident)->unroll_type((yyvsp[(1) - (2)].u.type));
}
    break;

  case 327:
/* Line 1792 of yacc.c  */
#line 2546 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (3)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[(3) - (3)].u.inst_ident)->unroll_type((yyvsp[(2) - (3)].u.type));
}
    break;

  case 332:
/* Line 1792 of yacc.c  */
#line 2561 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPVisibility starting_vis =
  ((yyvsp[(1) - (3)].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[(1) - (3)].u.extension_enum), NULL, current_scope,
                                        new_scope, (yylsp[(1) - (3)]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 333:
/* Line 1792 of yacc.c  */
#line 2575 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 334:
/* Line 1792 of yacc.c  */
#line 2585 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPVisibility starting_vis =
  ((yyvsp[(1) - (3)].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[(3) - (3)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[(3) - (3)].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[(1) - (3)].u.extension_enum), (yyvsp[(3) - (3)].u.identifier), current_scope,
                                        new_scope, (yylsp[(1) - (3)]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 335:
/* Line 1792 of yacc.c  */
#line 2605 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 337:
/* Line 1792 of yacc.c  */
#line 2616 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->_final = true;
}
    break;

  case 342:
/* Line 1792 of yacc.c  */
#line 2633 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(1) - (1)].u.type), V_unknown, false);
}
    break;

  case 343:
/* Line 1792 of yacc.c  */
#line 2637 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_public, false);
}
    break;

  case 344:
/* Line 1792 of yacc.c  */
#line 2641 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_protected, false);
}
    break;

  case 345:
/* Line 1792 of yacc.c  */
#line 2645 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_private, false);
}
    break;

  case 346:
/* Line 1792 of yacc.c  */
#line 2649 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_public, true);
}
    break;

  case 347:
/* Line 1792 of yacc.c  */
#line 2653 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_protected, true);
}
    break;

  case 348:
/* Line 1792 of yacc.c  */
#line 2657 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_private, true);
}
    break;

  case 349:
/* Line 1792 of yacc.c  */
#line 2661 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_public, true);
}
    break;

  case 350:
/* Line 1792 of yacc.c  */
#line 2665 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_protected, true);
}
    break;

  case 351:
/* Line 1792 of yacc.c  */
#line 2669 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_private, true);
}
    break;

  case 352:
/* Line 1792 of yacc.c  */
#line 2676 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
    break;

  case 353:
/* Line 1792 of yacc.c  */
#line 2684 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType((yyvsp[(1) - (3)].u.extension_enum), NULL, (yyvsp[(3) - (3)].u.type), current_scope, NULL, (yylsp[(1) - (3)]).file);
}
    break;

  case 354:
/* Line 1792 of yacc.c  */
#line 2688 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType((yyvsp[(1) - (1)].u.extension_enum), NULL, current_scope, NULL, (yylsp[(1) - (1)]).file);
}
    break;

  case 355:
/* Line 1792 of yacc.c  */
#line 2692 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[(2) - (4)].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[(1) - (4)].u.extension_enum), (yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type), current_scope, new_scope, (yylsp[(1) - (4)]).file);
}
    break;

  case 356:
/* Line 1792 of yacc.c  */
#line 2697 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[(2) - (2)].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, new_scope, (yylsp[(1) - (2)]).file);
}
    break;

  case 357:
/* Line 1792 of yacc.c  */
#line 2705 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 358:
/* Line 1792 of yacc.c  */
#line 2709 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
    break;

  case 360:
/* Line 1792 of yacc.c  */
#line 2717 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[(2) - (3)].u.identifier)->get_simple_name(), NULL, current_lexer, (yylsp[(2) - (3)]));
}
    break;

  case 361:
/* Line 1792 of yacc.c  */
#line 2722 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[(2) - (5)].u.identifier)->get_simple_name(), (yyvsp[(4) - (5)].u.expr), current_lexer, (yylsp[(2) - (5)]));
}
    break;

  case 363:
/* Line 1792 of yacc.c  */
#line 2730 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[(2) - (2)].u.identifier)->get_simple_name(), NULL, current_lexer, (yylsp[(2) - (2)]));
}
    break;

  case 364:
/* Line 1792 of yacc.c  */
#line 2735 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[(2) - (4)].u.identifier)->get_simple_name(), (yyvsp[(4) - (4)].u.expr), current_lexer, (yylsp[(2) - (4)]));
}
    break;

  case 365:
/* Line 1792 of yacc.c  */
#line 2743 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
    break;

  case 366:
/* Line 1792 of yacc.c  */
#line 2747 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_class;
}
    break;

  case 367:
/* Line 1792 of yacc.c  */
#line 2751 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_struct;
}
    break;

  case 368:
/* Line 1792 of yacc.c  */
#line 2758 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
    break;

  case 369:
/* Line 1792 of yacc.c  */
#line 2762 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
    break;

  case 370:
/* Line 1792 of yacc.c  */
#line 2766 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
    break;

  case 371:
/* Line 1792 of yacc.c  */
#line 2773 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *scope = (yyvsp[(2) - (3)].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[(2) - (3)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[(2) - (3)].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[(2) - (3)].u.identifier), scope, (yylsp[(1) - (3)]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[(1) - (3)]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;

  case 372:
/* Line 1792 of yacc.c  */
#line 2791 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 373:
/* Line 1792 of yacc.c  */
#line 2795 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *scope = (yyvsp[(3) - (4)].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[(3) - (4)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[(3) - (4)].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[(3) - (4)].u.identifier), scope, (yylsp[(2) - (4)]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[(2) - (4)]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;

  case 374:
/* Line 1792 of yacc.c  */
#line 2814 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 377:
/* Line 1792 of yacc.c  */
#line 2823 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[(2) - (3)].u.identifier), false, (yylsp[(1) - (3)]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[(1) - (3)]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 378:
/* Line 1792 of yacc.c  */
#line 2829 "dtool/src/cppparser/cppBison.yxx"
    {
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[(4) - (5)].u.type), (yyvsp[(2) - (5)].u.identifier), current_scope);
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (5)]));
}
    break;

  case 379:
/* Line 1792 of yacc.c  */
#line 2836 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[(3) - (4)].u.identifier), true, (yylsp[(1) - (4)]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[(1) - (4)]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 383:
/* Line 1792 of yacc.c  */
#line 2851 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
    break;

  case 384:
/* Line 1792 of yacc.c  */
#line 2855 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
    break;

  case 385:
/* Line 1792 of yacc.c  */
#line 2859 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
    break;

  case 386:
/* Line 1792 of yacc.c  */
#line 2863 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
    break;

  case 387:
/* Line 1792 of yacc.c  */
#line 2867 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
    break;

  case 388:
/* Line 1792 of yacc.c  */
#line 2871 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
    break;

  case 389:
/* Line 1792 of yacc.c  */
#line 2876 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
    break;

  case 390:
/* Line 1792 of yacc.c  */
#line 2881 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
    break;

  case 391:
/* Line 1792 of yacc.c  */
#line 2886 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
    break;

  case 392:
/* Line 1792 of yacc.c  */
#line 2891 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
    break;

  case 393:
/* Line 1792 of yacc.c  */
#line 2895 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
    break;

  case 394:
/* Line 1792 of yacc.c  */
#line 2900 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
    break;

  case 395:
/* Line 1792 of yacc.c  */
#line 2909 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
    break;

  case 396:
/* Line 1792 of yacc.c  */
#line 2914 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
    break;

  case 397:
/* Line 1792 of yacc.c  */
#line 2922 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
    break;

  case 398:
/* Line 1792 of yacc.c  */
#line 2926 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
    break;

  case 399:
/* Line 1792 of yacc.c  */
#line 2930 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
    break;

  case 400:
/* Line 1792 of yacc.c  */
#line 2938 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
    break;

  case 401:
/* Line 1792 of yacc.c  */
#line 2947 "dtool/src/cppparser/cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = false;
}
    break;

  case 402:
/* Line 1792 of yacc.c  */
#line 2951 "dtool/src/cppparser/cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = true;
}
    break;

  case 510:
/* Line 1792 of yacc.c  */
#line 2995 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 534:
/* Line 1792 of yacc.c  */
#line 3004 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 535:
/* Line 1792 of yacc.c  */
#line 3008 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 536:
/* Line 1792 of yacc.c  */
#line 3015 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 537:
/* Line 1792 of yacc.c  */
#line 3019 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 538:
/* Line 1792 of yacc.c  */
#line 3026 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 539:
/* Line 1792 of yacc.c  */
#line 3030 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 540:
/* Line 1792 of yacc.c  */
#line 3037 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 541:
/* Line 1792 of yacc.c  */
#line 3041 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 542:
/* Line 1792 of yacc.c  */
#line 3045 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_static_cast));
}
    break;

  case 543:
/* Line 1792 of yacc.c  */
#line 3049 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_dynamic_cast));
}
    break;

  case 544:
/* Line 1792 of yacc.c  */
#line 3053 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_const_cast));
}
    break;

  case 545:
/* Line 1792 of yacc.c  */
#line 3057 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_reinterpret_cast));
}
    break;

  case 546:
/* Line 1792 of yacc.c  */
#line 3061 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 547:
/* Line 1792 of yacc.c  */
#line 3065 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *arg = (yyvsp[(3) - (4)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[(3) - (4)].u.identifier)->get_fully_scoped_name(), (yylsp[(3) - (4)]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
    break;

  case 548:
/* Line 1792 of yacc.c  */
#line 3077 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[(4) - (5)].u.identifier)));
}
    break;

  case 549:
/* Line 1792 of yacc.c  */
#line 3081 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 550:
/* Line 1792 of yacc.c  */
#line 3085 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 551:
/* Line 1792 of yacc.c  */
#line 3089 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 552:
/* Line 1792 of yacc.c  */
#line 3093 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 553:
/* Line 1792 of yacc.c  */
#line 3097 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 554:
/* Line 1792 of yacc.c  */
#line 3101 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 555:
/* Line 1792 of yacc.c  */
#line 3105 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 556:
/* Line 1792 of yacc.c  */
#line 3109 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 557:
/* Line 1792 of yacc.c  */
#line 3113 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 558:
/* Line 1792 of yacc.c  */
#line 3117 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 559:
/* Line 1792 of yacc.c  */
#line 3121 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 560:
/* Line 1792 of yacc.c  */
#line 3125 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 561:
/* Line 1792 of yacc.c  */
#line 3129 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 562:
/* Line 1792 of yacc.c  */
#line 3133 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 563:
/* Line 1792 of yacc.c  */
#line 3137 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 564:
/* Line 1792 of yacc.c  */
#line 3141 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 565:
/* Line 1792 of yacc.c  */
#line 3145 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 566:
/* Line 1792 of yacc.c  */
#line 3149 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 567:
/* Line 1792 of yacc.c  */
#line 3153 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 568:
/* Line 1792 of yacc.c  */
#line 3157 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 569:
/* Line 1792 of yacc.c  */
#line 3161 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 570:
/* Line 1792 of yacc.c  */
#line 3165 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 571:
/* Line 1792 of yacc.c  */
#line 3169 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 572:
/* Line 1792 of yacc.c  */
#line 3173 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 573:
/* Line 1792 of yacc.c  */
#line 3177 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 574:
/* Line 1792 of yacc.c  */
#line 3181 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 575:
/* Line 1792 of yacc.c  */
#line 3185 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 576:
/* Line 1792 of yacc.c  */
#line 3189 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 577:
/* Line 1792 of yacc.c  */
#line 3193 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 578:
/* Line 1792 of yacc.c  */
#line 3197 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 579:
/* Line 1792 of yacc.c  */
#line 3205 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 580:
/* Line 1792 of yacc.c  */
#line 3209 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 581:
/* Line 1792 of yacc.c  */
#line 3213 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_static_cast));
}
    break;

  case 582:
/* Line 1792 of yacc.c  */
#line 3217 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_dynamic_cast));
}
    break;

  case 583:
/* Line 1792 of yacc.c  */
#line 3221 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_const_cast));
}
    break;

  case 584:
/* Line 1792 of yacc.c  */
#line 3225 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_reinterpret_cast));
}
    break;

  case 585:
/* Line 1792 of yacc.c  */
#line 3229 "dtool/src/cppparser/cppBison.yxx"
    {
  // A constructor call.
  CPPType *type = (yyvsp[(1) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (4)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (4)]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 586:
/* Line 1792 of yacc.c  */
#line 3239 "dtool/src/cppparser/cppBison.yxx"
    {
  // Aggregate initialization.
  CPPType *type = (yyvsp[(1) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (4)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (4)]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::aggregate_init_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 587:
/* Line 1792 of yacc.c  */
#line 3249 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 588:
/* Line 1792 of yacc.c  */
#line 3255 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 589:
/* Line 1792 of yacc.c  */
#line 3261 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 590:
/* Line 1792 of yacc.c  */
#line 3267 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 591:
/* Line 1792 of yacc.c  */
#line 3273 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 592:
/* Line 1792 of yacc.c  */
#line 3279 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 593:
/* Line 1792 of yacc.c  */
#line 3285 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 594:
/* Line 1792 of yacc.c  */
#line 3292 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 595:
/* Line 1792 of yacc.c  */
#line 3299 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 596:
/* Line 1792 of yacc.c  */
#line 3306 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 597:
/* Line 1792 of yacc.c  */
#line 3313 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 598:
/* Line 1792 of yacc.c  */
#line 3319 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 599:
/* Line 1792 of yacc.c  */
#line 3325 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 600:
/* Line 1792 of yacc.c  */
#line 3329 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *arg = (yyvsp[(3) - (4)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[(3) - (4)].u.identifier)->get_fully_scoped_name(), (yylsp[(3) - (4)]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
    break;

  case 601:
/* Line 1792 of yacc.c  */
#line 3341 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[(4) - (5)].u.identifier)));
}
    break;

  case 602:
/* Line 1792 of yacc.c  */
#line 3345 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 603:
/* Line 1792 of yacc.c  */
#line 3349 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (2)].u.type)));
}
    break;

  case 604:
/* Line 1792 of yacc.c  */
#line 3353 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (5)].u.type), (yyvsp[(4) - (5)].u.expr)));
}
    break;

  case 605:
/* Line 1792 of yacc.c  */
#line 3357 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[(1) - (4)]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[(3) - (4)].u.type), std_type_info));
}
    break;

  case 606:
/* Line 1792 of yacc.c  */
#line 3368 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[(1) - (4)]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[(3) - (4)].u.expr), std_type_info));
}
    break;

  case 607:
/* Line 1792 of yacc.c  */
#line 3379 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 608:
/* Line 1792 of yacc.c  */
#line 3383 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 609:
/* Line 1792 of yacc.c  */
#line 3387 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 610:
/* Line 1792 of yacc.c  */
#line 3391 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 611:
/* Line 1792 of yacc.c  */
#line 3395 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 612:
/* Line 1792 of yacc.c  */
#line 3399 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 613:
/* Line 1792 of yacc.c  */
#line 3403 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 614:
/* Line 1792 of yacc.c  */
#line 3407 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 615:
/* Line 1792 of yacc.c  */
#line 3411 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 616:
/* Line 1792 of yacc.c  */
#line 3415 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 617:
/* Line 1792 of yacc.c  */
#line 3419 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 618:
/* Line 1792 of yacc.c  */
#line 3423 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 619:
/* Line 1792 of yacc.c  */
#line 3427 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 620:
/* Line 1792 of yacc.c  */
#line 3431 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 621:
/* Line 1792 of yacc.c  */
#line 3435 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 622:
/* Line 1792 of yacc.c  */
#line 3439 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 623:
/* Line 1792 of yacc.c  */
#line 3443 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 624:
/* Line 1792 of yacc.c  */
#line 3447 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 625:
/* Line 1792 of yacc.c  */
#line 3451 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 626:
/* Line 1792 of yacc.c  */
#line 3455 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 627:
/* Line 1792 of yacc.c  */
#line 3459 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 628:
/* Line 1792 of yacc.c  */
#line 3463 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 629:
/* Line 1792 of yacc.c  */
#line 3467 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 630:
/* Line 1792 of yacc.c  */
#line 3471 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 631:
/* Line 1792 of yacc.c  */
#line 3475 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 632:
/* Line 1792 of yacc.c  */
#line 3479 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 633:
/* Line 1792 of yacc.c  */
#line 3483 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 634:
/* Line 1792 of yacc.c  */
#line 3487 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 635:
/* Line 1792 of yacc.c  */
#line 3491 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 636:
/* Line 1792 of yacc.c  */
#line 3495 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 637:
/* Line 1792 of yacc.c  */
#line 3499 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 638:
/* Line 1792 of yacc.c  */
#line 3506 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 639:
/* Line 1792 of yacc.c  */
#line 3510 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 640:
/* Line 1792 of yacc.c  */
#line 3514 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 641:
/* Line 1792 of yacc.c  */
#line 3518 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 642:
/* Line 1792 of yacc.c  */
#line 3522 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.real));
}
    break;

  case 643:
/* Line 1792 of yacc.c  */
#line 3526 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 644:
/* Line 1792 of yacc.c  */
#line 3530 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 645:
/* Line 1792 of yacc.c  */
#line 3534 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.identifier), current_scope, global_scope, current_lexer);
}
    break;

  case 646:
/* Line 1792 of yacc.c  */
#line 3538 "dtool/src/cppparser/cppBison.yxx"
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[(1) - (1)]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
    break;

  case 647:
/* Line 1792 of yacc.c  */
#line 3544 "dtool/src/cppparser/cppBison.yxx"
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[(1) - (1)]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
    break;

  case 648:
/* Line 1792 of yacc.c  */
#line 3550 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
    break;

  case 649:
/* Line 1792 of yacc.c  */
#line 3554 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(2) - (8)].u.closure_type)->_flags = (yyvsp[(4) - (8)].u.integer);
  (yyvsp[(2) - (8)].u.closure_type)->_return_type = (yyvsp[(5) - (8)].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[(2) - (8)].u.closure_type)));
}
    break;

  case 650:
/* Line 1792 of yacc.c  */
#line 3560 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(2) - (11)].u.closure_type)->_parameters = (yyvsp[(5) - (11)].u.param_list);
  (yyvsp[(2) - (11)].u.closure_type)->_flags = (yyvsp[(7) - (11)].u.integer);
  (yyvsp[(2) - (11)].u.closure_type)->_return_type = (yyvsp[(8) - (11)].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[(2) - (11)].u.closure_type)));
}
    break;

  case 651:
/* Line 1792 of yacc.c  */
#line 3567 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_HAS_VIRTUAL_DESTRUCTOR, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 652:
/* Line 1792 of yacc.c  */
#line 3571 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ABSTRACT, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 653:
/* Line 1792 of yacc.c  */
#line 3575 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[(3) - (6)].u.type), (yyvsp[(5) - (6)].u.type)));
}
    break;

  case 654:
/* Line 1792 of yacc.c  */
#line 3579 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 655:
/* Line 1792 of yacc.c  */
#line 3583 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 656:
/* Line 1792 of yacc.c  */
#line 3587 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[(3) - (6)].u.type), (yyvsp[(5) - (6)].u.type)));
}
    break;

  case 657:
/* Line 1792 of yacc.c  */
#line 3591 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONVERTIBLE_TO, (yyvsp[(3) - (6)].u.type), (yyvsp[(5) - (6)].u.type)));
}
    break;

  case 658:
/* Line 1792 of yacc.c  */
#line 3595 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_DESTRUCTIBLE, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 659:
/* Line 1792 of yacc.c  */
#line 3599 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_EMPTY, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 660:
/* Line 1792 of yacc.c  */
#line 3603 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ENUM, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 661:
/* Line 1792 of yacc.c  */
#line 3607 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FINAL, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 662:
/* Line 1792 of yacc.c  */
#line 3611 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FUNDAMENTAL, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 663:
/* Line 1792 of yacc.c  */
#line 3615 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POD, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 664:
/* Line 1792 of yacc.c  */
#line 3619 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POLYMORPHIC, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 665:
/* Line 1792 of yacc.c  */
#line 3623 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_STANDARD_LAYOUT, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 666:
/* Line 1792 of yacc.c  */
#line 3627 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIAL, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 667:
/* Line 1792 of yacc.c  */
#line 3631 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_UNION, (yyvsp[(3) - (4)].u.type)));
}
    break;

  case 668:
/* Line 1792 of yacc.c  */
#line 3645 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 669:
/* Line 1792 of yacc.c  */
#line 3649 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 670:
/* Line 1792 of yacc.c  */
#line 3653 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_static_cast));
}
    break;

  case 671:
/* Line 1792 of yacc.c  */
#line 3657 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_dynamic_cast));
}
    break;

  case 672:
/* Line 1792 of yacc.c  */
#line 3661 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_const_cast));
}
    break;

  case 673:
/* Line 1792 of yacc.c  */
#line 3665 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_reinterpret_cast));
}
    break;

  case 674:
/* Line 1792 of yacc.c  */
#line 3669 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 675:
/* Line 1792 of yacc.c  */
#line 3673 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *arg = (yyvsp[(3) - (4)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[(3) - (4)].u.identifier)->get_fully_scoped_name(), (yylsp[(3) - (4)]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
    break;

  case 676:
/* Line 1792 of yacc.c  */
#line 3685 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[(4) - (5)].u.identifier)));
}
    break;

  case 677:
/* Line 1792 of yacc.c  */
#line 3689 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 678:
/* Line 1792 of yacc.c  */
#line 3693 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (2)].u.type)));
}
    break;

  case 679:
/* Line 1792 of yacc.c  */
#line 3697 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (5)].u.type), (yyvsp[(4) - (5)].u.expr)));
}
    break;

  case 680:
/* Line 1792 of yacc.c  */
#line 3701 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[(1) - (4)]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[(3) - (4)].u.type), std_type_info));
}
    break;

  case 681:
/* Line 1792 of yacc.c  */
#line 3712 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[(1) - (4)]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[(3) - (4)].u.expr), std_type_info));
}
    break;

  case 682:
/* Line 1792 of yacc.c  */
#line 3723 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 683:
/* Line 1792 of yacc.c  */
#line 3727 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 684:
/* Line 1792 of yacc.c  */
#line 3731 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 685:
/* Line 1792 of yacc.c  */
#line 3735 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 686:
/* Line 1792 of yacc.c  */
#line 3739 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 687:
/* Line 1792 of yacc.c  */
#line 3743 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 688:
/* Line 1792 of yacc.c  */
#line 3747 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 689:
/* Line 1792 of yacc.c  */
#line 3751 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 690:
/* Line 1792 of yacc.c  */
#line 3755 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 691:
/* Line 1792 of yacc.c  */
#line 3759 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 692:
/* Line 1792 of yacc.c  */
#line 3763 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 693:
/* Line 1792 of yacc.c  */
#line 3767 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 694:
/* Line 1792 of yacc.c  */
#line 3771 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 695:
/* Line 1792 of yacc.c  */
#line 3775 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 696:
/* Line 1792 of yacc.c  */
#line 3779 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 697:
/* Line 1792 of yacc.c  */
#line 3783 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 698:
/* Line 1792 of yacc.c  */
#line 3787 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 699:
/* Line 1792 of yacc.c  */
#line 3791 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 700:
/* Line 1792 of yacc.c  */
#line 3795 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 701:
/* Line 1792 of yacc.c  */
#line 3799 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 702:
/* Line 1792 of yacc.c  */
#line 3803 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 703:
/* Line 1792 of yacc.c  */
#line 3807 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 704:
/* Line 1792 of yacc.c  */
#line 3811 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 705:
/* Line 1792 of yacc.c  */
#line 3815 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 706:
/* Line 1792 of yacc.c  */
#line 3819 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 707:
/* Line 1792 of yacc.c  */
#line 3823 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 708:
/* Line 1792 of yacc.c  */
#line 3827 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 709:
/* Line 1792 of yacc.c  */
#line 3831 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 710:
/* Line 1792 of yacc.c  */
#line 3835 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 711:
/* Line 1792 of yacc.c  */
#line 3839 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 712:
/* Line 1792 of yacc.c  */
#line 3846 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 713:
/* Line 1792 of yacc.c  */
#line 3850 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 714:
/* Line 1792 of yacc.c  */
#line 3854 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 715:
/* Line 1792 of yacc.c  */
#line 3858 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 716:
/* Line 1792 of yacc.c  */
#line 3862 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.real));
}
    break;

  case 717:
/* Line 1792 of yacc.c  */
#line 3866 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 718:
/* Line 1792 of yacc.c  */
#line 3870 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 719:
/* Line 1792 of yacc.c  */
#line 3874 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.identifier), current_scope, global_scope, current_lexer);
}
    break;

  case 720:
/* Line 1792 of yacc.c  */
#line 3878 "dtool/src/cppparser/cppBison.yxx"
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[(1) - (1)]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
    break;

  case 721:
/* Line 1792 of yacc.c  */
#line 3884 "dtool/src/cppparser/cppBison.yxx"
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[(1) - (1)]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
    break;

  case 722:
/* Line 1792 of yacc.c  */
#line 3890 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
    break;

  case 723:
/* Line 1792 of yacc.c  */
#line 3898 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.closure_type) = new CPPClosureType();
}
    break;

  case 724:
/* Line 1792 of yacc.c  */
#line 3902 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_value);
}
    break;

  case 725:
/* Line 1792 of yacc.c  */
#line 3906 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_reference);
}
    break;

  case 726:
/* Line 1792 of yacc.c  */
#line 3910 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.closure_type) = new CPPClosureType();
  (yyvsp[(1) - (2)].u.capture)->_initializer = (yyvsp[(2) - (2)].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[(1) - (2)].u.capture));
  delete (yyvsp[(1) - (2)].u.capture);
}
    break;

  case 727:
/* Line 1792 of yacc.c  */
#line 3917 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.closure_type) = (yyvsp[(1) - (4)].u.closure_type);
  (yyvsp[(3) - (4)].u.capture)->_initializer = (yyvsp[(4) - (4)].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[(3) - (4)].u.capture));
  delete (yyvsp[(3) - (4)].u.capture);
}
    break;

  case 728:
/* Line 1792 of yacc.c  */
#line 3927 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[(2) - (2)].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
    break;

  case 729:
/* Line 1792 of yacc.c  */
#line 3933 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[(2) - (3)].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
    break;

  case 730:
/* Line 1792 of yacc.c  */
#line 3939 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[(1) - (1)].u.identifier)->get_simple_name();
  if ((yyval.u.capture)->_name == "this") {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
  } else {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  }
}
    break;

  case 731:
/* Line 1792 of yacc.c  */
#line 3949 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[(2) - (2)].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  if ((yyval.u.capture)->_name != "this") {
    yywarning("only capture name 'this' may be preceded by an asterisk", (yylsp[(2) - (2)]));
  }
}
    break;

  case 732:
/* Line 1792 of yacc.c  */
#line 3961 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[(1) - (1)].u.identifier)));
  }
  (yyval.u.type) = type;
}
    break;

  case 733:
/* Line 1792 of yacc.c  */
#line 3969 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 734:
/* Line 1792 of yacc.c  */
#line 3973 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[(1) - (2)].u.identifier));
  ctp->_packed = true;
  (yyval.u.type) = CPPType::new_type(ctp);
}
    break;

  case 735:
/* Line 1792 of yacc.c  */
#line 4003 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 736:
/* Line 1792 of yacc.c  */
#line 4007 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 737:
/* Line 1792 of yacc.c  */
#line 4011 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 738:
/* Line 1792 of yacc.c  */
#line 4015 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[(1) - (1)]));
}
    break;

  case 739:
/* Line 1792 of yacc.c  */
#line 4019 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[(1) - (1)]));
}
    break;

  case 740:
/* Line 1792 of yacc.c  */
#line 4023 "dtool/src/cppparser/cppBison.yxx"
    {
  // This is not a keyword in Python, so it is useful to be able to use this
  // in MAKE_PROPERTY definitions, etc.
  (yyval.u.identifier) = new CPPIdentifier("signed", (yylsp[(1) - (1)]));
}
    break;

  case 741:
/* Line 1792 of yacc.c  */
#line 4029 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = new CPPIdentifier("float", (yylsp[(1) - (1)]));
}
    break;

  case 742:
/* Line 1792 of yacc.c  */
#line 4033 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = new CPPIdentifier("public", (yylsp[(1) - (1)]));
}
    break;

  case 743:
/* Line 1792 of yacc.c  */
#line 4037 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = new CPPIdentifier("private", (yylsp[(1) - (1)]));
}
    break;

  case 744:
/* Line 1792 of yacc.c  */
#line 4041 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = new CPPIdentifier("static", (yylsp[(1) - (1)]));
}
    break;

  case 745:
/* Line 1792 of yacc.c  */
#line 4052 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 746:
/* Line 1792 of yacc.c  */
#line 4056 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 747:
/* Line 1792 of yacc.c  */
#line 4060 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 748:
/* Line 1792 of yacc.c  */
#line 4064 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[(1) - (1)]));
}
    break;

  case 749:
/* Line 1792 of yacc.c  */
#line 4072 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].str));
}
    break;

  case 750:
/* Line 1792 of yacc.c  */
#line 4076 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 751:
/* Line 1792 of yacc.c  */
#line 4080 "dtool/src/cppparser/cppBison.yxx"
    {
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[(1) - (2)].u.expr);
  (yyval.u.expr)->_str += (yyvsp[(2) - (2)].str);
}
    break;

  case 752:
/* Line 1792 of yacc.c  */
#line 4086 "dtool/src/cppparser/cppBison.yxx"
    {
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[(1) - (2)].u.expr);
  if ((yyvsp[(2) - (2)].u.expr)->_type != CPPExpression::T_string && (yyvsp[(2) - (2)].u.expr)->_type != (yyvsp[(1) - (2)].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[(2) - (2)].u.expr)->_str;
}
    break;


/* Line 1792 of yacc.c  */
#line 9985 "built_x64/tmp/cppBison.yxx.c"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


