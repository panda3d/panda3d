/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs

/* First part of user prologue.  */
#line 7 "dtool/src/cppparser/cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppClosureType.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

using std::stringstream;
using std::string;

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = nullptr;
CPPScope *global_scope = nullptr;
CPPPreprocessor *current_lexer = nullptr;

static CPPStructType *current_struct = nullptr;
static CPPEnumType *current_enum = nullptr;
static int current_storage_class = 0;
static CPPType *current_type = nullptr;
static CPPExpression *current_expr = nullptr;
static CPPAttributeList current_attributes;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static std::vector<CPPScope *> last_scopes;
static std::vector<int> last_storage_classes;
static std::vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = nullptr;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = nullptr;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != nullptr) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#line 275 "built/tmp/cppBison.yxx.c"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "cppBison.yxx.h"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_REAL = 3,                       /* REAL  */
  YYSYMBOL_INTEGER = 4,                    /* INTEGER  */
  YYSYMBOL_CHAR_TOK = 5,                   /* CHAR_TOK  */
  YYSYMBOL_SIMPLE_STRING = 6,              /* SIMPLE_STRING  */
  YYSYMBOL_SIMPLE_IDENTIFIER = 7,          /* SIMPLE_IDENTIFIER  */
  YYSYMBOL_STRING_LITERAL = 8,             /* STRING_LITERAL  */
  YYSYMBOL_CUSTOM_LITERAL = 9,             /* CUSTOM_LITERAL  */
  YYSYMBOL_IDENTIFIER = 10,                /* IDENTIFIER  */
  YYSYMBOL_TYPENAME_IDENTIFIER = 11,       /* TYPENAME_IDENTIFIER  */
  YYSYMBOL_TYPEPACK_IDENTIFIER = 12,       /* TYPEPACK_IDENTIFIER  */
  YYSYMBOL_SCOPING = 13,                   /* SCOPING  */
  YYSYMBOL_TYPEDEFNAME = 14,               /* TYPEDEFNAME  */
  YYSYMBOL_ELLIPSIS = 15,                  /* ELLIPSIS  */
  YYSYMBOL_OROR = 16,                      /* OROR  */
  YYSYMBOL_ANDAND = 17,                    /* ANDAND  */
  YYSYMBOL_EQCOMPARE = 18,                 /* EQCOMPARE  */
  YYSYMBOL_NECOMPARE = 19,                 /* NECOMPARE  */
  YYSYMBOL_LECOMPARE = 20,                 /* LECOMPARE  */
  YYSYMBOL_GECOMPARE = 21,                 /* GECOMPARE  */
  YYSYMBOL_SPACESHIP = 22,                 /* SPACESHIP  */
  YYSYMBOL_LSHIFT = 23,                    /* LSHIFT  */
  YYSYMBOL_RSHIFT = 24,                    /* RSHIFT  */
  YYSYMBOL_POINTSAT_STAR = 25,             /* POINTSAT_STAR  */
  YYSYMBOL_DOT_STAR = 26,                  /* DOT_STAR  */
  YYSYMBOL_UNARY = 27,                     /* UNARY  */
  YYSYMBOL_UNARY_NOT = 28,                 /* UNARY_NOT  */
  YYSYMBOL_UNARY_NEGATE = 29,              /* UNARY_NEGATE  */
  YYSYMBOL_UNARY_MINUS = 30,               /* UNARY_MINUS  */
  YYSYMBOL_UNARY_PLUS = 31,                /* UNARY_PLUS  */
  YYSYMBOL_UNARY_STAR = 32,                /* UNARY_STAR  */
  YYSYMBOL_UNARY_REF = 33,                 /* UNARY_REF  */
  YYSYMBOL_POINTSAT = 34,                  /* POINTSAT  */
  YYSYMBOL_SCOPE = 35,                     /* SCOPE  */
  YYSYMBOL_PLUSPLUS = 36,                  /* PLUSPLUS  */
  YYSYMBOL_MINUSMINUS = 37,                /* MINUSMINUS  */
  YYSYMBOL_TIMESEQUAL = 38,                /* TIMESEQUAL  */
  YYSYMBOL_DIVIDEEQUAL = 39,               /* DIVIDEEQUAL  */
  YYSYMBOL_MODEQUAL = 40,                  /* MODEQUAL  */
  YYSYMBOL_PLUSEQUAL = 41,                 /* PLUSEQUAL  */
  YYSYMBOL_MINUSEQUAL = 42,                /* MINUSEQUAL  */
  YYSYMBOL_OREQUAL = 43,                   /* OREQUAL  */
  YYSYMBOL_ANDEQUAL = 44,                  /* ANDEQUAL  */
  YYSYMBOL_XOREQUAL = 45,                  /* XOREQUAL  */
  YYSYMBOL_LSHIFTEQUAL = 46,               /* LSHIFTEQUAL  */
  YYSYMBOL_RSHIFTEQUAL = 47,               /* RSHIFTEQUAL  */
  YYSYMBOL_ATTR_LEFT = 48,                 /* ATTR_LEFT  */
  YYSYMBOL_ATTR_RIGHT = 49,                /* ATTR_RIGHT  */
  YYSYMBOL_KW_ALIGNAS = 50,                /* KW_ALIGNAS  */
  YYSYMBOL_KW_ALIGNOF = 51,                /* KW_ALIGNOF  */
  YYSYMBOL_KW_AUTO = 52,                   /* KW_AUTO  */
  YYSYMBOL_KW_BEGIN_PUBLISH = 53,          /* KW_BEGIN_PUBLISH  */
  YYSYMBOL_KW_BLOCKING = 54,               /* KW_BLOCKING  */
  YYSYMBOL_KW_BOOL = 55,                   /* KW_BOOL  */
  YYSYMBOL_KW_CATCH = 56,                  /* KW_CATCH  */
  YYSYMBOL_KW_CHAR = 57,                   /* KW_CHAR  */
  YYSYMBOL_KW_CHAR8_T = 58,                /* KW_CHAR8_T  */
  YYSYMBOL_KW_CHAR16_T = 59,               /* KW_CHAR16_T  */
  YYSYMBOL_KW_CHAR32_T = 60,               /* KW_CHAR32_T  */
  YYSYMBOL_KW_CLASS = 61,                  /* KW_CLASS  */
  YYSYMBOL_KW_CONST = 62,                  /* KW_CONST  */
  YYSYMBOL_KW_CONSTEVAL = 63,              /* KW_CONSTEVAL  */
  YYSYMBOL_KW_CONSTEXPR = 64,              /* KW_CONSTEXPR  */
  YYSYMBOL_KW_CONSTINIT = 65,              /* KW_CONSTINIT  */
  YYSYMBOL_KW_CONST_CAST = 66,             /* KW_CONST_CAST  */
  YYSYMBOL_KW_DECLTYPE = 67,               /* KW_DECLTYPE  */
  YYSYMBOL_KW_DEFAULT = 68,                /* KW_DEFAULT  */
  YYSYMBOL_KW_DELETE = 69,                 /* KW_DELETE  */
  YYSYMBOL_KW_DOUBLE = 70,                 /* KW_DOUBLE  */
  YYSYMBOL_KW_DYNAMIC_CAST = 71,           /* KW_DYNAMIC_CAST  */
  YYSYMBOL_KW_ELSE = 72,                   /* KW_ELSE  */
  YYSYMBOL_KW_END_PUBLISH = 73,            /* KW_END_PUBLISH  */
  YYSYMBOL_KW_ENUM = 74,                   /* KW_ENUM  */
  YYSYMBOL_KW_EXTENSION = 75,              /* KW_EXTENSION  */
  YYSYMBOL_KW_EXTERN = 76,                 /* KW_EXTERN  */
  YYSYMBOL_KW_EXPLICIT = 77,               /* KW_EXPLICIT  */
  YYSYMBOL_KW_EXPLICIT_LPAREN = 78,        /* KW_EXPLICIT_LPAREN  */
  YYSYMBOL_KW_PUBLISHED = 79,              /* KW_PUBLISHED  */
  YYSYMBOL_KW_FALSE = 80,                  /* KW_FALSE  */
  YYSYMBOL_KW_FINAL = 81,                  /* KW_FINAL  */
  YYSYMBOL_KW_FLOAT = 82,                  /* KW_FLOAT  */
  YYSYMBOL_KW_FRIEND = 83,                 /* KW_FRIEND  */
  YYSYMBOL_KW_FOR = 84,                    /* KW_FOR  */
  YYSYMBOL_KW_GOTO = 85,                   /* KW_GOTO  */
  YYSYMBOL_KW_HAS_VIRTUAL_DESTRUCTOR = 86, /* KW_HAS_VIRTUAL_DESTRUCTOR  */
  YYSYMBOL_KW_IF = 87,                     /* KW_IF  */
  YYSYMBOL_KW_INLINE = 88,                 /* KW_INLINE  */
  YYSYMBOL_KW_INT = 89,                    /* KW_INT  */
  YYSYMBOL_KW_IS_ABSTRACT = 90,            /* KW_IS_ABSTRACT  */
  YYSYMBOL_KW_IS_BASE_OF = 91,             /* KW_IS_BASE_OF  */
  YYSYMBOL_KW_IS_CLASS = 92,               /* KW_IS_CLASS  */
  YYSYMBOL_KW_IS_CONSTRUCTIBLE = 93,       /* KW_IS_CONSTRUCTIBLE  */
  YYSYMBOL_KW_IS_CONVERTIBLE_TO = 94,      /* KW_IS_CONVERTIBLE_TO  */
  YYSYMBOL_KW_IS_DESTRUCTIBLE = 95,        /* KW_IS_DESTRUCTIBLE  */
  YYSYMBOL_KW_IS_EMPTY = 96,               /* KW_IS_EMPTY  */
  YYSYMBOL_KW_IS_ENUM = 97,                /* KW_IS_ENUM  */
  YYSYMBOL_KW_IS_FINAL = 98,               /* KW_IS_FINAL  */
  YYSYMBOL_KW_IS_FUNDAMENTAL = 99,         /* KW_IS_FUNDAMENTAL  */
  YYSYMBOL_KW_IS_POD = 100,                /* KW_IS_POD  */
  YYSYMBOL_KW_IS_POLYMORPHIC = 101,        /* KW_IS_POLYMORPHIC  */
  YYSYMBOL_KW_IS_STANDARD_LAYOUT = 102,    /* KW_IS_STANDARD_LAYOUT  */
  YYSYMBOL_KW_IS_TRIVIAL = 103,            /* KW_IS_TRIVIAL  */
  YYSYMBOL_KW_IS_UNION = 104,              /* KW_IS_UNION  */
  YYSYMBOL_KW_LONG = 105,                  /* KW_LONG  */
  YYSYMBOL_KW_MAKE_MAP_KEYS_SEQ = 106,     /* KW_MAKE_MAP_KEYS_SEQ  */
  YYSYMBOL_KW_MAKE_MAP_PROPERTY = 107,     /* KW_MAKE_MAP_PROPERTY  */
  YYSYMBOL_KW_MAKE_PROPERTY = 108,         /* KW_MAKE_PROPERTY  */
  YYSYMBOL_KW_MAKE_PROPERTY2 = 109,        /* KW_MAKE_PROPERTY2  */
  YYSYMBOL_KW_MAKE_SEQ = 110,              /* KW_MAKE_SEQ  */
  YYSYMBOL_KW_MAKE_SEQ_PROPERTY = 111,     /* KW_MAKE_SEQ_PROPERTY  */
  YYSYMBOL_KW_MUTABLE = 112,               /* KW_MUTABLE  */
  YYSYMBOL_KW_NAMESPACE = 113,             /* KW_NAMESPACE  */
  YYSYMBOL_KW_NEW = 114,                   /* KW_NEW  */
  YYSYMBOL_KW_NOEXCEPT = 115,              /* KW_NOEXCEPT  */
  YYSYMBOL_KW_NOEXCEPT_LPAREN = 116,       /* KW_NOEXCEPT_LPAREN  */
  YYSYMBOL_KW_NULLPTR = 117,               /* KW_NULLPTR  */
  YYSYMBOL_KW_OPERATOR = 118,              /* KW_OPERATOR  */
  YYSYMBOL_KW_OVERRIDE = 119,              /* KW_OVERRIDE  */
  YYSYMBOL_KW_PRIVATE = 120,               /* KW_PRIVATE  */
  YYSYMBOL_KW_PROTECTED = 121,             /* KW_PROTECTED  */
  YYSYMBOL_KW_PUBLIC = 122,                /* KW_PUBLIC  */
  YYSYMBOL_KW_REGISTER = 123,              /* KW_REGISTER  */
  YYSYMBOL_KW_REINTERPRET_CAST = 124,      /* KW_REINTERPRET_CAST  */
  YYSYMBOL_KW_RETURN = 125,                /* KW_RETURN  */
  YYSYMBOL_KW_SHORT = 126,                 /* KW_SHORT  */
  YYSYMBOL_KW_SIGNED = 127,                /* KW_SIGNED  */
  YYSYMBOL_KW_SIZEOF = 128,                /* KW_SIZEOF  */
  YYSYMBOL_KW_STATIC = 129,                /* KW_STATIC  */
  YYSYMBOL_KW_STATIC_ASSERT = 130,         /* KW_STATIC_ASSERT  */
  YYSYMBOL_KW_STATIC_CAST = 131,           /* KW_STATIC_CAST  */
  YYSYMBOL_KW_STRUCT = 132,                /* KW_STRUCT  */
  YYSYMBOL_KW_TEMPLATE = 133,              /* KW_TEMPLATE  */
  YYSYMBOL_KW_THREAD_LOCAL = 134,          /* KW_THREAD_LOCAL  */
  YYSYMBOL_KW_THROW = 135,                 /* KW_THROW  */
  YYSYMBOL_KW_TRUE = 136,                  /* KW_TRUE  */
  YYSYMBOL_KW_TRY = 137,                   /* KW_TRY  */
  YYSYMBOL_KW_TYPEDEF = 138,               /* KW_TYPEDEF  */
  YYSYMBOL_KW_TYPEID = 139,                /* KW_TYPEID  */
  YYSYMBOL_KW_TYPENAME = 140,              /* KW_TYPENAME  */
  YYSYMBOL_KW_UNDERLYING_TYPE = 141,       /* KW_UNDERLYING_TYPE  */
  YYSYMBOL_KW_UNION = 142,                 /* KW_UNION  */
  YYSYMBOL_KW_UNSIGNED = 143,              /* KW_UNSIGNED  */
  YYSYMBOL_KW_USING = 144,                 /* KW_USING  */
  YYSYMBOL_KW_VIRTUAL = 145,               /* KW_VIRTUAL  */
  YYSYMBOL_KW_VOID = 146,                  /* KW_VOID  */
  YYSYMBOL_KW_VOLATILE = 147,              /* KW_VOLATILE  */
  YYSYMBOL_KW_WCHAR_T = 148,               /* KW_WCHAR_T  */
  YYSYMBOL_KW_WHILE = 149,                 /* KW_WHILE  */
  YYSYMBOL_START_CPP = 150,                /* START_CPP  */
  YYSYMBOL_START_CONST_EXPR = 151,         /* START_CONST_EXPR  */
  YYSYMBOL_START_TYPE = 152,               /* START_TYPE  */
  YYSYMBOL_153_ = 153,                     /* '{'  */
  YYSYMBOL_154_ = 154,                     /* ','  */
  YYSYMBOL_155_ = 155,                     /* ';'  */
  YYSYMBOL_156_ = 156,                     /* ':'  */
  YYSYMBOL_157_ = 157,                     /* '='  */
  YYSYMBOL_158_ = 158,                     /* '?'  */
  YYSYMBOL_159_ = 159,                     /* '|'  */
  YYSYMBOL_160_ = 160,                     /* '^'  */
  YYSYMBOL_161_ = 161,                     /* '&'  */
  YYSYMBOL_162_ = 162,                     /* '<'  */
  YYSYMBOL_163_ = 163,                     /* '>'  */
  YYSYMBOL_164_ = 164,                     /* '+'  */
  YYSYMBOL_165_ = 165,                     /* '-'  */
  YYSYMBOL_166_ = 166,                     /* '*'  */
  YYSYMBOL_167_ = 167,                     /* '/'  */
  YYSYMBOL_168_ = 168,                     /* '%'  */
  YYSYMBOL_169_ = 169,                     /* '~'  */
  YYSYMBOL_170_ = 170,                     /* '.'  */
  YYSYMBOL_171_ = 171,                     /* '('  */
  YYSYMBOL_172_ = 172,                     /* '['  */
  YYSYMBOL_173_ = 173,                     /* ')'  */
  YYSYMBOL_174_ = 174,                     /* '}'  */
  YYSYMBOL_175_ = 175,                     /* '!'  */
  YYSYMBOL_176_ = 176,                     /* ']'  */
  YYSYMBOL_YYACCEPT = 177,                 /* $accept  */
  YYSYMBOL_grammar = 178,                  /* grammar  */
  YYSYMBOL_cpp = 179,                      /* cpp  */
  YYSYMBOL_180_1 = 180,                    /* $@1  */
  YYSYMBOL_constructor_inits = 181,        /* constructor_inits  */
  YYSYMBOL_constructor_init = 182,         /* constructor_init  */
  YYSYMBOL_extern_c = 183,                 /* extern_c  */
  YYSYMBOL_184_2 = 184,                    /* $@2  */
  YYSYMBOL_declaration = 185,              /* declaration  */
  YYSYMBOL_friend_declaration = 186,       /* friend_declaration  */
  YYSYMBOL_187_3 = 187,                    /* $@3  */
  YYSYMBOL_storage_class = 188,            /* storage_class  */
  YYSYMBOL_optional_attributes = 189,      /* optional_attributes  */
  YYSYMBOL_attribute_specifiers = 190,     /* attribute_specifiers  */
  YYSYMBOL_attribute_specifier = 191,      /* attribute_specifier  */
  YYSYMBOL_type_like_declaration = 192,    /* type_like_declaration  */
  YYSYMBOL_193_4 = 193,                    /* $@4  */
  YYSYMBOL_194_5 = 194,                    /* $@5  */
  YYSYMBOL_multiple_instance_identifiers = 195, /* multiple_instance_identifiers  */
  YYSYMBOL_typedef_declaration = 196,      /* typedef_declaration  */
  YYSYMBOL_197_6 = 197,                    /* $@6  */
  YYSYMBOL_typedef_instance_identifiers = 198, /* typedef_instance_identifiers  */
  YYSYMBOL_constructor_prototype = 199,    /* constructor_prototype  */
  YYSYMBOL_200_7 = 200,                    /* $@7  */
  YYSYMBOL_201_8 = 201,                    /* $@8  */
  YYSYMBOL_202_9 = 202,                    /* $@9  */
  YYSYMBOL_function_prototype = 203,       /* function_prototype  */
  YYSYMBOL_204_10 = 204,                   /* $@10  */
  YYSYMBOL_205_11 = 205,                   /* $@11  */
  YYSYMBOL_206_12 = 206,                   /* $@12  */
  YYSYMBOL_207_13 = 207,                   /* $@13  */
  YYSYMBOL_208_14 = 208,                   /* $@14  */
  YYSYMBOL_function_post = 209,            /* function_post  */
  YYSYMBOL_function_operator = 210,        /* function_operator  */
  YYSYMBOL_more_template_declaration = 211, /* more_template_declaration  */
  YYSYMBOL_template_declaration = 212,     /* template_declaration  */
  YYSYMBOL_213_15 = 213,                   /* $@15  */
  YYSYMBOL_template_formal_parameters = 214, /* template_formal_parameters  */
  YYSYMBOL_template_nonempty_formal_parameters = 215, /* template_nonempty_formal_parameters  */
  YYSYMBOL_typename_keyword = 216,         /* typename_keyword  */
  YYSYMBOL_template_formal_parameter = 217, /* template_formal_parameter  */
  YYSYMBOL_template_formal_parameter_type = 218, /* template_formal_parameter_type  */
  YYSYMBOL_instance_identifier = 219,      /* instance_identifier  */
  YYSYMBOL_220_16 = 220,                   /* $@16  */
  YYSYMBOL_instance_identifier_and_maybe_trailing_return_type = 221, /* instance_identifier_and_maybe_trailing_return_type  */
  YYSYMBOL_maybe_trailing_return_type = 222, /* maybe_trailing_return_type  */
  YYSYMBOL_maybe_comma_identifier = 223,   /* maybe_comma_identifier  */
  YYSYMBOL_function_parameter_list = 224,  /* function_parameter_list  */
  YYSYMBOL_function_parameters = 225,      /* function_parameters  */
  YYSYMBOL_formal_parameter_list = 226,    /* formal_parameter_list  */
  YYSYMBOL_formal_parameters = 227,        /* formal_parameters  */
  YYSYMBOL_template_parameter_maybe_initialize = 228, /* template_parameter_maybe_initialize  */
  YYSYMBOL_maybe_initialize = 229,         /* maybe_initialize  */
  YYSYMBOL_maybe_initialize_or_constructor_body = 230, /* maybe_initialize_or_constructor_body  */
  YYSYMBOL_maybe_initialize_or_function_body = 231, /* maybe_initialize_or_function_body  */
  YYSYMBOL_structure_init = 232,           /* structure_init  */
  YYSYMBOL_structure_init_body = 233,      /* structure_init_body  */
  YYSYMBOL_function_parameter = 234,       /* function_parameter  */
  YYSYMBOL_formal_parameter = 235,         /* formal_parameter  */
  YYSYMBOL_not_paren_formal_parameter_identifier = 236, /* not_paren_formal_parameter_identifier  */
  YYSYMBOL_formal_parameter_identifier = 237, /* formal_parameter_identifier  */
  YYSYMBOL_parameter_pack_identifier = 238, /* parameter_pack_identifier  */
  YYSYMBOL_not_paren_empty_instance_identifier = 239, /* not_paren_empty_instance_identifier  */
  YYSYMBOL_empty_instance_identifier = 240, /* empty_instance_identifier  */
  YYSYMBOL_type = 241,                     /* type  */
  YYSYMBOL_type_pack = 242,                /* type_pack  */
  YYSYMBOL_type_decl = 243,                /* type_decl  */
  YYSYMBOL_predefined_type = 244,          /* predefined_type  */
  YYSYMBOL_var_type_decl = 245,            /* var_type_decl  */
  YYSYMBOL_full_type = 246,                /* full_type  */
  YYSYMBOL_anonymous_struct = 247,         /* anonymous_struct  */
  YYSYMBOL_248_17 = 248,                   /* $@17  */
  YYSYMBOL_named_struct = 249,             /* named_struct  */
  YYSYMBOL_250_18 = 250,                   /* $@18  */
  YYSYMBOL_maybe_final = 251,              /* maybe_final  */
  YYSYMBOL_maybe_class_derivation = 252,   /* maybe_class_derivation  */
  YYSYMBOL_class_derivation = 253,         /* class_derivation  */
  YYSYMBOL_base_specification = 254,       /* base_specification  */
  YYSYMBOL_enum = 255,                     /* enum  */
  YYSYMBOL_enum_decl = 256,                /* enum_decl  */
  YYSYMBOL_enum_element_type = 257,        /* enum_element_type  */
  YYSYMBOL_enum_body_trailing_comma = 258, /* enum_body_trailing_comma  */
  YYSYMBOL_enum_body = 259,                /* enum_body  */
  YYSYMBOL_enum_keyword = 260,             /* enum_keyword  */
  YYSYMBOL_struct_keyword = 261,           /* struct_keyword  */
  YYSYMBOL_namespace_declaration = 262,    /* namespace_declaration  */
  YYSYMBOL_263_19 = 263,                   /* $@19  */
  YYSYMBOL_264_20 = 264,                   /* $@20  */
  YYSYMBOL_using_declaration = 265,        /* using_declaration  */
  YYSYMBOL_simple_type = 266,              /* simple_type  */
  YYSYMBOL_simple_int_type = 267,          /* simple_int_type  */
  YYSYMBOL_simple_float_type = 268,        /* simple_float_type  */
  YYSYMBOL_simple_void_type = 269,         /* simple_void_type  */
  YYSYMBOL_code = 270,                     /* code  */
  YYSYMBOL_271_21 = 271,                   /* $@21  */
  YYSYMBOL_code_block = 272,               /* code_block  */
  YYSYMBOL_element = 273,                  /* element  */
  YYSYMBOL_optional_const_expr = 274,      /* optional_const_expr  */
  YYSYMBOL_optional_const_expr_comma = 275, /* optional_const_expr_comma  */
  YYSYMBOL_const_expr_comma = 276,         /* const_expr_comma  */
  YYSYMBOL_no_angle_bracket_const_expr = 277, /* no_angle_bracket_const_expr  */
  YYSYMBOL_const_expr = 278,               /* const_expr  */
  YYSYMBOL_const_operand = 279,            /* const_operand  */
  YYSYMBOL_formal_const_expr = 280,        /* formal_const_expr  */
  YYSYMBOL_formal_const_operand = 281,     /* formal_const_operand  */
  YYSYMBOL_capture_list = 282,             /* capture_list  */
  YYSYMBOL_capture = 283,                  /* capture  */
  YYSYMBOL_class_derivation_name = 284,    /* class_derivation_name  */
  YYSYMBOL_name = 285,                     /* name  */
  YYSYMBOL_name_no_final = 286,            /* name_no_final  */
  YYSYMBOL_string_literal = 287,           /* string_literal  */
  YYSYMBOL_empty = 288                     /* empty  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  107
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   7021

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  177
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  112
/* YYNRULES -- Number of rules.  */
#define YYNRULES  780
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1666

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   407


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   175,     2,     2,     2,   168,   161,     2,
     171,   173,   166,   164,   154,   165,   170,   167,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   156,   155,
     162,   157,   163,   158,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   172,     2,   176,   160,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   153,   159,   174,   169,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   463,   463,   464,   468,   475,   476,   483,   482,   493,
     494,   498,   502,   506,   519,   518,   530,   531,   532,   533,
     534,   535,   536,   549,   558,   562,   570,   574,   578,   599,
     626,   647,   676,   712,   755,   767,   788,   824,   858,   880,
     916,   938,   949,   963,   962,   977,   981,   986,   990,  1001,
    1005,  1009,  1013,  1017,  1026,  1030,  1034,  1038,  1042,  1046,
    1050,  1054,  1058,  1065,  1069,  1074,  1082,  1087,  1095,  1099,
    1107,  1112,  1121,  1120,  1136,  1146,  1145,  1162,  1170,  1178,
    1190,  1207,  1206,  1221,  1236,  1246,  1262,  1261,  1304,  1303,
    1332,  1331,  1369,  1368,  1400,  1399,  1419,  1418,  1440,  1439,
    1472,  1471,  1498,  1511,  1515,  1519,  1523,  1527,  1536,  1540,
    1544,  1548,  1552,  1557,  1562,  1566,  1570,  1577,  1581,  1585,
    1589,  1593,  1597,  1601,  1605,  1609,  1613,  1617,  1621,  1625,
    1629,  1633,  1637,  1641,  1645,  1649,  1653,  1657,  1661,  1665,
    1669,  1673,  1677,  1681,  1685,  1689,  1693,  1697,  1701,  1705,
    1709,  1713,  1717,  1721,  1725,  1729,  1733,  1740,  1741,  1742,
    1746,  1748,  1747,  1755,  1756,  1760,  1761,  1765,  1771,  1780,
    1781,  1785,  1789,  1793,  1797,  1803,  1809,  1815,  1822,  1827,
    1836,  1840,  1845,  1853,  1865,  1869,  1883,  1898,  1903,  1908,
    1913,  1918,  1923,  1928,  1933,  1939,  1938,  1969,  1979,  1989,
    1993,  1997,  2006,  2010,  2018,  2022,  2027,  2031,  2036,  2044,
    2049,  2057,  2061,  2066,  2070,  2075,  2083,  2088,  2096,  2100,
    2107,  2111,  2118,  2122,  2126,  2130,  2134,  2141,  2145,  2149,
    2153,  2157,  2161,  2168,  2169,  2170,  2174,  2177,  2178,  2179,
    2183,  2189,  2196,  2203,  2209,  2216,  2223,  2235,  2239,  2249,
    2253,  2257,  2262,  2267,  2272,  2277,  2282,  2287,  2295,  2299,
    2303,  2308,  2313,  2318,  2323,  2328,  2333,  2338,  2344,  2352,
    2357,  2362,  2367,  2372,  2377,  2382,  2387,  2392,  2397,  2403,
    2411,  2415,  2420,  2425,  2430,  2435,  2440,  2445,  2450,  2455,
    2463,  2467,  2472,  2477,  2482,  2487,  2492,  2497,  2502,  2507,
    2512,  2518,  2525,  2532,  2542,  2546,  2554,  2558,  2562,  2566,
    2570,  2586,  2602,  2611,  2615,  2625,  2632,  2643,  2647,  2655,
    2659,  2663,  2667,  2671,  2687,  2703,  2721,  2730,  2734,  2744,
    2751,  2755,  2763,  2767,  2783,  2799,  2808,  2818,  2825,  2829,
    2837,  2841,  2846,  2850,  2859,  2858,  2883,  2882,  2912,  2913,
    2920,  2921,  2925,  2926,  2930,  2934,  2938,  2942,  2946,  2950,
    2954,  2958,  2962,  2966,  2973,  2981,  2985,  2989,  2994,  3002,
    3006,  3013,  3014,  3019,  3026,  3027,  3032,  3040,  3044,  3048,
    3055,  3059,  3063,  3071,  3070,  3093,  3092,  3115,  3116,  3120,
    3126,  3133,  3139,  3148,  3149,  3150,  3154,  3158,  3162,  3166,
    3170,  3174,  3178,  3183,  3188,  3193,  3198,  3202,  3207,  3216,
    3221,  3229,  3233,  3237,  3245,  3255,  3255,  3265,  3266,  3270,
    3271,  3272,  3273,  3274,  3275,  3276,  3277,  3278,  3279,  3280,
    3281,  3281,  3281,  3282,  3282,  3282,  3282,  3282,  3283,  3283,
    3283,  3283,  3283,  3284,  3284,  3284,  3285,  3285,  3285,  3285,
    3285,  3286,  3286,  3286,  3286,  3286,  3287,  3287,  3288,  3288,
    3288,  3288,  3288,  3289,  3289,  3289,  3289,  3289,  3290,  3290,
    3290,  3290,  3290,  3291,  3291,  3291,  3291,  3291,  3292,  3292,
    3292,  3292,  3292,  3293,  3293,  3293,  3293,  3293,  3294,  3294,
    3294,  3294,  3294,  3294,  3295,  3295,  3295,  3295,  3295,  3296,
    3296,  3296,  3296,  3297,  3297,  3297,  3297,  3298,  3298,  3298,
    3298,  3298,  3299,  3299,  3299,  3299,  3300,  3300,  3300,  3300,
    3300,  3301,  3301,  3301,  3301,  3302,  3302,  3302,  3302,  3302,
    3303,  3303,  3306,  3306,  3306,  3306,  3306,  3306,  3306,  3306,
    3306,  3306,  3306,  3307,  3307,  3307,  3307,  3307,  3307,  3307,
    3307,  3307,  3307,  3308,  3308,  3312,  3316,  3323,  3327,  3334,
    3338,  3345,  3349,  3353,  3357,  3361,  3365,  3369,  3373,  3377,
    3381,  3385,  3389,  3393,  3397,  3401,  3405,  3409,  3413,  3417,
    3421,  3425,  3429,  3433,  3437,  3441,  3445,  3449,  3453,  3457,
    3461,  3465,  3469,  3473,  3477,  3481,  3485,  3489,  3493,  3497,
    3501,  3509,  3513,  3517,  3521,  3525,  3529,  3533,  3543,  3553,
    3559,  3565,  3571,  3577,  3583,  3589,  3595,  3602,  3609,  3616,
    3623,  3629,  3635,  3639,  3643,  3647,  3651,  3655,  3659,  3670,
    3681,  3685,  3689,  3693,  3697,  3701,  3705,  3709,  3713,  3717,
    3721,  3725,  3729,  3733,  3737,  3741,  3745,  3749,  3753,  3757,
    3761,  3765,  3769,  3773,  3777,  3781,  3785,  3789,  3793,  3797,
    3801,  3805,  3809,  3816,  3820,  3824,  3828,  3832,  3836,  3840,
    3844,  3848,  3854,  3860,  3864,  3871,  3879,  3883,  3887,  3891,
    3895,  3899,  3903,  3907,  3911,  3915,  3919,  3923,  3927,  3931,
    3935,  3939,  3943,  3957,  3961,  3965,  3969,  3973,  3977,  3981,
    3985,  3989,  3993,  3997,  4001,  4005,  4016,  4027,  4031,  4035,
    4039,  4043,  4047,  4051,  4055,  4059,  4063,  4067,  4071,  4075,
    4079,  4083,  4087,  4091,  4095,  4099,  4103,  4107,  4111,  4115,
    4119,  4123,  4127,  4131,  4135,  4139,  4143,  4147,  4154,  4158,
    4162,  4166,  4170,  4174,  4178,  4182,  4186,  4192,  4198,  4206,
    4210,  4214,  4218,  4225,  4235,  4241,  4247,  4257,  4269,  4277,
    4281,  4311,  4315,  4319,  4323,  4327,  4331,  4337,  4341,  4345,
    4349,  4353,  4364,  4368,  4372,  4376,  4384,  4388,  4392,  4398,
    4409
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "REAL", "INTEGER",
  "CHAR_TOK", "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL",
  "CUSTOM_LITERAL", "IDENTIFIER", "TYPENAME_IDENTIFIER",
  "TYPEPACK_IDENTIFIER", "SCOPING", "TYPEDEFNAME", "ELLIPSIS", "OROR",
  "ANDAND", "EQCOMPARE", "NECOMPARE", "LECOMPARE", "GECOMPARE",
  "SPACESHIP", "LSHIFT", "RSHIFT", "POINTSAT_STAR", "DOT_STAR", "UNARY",
  "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS", "UNARY_PLUS", "UNARY_STAR",
  "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS", "TIMESEQUAL",
  "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL", "OREQUAL",
  "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL", "ATTR_LEFT",
  "ATTR_RIGHT", "KW_ALIGNAS", "KW_ALIGNOF", "KW_AUTO", "KW_BEGIN_PUBLISH",
  "KW_BLOCKING", "KW_BOOL", "KW_CATCH", "KW_CHAR", "KW_CHAR8_T",
  "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS", "KW_CONST", "KW_CONSTEVAL",
  "KW_CONSTEXPR", "KW_CONSTINIT", "KW_CONST_CAST", "KW_DECLTYPE",
  "KW_DEFAULT", "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE",
  "KW_END_PUBLISH", "KW_ENUM", "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT",
  "KW_EXPLICIT_LPAREN", "KW_PUBLISHED", "KW_FALSE", "KW_FINAL", "KW_FLOAT",
  "KW_FRIEND", "KW_FOR", "KW_GOTO", "KW_HAS_VIRTUAL_DESTRUCTOR", "KW_IF",
  "KW_INLINE", "KW_INT", "KW_IS_ABSTRACT", "KW_IS_BASE_OF", "KW_IS_CLASS",
  "KW_IS_CONSTRUCTIBLE", "KW_IS_CONVERTIBLE_TO", "KW_IS_DESTRUCTIBLE",
  "KW_IS_EMPTY", "KW_IS_ENUM", "KW_IS_FINAL", "KW_IS_FUNDAMENTAL",
  "KW_IS_POD", "KW_IS_POLYMORPHIC", "KW_IS_STANDARD_LAYOUT",
  "KW_IS_TRIVIAL", "KW_IS_UNION", "KW_LONG", "KW_MAKE_MAP_KEYS_SEQ",
  "KW_MAKE_MAP_PROPERTY", "KW_MAKE_PROPERTY", "KW_MAKE_PROPERTY2",
  "KW_MAKE_SEQ", "KW_MAKE_SEQ_PROPERTY", "KW_MUTABLE", "KW_NAMESPACE",
  "KW_NEW", "KW_NOEXCEPT", "KW_NOEXCEPT_LPAREN", "KW_NULLPTR",
  "KW_OPERATOR", "KW_OVERRIDE", "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC",
  "KW_REGISTER", "KW_REINTERPRET_CAST", "KW_RETURN", "KW_SHORT",
  "KW_SIGNED", "KW_SIZEOF", "KW_STATIC", "KW_STATIC_ASSERT",
  "KW_STATIC_CAST", "KW_STRUCT", "KW_TEMPLATE", "KW_THREAD_LOCAL",
  "KW_THROW", "KW_TRUE", "KW_TRY", "KW_TYPEDEF", "KW_TYPEID",
  "KW_TYPENAME", "KW_UNDERLYING_TYPE", "KW_UNION", "KW_UNSIGNED",
  "KW_USING", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WCHAR_T",
  "KW_WHILE", "START_CPP", "START_CONST_EXPR", "START_TYPE", "'{'", "','",
  "';'", "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'",
  "'!'", "']'", "$accept", "grammar", "cpp", "$@1", "constructor_inits",
  "constructor_init", "extern_c", "$@2", "declaration",
  "friend_declaration", "$@3", "storage_class", "optional_attributes",
  "attribute_specifiers", "attribute_specifier", "type_like_declaration",
  "$@4", "$@5", "multiple_instance_identifiers", "typedef_declaration",
  "$@6", "typedef_instance_identifiers", "constructor_prototype", "$@7",
  "$@8", "$@9", "function_prototype", "$@10", "$@11", "$@12", "$@13",
  "$@14", "function_post", "function_operator",
  "more_template_declaration", "template_declaration", "$@15",
  "template_formal_parameters", "template_nonempty_formal_parameters",
  "typename_keyword", "template_formal_parameter",
  "template_formal_parameter_type", "instance_identifier", "$@16",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "maybe_comma_identifier",
  "function_parameter_list", "function_parameters",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "parameter_pack_identifier", "not_paren_empty_instance_identifier",
  "empty_instance_identifier", "type", "type_pack", "type_decl",
  "predefined_type", "var_type_decl", "full_type", "anonymous_struct",
  "$@17", "named_struct", "$@18", "maybe_final", "maybe_class_derivation",
  "class_derivation", "base_specification", "enum", "enum_decl",
  "enum_element_type", "enum_body_trailing_comma", "enum_body",
  "enum_keyword", "struct_keyword", "namespace_declaration", "$@19",
  "$@20", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@21", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-1067)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-776)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const yytype_int16 yypact[] =
{
       6, -1067,  4356,  6263,    39,    40, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067,   -62,  -119,  -103,   -79,   -69,   -64,
     -58,   -15,    23,    58, -1067, -1067,    76,    81,   126,   136,
     146,   149,   152,   154,   158,   169,   179,   196,   202,   230,
     244,   254,   268,   270,   274,  6525,  4356, -1067, -1067,   183,
     287,   307,  3228,   266, -1067,   311,   319,   336,  4356,  4356,
    4356,  4356,  4356,  2281,  1265,  4356,  3811, -1067,   155, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,  6381,   354,
   -1067,    12, -1067, -1067,  4560,  5184,  5184, -1067,  5572,   356,
   -1067,  5184, -1067, -1067,    88,    88, -1067, -1067, -1067, -1067,
     -56,   121,   121, -1067, -1067, -1067, -1067, -1067,  5832,   374,
     321, -1067,  4356,  4356,  6263,  4356,  4356,  4356,  4356,  4356,
    6263,  4356,  6263,  4356,  6263,  4356,  6263,  6263,  6263,  6263,
    6263,  6263,  6263,  6263,  6263,  6263,  6263,  6263,  6263,  6263,
    6263,  4356, -1067, -1067,   389,  5572,   390,   399,   121,   121,
   -1067,  5278,  6263,  4356,  4356,   410,  2281,    52,  6263,  2281,
    4356,  4356,    52,    52,    52,    52,    52,   -62,  -103,   -79,
     -69,   -64,   -58,    23,    76,   126,  5823,  5081,  6109,  6713,
     336,   343,   -89,  3811, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067,  5572,  5572,   -99,   393,
   -1067, -1067,    52,  4356,  4356,  4356,  4356,  4356,  4356,  4356,
    4356,  4356,  4356,  4356,  4356,  4356,  4356,  4356,  4356,  4356,
    4356,  4356,  4356,  4356,  5572,  3369,  4356, -1067, -1067,    88,
      88,  3510, -1067, -1067, -1067,  5184, -1067, -1067, -1067, -1067,
    6263, -1067,   400,   907,   121,    88,    88,   121,   121,   215,
     404, -1067,   416, -1067, -1067,   115,  1624,  5572,   533,   436,
     427,  2941, -1067,  6770,   431,   449, -1067,   433,   435,   445,
     455,   456,   470,   481,   493,   488,   503,   492,   496,   512,
     518,   514,   526,   -78,   522,   527,   531,   532,   535,   536,
     539,   542,   547,   548,   549,   550,  4356, -1067,  6263,  4356,
    5572,  5572, -1067,   517,   563,   565,  5572,   566,   581,   573,
    5299,   575,   577,  4356,  4356, -1067,   742, -1067,  1442,   587,
    4356, -1067, -1067,  5627,  5662,  1314,  1314,   925,   925,  1273,
     285,   285, -1067,  5590,  5817,  5834,  1595,   925,   925,   334,
     334,    52,    52,    52, -1067, -1067,   -75,  1693, -1067, -1067,
     586,  5318,   588,   121,   121,    70,   404, -1067,   404, -1067,
      70,    70, -1067,   121,   121,   121,  6171,   589,    27, -1067,
     591,  4356,  5572,   593, -1067, -1067, -1067, -1067, -1067,  1497,
     612,    87,   186,   218,   219, -1067, -1067, -1067,   613,   121,
    5572,  4959,   -62, -1067,   600,  5572,   601,   602, -1067, -1067,
   -1067,   121,   121, -1067,  5337, -1067,  6874,  6874,  6874,  6874,
    6874, -1067,  6874,  6007,  6874,  4356,   617, -1067,  5880,   603,
     607,   610,   623,   624,   625,  6874,    85,   627,   628,   641,
    6874,  6874,   629,  1044,  6874,  6874,  6693,  6874,  6874, -1067,
   -1067, -1067,  2428, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067,   630, -1067,   631, -1067,
   -1067, -1067, -1067,  6263, -1067,  6263, -1067,  6263, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,  5356,
     626,   634, -1067, -1067,   633, -1067, -1067,   636,  4497,   639,
   -1067, -1067, -1067, -1067,    52,  3811, -1067,  5572,   393,    56,
    4836, -1067,  3811,  4356, -1067, -1067, -1067, -1067, -1067,    70,
     643,   645,  5572,   121,    70,    70,   121,   121,   646, -1067,
     646,   646,    70,    70,    70,  6289,   121,   743,   632, -1067,
   -1067,    60,   637,  3811, -1067,   121, -1067, -1067, -1067, -1067,
    1497, -1067,   736,  5572, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067,   648,   658,   660, -1067, -1067,  6525, -1067, -1067,
     665,  1240,   666, -1067,   662,  4356,  4356,  4356,  4356,  2281,
    4356,   661,    35, -1067, -1067,  4093, -1067,   155,   663,  3651,
   -1067,  6263,   121,  1809,  1624,   121,  6014,  6874, -1067, -1067,
   -1067, -1067, -1067, -1067,  6874, -1067, -1067, -1067,  5375, -1067,
    6770,  4594, -1067,  5572,  5572,  5572,  5572,  5572,  5572, -1067,
   -1067,  5572, -1067, -1067, -1067, -1067, -1067,  4356, -1067,  5105,
   -1067,   669, -1067,  5145, -1067,  5572,  5572,    19, -1067, -1067,
     460,   664,  6407, -1067,  5572, -1067,   484,   689, -1067,  4356,
    4356,   673,   674,   675, -1067, -1067, -1067,  4356, -1067,  4356,
   -1067,   678, -1067, -1067, -1067, -1067, -1067, -1067,  4356, -1067,
     681, -1067, -1067,   822,  3811,   646,   121,   121,    70,   646,
     646,    70,    70,  4356,    83,   165,   212,  6381,   743,   632,
   -1067,   691,   121,   743,   743,   121,   121,   743,   -38,   121,
   -1067,   693,  5572,   121,   632,   632,   121,   121,   632,    13,
    4836, -1067, -1067,   121,   -98,   708,    16, -1067,   707, -1067,
     815,  6263,  6263,  6263,   695,  6263,   699,  2281,    55,  6263,
    2281,    52,    52,    52,    52,   701,   -74,    52, -1067, -1067,
    4983,  4356,  4356,  4356,  4356,  4356,  4356,  4356,  4356,  4356,
    4356,  4356,  4356,  4356,  4356,  4356,  4356,  4356,  4356,  4356,
    4356,  4356,  5572,  3792,  4356,   705,  5394,   709, -1067, -1067,
     716, -1067, -1067, -1067,  6874, -1067, -1067,   727,   729,   731,
     732,   733,   738,   739,    22,   728,  2960,  6053,   489,   723,
     484, -1067, -1067,   740,   744, -1067,   741, -1067,    31,  6617,
     718, -1067,   726,   479, -1067, -1067,  3087, -1067, -1067,   545,
     -11,    -9, -1067, -1067, -1067,   151,   159, -1067,  5552,   843,
    6499,   747, -1067,    70, -1067,   646,   646,   646,   737,   734,
     735,   745,   743,   632,   -38,    13,   121,   743,   748,   748,
     743,   743,   221,  4356, -1067, -1067,   121,   121,   632,   750,
     750,   632,   632,   289,  4356, -1067,   822,   751, -1067,  4356,
   -1067,  5069,   749,   754, -1067,   121,   753,   752,   764,  4356,
     765,  5572,   756,   768,   759,  5571,  4356, -1067, -1067, -1067,
    5627,  5662,  1314,  1314,   925,   925,  1273,   285,   285, -1067,
    5609,  5817,  5834,  1595,   925,   925,   334,   334,    52,    52,
      52, -1067, -1067,   174,  1900, -1067, -1067, -1067,  1497, -1067,
      98, -1067,   893,   902,   923,   926,   927,   930, -1067, -1067,
     273,   786, -1067, -1067, -1067, -1067,  6145, -1067,   779,   789,
    4695, -1067,   730, -1067, -1067,    48, -1067,   545, -1067, -1067,
    6263,    56,   781,   792,   545,    56,   718,   795,   121,   718,
     718,   121,   121,   314,   121, -1067,   101, -1067, -1067, -1067,
    5572,   425, -1067,   790, -1067,   800,   811,  3933,  3247,   803,
     121,   545,  2075,   545,   121,   121,   545, -1067,   102,   495,
     121, -1067, -1067, -1067, -1067,  4836, -1067, -1067,    20,  6525,
      88, -1067,   646,   121,    56,    56,    56,   -38,    13, -1067,
   -1067,   743,   748,   748,   748,   802,   798,   632, -1067,   750,
     750,   750,   805,   801, -1067,  3529,  6139,  6375,  6611,  5572,
     257, -1067, -1067,   956, -1067,  5069, -1067, -1067,   807,   809,
     808,   824,   820,  4497,   825, -1067, -1067,    52,  4356, -1067,
   -1067,   708, -1067, -1067,   828,   209,   845,   846,   850,   852,
   -1067,    43, -1067,   730,  6847,  6053,  5572,   840,   842,   121,
     730,   730,   121,   121,   730,    89,   750, -1067,   495,   854,
     839,   844,   545,   502,   851,   348,   121,   718,   858,   858,
     718,   718, -1067,  4356, -1067, -1067,    56,   849,   383, -1067,
      97,   878,   882, -1067,  2757, -1067, -1067, -1067,  3933,   864,
     886,  3811, -1067, -1067,   121,   545,   382,  1031, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067,   871,   869, -1067,   121,   382,
     545,   545,   524,  4356, -1067,  4356, -1067,  3087,   894, -1067,
   -1067,   822,   874, -1067,    88, -1067,   877, -1067,   879,   883,
     885, -1067, -1067,   748,    56,   121,   750,    56,   121, -1067,
    6626, -1067,  6626, -1067,  6626, -1067, -1067,  6626,  6626,  6626,
   -1067,   298, -1067,  4356,  4356, -1067,  4356, -1067,  4356,  3811,
     301,  1049,  1050,   906,  1052,   891, -1067,  1055,  1057,  1058,
     305,   916,    89,   750, -1067, -1067, -1067, -1067, -1067, -1067,
    6263,   121,   730,   730,   730,  4740, -1067, -1067,   919, -1067,
   -1067, -1067, -1067,   546,   903, -1067, -1067,   718,   858,   858,
     858,    56,   900,   904, -1067, -1067,  5572,  4356,  4356, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067, -1067, -1067, -1067, -1067, -1067,   908, -1067,
    4074,   545,   382,   121, -1067, -1067, -1067,   382,   382, -1067,
    3811,  4959,   905,  3247,   545,   931, -1067, -1067, -1067, -1067,
   -1067, -1067,   910, -1067,   912, -1067, -1067, -1067, -1067, -1067,
   -1067, -1067, -1067,   226,   248,   262,   265, -1067,   921,   286,
   -1067,   946,   947,   337,   928,   342, -1067, -1067, -1067, -1067,
     730,   932,   942,   943,   948,  4638,   949,  4740,  4740,  4740,
    4740,  4740,  2281,  4740,  4375, -1067,   545,  4836,    56,   941,
   -1067,  4836,    56,   858,   940,   121, -1067,   944, -1067,   951,
     960,  2583, -1067,  3933,  3811,   382, -1067,   961,   121, -1067,
   -1067,  4836,  4836,  4836, -1067, -1067, -1067, -1067, -1067, -1067,
     959,  1105,   962,  1106, -1067,  1119,   980,   981,  1128,   986,
    6263,  6263,  6263,  6263,   971,  2281,   132,  6263,   132,   132,
     132,   132,   132,   970,   345,   132,  4740,  4740,  4740,  4740,
    4740,  4740,  4740,  4740,  4740,  4740,  4740,  4740,  4740,  4740,
    4740,  4740,  4740,  4740,  4740,  5572,  4215,  4356, -1067, -1067,
     972, -1067,    56, -1067,   973, -1067, -1067,  4836, -1067, -1067,
    1132, -1067,   974, -1067, -1067,   975,   822,   822,   822,  4836,
    4836, -1067,   998, -1067,   982,  1000, -1067, -1067,   379, -1067,
     984,   995,   996,   997,  5572,   991,  1002,  4740, -1067,  5645,
    5851,  2514,  2514,  1814,  1814,  1498,   299,   299, -1067,  2139,
    5868,  5885,  1714,   376,   376,   132,   132,   132, -1067, -1067,
     395,  2303, -1067,    56,   999, -1067,  1197, -1067, -1067, -1067,
    4836, -1067, -1067, -1067, -1067, -1067, -1067,  1158,  1001,  1014,
    1160,  1165,  1021, -1067,  1006,  1008,  1010,  1009,  4842,  1013,
     132,  4740, -1067, -1067,  4836,  1012, -1067,  1197, -1067, -1067,
    1038, -1067,  1024,   405, -1067,  4356,  4356,  4356, -1067,  4356,
    4375, -1067, -1067,  4836, -1067,  1039,  1176,  1043,   411,   421,
     423,   429,  4836,   822, -1067,  1026, -1067, -1067, -1067, -1067,
   -1067,   822, -1067,  1045, -1067, -1067
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       0,   780,     0,     0,     0,   780,     5,   667,   663,   666,
     776,   777,   669,   670,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   665,   671,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   673,   672,     0,
       0,     0,     0,     0,   664,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   780,     0,     3,   601,   668,   305,
     316,   315,   396,   397,   399,   400,   401,   380,     0,     0,
     412,   377,   411,   406,   403,   402,   405,   381,     0,     0,
     382,   404,   414,   398,   780,   780,     4,   307,   308,   309,
       0,   780,   780,   304,   393,   394,   395,     1,     0,     0,
       7,    63,   780,   780,     0,   780,   780,   780,   780,   780,
       0,   780,     0,   780,     0,   780,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   780,   331,   337,     0,     0,     0,   626,   780,   780,
     330,     0,     0,   780,   780,     0,     0,   623,     0,     0,
     780,   780,   635,   633,   632,   634,   631,   305,   396,   397,
     399,   400,   401,   412,   411,   406,   403,   402,   405,   404,
     398,     0,     0,   559,   761,   762,   763,   771,   764,   767,
     765,   769,   768,   766,   770,   750,   751,     0,     0,   780,
     756,   749,   630,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   778,   779,   780,
     780,     0,   378,   379,   413,   403,   408,   407,   410,   306,
       0,   409,     0,   291,   780,   780,   780,   780,   780,   780,
       0,   340,   290,   342,   780,   366,     0,     0,     0,    68,
      70,     0,     6,   780,     0,   558,   557,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   332,     0,   780,
       0,     0,   659,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   662,   754,   757,     0,   780,
       0,   752,   220,   644,   645,   646,   647,   648,   649,   650,
     653,   654,   661,     0,   641,   642,   643,   651,   652,   639,
     640,   636,   637,   638,   660,   658,     0,     0,   341,   343,
       0,     0,     0,   780,   780,   780,     0,   293,     0,   294,
     780,   780,   205,   780,   780,   780,     0,     0,   206,   209,
      63,   780,   374,     0,   371,   772,   773,   774,   775,     0,
     368,   761,   762,   763,   765,   344,   310,   346,     0,   780,
       0,   780,   318,   329,     0,     0,     0,     0,   320,   321,
     322,   780,   780,   317,     0,    22,   780,   780,   780,   780,
     780,    23,   780,   780,   780,     0,     0,    43,   780,     0,
       0,     0,     0,     0,     0,   780,   780,     0,     0,     0,
     780,   780,     0,   780,   780,   780,     0,   780,   780,    18,
       8,    20,     0,    16,    17,    19,    78,    45,   608,   607,
     625,   615,   610,   612,   613,   614,     0,   621,     0,   620,
     676,   609,   677,     0,   679,     0,   680,     0,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   617,     0,
       0,     0,   334,   333,     0,   616,   619,     0,   622,     0,
     628,   629,   618,   611,   602,   560,   755,     0,   780,   780,
     780,   103,   221,     0,   657,   656,   313,   312,   314,   780,
     292,     0,   281,   780,   780,   780,   780,   780,   297,   280,
     296,   295,   780,   780,   780,     0,   780,   780,     0,   780,
     208,   780,     0,   556,   555,   780,   364,   370,   365,   369,
       0,   780,   780,     0,    64,    69,   742,   738,   741,   744,
     745,   212,     0,     0,     0,   740,   746,     0,   748,   747,
       0,     0,     0,   739,     0,     0,     0,     0,     0,     0,
       0,     0,   213,   247,   216,   248,   693,   743,    63,     0,
     319,     0,   780,   366,     0,   780,   780,   780,    60,    46,
      57,    58,    59,    61,   780,    47,   160,    52,     0,    24,
     780,     0,    50,     0,     0,     0,     0,     0,     0,    56,
     780,     0,    27,    26,    25,    54,    49,     0,   164,     0,
     163,     0,    62,     0,    21,     0,     0,   780,    51,    55,
     339,   318,     0,    14,     0,    75,     0,   338,    72,     0,
       0,     0,     0,     0,   335,   336,   627,     0,   624,     0,
     753,     0,   111,   104,   113,   108,   112,   106,     0,   109,
       0,   105,   110,   780,   655,   298,   780,   780,   780,   283,
     284,   780,   780,   780,     0,     0,     0,     0,   780,     0,
     246,     0,   780,   780,   780,   780,   780,   780,   780,   780,
     258,     0,   269,   780,     0,     0,   780,   780,     0,   780,
     780,   207,   210,   780,   375,   311,   780,   349,   780,   348,
       0,     0,     0,     0,   703,     0,     0,     0,   700,     0,
       0,   711,   710,   709,   708,     0,     0,   707,    71,   215,
     780,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    67,   325,
     368,   323,    66,    48,   780,    44,   780,     0,     0,     0,
       0,     0,     0,     0,   780,     0,     0,   780,   339,   318,
       0,   338,    81,     0,     0,   389,     0,    86,    90,     0,
     780,   780,     0,     0,   415,   227,     0,    77,    74,     0,
       0,     0,   678,   681,   682,     0,     0,   780,     0,     0,
       0,     0,   199,   780,   282,   287,   286,   285,     0,     0,
       0,     0,   780,     0,   780,   780,   780,   780,   260,   261,
     780,   780,     0,   780,   240,   259,   780,   780,     0,   271,
     272,     0,     0,     0,   780,   243,   780,   299,   372,     0,
     345,     0,     0,   351,   350,   780,     0,     0,     0,   780,
       0,     0,     0,     0,     0,     0,     0,   737,   214,   217,
     720,   721,   722,   723,   724,   725,   726,   729,   730,   736,
       0,   717,   718,   719,   727,   728,   715,   716,   712,   713,
     714,   735,   734,     0,     0,   327,   326,   328,     0,    53,
     780,   385,     0,     0,     0,     0,     0,     0,   387,   383,
       0,     0,   181,   182,   183,   169,     0,   170,     0,   166,
     171,   167,   780,   180,   165,     0,    83,     0,   392,   391,
       0,   780,     0,     0,     0,   780,   780,     0,   780,   780,
     780,   780,   780,     0,   780,   249,   780,    92,   415,   222,
       0,     0,    76,     0,   780,     0,     0,   780,     0,     0,
     780,     0,     0,     0,   780,   780,     0,    73,   780,   780,
     780,   605,   604,   606,   603,   780,   107,   114,     0,     0,
     780,   415,   288,   780,   780,   780,   780,   780,   780,   241,
     244,   780,   264,   263,   262,   268,     0,     0,   270,   275,
     274,   273,   279,     0,   300,   376,   769,     0,   768,     0,
       0,   352,   354,   758,   780,     0,    65,   702,     0,     0,
       0,     0,     0,   699,     0,   705,   706,   694,     0,   733,
     732,   324,   388,   780,     0,     0,   780,     0,     0,     0,
     780,     0,    42,   780,   780,     0,   174,   172,     0,   780,
     780,   780,   780,   780,   780,   780,   178,    82,   780,     0,
       0,     0,     0,     0,     0,     0,   780,   780,   251,   252,
     780,   780,    98,   780,   250,    15,   780,     0,     0,     9,
       0,     0,     0,   228,   416,   417,   230,   231,   780,     0,
     234,   236,   233,   229,   780,     0,   187,     0,   127,   128,
     129,   130,   131,   132,   135,   136,   137,   152,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     156,   155,   139,   138,   124,   126,   125,   133,   134,   122,
     123,   119,   120,   121,   118,     0,     0,   117,   780,   188,
       0,     0,     0,     0,   195,   780,   197,     0,     0,    79,
     184,   780,     0,   115,   780,   200,     0,   289,     0,     0,
       0,   242,   245,   265,   780,   780,   276,   780,   780,   373,
       0,   357,     0,   356,     0,   355,   759,     0,     0,     0,
     760,   780,   353,     0,     0,   704,     0,   701,     0,   731,
     780,     0,     0,     0,     0,     0,   202,     0,     0,     0,
     780,     0,   780,   179,   159,   157,   162,   158,   168,   175,
       0,   780,   780,   780,   780,     0,   176,   218,     0,    84,
     390,   780,    88,     0,     0,   780,   100,   780,   255,   254,
     253,   780,     0,     0,   223,   415,     0,   780,   780,   225,
     226,   419,   420,   424,   421,   429,   422,   423,   425,   426,
     427,   428,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   504,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   780,   548,   549,   550,   541,   553,
     537,   538,   536,   543,   544,   532,   533,   534,   535,   542,
     540,   547,   545,   551,   546,   539,   552,   418,     0,   232,
     235,     0,   191,   780,   154,   153,   185,   190,   189,   194,
     198,   780,     0,   221,     0,     0,   116,   201,   674,   780,
     780,   780,     0,   266,     0,   277,   363,   362,   361,   360,
     359,   358,   347,     0,     0,     0,     0,   386,     0,     0,
      34,   203,     0,     0,     0,     0,   384,    41,   177,   173,
     780,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   219,   561,     0,   780,   780,     0,
      94,   780,   780,   256,     0,   780,   780,     0,    10,     0,
       0,     0,   237,   780,   238,   192,   186,     0,   780,    80,
     415,   780,   780,   780,   780,   780,   697,   696,   698,   695,
       0,     0,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   568,     0,   576,   574,
     573,   575,   572,     0,     0,   571,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    85,    87,
       0,    96,   780,    91,     0,   780,   257,   780,   224,    13,
      11,   554,     0,   780,   193,     0,   780,   780,   780,   780,
     780,    37,   780,    35,     0,     0,    38,    40,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,   600,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   599,     0,
     582,   583,   584,   580,   581,   577,   578,   579,   598,   597,
       0,     0,   780,   780,     0,   780,    99,    93,    12,   239,
     780,   675,   303,   302,   301,   267,   278,     0,     0,     0,
       0,     0,     0,   570,     0,     0,     0,     0,   567,     0,
     562,     0,   596,   595,   780,     0,   780,   101,   196,   203,
       0,    29,     0,     0,    31,     0,     0,     0,   569,     0,
     594,    89,   780,   780,    36,     0,     0,     0,     0,     0,
       0,     0,   780,   780,    39,     0,    32,   565,   564,   566,
     563,   780,    95,     0,    97,    33
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1067, -1067,  -400, -1067, -1067,   -34, -1067, -1067,   604,  -418,
   -1067,  -230,   325,  -357, -1067,  -414, -1067, -1067,  -191, -1067,
   -1067,  -241, -1067, -1067, -1067, -1067,   584, -1067, -1067, -1067,
   -1067, -1067,  -455, -1067, -1067,  -406, -1067, -1067, -1067, -1067,
     163,   293,  -697, -1067,  -907,  -845,  -342,  -454, -1067,  -176,
   -1067,    14,  -377, -1067,  -748, -1066, -1067,  -389,   491,  -858,
    -427,  -480,  -188,   -91,   -65,   -57,  -234,  -533,   595,   156,
    -236, -1067,  -231, -1067, -1067, -1067, -1067,   208,  -201, -1067,
    -512, -1067, -1067,   -22,   -19, -1067, -1067, -1067, -1067,   -28,
     -48, -1067, -1067,  -919, -1067,  -127, -1067,  -642,  -107,   -60,
     507,  1468,   391,   667, -1067, -1067,   911,  -519,  1499,   256,
    -386,    -1
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,     4,     5,   263,  1078,  1079,   439,   791,   440,   441,
     600,   442,   366,   258,   259,   443,   799,   793,   967,   624,
     927,  1057,   635,   931,  1448,   935,   636,  1076,  1532,  1593,
    1231,  1452,   500,  1138,  1206,   444,   621,   918,   919,   920,
     921,   922,   968,  1391,   969,   811,  1195,   367,   368,   571,
     572,  1216,   321,   952,   797,  1089,  1090,   369,   574,   943,
     828,   839,   250,   251,    94,    95,   637,   147,   638,    96,
      97,   541,    98,   542,   708,   852,   853,  1011,    99,   100,
     538,   372,   373,   101,   102,   445,  1040,  1033,   446,   103,
     104,   105,   106,   953,   954,  1084,  1377,   532,   264,   265,
    1620,   183,    67,   575,   576,   198,   199,  1012,  1013,   689,
      68,   111
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       6,  1004,   573,   182,   253,   577,   267,   596,   269,   270,
     271,   272,   273,   229,   275,   618,   277,   150,   279,   620,
    1058,   230,  1378,   148,   714,   398,   149,   397,   705,  1077,
     399,   818,   926,   545,   295,  1152,   236,   237,   238,   107,
      -2,   932,   530,   241,   933,   651,   304,   305,   699,   227,
     729,   228,   114,   311,   312,   318,   848,   356,   358,   849,
     400,   933,  1156,   201,   108,   314,   109,   108,   115,   109,
     108,   362,   109,   232,   700,   701,   465,   319,  1065,   314,
     314,  1068,  1069,   511,   315,   512,   212,   513,   108,   740,
     109,   112,   116,   252,   252,   466,   182,   254,   504,   867,
     688,   242,   117,   243,   108,   244,   109,   118,   108,   113,
     109,   266,   266,   119,   266,   266,   266,   266,   266,   320,
     266,   650,   266,  1146,   266,   375,   376,   377,   236,   237,
     238,   241,   514,   108,   833,   109,   810,   680,   348,   349,
     266,   706,   702,   314,   233,   314,   108,   120,   109,   108,
     245,   109,   266,   266,   357,   359,     1,     2,     3,   266,
     266,   227,   971,   228,   972,   346,  1515,   518,  -772,   108,
     320,   109,   520,   521,   785,   577,   588,   589,   590,   591,
     592,   531,   593,   595,   597,   844,   710,   236,   602,   730,
     850,   996,   481,  1153,   121,   609,   908,   934,   322,   825,
     615,   616,  1003,   619,   622,   623,   398,   628,   629,  1228,
     774,   399,  1229,  1230,   934,   840,  1201,   515,   843,   181,
     122,  1149,   224,   225,   226,   752,   753,   754,   252,   252,
     362,   516,   363,   403,   378,   246,   517,  1063,   610,   401,
    -772,   400,   402,  -772,   252,   252,  1215,   123,   370,   247,
    1237,   824,   124,   374,   248,   673,   819,   829,  1143,   249,
     832,   833,   447,   108,  1096,   109,  1139,  -773,  1238,  1142,
     268,   379,  1032,  1144,  1145,  1075,   274,   980,   276,    10,
     278,    11,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   125,   266,  -774,
    -775,   527,  1525,  1526,  1527,   314,  1395,   126,   303,   528,
    1219,   834,   307,   314,   308,   309,  1457,   127,   501,   212,
     128,   665,   845,   129,   973,   130,   669,   670,   314,   131,
     110,   539,   974,  1515,   674,   675,   676,   673,   820,  -773,
     132,   573,  -773,   988,   577,   152,   108,  1029,   109,   108,
     133,   109,   975,   108,   519,   109,   595,   602,   999,   519,
     519,  1000,  1001,  1192,   763,  1223,   900,   134,   212,  1453,
     534,  -774,  -775,   135,  -774,  -775,   364,  1177,  1178,  1179,
     314,   365,  1193,   398,   673,   821,  1031,   398,   399,   781,
     578,   946,   399,   833,   995,   987,   352,  1542,  1382,  1476,
     992,   136,   314,   993,   994,   447,   447,   447,   447,   447,
    1515,   447,   447,   447,   403,   137,   314,   447,   400,   314,
     401,  1477,   400,   402,   447,   138,   255,   256,   158,   447,
     447,  1232,   447,   447,   447,  1478,   447,   447,  1479,   139,
    1481,   140,  1056,  1387,  1388,   141,  1154,   989,   990,   219,
     220,   221,   222,   223,   480,   224,   225,   226,   153,  1482,
     678,   844,  1002,  1520,  1521,  1522,  1523,  1524,   679,  1525,
    1526,  1527,  1412,   300,   301,  1417,   262,  1060,   154,  1426,
     815,  1064,   159,   816,   817,  1072,  1073,  1171,  1173,  1175,
     160,  1485,   539,  1081,  1082,  1055,  1488,   322,   370,   314,
     221,   222,   223,  1392,   224,   225,   226,   161,   519,   726,
    1486,   380,   387,   519,   519,  1489,   313,  1166,  1568,  1226,
    1073,   519,   519,   519,  1041,   231,   690,   240,   501,   150,
    1158,  1159,  1160,  1611,   899,   148,  1235,  1236,   149,  1058,
       6,   709,  1522,  1523,  1524,   261,  1525,  1526,  1527,   314,
     320,  1545,  1612,  1144,  1145,   375,   376,   377,   959,  1646,
     296,   298,   960,  1203,  1163,   314,   353,   790,  1622,   355,
     299,   840,   360,   361,   843,   314,   371,   314,  1647,   800,
     801,   306,   389,   314,  1657,   447,   447,   805,  -280,   806,
     390,   403,  1148,   447,  1658,   403,  1659,   401,   391,   447,
     402,   401,  1660,   314,   402,   448,   449,   961,   450,     6,
    1161,  1162,   822,  -102,  1181,  -102,  1202,  -102,   451,   641,
     823,   642,  1233,   643,   829,   982,  1204,   832,   452,   453,
    1205,   787,   948,  1190,   949,   950,   951,   794,  1207,   795,
    1200,   796,  -102,   454,  -102,   691,  -102,   692,   794,   693,
     795,  1406,  1147,  1407,   455,  1408,   456,   726,  1409,  1410,
    1411,   457,   812,   962,   378,   459,   458,   519,   463,   460,
     519,   519,   534,  1144,  1145,  1224,   467,   690,   509,   510,
     484,  1218,   690,   690,  1465,   461,   690,   322,   522,   523,
     524,   462,   963,   893,   694,  1144,  1145,  1389,   322,   464,
     468,  1602,  1603,  1604,   469,   470,   964,   854,   471,   472,
    1402,   965,   473,  1404,   544,   474,   966,  1144,  1145,  1449,
     475,   476,   477,   478,   936,   725,   583,   584,   375,   376,
     377,   937,   999,  1000,  1001,   938,   485,   757,   486,   488,
     375,   376,   377,  1048,   489,   692,   490,  1049,   492,   923,
     493,   611,  1020,   375,   376,   377,   681,   496,   499,   506,
     682,   508,   529,   447,  -204,     6,  1447,   536,   540,   543,
    1451,   579,   581,   599,   603,   582,   924,  1454,   604,   695,
     939,   605,   150,   612,   613,   992,   993,   994,   148,   945,
       6,   149,  1050,   696,   606,   607,   608,   614,   697,   645,
     617,   639,   640,   698,   647,   683,   501,   646,  1662,   648,
     649,   666,   519,   703,   619,  -282,  1664,   707,   673,   711,
     712,   690,   713,   322,   322,   663,   690,   715,   719,   690,
     690,   777,   534,   720,   728,   788,  -211,   378,   668,   760,
     387,   671,   672,   534,   798,   812,   802,   803,   804,   378,
     539,   807,   809,   184,   185,   186,   810,   826,   266,   836,
     704,  -367,   378,   851,   855,   940,   859,   856,   857,   858,
     861,   860,   898,   862,   866,   863,   864,  1051,   895,   941,
     901,   909,   897,   902,   942,   903,   904,   905,   923,  1155,
     684,  1052,   906,   907,   925,   928,  1053,   947,   930,   929,
     981,  1054,  1014,  1034,   685,   984,   985,   758,  1015,   686,
     762,   187,  1035,   983,   687,  1018,   986,   184,   185,   186,
     833,   690,   844,  -289,   188,   189,  1017,  1019,  1021,  1023,
     370,  1024,  1025,  1036,   370,   945,  1037,  1038,   945,   945,
    1039,  1042,  1044,  1045,  1471,  1472,  1473,   209,   210,   211,
    1166,   150,   786,  1085,  1061,  1086,  1092,   148,  1062,   212,
     149,  1066,   190,   191,  1083,   192,  1087,   812,   322,  1094,
     193,  1180,   194,  1164,  1165,   187,  1167,  1168,  1183,   252,
    1184,  1185,  1191,   370,   370,   370,   322,   322,   188,   189,
     690,   813,   814,  1187,  1530,  1186,  1188,  1210,  1534,  1194,
    1197,  1537,   573,  1163,  1198,   577,  1199,   827,  1211,  1220,
     830,   831,  1221,     6,   835,  1222,   977,   923,   838,  1549,
    1550,   841,   842,  1234,  1225,   846,   190,   191,   847,   192,
    1073,   110,     6,  1239,   193,  1196,   194,  1240,  1379,     6,
    1380,  1383,   690,   447,  1384,  1385,   944,  1396,  1394,   690,
     690,  1398,  1399,   690,  1217,   970,  1400,   322,  1401,  1418,
    1419,  1420,  1421,  1397,  1422,  1423,   945,  1424,  1425,   945,
     945,  1427,   534,  1446,  1450,   370,  1455,  1456,  1594,  -281,
    1596,  1468,  1462,  1474,  1470,  1475,  1059,  1092,  1600,   219,
     220,   221,   222,   223,  1480,   224,   225,   226,   406,   110,
    1483,  1487,  1484,  1490,  1491,  1492,   407,   408,   409,   410,
    1493,  1497,  1531,  1535,  1551,  1552,  1554,  1553,  1538,   412,
     586,   414,   415,  1413,  1414,  1539,  1415,   417,  1416,  1555,
    1459,  1460,   587,  1540,  1543,  1556,  1557,  1624,  1558,  1625,
    1627,  1559,  1564,  1567,   534,  1592,  1595,  1598,  1599,  1601,
     812,   991,  1607,   252,  1610,  1609,   425,  1613,  1614,  1615,
    1616,   997,   998,   370,  1618,  1619,   370,   430,  1629,  1631,
    1632,  1643,  1626,   431,  1630,  1633,  1634,  1635,   434,  1636,
    1016,  1637,  1638,   970,  1639,  1642,  1655,  1652,   436,   437,
     970,   438,   944,  1644,  1654,   944,   944,  1645,  1656,  1663,
    1665,  1217,  1458,  1469,   765,  1528,  -161,   780,  1208,  1043,
    1608,   690,   690,   690,   652,  1467,  1428,   970,   782,   970,
     501,   869,   970,  1182,   501,   110,   945,  1461,   718,   498,
     370,     0,     0,     0,     0,     0,   266,   266,     0,     0,
       0,     0,     0,   546,   547,   548,    10,     0,    11,   549,
     550,     0,     0,     0,     0,   716,     0,     0,     0,   653,
       0,   654,     0,  1067,     0,     0,  1070,  1071,     0,  1074,
       0,   110,     0,     0,     0,   184,   185,   186,   655,     0,
       0,     0,     0,     0,     0,  1095,     0,     0,     0,  1140,
    1141,   552,     0,     0,     0,  1150,   210,   211,     0,     0,
    1151,     0,     0,     0,     0,     0,   553,   212,  1157,   656,
       0,   554,   657,   658,     0,     0,   659,     0,   970,     0,
     555,   556,     0,   944,     0,     0,   944,   944,     0,     0,
       0,     0,   660,   187,   207,   208,   209,   210,   211,     0,
       0,     0,     0,     0,   661,     0,   188,   189,   212,     0,
       0,   970,     0,  1085,   557,     0,     0,   558,   662,   559,
       0,     0,     0,     0,   560,     0,  1429,     0,   561,     0,
       0,   562,     0,     0,  1212,     0,   563,  1213,  1214,   564,
       0,     0,  1504,     0,   190,   191,     0,   192,     0,     0,
     578,  1227,   193,     0,   194,     0,   970,   970,   501,   501,
     501,   565,     0,     0,   566,   567,     0,     0,     0,   568,
       0,   717,     0,     0,     0,   570,     0,     0,     0,  1381,
       0,     0,   195,     0,     0,     0,   196,     0,     0,   690,
       0,   197,     0,     0,     0,  1504,     0,   219,   220,   221,
     222,   223,     0,   224,   225,   226,     0,   370,     0,     0,
       0,   370,   184,   185,   186,   501,     0,     0,     0,     0,
       0,     0,  1092,  1386,     0,     0,  1590,     0,     0,     0,
      66,     0,     0,   501,   501,     0,   217,   218,   219,   220,
     221,   222,   223,   944,   224,   225,   226,     0,     0,     0,
    1403,     0,     0,  1405,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,     0,   537,     0,
     187,     0,     0,     0,   151,   110,     0,     0,     0,     0,
     157,  1513,  1514,   188,   189,   110,   162,   163,   164,   165,
     166,   370,  1515,   202,   501,     0,  1430,     0,     0,     0,
       0,     0,   501,     0,     0,   812,   812,   812,     0,     0,
       0,  1196,    72,     0,    73,    74,    75,    76,     0,     0,
       0,   190,   191,   200,   192,     0,     0,     0,     0,   193,
       0,   194,     0,     0,     0,  1648,  1649,  1650,     0,  1651,
       0,     0,     0,     0,     0,     0,    83,   239,     0,     0,
       0,   501,   370,     0,   501,     0,     0,     0,  1503,     0,
       0,     0,   235,   497,     0,     0,  1445,   260,   197,     0,
       0,     0,     0,   205,   206,   207,   208,   209,   210,   211,
       0,     0,     0,    85,    86,   501,     0,   310,     0,   212,
       0,     0,     0,     0,   381,   382,   383,   970,     0,     0,
      91,   501,     0,     0,   297,    93,  1560,  1561,  1562,  1563,
     970,  1565,   812,  1566,     0,     0,     0,     0,     0,     0,
     812,     0,  1520,  1521,  1522,  1523,  1524,     0,  1525,  1526,
    1527,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   187,     0,   347,   316,   317,     0,     0,   351,
       0,     0,   970,     0,     0,   188,   189,     0,  1466,   203,
     204,   205,   206,   207,   208,   209,   210,   211,     0,     0,
       0,     0,  1444,   344,     0,     0,     0,   212,     0,   404,
       0,     0,  1508,  1509,  1510,  1511,  1512,  1513,  1514,     0,
       0,     0,   354,   384,   191,     0,   192,     0,  1515,     0,
       0,   193,     0,   194,     0,   386,   388,   217,   218,   219,
     220,   221,   222,   223,   479,   224,   225,   226,     0,     0,
       0,     0,  1529,     0,     0,     0,  1533,   385,     0,     0,
    1536,   494,   495,     0,     0,     0,     0,     0,   502,     0,
       0,     0,     0,  1544,     0,     0,  1546,  1547,  1548,   482,
     483,     0,     0,     0,     0,   487,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   200,     0,   381,
     382,   383,     0,     0,     0,     0,  1445,     0,  1445,  1445,
    1445,  1445,  1445,     0,  1445,     0,  1512,  1513,  1514,   533,
       0,     0,     0,     0,     0,     0,     0,     0,  1515,     0,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,  1597,   224,   225,   226,     0,     0,     0,   505,
       0,   535,     0,     0,  1605,  1606,     0,   187,  1520,  1521,
    1522,  1523,  1524,   598,  1525,  1526,  1527,     0,     0,   260,
     188,   189,     0,     0,   580,     0,     0,  1445,  1445,  1445,
    1445,  1445,  1445,  1445,  1445,  1445,  1445,  1445,  1445,  1445,
    1445,  1445,  1445,  1445,  1445,  1445,   203,   204,   205,   206,
     207,   208,   209,   210,   211,  1628,     0,     0,   384,   191,
       0,   192,     0,     0,   212,   627,   193,     0,   194,     0,
       0,     0,  1496,     0,  1498,  1499,  1500,  1501,  1502,  1641,
    1505,     0,     0,     0,     0,     0,   494,     0,  1445,     0,
       0,     0,     0,     0,     0,   379,     0,     0,  1653,     0,
       0,   664,     0,     0,     0,     0,     0,  1661,  1520,  1521,
    1522,  1523,  1524,     0,  1525,  1526,  1527,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1445,
       0,   667,  1445,  1569,  1570,  1571,  1572,  1573,  1574,  1575,
    1576,  1577,  1578,  1579,  1580,  1581,  1582,  1583,  1584,  1585,
    1586,  1587,     0,   721,   722,   723,   724,     0,   727,     0,
       0,     0,   260,     0,     0,     0,     0,   756,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,     0,     0,     0,  1030,     0,     0,     0,
       0,  1097,   759,   761,     0,   776,     0,     0,     0,     0,
       0,  1098,  1099,  1100,  1101,  1102,  1103,  1104,  1105,  1106,
     767,     0,   768,   769,   770,   771,   772,   773,     0,  1107,
     775,  1108,  1109,  1110,  1111,  1112,  1113,  1114,  1115,  1116,
    1117,  1118,  1119,     0,   783,   784,   808,     0,  1640,     0,
       0,     0,     0,   792,     0,     0,     0,     0,     0,     0,
       0,   533,     0,     0,  1120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1506,  1507,  1508,  1509,  1510,
    1511,  1512,  1513,  1514,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1515,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   865,  1121,
       0,   837,     0,     0,     0,     0,     0,     0,     0,   870,
     871,   872,   873,   874,   875,   876,   877,   878,   879,   880,
     881,   882,   883,   884,   885,   886,   887,   888,   889,   890,
       0,     0,   894,     0,     0,     0,     0,     0,     0,  1122,
       0,     0,  1123,     0,  1124,  1125,  1126,  1127,  1128,  1129,
    1130,  1131,  1132,  1133,  1134,     0,  1135,  1136,     0,     0,
    1137,   891,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   958,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     8,     9,    10,     0,    11,
      12,    13,   167,    70,     0,  1621,     0,  1516,  1517,  1518,
    1519,   533,     0,  1520,  1521,  1522,  1523,  1524,   978,  1525,
    1526,  1527,   533,     0,     0,     0,     0,  1005,     0,   203,
     204,   205,   206,   207,   208,   209,   210,   211,     0,     0,
       0,     0,    15,    71,  1027,     0,   168,   212,   169,   170,
     171,   172,    77,    78,     0,     0,     0,    21,    79,     0,
       0,   173,    23,     0,     0,    81,     0,     0,     0,     0,
    1022,    24,    25,   174,     0,     0,     0,    27,     0,     0,
     175,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,   176,     0,     0,     0,
       0,     0,     0,     0,     0,    45,     0,    46,    47,     0,
      48,     0,     0,     0,     0,    49,     0,   177,   178,    52,
       0,     0,    53,    87,     0,     0,     0,    54,     0,  1047,
      55,    88,    89,    90,   179,  1091,     0,    92,     0,   180,
       0,     0,     0,     0,     0,     0,     0,     0,   630,   631,
       0,     0,    58,     0,     0,    59,    60,    61,     0,  1080,
      62,     0,    63,    64,     0,     0,    65,     0,     0,     0,
       0,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,     0,   224,   225,   226,     0,     0,     0,  1623,
     393,     0,     0,    72,     0,    73,    74,    75,    76,    77,
       0,  1027,     0,     0,     0,   394,  1189,     0,    80,     0,
       0,     0,    81,     0,     0,     0,     0,     0,  1176,     0,
      82,     0,     0,     0,     0,     0,     0,    83,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    84,  1510,  1511,  1512,  1513,  1514,     0,
       0,   533,     0,     0,     0,  1209,   632,     0,  1515,     0,
       0,     0,     0,     0,    85,    86,  1091,     0,     0,     0,
      87,     0,     0,     0,     0,     0,     0,     0,   395,   396,
      90,    91,     0,     0,    92,     0,    93,     0,     0,     0,
       0,   633,     0,     0,     0,     0,  1241,  1242,  1243,  1244,
    1245,  1246,  1247,  1248,  1249,  1250,  1251,   634,  1252,  1253,
    1254,  1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,
       0,  1390,     0,   533,     0,  1393,     0,  1264,  1265,  1266,
    1267,  1268,  1269,  1270,  1271,  1272,  1273,  1274,  1275,  1276,
    1277,  1278,  1279,  1280,  1281,  1282,     0,     0,  1283,  1284,
    1285,  1286,  1287,  1288,  1289,  1290,  1291,  1292,  1293,  1294,
    1295,  1296,  1297,  1298,  1299,  1300,     0,  1301,     0,  1302,
    1303,  1304,  1305,  1306,  1307,  1308,  1309,  1310,  1311,     0,
    1312,  1313,  1314,     0,     0,     0,     0,     0,  1520,  1521,
    1522,  1523,  1524,     0,  1525,  1526,  1527,     0,  1315,     0,
       0,     0,     0,     0,     0,  1316,  1317,  1318,  1319,  1320,
    1321,  1322,  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,
    1331,  1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,  1340,
    1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,  1350,
    1351,  1352,  1353,     0,     0,  1080,  1354,  1355,  1356,  1357,
    1358,  1359,  1360,  1361,  1362,  1363,  1364,  1365,  1366,  1367,
    1368,  1369,  1370,  1371,  1372,  1373,  1374,  1541,  1375,  1376,
    1241,  1242,  1243,  1244,  1245,  1246,  1247,  1248,  1249,  1250,
    1251,     0,  1252,  1253,  1254,  1255,  1256,  1257,  1258,  1259,
    1260,  1261,  1262,  1263,     0,     0,     0,     0,     0,     0,
       0,  1264,  1265,  1266,  1267,  1268,  1269,  1270,  1271,  1272,
    1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,  1281,  1282,
       0,     0,  1283,  1284,  1285,  1286,  1287,  1288,  1289,  1290,
    1291,  1292,  1293,  1294,  1295,  1296,  1297,  1298,  1299,  1300,
       0,  1301,     0,  1302,  1303,  1304,  1305,  1306,  1307,  1308,
    1309,  1310,  1311,     0,  1312,  1313,  1314,     0,  1464,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1315,     0,     0,     0,     0,     0,     0,  1316,
    1317,  1318,  1319,  1320,  1321,  1322,  1323,  1324,  1325,  1326,
    1327,  1328,  1329,  1330,  1331,  1332,  1333,  1334,  1335,  1336,
    1337,  1338,  1339,  1340,  1341,  1342,  1343,  1344,  1345,  1346,
    1347,  1348,  1349,  1350,  1351,  1352,  1353,     0,     0,     0,
    1354,  1355,  1356,  1357,  1358,  1359,  1360,  1361,  1362,  1363,
    1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,  1372,  1373,
    1374,  1091,  1375,  1376,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     8,     9,    10,     0,    11,
      12,    13,   392,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   203,   204,   205,   206,
     207,   208,   209,   210,   211,     0,     0,     0,     0,     0,
       0,     0,    15,   393,   212,  1591,   168,     0,   169,   170,
     171,   172,    77,     0,     0,     0,     0,    21,   394,     0,
       0,   173,    23,     0,     0,    81,     0,     0,     0,     0,
       0,    24,    25,   174,  1588,     0,     0,    27,     0,     0,
     175,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,   176,     0,     0,     0,
       0,     0,     0,     0,     0,    45,     0,    46,    47,     0,
      48,     0,     0,  1617,     0,    49,     0,   177,   178,    52,
       0,     0,    53,    87,     0,     0,     0,    54,     0,     0,
      55,   395,   396,    90,   179,     0,     0,    92,     0,   180,
       7,     8,     9,    10,     0,    11,    12,    13,    14,     0,
       0,     0,    58,     0,     0,    59,    60,    61,     0,     0,
      62,     0,    63,    64,   910,     0,    65,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,   911,     0,     0,     0,     0,    15,     0,
       0,     0,    16,     0,    17,    18,    19,    20,     0,     0,
       0,     0,     0,    21,     0,   955,   956,    22,    23,     0,
       0,     0,     0,     0,     0,     0,     0,    24,    25,    26,
       0,     0,     0,    27,     0,     0,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,     0,     0,     0,     0,     0,     0,     0,
       0,    45,     0,    46,    47,     0,    48,     0,     0,     0,
       0,    49,     0,    50,    51,    52,     0,     0,    53,     0,
       0,     0,     0,    54,     0,     0,    55,     0,     0,     0,
      56,     7,     8,     9,    10,    57,    11,    12,    13,    14,
     957,     0,     0,   155,     0,     0,     0,     0,    58,     0,
       0,    59,    60,    61,     0,     0,    62,     0,    63,    64,
       0,     0,    65,   203,   204,   205,   206,   207,   208,   209,
     210,   211,     0,     0,     0,     0,     0,     0,     0,    15,
       0,   212,     0,    16,     0,    17,    18,    19,    20,     0,
       0,     0,     0,     0,    21,     0,     0,     0,    22,    23,
       0,     0,     0,     0,     0,     0,     0,     0,    24,    25,
      26,     0,     0,     0,    27,     0,     0,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,     0,     0,     0,     0,     0,     0,
       0,     0,    45,     0,    46,    47,     0,    48,     0,     0,
       0,     0,    49,     0,    50,    51,    52,     0,     0,    53,
       0,     0,     0,     0,    54,     0,     0,    55,     0,     0,
       0,    56,     7,     8,     9,    10,    57,    11,    12,    13,
      14,     0,     0,     0,     0,     0,     0,     0,     0,    58,
       0,     0,    59,    60,    61,     0,     0,    62,     0,   156,
      64,     0,  1093,    65,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
      15,     0,     0,     0,    16,     0,    17,    18,    19,    20,
       0,     0,     0,     0,     0,    21,     0,     0,     0,    22,
      23,     0,     0,     0,     0,     0,     0,     0,     0,    24,
      25,    26,     0,     0,     0,    27,     0,     0,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,     0,     0,     0,     0,     0,
       0,     0,     0,    45,     0,    46,    47,     0,    48,     0,
       0,     0,     0,    49,     0,    50,    51,    52,     0,     0,
      53,     0,     0,     0,     0,    54,     0,     0,    55,     0,
       0,     0,    56,     7,     8,     9,    10,    57,    11,    12,
      13,    14,     0,     0,     0,     0,     0,     0,     0,     0,
      58,     0,     0,    59,    60,    61,     0,     0,    62,     0,
      63,    64,   345,     0,    65,   203,   204,   205,   206,   207,
     208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
       0,    15,   350,   212,     0,    16,     0,    17,    18,    19,
      20,     0,     0,     0,     0,     0,    21,     0,     0,     0,
      22,    23,     0,     0,     0,     0,     0,     0,     0,     0,
      24,    25,    26,     0,     0,     0,    27,     0,     0,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,    46,    47,     0,    48,
       0,     0,     0,     0,    49,     0,    50,    51,    52,     0,
       0,    53,     0,     0,     0,     0,    54,     0,     0,    55,
       0,     0,     0,    56,     7,     8,     9,    10,    57,    11,
      12,    13,    14,     0,     0,     0,     0,     0,     0,     0,
       0,    58,     0,     0,    59,    60,    61,     0,     0,    62,
       0,    63,    64,  1169,     0,    65,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,    15,   755,     0,     0,    16,     0,    17,    18,
      19,    20,     0,     0,     0,     0,     0,    21,     0,     0,
       0,    22,    23,     0,     0,     0,     0,     0,     0,     0,
       0,    24,    25,    26,     0,     0,     0,    27,     0,     0,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,     0,     0,     0,
       0,     0,     0,     0,     0,    45,     0,    46,    47,     0,
      48,     0,     0,     0,     0,    49,     0,    50,    51,    52,
       0,     0,    53,     0,     0,     0,     0,    54,     0,     0,
      55,     0,     0,     0,    56,     7,     8,     9,    10,    57,
      11,    12,    13,    14,     0,     0,     0,     0,     0,     0,
       0,     0,    58,     0,     0,    59,    60,    61,     0,     0,
      62,     0,    63,    64,     0,     0,    65,   203,   204,   205,
     206,   207,   208,   209,   210,   211,     0,     0,     0,     0,
       0,     0,     0,    15,     0,   212,     0,    16,     0,    17,
      18,    19,    20,     0,     0,     0,     0,     0,    21,     0,
       0,     0,    22,    23,     0,     0,     0,     0,     0,     0,
       0,     0,    24,    25,    26,     0,     0,     0,    27,     0,
       0,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,     0,     0,
       0,     0,     0,     0,     0,     0,    45,     0,    46,    47,
       0,    48,     0,     0,     0,     0,    49,     0,    50,    51,
      52,     0,     0,    53,     0,     0,     0,     0,    54,     0,
       0,    55,     0,     0,     0,    56,     7,     8,     9,    10,
      57,    11,    12,    13,    14,     0,     0,     0,     0,     0,
       0,     0,     0,    58,     0,     0,    59,    60,    61,     0,
       0,    62,     0,    63,    64,   892,     0,    65,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,    15,     0,     0,     0,    16,     0,
      17,    18,    19,    20,     0,     0,     0,     0,     0,    21,
       0,     0,     0,    22,    23,     0,     0,     0,     0,     0,
       0,     0,     0,    24,    25,    26,     0,     0,     0,    27,
       0,     0,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,     0,
       0,     0,     0,     0,     0,     0,     0,    45,     0,    46,
      47,     0,    48,     0,     0,     0,     0,    49,     0,    50,
      51,    52,     0,     0,    53,     0,     0,     0,     0,    54,
       0,     0,    55,     0,     0,     0,    56,     7,     8,     9,
      10,    57,    11,    12,    13,    14,  1088,     0,     0,     0,
       0,     0,     0,     0,    58,     0,     0,    59,    60,    61,
       0,     0,    62,     0,    63,    64,     0,     0,    65,   731,
     732,   733,   734,   735,   736,   737,   738,   739,     0,     0,
       0,     0,     0,     0,     0,    15,     0,   740,     0,    16,
       0,    17,    18,    19,    20,     0,     0,     0,     0,     0,
      21,     0,     0,     0,    22,    23,     0,     0,     0,     0,
       0,     0,     0,     0,    24,    25,    26,     0,     0,     0,
      27,     0,     0,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
       0,     0,     0,     0,     0,     0,     0,     0,    45,     0,
      46,    47,     0,    48,     0,     0,     0,     0,    49,     0,
      50,    51,    52,     0,     0,    53,     0,     0,     0,     0,
      54,     0,     0,    55,     0,     0,     0,    56,     7,     8,
       9,    10,    57,    11,    12,    13,    14,  1463,     0,     0,
       0,     0,     0,     0,     0,    58,     0,     0,    59,    60,
      61,     0,     0,    62,     0,    63,    64,     0,     0,    65,
       0,   741,   742,   743,   744,   745,   746,   747,   748,   749,
     750,   751,     0,   752,   753,   754,    15,     0,     0,     0,
      16,     0,    17,    18,    19,    20,     0,     0,     0,     0,
       0,    21,     0,     0,     0,    22,    23,     0,     0,     0,
       0,     0,     0,     0,     0,    24,    25,    26,     0,     0,
       0,    27,     0,     0,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,     0,     0,     0,     0,     0,     0,     0,     0,    45,
       0,    46,    47,     0,    48,     0,     0,     0,     0,    49,
       0,    50,    51,    52,     0,     0,    53,     0,     0,     0,
       0,    54,     0,     0,    55,     0,     0,     0,    56,     7,
       8,     9,    10,    57,    11,    12,    13,    14,     0,     0,
       0,     0,     0,     0,     0,     0,    58,     0,     0,    59,
      60,    61,     0,     0,    62,     0,    63,    64,  1589,     0,
      65,  1506,  1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,
       0,     0,     0,     0,     0,     0,     0,    15,     0,  1515,
       0,    16,     0,    17,    18,    19,    20,     0,     0,     0,
       0,     0,    21,     0,     0,     0,    22,    23,     0,     0,
       0,     0,     0,     0,     0,     0,    24,    25,    26,     0,
       0,     0,    27,     0,     0,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
      45,     0,    46,    47,     0,    48,     0,     0,     0,     0,
      49,     0,    50,    51,    52,     0,     0,    53,     0,     0,
       0,     0,    54,     0,     0,    55,     0,     0,     0,    56,
       7,     8,     9,    10,    57,    11,    12,    13,    14,     0,
       0,     0,     0,     0,     0,     0,     0,    58,     0,     0,
      59,    60,    61,     0,     0,    62,     0,    63,    64,     0,
       0,    65,     0,  1516,  1517,  1518,  1519,     0,     0,  1520,
    1521,  1522,  1523,  1524,     0,  1525,  1526,  1527,    15,     0,
       0,     0,    16,     0,    17,    18,    19,    20,     0,     0,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
       0,     0,     0,     0,     0,     0,     0,    24,    25,    26,
       0,     0,     0,    27,     0,     0,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,     0,   184,   185,   186,     0,     0,     0,
       0,    45,     0,    46,    47,    72,    48,    73,    74,    75,
      76,    49,     0,    50,    51,    52,     0,     0,    53,     0,
     234,     0,     0,    54,     0,     0,    55,     0,     0,     0,
      56,     7,     8,     9,    10,    57,    11,    12,    13,    83,
       0,     0,     0,  1494,     0,     0,     0,     0,     0,     0,
       0,     0,   187,     0,     0,   235,    62,     0,    63,    64,
       0,     0,    65,     0,     0,   188,   189,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    85,    86,     0,  1431,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    91,  1432,   184,   185,   186,    93,  1433,
    1046,     0,     0,   190,   191,     0,   192,     0,    24,    25,
       0,   193,     0,   194,    27,     0,     0,     0,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,     7,     8,     9,    10,   766,    11,    12,
      13,     0,     0,     0,     0,    47,     0,    48,     0,     0,
       0,     0,  1434,   187,     0,     0,  1435,     0,     0,  1436,
       0,     0,     0,     0,    54,     0,   188,   189,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1431,     0,     0,     0,     0,     0,     0,     0,  1437,
       0,     0,  1438,  1439,  1440,     0,  1432,  1441,     0,  1495,
      64,  1433,     0,  1443,   190,   191,     0,   192,     0,     0,
      24,    25,   193,     0,   194,     0,    27,     0,     0,     0,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,     7,     8,     9,    10,     0,
      11,    12,    13,   652,     0,     0,     0,    47,     0,    48,
       0,     0,     0,     0,  1434,     0,     0,     0,  1435,     0,
       0,  1436,     0,     0,     0,     0,    54,     0,     0,     0,
       0,     0,     0,     0,   108,     0,   109,     0,     0,     0,
       0,     0,     0,  1431,     0,     0,     0,     0,   653,     0,
     654,  1437,     0,     0,  1438,  1439,  1440,     0,  1432,  1441,
       0,  1442,    64,  1433,     0,  1443,     0,   655,     0,     0,
       0,     0,    24,    25,     0,     0,     0,     0,    27,     0,
       0,     0,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,     0,   656,     0,
       0,   657,   658,     0,     0,   659,     0,     0,     0,    47,
       0,    48,   546,   547,   548,    10,  1434,    11,   549,   550,
    1435,   660,     0,  1436,   551,     0,     0,     0,    54,     0,
       0,     0,     0,   661,     0,     0,   546,   547,   548,    10,
       0,    11,   549,   550,     0,     0,     0,   662,   868,     0,
       0,     0,     0,     0,     0,     0,     0,   108,     0,   109,
     552,  1441,     0,  1442,    64,     0,     0,  1443,     0,     0,
       0,     0,     0,     0,     0,   553,     0,     0,     0,     0,
     554,   108,     0,   109,   552,     0,     0,     0,     0,   555,
     556,     0,     0,     0,     0,     0,     0,     0,     0,   553,
       0,     0,     0,     0,   554,     0,     0,     0,     0,     0,
       0,     0,     0,   555,   556,     0,     0,     0,     0,     0,
       0,     0,     0,   557,     0,     0,   558,     0,   559,   184,
     185,   186,     0,   560,     0,     0,     0,   561,     0,     0,
     562,     0,     0,     0,     0,   563,     0,   557,   564,     0,
     558,     0,   559,     0,     0,     0,     0,   560,     0,     0,
       0,   561,     0,     0,   562,   630,   631,     0,     0,   563,
     565,     0,   564,   566,   567,     0,     0,     0,   568,     0,
     569,     0,     0,     0,   570,     0,    72,   187,    73,    74,
      75,    76,     0,     0,   565,     0,     0,   566,   567,     0,
     188,   189,   568,     0,   569,   778,   779,   393,   570,     0,
      72,     0,    73,    74,    75,    76,    77,     0,     0,     0,
      83,     0,   394,     0,     0,    80,     0,     0,     0,    81,
       0,     0,     0,     0,     0,     0,   235,    82,   190,  1006,
    1007,  1008,     0,     0,    83,     0,   193,   393,   194,     0,
      72,     0,    73,    74,    75,    76,    77,    85,    86,  1009,
      84,     0,   394,     0,  1010,    80,     0,     0,     0,    81,
       0,     0,     0,   632,    91,     0,     0,    82,     0,    93,
       0,    85,    86,     0,    83,     0,     0,    87,     0,    72,
       0,    73,    74,    75,    76,   395,   396,    90,    91,     0,
      84,    92,   153,    93,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   632,     0,     0,     0,     0,     0,     0,
       0,    85,    86,    83,   634,     0,     0,    87,     0,     0,
       0,     0,     0,     0,     0,   395,   396,    90,    91,   235,
       0,    92,     0,    93,   203,   204,   205,   206,   207,   208,
     209,   210,   211,     0,     0,     0,     0,     0,     0,     0,
      85,    86,   212,     0,   634,   203,   204,   205,   206,   207,
     208,   209,   210,   211,     0,     0,     0,    91,     0,     0,
       0,     0,    93,   212,   203,   204,   205,   206,   207,   208,
     209,   210,   211,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   212,   203,   204,   205,   206,   207,   208,   209,
     210,   211,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   212,   203,   204,   205,   206,   207,   208,   209,   210,
     211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     212,   203,   204,   205,   206,   207,   208,   209,   210,   211,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   212,
     203,   204,   205,   206,   207,   208,   209,   210,   211,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   212,     0,
       0,     0,     0,     0,     0,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   302,     0,     0,     0,     0,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,   491,     0,     0,     0,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,     0,   224,   225,
     226,   507,     0,     0,     0,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
     585,     0,     0,     0,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,     0,   224,   225,   226,   644,
       0,     0,     0,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,     0,   224,   225,   226,   764,     0,
       0,     0,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     0,   224,   225,   226,   896,   203,   204,
     205,   206,   207,   208,   209,   210,   211,     0,     0,     0,
       0,     0,   184,   185,   186,     0,   212,   203,   204,   205,
     206,   207,   208,   209,   210,   211,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   212,   203,   204,   205,   206,
     207,   208,   209,   210,   211,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   212,   203,   204,   205,   206,   207,
     208,   209,   210,   211,     0,     0,     0,     0,     0,     0,
     187,     0,     0,   212,   204,   205,   206,   207,   208,   209,
     210,   211,     0,   188,   189,     0,     0,     0,     0,     0,
       0,   212,  1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1515,
     205,   206,   207,   208,   209,   210,   211,     0,     0,     0,
       0,   190,   191,     0,   192,     0,   212,     0,     0,   193,
       0,   194,     0,     0,     0,     0,     0,     0,     0,     0,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   976,     0,     0,     0,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
       0,   224,   225,   226,  1026,     0,   503,     0,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     224,   225,   226,     0,     0,  1028,     0,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,     0,   224,
     225,   226,     0,     0,     0,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
       0,     0,     0,     0,  1517,  1518,  1519,     0,     0,  1520,
    1521,  1522,  1523,  1524,     0,  1525,  1526,  1527,     0,     0,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,     0,   224,   225,   226,   205,   206,   207,   208,   209,
     210,   211,   184,   185,   186,     0,     0,     0,     0,     0,
       0,   212,   205,   206,   207,   208,   209,   210,   211,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   212,  1508,
    1509,  1510,  1511,  1512,  1513,  1514,     0,     0,    72,     0,
      73,    74,    75,    76,     0,  1515,  1508,  1509,  1510,  1511,
    1512,  1513,  1514,   234,     0,     0,     0,     0,     0,     0,
     187,     0,  1515,  1508,  1509,  1510,  1511,  1512,  1513,  1514,
       0,     0,    83,   188,   189,     0,     0,     0,     0,  1515,
       0,     0,     0,     0,     0,     0,     0,     0,   235,     0,
       0,     0,     0,     0,   406,     0,     0,     0,     0,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,    85,
      86,   190,   191,     0,   192,   412,   586,   414,   415,   193,
       0,   194,     0,     0,     0,     0,    91,     0,   587,     0,
       0,    93,     0,     0,     0,     0,   257,   215,   216,   217,
     218,   219,   220,   221,   222,   223,     0,   224,   225,   226,
       0,     0,   425,   601,   141,   216,   217,   218,   219,   220,
     221,   222,   223,   430,   224,   225,   226,     0,     0,   431,
    1517,  1518,  1519,   594,   434,  1520,  1521,  1522,  1523,  1524,
     594,  1525,  1526,  1527,     0,   437,     0,   438,  1518,  1519,
       0,     0,  1520,  1521,  1522,  1523,  1524,     0,  1525,  1526,
    1527,     0,     0,     0,     0,     0,  1519,     0,     0,  1520,
    1521,  1522,  1523,  1524,     0,  1525,  1526,  1527,     0,     0,
       0,   406,     0,   912,   913,   914,     0,     0,   406,   407,
     408,   409,   410,     0,     0,     0,   407,   408,   409,   410,
       0,     0,   412,   413,   414,   415,     0,     0,     0,   412,
     586,   414,   415,     0,     0,   587,     0,     0,     0,     0,
       0,     0,   587,     0,     0,     0,     0,     0,    72,     0,
      73,    74,    75,    76,   915,   916,     0,     0,     0,   425,
       0,     0,     0,    80,     0,     0,   425,     0,     0,     0,
     430,     0,     0,     0,     0,    82,   431,   430,     0,     0,
     433,   434,    83,   431,     0,     0,     0,     0,   434,   184,
     185,   186,   437,     0,   438,   912,   913,   914,    84,   437,
       0,   438,     0,     0,    72,     0,    73,    74,    75,    76,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    85,
      86,     0,    69,    70,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   917,     0,     0,    91,     0,    83,    92,
      72,    93,    73,    74,    75,    76,     0,   187,     0,     0,
       0,     0,     0,     0,   235,    80,     0,     0,     0,     0,
     188,   189,     0,    71,     0,     0,    72,    82,    73,    74,
      75,    76,    77,   525,    83,    85,    86,     0,    79,     0,
       0,    80,     0,     0,     0,    81,     0,     0,     0,     0,
      84,     0,    91,    82,     0,     0,     0,    93,   190,   191,
      83,   192,     0,     0,     0,     0,   193,     0,   194,     0,
       0,    85,    86,     0,    69,    70,    84,     0,     0,  1009,
     154,     0,     0,     0,  1170,     0,     0,     0,    91,     0,
       0,    92,     0,    93,   526,     0,     0,    85,    86,     0,
      69,    70,     0,    87,     0,     0,     0,     0,     0,     0,
       0,    88,    89,    90,    91,    71,     0,    92,    72,    93,
      73,    74,    75,    76,    77,    78,     0,     0,     0,     0,
      79,     0,     0,    80,     0,     0,     0,    81,     0,     0,
       0,    71,     0,     0,    72,    82,    73,    74,    75,    76,
      77,     0,    83,     0,     0,     0,    79,     0,     0,    80,
       0,     0,     0,    81,     0,     0,     0,     0,    84,     0,
       0,    82,     0,     0,     0,     0,     0,     0,    83,     0,
       0,     0,     0,     0,     0,   184,   185,   186,     0,    85,
      86,     0,    69,    70,    84,    87,     0,     0,     0,     0,
       0,     0,     0,    88,    89,    90,    91,     0,     0,    92,
       0,    93,   677,     0,     0,    85,    86,     0,    69,     0,
       0,    87,     0,     0,     0,     0,     0,     0,     0,    88,
      89,    90,    91,    71,     0,    92,    72,    93,    73,    74,
      75,    76,    77,   187,     0,     0,     0,     0,    79,     0,
       0,    80,     0,     0,     0,    81,   188,   189,     0,    71,
       0,     0,    72,    82,    73,    74,    75,    76,    77,   789,
      83,     0,     0,     0,    79,     0,     0,    80,     0,     0,
       0,    81,     0,     0,     0,     0,    84,     0,     0,    82,
       0,     0,     0,     0,   190,   191,    83,   192,     0,     0,
       0,     0,   193,     0,   194,     0,     0,    85,    86,     0,
     142,     0,    84,    87,     0,  1009,     0,     0,     0,     0,
    1172,    88,    89,    90,    91,     0,     0,    92,     0,    93,
       0,     0,     0,    85,    86,     0,   142,     0,     0,    87,
       0,     0,     0,     0,     0,     0,     0,    88,    89,    90,
      91,   143,     0,    92,    72,    93,    73,    74,    75,    76,
      77,   979,     0,     0,     0,     0,   144,     0,     0,    80,
       0,     0,     0,    81,     0,     0,     0,   143,     0,     0,
      72,    82,    73,    74,    75,    76,    77,     0,    83,     0,
       0,     0,   144,     0,     0,    80,     0,     0,     0,    81,
       0,     0,     0,     0,    84,     0,     0,    82,     0,     0,
       0,     0,     0,     0,    83,     0,     0,     0,     0,     0,
       0,   184,   185,   186,     0,    85,    86,     0,    69,     0,
      84,    87,     0,     0,     0,     0,   184,   185,   186,   145,
     146,    90,    91,     0,     0,    92,     0,    93,     0,     0,
       0,    85,    86,     0,     0,     0,     0,    87,     0,     0,
       0,     0,     0,     0,     0,   145,   146,    90,    91,    71,
       0,    92,    72,    93,    73,    74,    75,    76,    77,   187,
       0,     0,     0,     0,    79,     0,     0,    80,     0,     0,
       0,    81,   188,   189,   187,     0,     0,     0,     0,    82,
       0,     0,     0,   184,   185,   186,    83,   188,   189,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    84,     0,     0,     0,     0,     0,     0,     0,
     190,   191,     0,   192,     0,     0,     0,     0,   193,     0,
     194,     0,     0,    85,    86,   190,   191,     0,   192,    87,
       0,  1009,     0,   193,     0,   194,  1174,    88,    89,    90,
      91,   187,     0,    92,     0,    93,  1009,   625,    72,     0,
      73,    74,    75,    76,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    83,     0,     0,     0,   626,     0,     0,     0,
       0,     0,   190,   191,     0,   192,     0,     0,   235,     0,
     193,     0,   194,   405,   406,     0,     0,     0,     0,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,    85,
      86,     0,     0,   411,     0,   412,   413,   414,   415,   416,
       0,     0,     0,   417,     0,     0,    91,     0,   418,     0,
       0,    93,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   160,     0,     0,     0,     0,     0,
     427,   428,   429,   430,     0,     0,     0,     0,     0,   431,
     432,   406,     0,   433,   434,     0,     0,     0,   435,   407,
     408,   409,   410,     0,   436,   437,     0,   438,     0,     0,
       0,     0,   412,   413,   414,   415,     0,     0,   406,     0,
     417,     0,     0,     0,     0,   587,   407,   408,   409,   410,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   412,
     586,   414,   415,     0,     0,     0,     0,     0,     0,   425,
       0,     0,   587,     0,     0,     0,     0,     0,     0,     0,
     430,     0,     0,     0,     0,     0,   431,     0,     0,     0,
     433,   434,     0,     0,     0,     0,   425,     0,     0,     0,
       0,   436,   437,     0,   438,     0,     0,   430,     0,     0,
       0,     0,     0,   431,     0,     0,     0,     0,   434,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   437,
       0,   438
};

static const yytype_int16 yycheck[] =
{
       1,   846,   391,    63,    95,   391,   113,   413,   115,   116,
     117,   118,   119,    78,   121,   433,   123,    45,   125,   433,
     927,    78,  1088,    45,   557,   261,    45,   261,   540,   948,
     261,   673,   780,   390,   141,    15,    84,    85,    86,     0,
       0,    10,    15,    91,    13,   499,   153,   154,   528,     6,
      15,     8,   171,   160,   161,   154,   154,   245,   246,   157,
     261,    13,   981,    64,    48,   154,    50,    48,   171,    50,
      48,    15,    50,    61,   529,    15,   154,   176,   936,   154,
     154,   939,   940,    13,   173,    15,    34,    17,    48,    34,
      50,   153,   171,    94,    95,   173,   156,   153,   173,   173,
     527,    13,   171,    15,    48,    17,    50,   171,    48,   171,
      50,   112,   113,   171,   115,   116,   117,   118,   119,   157,
     121,   498,   123,   968,   125,    10,    11,    12,   176,   177,
     178,   179,    62,    48,   172,    50,    34,   526,   229,   230,
     141,   541,   531,   154,   132,   154,    48,   162,    50,    48,
      62,    50,   153,   154,   245,   246,   150,   151,   152,   160,
     161,     6,   173,     8,   173,   225,    34,   355,    81,    48,
     157,    50,   360,   361,   155,   561,   406,   407,   408,   409,
     410,   154,   412,   413,   414,   172,   543,   235,   418,   154,
     174,   833,   299,   173,   171,   425,   174,   166,   199,   679,
     430,   431,   844,   433,   434,   435,   442,   437,   438,  1067,
     610,   442,  1070,  1071,   166,   695,   173,   147,   698,    63,
     162,   969,   170,   171,   172,   170,   171,   172,   229,   230,
      15,   161,    17,   261,   119,   147,   166,   934,   153,   261,
     153,   442,   261,   156,   245,   246,   157,   171,   249,   161,
     153,   678,   171,   254,   166,   172,   173,   684,   156,   171,
     687,   172,   263,    48,   961,    50,   963,    81,   171,   966,
     114,   156,   174,   171,   172,   174,   120,   810,   122,     6,
     124,     8,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   171,   299,    81,
      81,   366,   170,   171,   172,   154,  1151,   171,   152,   366,
    1058,   688,   156,   154,   158,   159,  1235,   171,   319,    34,
     171,   509,   699,   171,   173,   171,   514,   515,   154,   171,
       5,   379,   173,    34,   522,   523,   524,   172,   173,   153,
     171,   730,   156,   823,   730,   162,    48,   173,    50,    48,
     171,    50,   807,    48,   355,    50,   586,   587,   838,   360,
     361,   841,   842,   154,   594,  1062,   766,   171,    34,  1227,
     371,   153,   153,   171,   156,   156,   161,   120,   121,   122,
     154,   166,   173,   619,   172,   173,   898,   623,   619,   623,
     391,   791,   623,   172,   173,   822,   240,  1463,  1095,   173,
     827,   171,   154,   830,   831,   406,   407,   408,   409,   410,
      34,   412,   413,   414,   442,   171,   154,   418,   619,   154,
     442,   173,   623,   442,   425,   171,   101,   102,   162,   430,
     431,  1073,   433,   434,   435,   173,   437,   438,   173,   171,
     154,   171,   922,  1140,  1141,   171,   979,   824,   825,   164,
     165,   166,   167,   168,   298,   170,   171,   172,   171,   173,
     525,   172,   173,   164,   165,   166,   167,   168,   525,   170,
     171,   172,   174,   148,   149,   174,   155,   931,   171,   174,
     668,   935,   171,   671,   672,   171,   172,  1006,  1007,  1008,
     171,   154,   540,    68,    69,   922,   154,   498,   499,   154,
     166,   167,   168,  1145,   170,   171,   172,   171,   509,   569,
     173,   255,   256,   514,   515,   173,   173,   997,   173,   171,
     172,   522,   523,   524,   910,   171,   527,   171,   529,   557,
     984,   985,   986,   154,   764,   557,   153,   154,   557,  1446,
     541,   542,   166,   167,   168,   171,   170,   171,   172,   154,
     157,  1470,   173,   171,   172,    10,    11,    12,    13,   154,
     171,   171,    17,  1043,   991,   154,   166,   632,   173,   244,
     171,  1051,   247,   248,  1054,   154,   172,   154,   173,   639,
     640,   171,    49,   154,   173,   586,   587,   647,   172,   649,
     154,   619,   969,   594,   173,   623,   173,   619,   171,   600,
     619,   623,   173,   154,   623,   174,   173,    62,   173,   610,
     987,   988,   677,   153,  1014,   155,  1043,   157,   173,   463,
     677,   465,  1076,   467,  1051,   813,  1044,  1054,   173,   173,
    1044,   171,   153,  1033,   155,   156,   157,   153,  1044,   155,
    1040,   157,   153,   173,   155,    13,   157,    15,   153,    17,
     155,  1170,   157,  1172,   173,  1174,   163,   717,  1177,  1178,
    1179,   173,   663,   118,   119,   173,   163,   668,   154,   173,
     671,   672,   673,   171,   172,   173,   154,   678,   353,   354,
     163,  1058,   683,   684,  1381,   173,   687,   688,   363,   364,
     365,   173,   147,   753,    62,   171,   172,   173,   699,   173,
     173,  1546,  1547,  1548,   173,   173,   161,   708,   173,   173,
    1164,   166,   173,  1167,   389,   173,   171,   171,   172,   173,
     173,   173,   173,   173,   789,   569,   401,   402,    10,    11,
      12,    13,  1212,  1213,  1214,    17,   173,   581,   173,   173,
      10,    11,    12,    13,   163,    15,   173,    17,   173,   777,
     173,   426,   859,    10,    11,    12,    13,    15,   171,   173,
      17,   173,   173,   764,   173,   766,  1221,   174,   156,   156,
    1225,   171,   171,   156,   171,   173,   777,  1231,   171,   147,
      62,   171,   810,   156,   156,  1212,  1213,  1214,   810,   790,
     791,   810,    62,   161,   171,   171,   171,   156,   166,   173,
     171,   171,   171,   171,   171,    62,   807,   173,  1653,   173,
     171,   166,   813,   176,  1044,   172,  1661,    81,   172,   171,
     162,   822,   162,   824,   825,   500,   827,   162,   162,   830,
     831,   162,   833,   171,   173,   171,   173,   119,   513,   583,
     584,   516,   517,   844,   155,   846,   173,   173,   173,   119,
     898,   173,   171,    10,    11,    12,    34,   166,   859,   166,
     535,   153,   119,   156,    49,   147,   171,   711,   712,   713,
     171,   715,   156,   717,   173,   719,   720,   147,   173,   161,
     153,   153,   173,   154,   166,   154,   154,   154,   916,   980,
     147,   161,   154,   154,   171,   155,   166,   171,   157,   155,
     153,   171,   153,    10,   161,   171,   171,   582,   154,   166,
     585,    68,    10,   176,   171,   163,   171,    10,    11,    12,
     172,   922,   172,   172,    81,    82,   173,   163,   163,   173,
     931,   163,   173,    10,   935,   936,    10,    10,   939,   940,
      10,   155,   163,   154,  1399,  1400,  1401,    22,    23,    24,
    1430,   979,   627,   954,   173,   155,   957,   979,   166,    34,
     979,   166,   119,   120,   174,   122,   155,   968,   969,   166,
     127,    15,   129,   171,   176,    68,   171,   176,   171,   980,
     171,   173,   154,   984,   985,   986,   987,   988,    81,    82,
     991,   666,   667,   173,  1448,   171,   171,   157,  1452,   154,
     154,  1456,  1391,  1430,   154,  1391,   154,   682,   166,   155,
     685,   686,   173,  1014,   689,   171,   173,  1045,   693,  1474,
    1475,   696,   697,   174,   173,   700,   119,   120,   703,   122,
     172,   706,  1033,   155,   127,  1036,   129,   155,   174,  1040,
     154,    10,  1043,  1044,   173,   176,   790,   173,   154,  1050,
    1051,   174,   173,  1054,  1055,   799,   173,  1058,   173,    10,
      10,   155,    10,  1154,   173,    10,  1067,    10,    10,  1070,
    1071,   155,  1073,   154,   171,  1076,   176,   173,  1532,   172,
    1535,   176,   174,   173,   153,   173,   930,  1088,  1543,   164,
     165,   166,   167,   168,   173,   170,   171,   172,    54,   774,
     154,   173,   155,   171,   162,   162,    62,    63,    64,    65,
     162,   162,   171,   173,   155,    10,    10,   155,   174,    75,
      76,    77,    78,  1183,  1184,   174,  1186,    83,  1188,    10,
    1237,  1238,    88,   173,   173,   155,   155,  1592,    10,  1593,
    1595,   155,   171,   173,  1145,   173,   173,    15,   174,   174,
    1151,   826,   154,  1154,   154,   173,   112,   173,   163,   163,
     163,   836,   837,  1164,   173,   163,  1167,   123,    10,   155,
      10,  1626,   173,   129,   173,    10,   155,   171,   134,   171,
     855,   171,   173,   927,   171,   173,    10,  1642,   144,   145,
     934,   147,   936,   155,   155,   939,   940,   173,   155,   173,
     155,  1202,  1236,  1394,   600,  1446,   162,   623,  1045,   916,
    1552,  1212,  1213,  1214,    17,  1391,  1202,   961,   623,   963,
    1221,   730,   966,  1015,  1225,   900,  1227,  1354,   561,   318,
    1231,    -1,    -1,    -1,    -1,    -1,  1237,  1238,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      10,    -1,    -1,    -1,    -1,    15,    -1,    -1,    -1,    62,
      -1,    64,    -1,   938,    -1,    -1,   941,   942,    -1,   944,
      -1,   946,    -1,    -1,    -1,    10,    11,    12,    81,    -1,
      -1,    -1,    -1,    -1,    -1,   960,    -1,    -1,    -1,   964,
     965,    51,    -1,    -1,    -1,   970,    23,    24,    -1,    -1,
     975,    -1,    -1,    -1,    -1,    -1,    66,    34,   983,   112,
      -1,    71,   115,   116,    -1,    -1,   119,    -1,  1062,    -1,
      80,    81,    -1,  1067,    -1,    -1,  1070,  1071,    -1,    -1,
      -1,    -1,   135,    68,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,   147,    -1,    81,    82,    34,    -1,
      -1,  1095,    -1,  1354,   114,    -1,    -1,   117,   161,   119,
      -1,    -1,    -1,    -1,   124,    -1,  1210,    -1,   128,    -1,
      -1,   131,    -1,    -1,  1049,    -1,   136,  1052,  1053,   139,
      -1,    -1,  1442,    -1,   119,   120,    -1,   122,    -1,    -1,
    1391,  1066,   127,    -1,   129,    -1,  1140,  1141,  1399,  1400,
    1401,   161,    -1,    -1,   164,   165,    -1,    -1,    -1,   169,
      -1,   171,    -1,    -1,    -1,   175,    -1,    -1,    -1,  1094,
      -1,    -1,   157,    -1,    -1,    -1,   161,    -1,    -1,  1430,
      -1,   166,    -1,    -1,    -1,  1495,    -1,   164,   165,   166,
     167,   168,    -1,   170,   171,   172,    -1,  1448,    -1,    -1,
      -1,  1452,    10,    11,    12,  1456,    -1,    -1,    -1,    -1,
      -1,    -1,  1463,  1138,    -1,    -1,  1526,    -1,    -1,    -1,
       2,    -1,    -1,  1474,  1475,    -1,   162,   163,   164,   165,
     166,   167,   168,  1227,   170,   171,   172,    -1,    -1,    -1,
    1165,    -1,    -1,  1168,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1181,    -1,    11,    -1,
      68,    -1,    -1,    -1,    46,  1190,    -1,    -1,    -1,    -1,
      52,    23,    24,    81,    82,  1200,    58,    59,    60,    61,
      62,  1532,    34,    65,  1535,    -1,  1211,    -1,    -1,    -1,
      -1,    -1,  1543,    -1,    -1,  1546,  1547,  1548,    -1,    -1,
      -1,  1552,    55,    -1,    57,    58,    59,    60,    -1,    -1,
      -1,   119,   120,    64,   122,    -1,    -1,    -1,    -1,   127,
      -1,   129,    -1,    -1,    -1,  1635,  1636,  1637,    -1,  1639,
      -1,    -1,    -1,    -1,    -1,    -1,    89,    88,    -1,    -1,
      -1,  1592,  1593,    -1,  1595,    -1,    -1,    -1,  1442,    -1,
      -1,    -1,   105,   161,    -1,    -1,  1215,   108,   166,    -1,
      -1,    -1,    -1,    18,    19,    20,    21,    22,    23,    24,
      -1,    -1,    -1,   126,   127,  1626,    -1,   159,    -1,    34,
      -1,    -1,    -1,    -1,    10,    11,    12,  1381,    -1,    -1,
     143,  1642,    -1,    -1,   145,   148,  1490,  1491,  1492,  1493,
    1394,  1495,  1653,  1497,    -1,    -1,    -1,    -1,    -1,    -1,
    1661,    -1,   164,   165,   166,   167,   168,    -1,   170,   171,
     172,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,    68,    -1,   226,   196,   197,    -1,    -1,   231,
      -1,    -1,  1446,    -1,    -1,    81,    82,    -1,  1383,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,  1215,   224,    -1,    -1,    -1,    34,    -1,   261,
      -1,    -1,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,   243,   119,   120,    -1,   122,    -1,    34,    -1,
      -1,   127,    -1,   129,    -1,   256,   257,   162,   163,   164,
     165,   166,   167,   168,   296,   170,   171,   172,    -1,    -1,
      -1,    -1,  1447,    -1,    -1,    -1,  1451,   153,    -1,    -1,
    1455,   313,   314,    -1,    -1,    -1,    -1,    -1,   320,    -1,
      -1,    -1,    -1,  1468,    -1,    -1,  1471,  1472,  1473,   300,
     301,    -1,    -1,    -1,    -1,   306,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,    10,
      11,    12,    -1,    -1,    -1,    -1,  1435,    -1,  1437,  1438,
    1439,  1440,  1441,    -1,  1443,    -1,    22,    23,    24,   371,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
      -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,  1537,   170,   171,   172,    -1,    -1,    -1,   176,
      -1,   372,    -1,    -1,  1549,  1550,    -1,    68,   164,   165,
     166,   167,   168,   415,   170,   171,   172,    -1,    -1,   390,
      81,    82,    -1,    -1,   395,    -1,    -1,  1506,  1507,  1508,
    1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,  1517,  1518,
    1519,  1520,  1521,  1522,  1523,  1524,    16,    17,    18,    19,
      20,    21,    22,    23,    24,  1600,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,    34,   436,   127,    -1,   129,    -1,
      -1,    -1,  1435,    -1,  1437,  1438,  1439,  1440,  1441,  1624,
    1443,    -1,    -1,    -1,    -1,    -1,   488,    -1,  1567,    -1,
      -1,    -1,    -1,    -1,    -1,   156,    -1,    -1,  1643,    -1,
      -1,   503,    -1,    -1,    -1,    -1,    -1,  1652,   164,   165,
     166,   167,   168,    -1,   170,   171,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1618,
      -1,   512,  1621,  1506,  1507,  1508,  1509,  1510,  1511,  1512,
    1513,  1514,  1515,  1516,  1517,  1518,  1519,  1520,  1521,  1522,
    1523,  1524,    -1,   565,   566,   567,   568,    -1,   570,    -1,
      -1,    -1,   543,    -1,    -1,    -1,    -1,   579,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,    -1,
     170,   171,   172,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,     6,   583,   584,    -1,   617,    -1,    -1,    -1,    -1,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    24,
     601,    -1,   603,   604,   605,   606,   607,   608,    -1,    34,
     611,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,   625,   626,   658,    -1,  1621,    -1,
      -1,    -1,    -1,   634,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   673,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   720,   114,
      -1,   692,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   731,
     732,   733,   734,   735,   736,   737,   738,   739,   740,   741,
     742,   743,   744,   745,   746,   747,   748,   749,   750,   751,
      -1,    -1,   754,    -1,    -1,    -1,    -1,    -1,    -1,   154,
      -1,    -1,   157,    -1,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,    -1,   171,   172,    -1,    -1,
     175,   752,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   796,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    10,    11,    12,    -1,   156,    -1,   158,   159,   160,
     161,   833,    -1,   164,   165,   166,   167,   168,   809,   170,
     171,   172,   844,    -1,    -1,    -1,    -1,   849,    -1,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,    51,    52,   866,    -1,    55,    34,    57,    58,
      59,    60,    61,    62,    -1,    -1,    -1,    66,    67,    -1,
      -1,    70,    71,    -1,    -1,    74,    -1,    -1,    -1,    -1,
     861,    80,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   114,    -1,   116,   117,    -1,
     119,    -1,    -1,    -1,    -1,   124,    -1,   126,   127,   128,
      -1,    -1,   131,   132,    -1,    -1,    -1,   136,    -1,   920,
     139,   140,   141,   142,   143,   957,    -1,   146,    -1,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    11,
      -1,    -1,   161,    -1,    -1,   164,   165,   166,    -1,   950,
     169,    -1,   171,   172,    -1,    -1,   175,    -1,    -1,    -1,
      -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,    -1,   170,   171,   172,    -1,    -1,    -1,   176,
      52,    -1,    -1,    55,    -1,    57,    58,    59,    60,    61,
      -1,  1023,    -1,    -1,    -1,    67,  1028,    -1,    70,    -1,
      -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,  1009,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,    20,    21,    22,    23,    24,    -1,
      -1,  1073,    -1,    -1,    -1,  1046,   118,    -1,    34,    -1,
      -1,    -1,    -1,    -1,   126,   127,  1088,    -1,    -1,    -1,
     132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   140,   141,
     142,   143,    -1,    -1,   146,    -1,   148,    -1,    -1,    -1,
      -1,   153,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,   169,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,  1143,    -1,  1145,    -1,  1147,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,   164,   165,
     166,   167,   168,    -1,   170,   171,   172,    -1,   105,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,    -1,    -1,  1236,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    -1,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,  1380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,    -1,    -1,    -1,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,  1463,   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    52,    34,  1527,    55,    -1,    57,    58,
      59,    60,    61,    -1,    -1,    -1,    -1,    66,    67,    -1,
      -1,    70,    71,    -1,    -1,    74,    -1,    -1,    -1,    -1,
      -1,    80,    81,    82,  1525,    -1,    -1,    86,    -1,    -1,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   114,    -1,   116,   117,    -1,
     119,    -1,    -1,  1564,    -1,   124,    -1,   126,   127,   128,
      -1,    -1,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,   142,   143,    -1,    -1,   146,    -1,   148,
       3,     4,     5,     6,    -1,     8,     9,    10,    11,    -1,
      -1,    -1,   161,    -1,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,   171,   172,   154,    -1,   175,    -1,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,    -1,
     170,   171,   172,   173,    -1,    -1,    -1,    -1,    51,    -1,
      -1,    -1,    55,    -1,    57,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    68,    69,    70,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
      -1,    -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   114,    -1,   116,   117,    -1,   119,    -1,    -1,    -1,
      -1,   124,    -1,   126,   127,   128,    -1,    -1,   131,    -1,
      -1,    -1,    -1,   136,    -1,    -1,   139,    -1,    -1,    -1,
     143,     3,     4,     5,     6,   148,     8,     9,    10,    11,
     153,    -1,    -1,    15,    -1,    -1,    -1,    -1,   161,    -1,
      -1,   164,   165,   166,    -1,    -1,   169,    -1,   171,   172,
      -1,    -1,   175,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    34,    -1,    55,    -1,    57,    58,    59,    60,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,
      82,    -1,    -1,    -1,    86,    -1,    -1,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   114,    -1,   116,   117,    -1,   119,    -1,    -1,
      -1,    -1,   124,    -1,   126,   127,   128,    -1,    -1,   131,
      -1,    -1,    -1,    -1,   136,    -1,    -1,   139,    -1,    -1,
      -1,   143,     3,     4,     5,     6,   148,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,
      -1,    -1,   164,   165,   166,    -1,    -1,   169,    -1,   171,
     172,    -1,   155,   175,    -1,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
      51,    -1,    -1,    -1,    55,    -1,    57,    58,    59,    60,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      81,    82,    -1,    -1,    -1,    86,    -1,    -1,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   114,    -1,   116,   117,    -1,   119,    -1,
      -1,    -1,    -1,   124,    -1,   126,   127,   128,    -1,    -1,
     131,    -1,    -1,    -1,    -1,   136,    -1,    -1,   139,    -1,
      -1,    -1,   143,     3,     4,     5,     6,   148,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     161,    -1,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
     171,   172,   173,    -1,   175,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    51,    52,    34,    -1,    55,    -1,    57,    58,    59,
      60,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   114,    -1,   116,   117,    -1,   119,
      -1,    -1,    -1,    -1,   124,    -1,   126,   127,   128,    -1,
      -1,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,   139,
      -1,    -1,    -1,   143,     3,     4,     5,     6,   148,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   161,    -1,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,   171,   172,   154,    -1,   175,    -1,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
     171,   172,    51,    52,    -1,    -1,    55,    -1,    57,    58,
      59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   114,    -1,   116,   117,    -1,
     119,    -1,    -1,    -1,    -1,   124,    -1,   126,   127,   128,
      -1,    -1,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
     139,    -1,    -1,    -1,   143,     3,     4,     5,     6,   148,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   161,    -1,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,   171,   172,    -1,    -1,   175,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    34,    -1,    55,    -1,    57,
      58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,    -1,
      -1,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,   117,
      -1,   119,    -1,    -1,    -1,    -1,   124,    -1,   126,   127,
     128,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,    -1,
      -1,   139,    -1,    -1,    -1,   143,     3,     4,     5,     6,
     148,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   161,    -1,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,   171,   172,   173,    -1,   175,    -1,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
      -1,   170,   171,   172,    51,    -1,    -1,    -1,    55,    -1,
      57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,
      -1,    -1,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,
     117,    -1,   119,    -1,    -1,    -1,    -1,   124,    -1,   126,
     127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,
      -1,    -1,   139,    -1,    -1,    -1,   143,     3,     4,     5,
       6,   148,     8,     9,    10,    11,   153,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   161,    -1,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,   171,   172,    -1,    -1,   175,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    34,    -1,    55,
      -1,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,
      86,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,
     116,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,    -1,
     126,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,
     136,    -1,    -1,   139,    -1,    -1,    -1,   143,     3,     4,
       5,     6,   148,     8,     9,    10,    11,   153,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,   171,   172,    -1,    -1,   175,
      -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,    -1,   170,   171,   172,    51,    -1,    -1,    -1,
      55,    -1,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    81,    82,    -1,    -1,
      -1,    86,    -1,    -1,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
      -1,   116,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,
      -1,   126,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,
      -1,   136,    -1,    -1,   139,    -1,    -1,    -1,   143,     3,
       4,     5,     6,   148,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,   171,   172,   173,    -1,
     175,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    34,
      -1,    55,    -1,    57,    58,    59,    60,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    70,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,    -1,
      -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     114,    -1,   116,   117,    -1,   119,    -1,    -1,    -1,    -1,
     124,    -1,   126,   127,   128,    -1,    -1,   131,    -1,    -1,
      -1,    -1,   136,    -1,    -1,   139,    -1,    -1,    -1,   143,
       3,     4,     5,     6,   148,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,   171,   172,    -1,
      -1,   175,    -1,   158,   159,   160,   161,    -1,    -1,   164,
     165,   166,   167,   168,    -1,   170,   171,   172,    51,    -1,
      -1,    -1,    55,    -1,    57,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
      -1,    -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,    -1,    10,    11,    12,    -1,    -1,    -1,
      -1,   114,    -1,   116,   117,    55,   119,    57,    58,    59,
      60,   124,    -1,   126,   127,   128,    -1,    -1,   131,    -1,
      70,    -1,    -1,   136,    -1,    -1,   139,    -1,    -1,    -1,
     143,     3,     4,     5,     6,   148,     8,     9,    10,    89,
      -1,    -1,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,   105,   169,    -1,   171,   172,
      -1,    -1,   175,    -1,    -1,    81,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   126,   127,    -1,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   143,    66,    10,    11,    12,   148,    71,
      15,    -1,    -1,   119,   120,    -1,   122,    -1,    80,    81,
      -1,   127,    -1,   129,    86,    -1,    -1,    -1,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,     3,     4,     5,     6,   153,     8,     9,
      10,    -1,    -1,    -1,    -1,   117,    -1,   119,    -1,    -1,
      -1,    -1,   124,    68,    -1,    -1,   128,    -1,    -1,   131,
      -1,    -1,    -1,    -1,   136,    -1,    81,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,
      -1,    -1,   164,   165,   166,    -1,    66,   169,    -1,   171,
     172,    71,    -1,   175,   119,   120,    -1,   122,    -1,    -1,
      80,    81,   127,    -1,   129,    -1,    86,    -1,    -1,    -1,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,     3,     4,     5,     6,    -1,
       8,     9,    10,    17,    -1,    -1,    -1,   117,    -1,   119,
      -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    62,    -1,
      64,   161,    -1,    -1,   164,   165,   166,    -1,    66,   169,
      -1,   171,   172,    71,    -1,   175,    -1,    81,    -1,    -1,
      -1,    -1,    80,    81,    -1,    -1,    -1,    -1,    86,    -1,
      -1,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,    -1,   112,    -1,
      -1,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,   117,
      -1,   119,     3,     4,     5,     6,   124,     8,     9,    10,
     128,   135,    -1,   131,    15,    -1,    -1,    -1,   136,    -1,
      -1,    -1,    -1,   147,    -1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    10,    -1,    -1,    -1,   161,    15,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    50,
      51,   169,    -1,   171,   172,    -1,    -1,   175,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      71,    48,    -1,    50,    51,    -1,    -1,    -1,    -1,    80,
      81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    81,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   114,    -1,    -1,   117,    -1,   119,    10,
      11,    12,    -1,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,    -1,    -1,    -1,    -1,   136,    -1,   114,   139,    -1,
     117,    -1,   119,    -1,    -1,    -1,    -1,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,    10,    11,    -1,    -1,   136,
     161,    -1,   139,   164,   165,    -1,    -1,    -1,   169,    -1,
     171,    -1,    -1,    -1,   175,    -1,    55,    68,    57,    58,
      59,    60,    -1,    -1,   161,    -1,    -1,   164,   165,    -1,
      81,    82,   169,    -1,   171,    10,    11,    52,   175,    -1,
      55,    -1,    57,    58,    59,    60,    61,    -1,    -1,    -1,
      89,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    74,
      -1,    -1,    -1,    -1,    -1,    -1,   105,    82,   119,   120,
     121,   122,    -1,    -1,    89,    -1,   127,    52,   129,    -1,
      55,    -1,    57,    58,    59,    60,    61,   126,   127,   140,
     105,    -1,    67,    -1,   145,    70,    -1,    -1,    -1,    74,
      -1,    -1,    -1,   118,   143,    -1,    -1,    82,    -1,   148,
      -1,   126,   127,    -1,    89,    -1,    -1,   132,    -1,    55,
      -1,    57,    58,    59,    60,   140,   141,   142,   143,    -1,
     105,   146,   171,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126,   127,    89,   169,    -1,    -1,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   140,   141,   142,   143,   105,
      -1,   146,    -1,   148,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,   127,    34,    -1,   169,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,   143,    -1,    -1,
      -1,    -1,   148,    34,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    34,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,    -1,   170,   171,
     172,   173,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
     171,   172,   173,    -1,    -1,    -1,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,    -1,   170,   171,
     172,   173,    -1,    -1,    -1,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
     173,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,    -1,   170,   171,   172,   173,
      -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,    -1,   170,   171,   172,   173,    -1,
      -1,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,    -1,   170,   171,   172,   173,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    -1,    10,    11,    12,    -1,    34,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    34,    17,    18,    19,    20,    21,    22,
      23,    24,    -1,    81,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    17,    18,    19,    20,    21,    22,    23,    24,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,   119,   120,    -1,   122,    -1,    34,    -1,    -1,   127,
      -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,    -1,   170,   171,   172,   173,    -1,    -1,    -1,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
      -1,   170,   171,   172,   173,    -1,   156,    -1,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,    -1,
     170,   171,   172,    -1,    -1,   156,    -1,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
     171,   172,    -1,    -1,    -1,    -1,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
      -1,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,   164,
     165,   166,   167,   168,    -1,   170,   171,   172,    -1,    -1,
      -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,    -1,   170,   171,   172,    18,    19,    20,    21,    22,
      23,    24,    10,    11,    12,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    55,    -1,
      57,    58,    59,    60,    -1,    34,    18,    19,    20,    21,
      22,    23,    24,    70,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    34,    18,    19,    20,    21,    22,    23,    24,
      -1,    -1,    89,    81,    82,    -1,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,    -1,
      -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    63,    64,    65,    -1,    -1,    -1,   126,
     127,   119,   120,    -1,   122,    75,    76,    77,    78,   127,
      -1,   129,    -1,    -1,    -1,    -1,   143,    -1,    88,    -1,
      -1,   148,    -1,    -1,    -1,    -1,   144,   160,   161,   162,
     163,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
      -1,    -1,   112,   113,   171,   161,   162,   163,   164,   165,
     166,   167,   168,   123,   170,   171,   172,    -1,    -1,   129,
     159,   160,   161,     6,   134,   164,   165,   166,   167,   168,
       6,   170,   171,   172,    -1,   145,    -1,   147,   160,   161,
      -1,    -1,   164,   165,   166,   167,   168,    -1,   170,   171,
     172,    -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,   164,
     165,   166,   167,   168,    -1,   170,   171,   172,    -1,    -1,
      -1,    54,    -1,    10,    11,    12,    -1,    -1,    54,    62,
      63,    64,    65,    -1,    -1,    -1,    62,    63,    64,    65,
      -1,    -1,    75,    76,    77,    78,    -1,    -1,    -1,    75,
      76,    77,    78,    -1,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      57,    58,    59,    60,    61,    62,    -1,    -1,    -1,   112,
      -1,    -1,    -1,    70,    -1,    -1,   112,    -1,    -1,    -1,
     123,    -1,    -1,    -1,    -1,    82,   129,   123,    -1,    -1,
     133,   134,    89,   129,    -1,    -1,    -1,    -1,   134,    10,
      11,    12,   145,    -1,   147,    10,    11,    12,   105,   145,
      -1,   147,    -1,    -1,    55,    -1,    57,    58,    59,    60,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
     127,    -1,    11,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   140,    -1,    -1,   143,    -1,    89,   146,
      55,   148,    57,    58,    59,    60,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,   105,    70,    -1,    -1,    -1,    -1,
      81,    82,    -1,    52,    -1,    -1,    55,    82,    57,    58,
      59,    60,    61,    62,    89,   126,   127,    -1,    67,    -1,
      -1,    70,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,
     105,    -1,   143,    82,    -1,    -1,    -1,   148,   119,   120,
      89,   122,    -1,    -1,    -1,    -1,   127,    -1,   129,    -1,
      -1,   126,   127,    -1,    11,    12,   105,    -1,    -1,   140,
     171,    -1,    -1,    -1,   145,    -1,    -1,    -1,   143,    -1,
      -1,   146,    -1,   148,   123,    -1,    -1,   126,   127,    -1,
      11,    12,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   140,   141,   142,   143,    52,    -1,   146,    55,   148,
      57,    58,    59,    60,    61,    62,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    70,    -1,    -1,    -1,    74,    -1,    -1,
      -1,    52,    -1,    -1,    55,    82,    57,    58,    59,    60,
      61,    -1,    89,    -1,    -1,    -1,    67,    -1,    -1,    70,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,   105,    -1,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    10,    11,    12,    -1,   126,
     127,    -1,    11,    12,   105,   132,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   140,   141,   142,   143,    -1,    -1,   146,
      -1,   148,   123,    -1,    -1,   126,   127,    -1,    11,    -1,
      -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   140,
     141,   142,   143,    52,    -1,   146,    55,   148,    57,    58,
      59,    60,    61,    68,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    70,    -1,    -1,    -1,    74,    81,    82,    -1,    52,
      -1,    -1,    55,    82,    57,    58,    59,    60,    61,    62,
      89,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
      -1,    74,    -1,    -1,    -1,    -1,   105,    -1,    -1,    82,
      -1,    -1,    -1,    -1,   119,   120,    89,   122,    -1,    -1,
      -1,    -1,   127,    -1,   129,    -1,    -1,   126,   127,    -1,
      11,    -1,   105,   132,    -1,   140,    -1,    -1,    -1,    -1,
     145,   140,   141,   142,   143,    -1,    -1,   146,    -1,   148,
      -1,    -1,    -1,   126,   127,    -1,    11,    -1,    -1,   132,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   140,   141,   142,
     143,    52,    -1,   146,    55,   148,    57,    58,    59,    60,
      61,    62,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    52,    -1,    -1,
      55,    82,    57,    58,    59,    60,    61,    -1,    89,    -1,
      -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    74,
      -1,    -1,    -1,    -1,   105,    -1,    -1,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    10,    11,    12,    -1,   126,   127,    -1,    11,    -1,
     105,   132,    -1,    -1,    -1,    -1,    10,    11,    12,   140,
     141,   142,   143,    -1,    -1,   146,    -1,   148,    -1,    -1,
      -1,   126,   127,    -1,    -1,    -1,    -1,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   140,   141,   142,   143,    52,
      -1,   146,    55,   148,    57,    58,    59,    60,    61,    68,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
      -1,    74,    81,    82,    68,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    10,    11,    12,    89,    81,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
     129,    -1,    -1,   126,   127,   119,   120,    -1,   122,   132,
      -1,   140,    -1,   127,    -1,   129,   145,   140,   141,   142,
     143,    68,    -1,   146,    -1,   148,   140,    74,    55,    -1,
      57,    58,    59,    60,    81,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    89,    -1,    -1,    -1,   113,    -1,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   105,    -1,
     127,    -1,   129,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    63,    64,    65,    -1,    -1,    -1,   126,
     127,    -1,    -1,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    -1,    -1,   143,    -1,    88,    -1,
      -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   171,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,   129,
     130,    54,    -1,   133,   134,    -1,    -1,    -1,   138,    62,
      63,    64,    65,    -1,   144,   145,    -1,   147,    -1,    -1,
      -1,    -1,    75,    76,    77,    78,    -1,    -1,    54,    -1,
      83,    -1,    -1,    -1,    -1,    88,    62,    63,    64,    65,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,   112,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     123,    -1,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
     133,   134,    -1,    -1,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   144,   145,    -1,   147,    -1,    -1,   123,    -1,    -1,
      -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,
      -1,   147
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,   150,   151,   152,   178,   179,   288,     3,     4,     5,
       6,     8,     9,    10,    11,    51,    55,    57,    58,    59,
      60,    66,    70,    71,    80,    81,    82,    86,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   114,   116,   117,   119,   124,
     126,   127,   128,   131,   136,   139,   143,   148,   161,   164,
     165,   166,   169,   171,   172,   175,   278,   279,   287,    11,
      12,    52,    55,    57,    58,    59,    60,    61,    62,    67,
      70,    74,    82,    89,   105,   126,   127,   132,   140,   141,
     142,   143,   146,   148,   241,   242,   246,   247,   249,   255,
     256,   260,   261,   266,   267,   268,   269,     0,    48,    50,
     189,   288,   153,   171,   171,   171,   171,   171,   171,   171,
     162,   171,   162,   171,   171,   171,   171,   171,   171,   171,
     171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
     171,   171,    11,    52,    67,   140,   141,   244,   260,   261,
     266,   278,   162,   171,   171,    15,   171,   278,   162,   171,
     171,   171,   278,   278,   278,   278,   278,    11,    55,    57,
      58,    59,    60,    70,    82,    89,   105,   126,   127,   143,
     148,   246,   276,   278,    10,    11,    12,    68,    81,    82,
     119,   120,   122,   127,   129,   157,   161,   166,   282,   283,
     285,   288,   278,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    34,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   170,   171,   172,     6,     8,   241,
     242,   171,    61,   132,    70,   105,   267,   267,   267,   285,
     171,   267,    13,    15,    17,    62,   147,   161,   166,   171,
     239,   240,   288,   240,   153,   189,   189,   144,   190,   191,
     285,   171,   155,   180,   275,   276,   288,   275,   246,   275,
     275,   275,   275,   275,   246,   275,   246,   275,   246,   275,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   275,   171,   285,   171,   171,
     189,   189,   173,   246,   275,   275,   171,   246,   246,   246,
     278,   275,   275,   173,   154,   173,   285,   285,   154,   176,
     157,   229,   288,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   285,   173,   276,   278,   240,   240,
      52,   278,   246,   166,   285,   189,   239,   240,   239,   240,
     189,   189,    15,    17,   161,   166,   189,   224,   225,   234,
     288,   172,   258,   259,   288,    10,    11,    12,   119,   156,
     286,    10,    11,    12,   119,   153,   285,   286,   285,    49,
     154,   171,    11,    52,    67,   140,   141,   243,   247,   249,
     255,   260,   261,   266,   278,    53,    54,    62,    63,    64,
      65,    73,    75,    76,    77,    78,    79,    83,    88,   106,
     107,   108,   109,   110,   111,   112,   113,   120,   121,   122,
     123,   129,   130,   133,   134,   138,   144,   145,   147,   183,
     185,   186,   188,   192,   212,   262,   265,   288,   174,   173,
     173,   173,   173,   173,   173,   173,   163,   173,   163,   173,
     173,   173,   173,   154,   173,   154,   173,   154,   173,   173,
     173,   173,   173,   173,   173,   173,   173,   173,   173,   278,
     246,   275,   285,   285,   163,   173,   173,   285,   173,   163,
     173,   173,   173,   173,   278,   278,    15,   161,   283,   171,
     209,   288,   278,   156,   173,   176,   173,   173,   173,   189,
     189,    13,    15,    17,    62,   147,   161,   166,   239,   288,
     239,   239,   189,   189,   189,    62,   123,   241,   242,   173,
      15,   154,   274,   278,   288,   285,   174,    11,   257,   267,
     156,   248,   250,   156,   189,   190,     3,     4,     5,     9,
      10,    15,    51,    66,    71,    80,    81,   114,   117,   119,
     124,   128,   131,   136,   139,   161,   164,   165,   169,   171,
     175,   226,   227,   234,   235,   280,   281,   287,   288,   171,
     285,   171,   173,   189,   189,   173,    76,    88,   188,   188,
     188,   188,   188,   188,     6,   188,   212,   188,   278,   156,
     187,   113,   188,   171,   171,   171,   171,   171,   171,   188,
     153,   189,   156,   156,   156,   188,   188,   171,   186,   188,
     192,   213,   188,   188,   196,    74,   113,   285,   188,   188,
      10,    11,   118,   153,   169,   199,   203,   243,   245,   171,
     171,   246,   246,   246,   173,   173,   173,   171,   173,   171,
     229,   224,    17,    62,    64,    81,   112,   115,   116,   119,
     135,   147,   161,   189,   278,   239,   166,   285,   189,   239,
     239,   189,   189,   172,   239,   239,   239,   123,   241,   242,
     234,    13,    17,    62,   147,   161,   166,   171,   237,   286,
     288,    13,    15,    17,    62,   147,   161,   166,   171,   238,
     209,    15,   234,   176,   189,   257,   179,    81,   251,   288,
     190,   171,   162,   162,   244,   162,    15,   171,   280,   162,
     171,   278,   278,   278,   278,   246,   276,   278,   173,    15,
     154,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      34,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   170,   171,   172,    52,   278,   246,   189,   285,
     286,   285,   189,   188,   173,   185,   153,   285,   285,   285,
     285,   285,   285,   285,   179,   285,   278,   162,    10,    11,
     203,   243,   245,   285,   285,   155,   189,   171,   171,    62,
     241,   184,   285,   194,   153,   155,   157,   231,   155,   193,
     276,   276,   173,   173,   173,   276,   276,   173,   278,   171,
      34,   222,   288,   189,   189,   239,   239,   239,   274,   173,
     173,   173,   241,   242,   237,   238,   166,   189,   237,   237,
     189,   189,   237,   172,   229,   189,   166,   285,   189,   238,
     238,   189,   189,   238,   172,   229,   189,   189,   154,   157,
     174,   156,   252,   253,   288,    49,   246,   246,   246,   171,
     246,   171,   246,   246,   246,   278,   173,   173,    15,   235,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   285,   173,   276,   278,   173,   173,   173,   156,   188,
     179,   153,   154,   154,   154,   154,   154,   154,   174,   153,
     154,   173,    10,    11,    12,    61,    62,   140,   214,   215,
     216,   217,   218,   266,   288,   171,   231,   197,   155,   155,
     157,   200,    10,    13,   166,   202,   241,    13,    17,    62,
     147,   161,   166,   236,   286,   288,   179,   171,   153,   155,
     156,   157,   230,   270,   271,    68,    69,   153,   278,    13,
      17,    62,   118,   147,   161,   166,   171,   195,   219,   221,
     286,   173,   173,   173,   173,   209,   173,   173,   285,    62,
     244,   153,   239,   176,   171,   171,   171,   237,   238,   229,
     229,   189,   237,   237,   237,   173,   274,   189,   189,   238,
     238,   238,   173,   274,   222,   278,   120,   121,   122,   140,
     145,   254,   284,   285,   153,   154,   189,   173,   163,   163,
     275,   163,   285,   173,   163,   173,   173,   278,   156,   173,
     176,   257,   174,   264,    10,    10,    10,    10,    10,    10,
     263,   287,   155,   218,   163,   154,    15,   285,    13,    17,
      62,   147,   161,   166,   171,   237,   238,   198,   221,   246,
     224,   173,   166,   219,   224,   236,   166,   189,   236,   236,
     189,   189,   171,   172,   189,   174,   204,   270,   181,   182,
     285,    68,    69,   174,   272,   288,   155,   155,   153,   232,
     233,   278,   288,   155,   166,   189,   219,     6,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    34,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      69,   114,   154,   157,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   171,   172,   175,   210,   219,
     189,   189,   219,   156,   171,   172,   222,   157,   229,   231,
     189,   189,    15,   173,   244,   240,   270,   189,   224,   224,
     224,   229,   229,   237,   171,   176,   238,   171,   176,   154,
     145,   284,   145,   284,   145,   284,   285,   120,   121,   122,
      15,   179,   254,   171,   171,   173,   171,   173,   171,   278,
     179,   154,   154,   173,   154,   223,   288,   154,   154,   154,
     179,   173,   237,   238,   186,   192,   211,   212,   217,   285,
     157,   166,   189,   189,   189,   157,   228,   288,   229,   231,
     155,   173,   171,   219,   173,   173,   171,   189,   236,   236,
     236,   207,   274,   224,   174,   153,   154,   153,   171,   155,
     155,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    74,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    87,    88,    89,   105,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   175,   176,   273,   232,   174,
     154,   189,   219,    10,   173,   176,   189,   219,   219,   173,
     278,   220,   274,   278,   154,   222,   173,   240,   174,   173,
     173,   173,   224,   189,   224,   189,   284,   284,   284,   284,
     284,   284,   174,   276,   276,   276,   276,   174,    10,    10,
     155,    10,   173,    10,    10,    10,   174,   155,   228,   246,
     189,    51,    66,    71,   124,   128,   131,   161,   164,   165,
     166,   169,   171,   175,   277,   279,   154,   209,   201,   173,
     171,   209,   208,   236,   224,   176,   173,   270,   182,   275,
     275,   272,   174,   153,   278,   219,   189,   226,   176,   195,
     153,   209,   209,   209,   173,   173,   173,   173,   173,   173,
     173,   154,   173,   154,   155,   154,   173,   173,   154,   173,
     171,   162,   162,   162,    15,   171,   277,   162,   277,   277,
     277,   277,   277,   246,   276,   277,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    34,   158,   159,   160,   161,
     164,   165,   166,   167,   168,   170,   171,   172,   198,   189,
     224,   171,   205,   189,   224,   173,   189,   209,   174,   174,
     173,   174,   232,   173,   189,   270,   189,   189,   189,   209,
     209,   155,    10,   155,    10,    10,   155,   155,    10,   155,
     246,   246,   246,   246,   171,   246,   246,   173,   173,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   285,   173,
     276,   278,   173,   206,   224,   173,   209,   189,    15,   174,
     209,   174,   222,   222,   222,   189,   189,   154,   223,   173,
     154,   154,   173,   173,   163,   163,   163,   285,   173,   163,
     277,   156,   173,   176,   209,   224,   173,   209,   189,    10,
     173,   155,    10,    10,   155,   171,   171,   171,   173,   171,
     277,   189,   173,   209,   155,   173,   154,   173,   276,   276,
     276,   276,   209,   189,   155,    10,   155,   173,   173,   173,
     173,   189,   222,   173,   222,   155
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   177,   178,   178,   178,   179,   179,   180,   179,   181,
     181,   182,   182,   182,   184,   183,   185,   185,   185,   185,
     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
     185,   185,   185,   187,   186,   188,   188,   188,   188,   188,
     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
     188,   188,   188,   189,   189,   189,   189,   189,   190,   190,
     191,   191,   193,   192,   192,   194,   192,   192,   192,   195,
     195,   197,   196,   196,   198,   198,   200,   199,   201,   199,
     202,   199,   204,   203,   205,   203,   206,   203,   207,   203,
     208,   203,   203,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   211,   211,   211,
     212,   213,   212,   212,   212,   214,   214,   215,   215,   216,
     216,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     218,   218,   218,   218,   219,   219,   219,   219,   219,   219,
     219,   219,   219,   219,   219,   220,   219,   221,   221,   222,
     222,   222,   223,   223,   224,   224,   224,   224,   224,   225,
     225,   226,   226,   226,   226,   226,   227,   227,   228,   228,
     229,   229,   230,   230,   230,   230,   230,   231,   231,   231,
     231,   231,   231,   232,   232,   232,   233,   233,   233,   233,
     234,   234,   234,   234,   234,   234,   234,   235,   235,   236,
     236,   236,   236,   236,   236,   236,   236,   236,   237,   237,
     237,   237,   237,   237,   237,   237,   237,   237,   237,   238,
     238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
     239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
     240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
     240,   240,   240,   240,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   242,   243,   243,   243,
     243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
     244,   244,   244,   244,   244,   244,   244,   244,   245,   245,
     246,   246,   246,   246,   248,   247,   250,   249,   251,   251,
     252,   252,   253,   253,   254,   254,   254,   254,   254,   254,
     254,   254,   254,   254,   255,   256,   256,   256,   256,   257,
     257,   258,   258,   258,   259,   259,   259,   260,   260,   260,
     261,   261,   261,   263,   262,   264,   262,   262,   262,   265,
     265,   265,   265,   266,   266,   266,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   268,   268,   268,   269,   271,   270,   272,   272,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   274,   274,   275,   275,   276,
     276,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   281,   281,   282,
     282,   282,   282,   282,   283,   283,   283,   283,   284,   284,
     284,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   286,   286,   286,   286,   287,   287,   287,   287,
     288
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     3,     0,     4,     1,
       3,     4,     5,     4,     0,     5,     1,     1,     1,     1,
       1,     2,     1,     1,     2,     2,     2,     2,     8,    11,
       9,    11,    13,    15,     7,     9,    12,     9,     9,    13,
       9,     7,     5,     0,     3,     1,     2,     2,     3,     2,
       2,     2,     2,     4,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     4,     7,     5,     5,     1,     3,
       1,     4,     0,     4,     3,     0,     4,     3,     1,     2,
       4,     0,     4,     3,     2,     4,     0,     7,     0,    10,
       0,     7,     0,     8,     0,    12,     0,    13,     0,     8,
       0,     9,     1,     1,     2,     2,     2,     4,     2,     2,
       2,     2,     2,     2,     4,     5,     6,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       2,     0,     6,     2,     2,     1,     1,     1,     3,     1,
       1,     1,     2,     4,     2,     3,     3,     4,     2,     3,
       1,     1,     1,     1,     2,     3,     4,     2,     2,     3,
       3,     3,     4,     5,     3,     0,     7,     2,     3,     1,
       3,     4,     1,     2,     1,     1,     1,     3,     2,     1,
       3,     1,     1,     1,     3,     2,     1,     3,     1,     2,
       1,     2,     1,     3,     5,     3,     3,     1,     3,     3,
       3,     3,     4,     1,     1,     2,     1,     3,     3,     5,
       4,     5,     6,     4,     5,     6,     3,     1,     1,     1,
       2,     2,     2,     3,     3,     3,     4,     5,     1,     2,
       2,     2,     3,     3,     3,     4,     5,     8,     3,     1,
       3,     2,     2,     3,     3,     3,     4,     5,     8,     3,
       1,     1,     3,     2,     2,     3,     3,     3,     4,     5,
       1,     1,     3,     2,     2,     3,     3,     3,     4,     5,
       6,    11,    11,    11,     1,     1,     2,     1,     1,     1,
       3,     5,     4,     4,     4,     1,     1,     1,     1,     2,
       1,     1,     1,     3,     5,     3,     4,     4,     4,     1,
       1,     1,     2,     3,     3,     4,     4,     1,     1,     1,
       2,     3,     2,     3,     0,     6,     0,     9,     1,     1,
       1,     1,     2,     3,     1,     2,     2,     2,     3,     3,
       3,     3,     3,     3,     4,     4,     2,     5,     3,     1,
       1,     1,     4,     6,     1,     3,     5,     1,     2,     2,
       1,     1,     1,     0,     7,     0,     7,     4,     5,     3,
       6,     4,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     1,     1,     2,     1,     0,     2,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
       3,     1,     4,     7,     7,     7,     7,     4,     2,     5,
       4,     2,     2,     2,     2,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     5,     4,     4,     3,     3,     3,
       3,     1,     4,     7,     7,     7,     7,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     2,     5,     4,     2,     5,     4,     4,
       2,     2,     2,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     4,     4,     3,     3,
       3,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     9,    12,     4,     4,     6,     4,
       4,     6,     6,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     1,     4,     7,     7,     7,     7,     4,
       2,     5,     4,     2,     5,     4,     4,     2,     2,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     4,     4,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     4,     2,     3,     1,     2,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       0
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]));
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 3: /* grammar: START_CONST_EXPR const_expr  */
#line 465 "dtool/src/cppparser/cppBison.yxx"
{
  current_expr = (yyvsp[0].u.expr);
}
#line 3904 "built/tmp/cppBison.yxx.c"
    break;

  case 4: /* grammar: START_TYPE full_type  */
#line 469 "dtool/src/cppparser/cppBison.yxx"
{
  current_type = (yyvsp[0].u.type);
}
#line 3912 "built/tmp/cppBison.yxx.c"
    break;

  case 6: /* cpp: cpp optional_attributes ';'  */
#line 477 "dtool/src/cppparser/cppBison.yxx"
{
  if (!(yyvsp[-1].attr_list).is_empty()) {
    current_scope->add_declaration(new CPPDeclaration((yylsp[-1]).file, (yyvsp[-1].attr_list)), global_scope, current_lexer, (yylsp[-1]));
  }
}
#line 3922 "built/tmp/cppBison.yxx.c"
    break;

  case 7: /* $@1: %empty  */
#line 483 "dtool/src/cppparser/cppBison.yxx"
{
  current_attributes = (yyvsp[0].attr_list);
}
#line 3930 "built/tmp/cppBison.yxx.c"
    break;

  case 8: /* cpp: cpp optional_attributes $@1 declaration  */
#line 487 "dtool/src/cppparser/cppBison.yxx"
{
  current_attributes = CPPAttributeList();
}
#line 3938 "built/tmp/cppBison.yxx.c"
    break;

  case 11: /* constructor_init: name '(' optional_const_expr_comma ')'  */
#line 499 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-1].u.expr);
}
#line 3946 "built/tmp/cppBison.yxx.c"
    break;

  case 12: /* constructor_init: name '(' optional_const_expr_comma ')' ELLIPSIS  */
#line 503 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-2].u.expr);
}
#line 3954 "built/tmp/cppBison.yxx.c"
    break;

  case 13: /* constructor_init: name '{' optional_const_expr_comma '}'  */
#line 507 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-1].u.expr);
}
#line 3962 "built/tmp/cppBison.yxx.c"
    break;

  case 14: /* $@2: %empty  */
#line 519 "dtool/src/cppparser/cppBison.yxx"
{
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
#line 3971 "built/tmp/cppBison.yxx.c"
    break;

  case 15: /* extern_c: storage_class '{' $@2 cpp '}'  */
#line 524 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 3979 "built/tmp/cppBison.yxx.c"
    break;

  case 22: /* declaration: KW_BEGIN_PUBLISH  */
#line 537 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
#line 3996 "built/tmp/cppBison.yxx.c"
    break;

  case 23: /* declaration: KW_END_PUBLISH  */
#line 550 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
#line 4009 "built/tmp/cppBison.yxx.c"
    break;

  case 24: /* declaration: KW_PUBLISHED ':'  */
#line 559 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_published);
}
#line 4017 "built/tmp/cppBison.yxx.c"
    break;

  case 25: /* declaration: KW_PUBLIC ':'  */
#line 563 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
#line 4029 "built/tmp/cppBison.yxx.c"
    break;

  case 26: /* declaration: KW_PROTECTED ':'  */
#line 571 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_protected);
}
#line 4037 "built/tmp/cppBison.yxx.c"
    break;

  case 27: /* declaration: KW_PRIVATE ':'  */
#line 575 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_private);
}
#line 4045 "built/tmp/cppBison.yxx.c"
    break;

  case 28: /* declaration: KW_MAKE_PROPERTY '(' name ',' IDENTIFIER maybe_comma_identifier ')' ';'  */
#line 579 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-5].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-7]).file);
    make_property->_get_function = getter->as_function_group();

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_set_function = setter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-7]));
  }
}
#line 4070 "built/tmp/cppBison.yxx.c"
    break;

  case 29: /* declaration: KW_MAKE_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 600 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4101 "built/tmp/cppBison.yxx.c"
    break;

  case 30: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 627 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4126 "built/tmp/cppBison.yxx.c"
    break;

  case 31: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 648 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4159 "built/tmp/cppBison.yxx.c"
    break;

  case 32: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 677 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4199 "built/tmp/cppBison.yxx.c"
    break;

  case 33: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 713 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-10].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-12].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-14]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    CPPDeclaration *inserter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (inserter == nullptr || inserter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid append method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_insert_function = inserter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-14]));
  }
}
#line 4246 "built/tmp/cppBison.yxx.c"
    break;

  case 34: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ')' ';'  */
#line 756 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid item getter method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-4].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-6]).file);
    make_property->_get_function = getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-6]));
  }
}
#line 4262 "built/tmp/cppBison.yxx.c"
    break;

  case 35: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 768 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4287 "built/tmp/cppBison.yxx.c"
    break;

  case 36: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER maybe_comma_identifier ')' ';'  */
#line 789 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-5].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-9].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-11]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-7].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-7].u.identifier)->get_fully_scoped_name(), (yylsp[-7]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_del_function = deleter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-11]));
  }
}
#line 4327 "built/tmp/cppBison.yxx.c"
    break;

  case 37: /* declaration: KW_MAKE_MAP_KEYS_SEQ '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 825 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = nullptr;
    for (size_t i = 0; i < current_scope->_declarations.size(); ++i) {
      make_property = current_scope->_declarations[i]->as_make_property();
      if (make_property != nullptr) {
        if (make_property->get_fully_scoped_name() == (yyvsp[-6].u.identifier)->get_fully_scoped_name()) {
          break;
        } else {
          make_property = nullptr;
        }
      }
    }
    if (make_property != nullptr) {
      make_property->_get_key_function = getter->as_function_group();
      make_property->_length_function = length_getter->as_function_group();
    } else {
      yyerror("reference to non-existent MAKE_MAP_PROPERTY: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    }
  }
}
#line 4365 "built/tmp/cppBison.yxx.c"
    break;

  case 38: /* declaration: KW_MAKE_PROPERTY2 '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 859 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4391 "built/tmp/cppBison.yxx.c"
    break;

  case 39: /* declaration: KW_MAKE_PROPERTY2 '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 881 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *clearer = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (clearer == nullptr || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid clear method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_clear_function = clearer->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4431 "built/tmp/cppBison.yxx.c"
    break;

  case 40: /* declaration: KW_MAKE_SEQ '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 917 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *element_getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == nullptr || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    element_getter = nullptr;
  }

  if (length_getter != nullptr && element_getter != nullptr) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4457 "built/tmp/cppBison.yxx.c"
    break;

  case 41: /* declaration: KW_STATIC_ASSERT '(' const_expr ',' string_literal ')' ';'  */
#line 939 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-4].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-4]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[-2].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[-4]));
  }
}
#line 4472 "built/tmp/cppBison.yxx.c"
    break;

  case 42: /* declaration: KW_STATIC_ASSERT '(' const_expr ')' ';'  */
#line 950 "dtool/src/cppparser/cppBison.yxx"
{
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-2]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[-2]));
  }
}
#line 4486 "built/tmp/cppBison.yxx.c"
    break;

  case 43: /* $@3: %empty  */
#line 963 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
#line 4496 "built/tmp/cppBison.yxx.c"
    break;

  case 44: /* friend_declaration: KW_FRIEND $@3 declaration  */
#line 969 "dtool/src/cppparser/cppBison.yxx"
{
  delete current_scope;
  pop_scope();
}
#line 4505 "built/tmp/cppBison.yxx.c"
    break;

  case 45: /* storage_class: empty  */
#line 978 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = 0;
}
#line 4513 "built/tmp/cppBison.yxx.c"
    break;

  case 46: /* storage_class: KW_CONST storage_class  */
#line 982 "dtool/src/cppparser/cppBison.yxx"
{
  // This isn't really a storage class, but it helps with parsing.
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_const;
}
#line 4522 "built/tmp/cppBison.yxx.c"
    break;

  case 47: /* storage_class: KW_EXTERN storage_class  */
#line 987 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
}
#line 4530 "built/tmp/cppBison.yxx.c"
    break;

  case 48: /* storage_class: KW_EXTERN SIMPLE_STRING storage_class  */
#line 991 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[-1].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[-1].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[-1].str) + "\"", (yylsp[-1]));
  }
}
#line 4545 "built/tmp/cppBison.yxx.c"
    break;

  case 49: /* storage_class: KW_STATIC storage_class  */
#line 1002 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_static;
}
#line 4553 "built/tmp/cppBison.yxx.c"
    break;

  case 50: /* storage_class: KW_INLINE storage_class  */
#line 1006 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_inline;
}
#line 4561 "built/tmp/cppBison.yxx.c"
    break;

  case 51: /* storage_class: KW_VIRTUAL storage_class  */
#line 1010 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_virtual;
}
#line 4569 "built/tmp/cppBison.yxx.c"
    break;

  case 52: /* storage_class: KW_EXPLICIT storage_class  */
#line 1014 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
}
#line 4577 "built/tmp/cppBison.yxx.c"
    break;

  case 53: /* storage_class: KW_EXPLICIT_LPAREN const_expr ')' storage_class  */
#line 1018 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("explicit() requires a constant expression", (yylsp[-2]));
  } else if (result.as_boolean()) {
    (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
  }
}
#line 4590 "built/tmp/cppBison.yxx.c"
    break;

  case 54: /* storage_class: KW_REGISTER storage_class  */
#line 1027 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_register;
}
#line 4598 "built/tmp/cppBison.yxx.c"
    break;

  case 55: /* storage_class: KW_VOLATILE storage_class  */
#line 1031 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_volatile;
}
#line 4606 "built/tmp/cppBison.yxx.c"
    break;

  case 56: /* storage_class: KW_MUTABLE storage_class  */
#line 1035 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_mutable;
}
#line 4614 "built/tmp/cppBison.yxx.c"
    break;

  case 57: /* storage_class: KW_CONSTEVAL storage_class  */
#line 1039 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_consteval;
}
#line 4622 "built/tmp/cppBison.yxx.c"
    break;

  case 58: /* storage_class: KW_CONSTEXPR storage_class  */
#line 1043 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constexpr;
}
#line 4630 "built/tmp/cppBison.yxx.c"
    break;

  case 59: /* storage_class: KW_CONSTINIT storage_class  */
#line 1047 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constinit;
}
#line 4638 "built/tmp/cppBison.yxx.c"
    break;

  case 60: /* storage_class: KW_BLOCKING storage_class  */
#line 1051 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_blocking;
}
#line 4646 "built/tmp/cppBison.yxx.c"
    break;

  case 61: /* storage_class: KW_EXTENSION storage_class  */
#line 1055 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extension;
}
#line 4654 "built/tmp/cppBison.yxx.c"
    break;

  case 62: /* storage_class: KW_THREAD_LOCAL storage_class  */
#line 1059 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_thread_local;
}
#line 4662 "built/tmp/cppBison.yxx.c"
    break;

  case 63: /* optional_attributes: empty  */
#line 1066 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = CPPAttributeList();
}
#line 4670 "built/tmp/cppBison.yxx.c"
    break;

  case 64: /* optional_attributes: ATTR_LEFT attribute_specifiers ATTR_RIGHT optional_attributes  */
#line 1070 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[-2].attr_list);
  (yyval.attr_list).add_attributes_from((yyvsp[0].attr_list));
}
#line 4679 "built/tmp/cppBison.yxx.c"
    break;

  case 65: /* optional_attributes: ATTR_LEFT KW_USING name ':' attribute_specifiers ATTR_RIGHT optional_attributes  */
#line 1075 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[-2].attr_list);
  for (CPPAttributeList::Attribute &attr : (yyval.attr_list)._attributes) {
    attr._ident->prepend((yyvsp[-4].u.identifier));
  }
  (yyval.attr_list).add_attributes_from((yyvsp[0].attr_list));
}
#line 4691 "built/tmp/cppBison.yxx.c"
    break;

  case 66: /* optional_attributes: KW_ALIGNAS '(' const_expr ')' optional_attributes  */
#line 1083 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[0].attr_list);
  (yyval.attr_list).add_alignas((yyvsp[-2].u.expr)->as_expression());
}
#line 4700 "built/tmp/cppBison.yxx.c"
    break;

  case 67: /* optional_attributes: KW_ALIGNAS '(' type_decl ')' optional_attributes  */
#line 1088 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[0].attr_list);
  (yyval.attr_list).add_alignas((yyvsp[-2].u.decl)->as_type());
}
#line 4709 "built/tmp/cppBison.yxx.c"
    break;

  case 68: /* attribute_specifiers: attribute_specifier  */
#line 1096 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[0].attr_list);
}
#line 4717 "built/tmp/cppBison.yxx.c"
    break;

  case 69: /* attribute_specifiers: attribute_specifier ',' attribute_specifiers  */
#line 1100 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[-2].attr_list);
  (yyval.attr_list).add_attributes_from((yyvsp[0].attr_list));
}
#line 4726 "built/tmp/cppBison.yxx.c"
    break;

  case 70: /* attribute_specifier: name  */
#line 1108 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = CPPAttributeList();
  (yyval.attr_list).add_attribute((yyvsp[0].u.identifier));
}
#line 4735 "built/tmp/cppBison.yxx.c"
    break;

  case 71: /* attribute_specifier: name '(' formal_parameter_list ')'  */
#line 1113 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = CPPAttributeList();
  (yyval.attr_list).add_attribute((yyvsp[-3].u.identifier));
}
#line 4744 "built/tmp/cppBison.yxx.c"
    break;

  case 72: /* $@4: %empty  */
#line 1121 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // type_like_declaration.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4759 "built/tmp/cppBison.yxx.c"
    break;

  case 73: /* type_like_declaration: storage_class var_type_decl $@4 multiple_instance_identifiers  */
#line 1132 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4767 "built/tmp/cppBison.yxx.c"
    break;

  case 74: /* type_like_declaration: storage_class type_decl ';'  */
#line 1137 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
#line 4780 "built/tmp/cppBison.yxx.c"
    break;

  case 75: /* $@5: %empty  */
#line 1146 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[0].u.instance) != nullptr) {
    // Push the scope so that the initializers can make use of things defined
    // in the class body.
    push_scope((yyvsp[0].u.instance)->get_scope(current_scope, global_scope));
    (yyvsp[0].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-1].u.integer));
  }
}
#line 4793 "built/tmp/cppBison.yxx.c"
    break;

  case 76: /* type_like_declaration: storage_class constructor_prototype $@5 maybe_initialize_or_constructor_body  */
#line 1155 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-2].u.instance) != nullptr) {
    pop_scope();
    current_scope->add_declaration((yyvsp[-2].u.instance), global_scope, current_lexer, (yylsp[-2]));
    (yyvsp[-2].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4805 "built/tmp/cppBison.yxx.c"
    break;

  case 77: /* type_like_declaration: storage_class function_prototype maybe_initialize_or_function_body  */
#line 1163 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-1].u.instance) != nullptr) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4817 "built/tmp/cppBison.yxx.c"
    break;

  case 79: /* multiple_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize_or_function_body  */
#line 1179 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-1].u.inst_ident)->add_attributes(current_attributes);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 4833 "built/tmp/cppBison.yxx.c"
    break;

  case 80: /* multiple_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize ',' multiple_instance_identifiers  */
#line 1191 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-3].u.inst_ident)->add_attributes(current_attributes);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 4849 "built/tmp/cppBison.yxx.c"
    break;

  case 81: /* $@6: %empty  */
#line 1207 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4864 "built/tmp/cppBison.yxx.c"
    break;

  case 82: /* typedef_declaration: storage_class var_type_decl $@6 typedef_instance_identifiers  */
#line 1218 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4872 "built/tmp/cppBison.yxx.c"
    break;

  case 83: /* typedef_declaration: storage_class function_prototype maybe_initialize_or_function_body  */
#line 1222 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-1].u.instance) != nullptr) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != nullptr) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope, inst->_attributes);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
#line 4888 "built/tmp/cppBison.yxx.c"
    break;

  case 84: /* typedef_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize_or_function_body  */
#line 1237 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-1].u.inst_ident)->add_attributes(current_attributes);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
}
#line 4902 "built/tmp/cppBison.yxx.c"
    break;

  case 85: /* typedef_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize ',' typedef_instance_identifiers  */
#line 1247 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-3].u.inst_ident)->add_attributes(current_attributes);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-3]));
}
#line 4916 "built/tmp/cppBison.yxx.c"
    break;

  case 86: /* $@7: %empty  */
#line 1262 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 4933 "built/tmp/cppBison.yxx.c"
    break;

  case 87: /* constructor_prototype: IDENTIFIER '(' $@7 function_parameter_list ')' function_post optional_attributes  */
#line 1275 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-6].u.identifier)->get_scope(current_scope, global_scope);
  CPPType *type;
  std::string simple_name = (yyvsp[-6].u.identifier)->get_simple_name();
  if (!simple_name.empty() && simple_name[0] == '~') {
    // A destructor has no return type.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  }
  else if (scope != nullptr && simple_name == scope->get_simple_name()) {
    // Neither does a constructor.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  }
  else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[-6]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-6].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  ii->add_attributes(current_attributes);

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-6]).file);
}
#line 4964 "built/tmp/cppBison.yxx.c"
    break;

  case 88: /* $@8: %empty  */
#line 1304 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-2].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 4981 "built/tmp/cppBison.yxx.c"
    break;

  case 89: /* constructor_prototype: TYPENAME_IDENTIFIER '(' IDENTIFIER ')' '(' $@8 function_parameter_list ')' function_post optional_attributes  */
#line 1317 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-9].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-9].u.identifier)->get_fully_scoped_name(), (yylsp[-9]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-7].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  ii->add_attributes(current_attributes);

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-9]).file);
}
#line 5000 "built/tmp/cppBison.yxx.c"
    break;

  case 90: /* $@9: %empty  */
#line 1332 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5017 "built/tmp/cppBison.yxx.c"
    break;

  case 91: /* constructor_prototype: TYPENAME_IDENTIFIER '(' $@9 function_parameter_list ')' function_post optional_attributes  */
#line 1345 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type;
  if ((yyvsp[-6].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-6].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  ii->add_attributes(current_attributes);

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-6]).file);
}
#line 5040 "built/tmp/cppBison.yxx.c"
    break;

  case 92: /* $@10: %empty  */
#line 1369 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 5048 "built/tmp/cppBison.yxx.c"
    break;

  case 93: /* function_prototype: '~' name '(' $@10 function_parameter_list ')' function_post optional_attributes  */
#line 1373 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  if ((yyvsp[-6].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[-6].u.identifier)->get_simple_name(), (yylsp[-6]));
    delete (yyvsp[-6].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
    ii->add_attributes(current_attributes);

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-6]).file);
  }
}
#line 5072 "built/tmp/cppBison.yxx.c"
    break;

  case 94: /* $@11: %empty  */
#line 1400 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5080 "built/tmp/cppBison.yxx.c"
    break;

  case 95: /* function_prototype: TYPENAME_IDENTIFIER '(' '*' instance_identifier ')' '(' $@11 function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 1404 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-11].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-11].u.identifier)->get_fully_scoped_name(), (yylsp[-11]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-8].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), nullptr, (yyvsp[-1].attr_list));
  ii->add_attributes(current_attributes);
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-11]).file);
}
#line 5099 "built/tmp/cppBison.yxx.c"
    break;

  case 96: /* $@12: %empty  */
#line 1419 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5107 "built/tmp/cppBison.yxx.c"
    break;

  case 97: /* function_prototype: TYPENAME_IDENTIFIER '(' SCOPING '*' instance_identifier ')' '(' $@12 function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 1423 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-12].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-12].u.identifier)->get_fully_scoped_name(), (yylsp[-12]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-8].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-10].u.identifier));
  ii->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), nullptr, (yyvsp[-1].attr_list));
  ii->add_attributes(current_attributes);
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-12]).file);
}
#line 5126 "built/tmp/cppBison.yxx.c"
    break;

  case 98: /* $@13: %empty  */
#line 1440 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-3].u.identifier) != nullptr) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5136 "built/tmp/cppBison.yxx.c"
    break;

  case 99: /* function_prototype: KW_OPERATOR type not_paren_formal_parameter_identifier '(' $@13 function_parameter_list ')' function_post  */
#line 1446 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-7].u.identifier) != nullptr) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier(name, (yylsp[-6]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  (yyval.u.instance)->_attributes.add_attributes_from(current_attributes);
}
#line 5166 "built/tmp/cppBison.yxx.c"
    break;

  case 100: /* $@14: %empty  */
#line 1472 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-4].u.identifier) != nullptr) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5176 "built/tmp/cppBison.yxx.c"
    break;

  case 101: /* function_prototype: KW_OPERATOR KW_CONST type not_paren_formal_parameter_identifier '(' $@14 function_parameter_list ')' function_post  */
#line 1478 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-8].u.identifier) != nullptr) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-5]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyvsp[-5].u.inst_ident)->add_attributes(current_attributes);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5197 "built/tmp/cppBison.yxx.c"
    break;

  case 102: /* function_prototype: IDENTIFIER  */
#line 1499 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *decl =
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != nullptr) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = nullptr;
  }
}
#line 5211 "built/tmp/cppBison.yxx.c"
    break;

  case 103: /* function_post: empty  */
#line 1512 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = 0;
}
#line 5219 "built/tmp/cppBison.yxx.c"
    break;

  case 104: /* function_post: function_post KW_CONST  */
#line 1516 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_const_method;
}
#line 5227 "built/tmp/cppBison.yxx.c"
    break;

  case 105: /* function_post: function_post KW_VOLATILE  */
#line 1520 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_volatile_method;
}
#line 5235 "built/tmp/cppBison.yxx.c"
    break;

  case 106: /* function_post: function_post KW_NOEXCEPT  */
#line 1524 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_noexcept;
}
#line 5243 "built/tmp/cppBison.yxx.c"
    break;

  case 107: /* function_post: function_post KW_NOEXCEPT_LPAREN const_expr ')'  */
#line 1528 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-1].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("noexcept() requires a constant expression", (yylsp[-1]));
  } else if (result.as_boolean()) {
    (yyval.u.integer) = (yyvsp[-3].u.integer) | (int)CPPFunctionType::F_noexcept;
  }
}
#line 5256 "built/tmp/cppBison.yxx.c"
    break;

  case 108: /* function_post: function_post KW_FINAL  */
#line 1537 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_final;
}
#line 5264 "built/tmp/cppBison.yxx.c"
    break;

  case 109: /* function_post: function_post KW_OVERRIDE  */
#line 1541 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_override;
}
#line 5272 "built/tmp/cppBison.yxx.c"
    break;

  case 110: /* function_post: function_post '&'  */
#line 1545 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_lvalue_method;
}
#line 5280 "built/tmp/cppBison.yxx.c"
    break;

  case 111: /* function_post: function_post ANDAND  */
#line 1549 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_rvalue_method;
}
#line 5288 "built/tmp/cppBison.yxx.c"
    break;

  case 112: /* function_post: function_post KW_MUTABLE  */
#line 1553 "dtool/src/cppparser/cppBison.yxx"
{
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5297 "built/tmp/cppBison.yxx.c"
    break;

  case 113: /* function_post: function_post KW_CONSTEXPR  */
#line 1558 "dtool/src/cppparser/cppBison.yxx"
{
  // Used for lambdas in C++17, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5306 "built/tmp/cppBison.yxx.c"
    break;

  case 114: /* function_post: function_post KW_THROW '(' ')'  */
#line 1563 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5314 "built/tmp/cppBison.yxx.c"
    break;

  case 115: /* function_post: function_post KW_THROW '(' name ')'  */
#line 1567 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
#line 5322 "built/tmp/cppBison.yxx.c"
    break;

  case 116: /* function_post: function_post KW_THROW '(' name ELLIPSIS ')'  */
#line 1571 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-5].u.integer);
}
#line 5330 "built/tmp/cppBison.yxx.c"
    break;

  case 117: /* function_operator: '!'  */
#line 1578 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "!";
}
#line 5338 "built/tmp/cppBison.yxx.c"
    break;

  case 118: /* function_operator: '~'  */
#line 1582 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "~";
}
#line 5346 "built/tmp/cppBison.yxx.c"
    break;

  case 119: /* function_operator: '*'  */
#line 1586 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "*";
}
#line 5354 "built/tmp/cppBison.yxx.c"
    break;

  case 120: /* function_operator: '/'  */
#line 1590 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "/";
}
#line 5362 "built/tmp/cppBison.yxx.c"
    break;

  case 121: /* function_operator: '%'  */
#line 1594 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "%";
}
#line 5370 "built/tmp/cppBison.yxx.c"
    break;

  case 122: /* function_operator: '+'  */
#line 1598 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "+";
}
#line 5378 "built/tmp/cppBison.yxx.c"
    break;

  case 123: /* function_operator: '-'  */
#line 1602 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "-";
}
#line 5386 "built/tmp/cppBison.yxx.c"
    break;

  case 124: /* function_operator: '|'  */
#line 1606 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "|";
}
#line 5394 "built/tmp/cppBison.yxx.c"
    break;

  case 125: /* function_operator: '&'  */
#line 1610 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&";
}
#line 5402 "built/tmp/cppBison.yxx.c"
    break;

  case 126: /* function_operator: '^'  */
#line 1614 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "^";
}
#line 5410 "built/tmp/cppBison.yxx.c"
    break;

  case 127: /* function_operator: OROR  */
#line 1618 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "||";
}
#line 5418 "built/tmp/cppBison.yxx.c"
    break;

  case 128: /* function_operator: ANDAND  */
#line 1622 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&&";
}
#line 5426 "built/tmp/cppBison.yxx.c"
    break;

  case 129: /* function_operator: EQCOMPARE  */
#line 1626 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "==";
}
#line 5434 "built/tmp/cppBison.yxx.c"
    break;

  case 130: /* function_operator: NECOMPARE  */
#line 1630 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "!=";
}
#line 5442 "built/tmp/cppBison.yxx.c"
    break;

  case 131: /* function_operator: LECOMPARE  */
#line 1634 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<=";
}
#line 5450 "built/tmp/cppBison.yxx.c"
    break;

  case 132: /* function_operator: GECOMPARE  */
#line 1638 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">=";
}
#line 5458 "built/tmp/cppBison.yxx.c"
    break;

  case 133: /* function_operator: '<'  */
#line 1642 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<";
}
#line 5466 "built/tmp/cppBison.yxx.c"
    break;

  case 134: /* function_operator: '>'  */
#line 1646 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">";
}
#line 5474 "built/tmp/cppBison.yxx.c"
    break;

  case 135: /* function_operator: SPACESHIP  */
#line 1650 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<=>";
}
#line 5482 "built/tmp/cppBison.yxx.c"
    break;

  case 136: /* function_operator: LSHIFT  */
#line 1654 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<<";
}
#line 5490 "built/tmp/cppBison.yxx.c"
    break;

  case 137: /* function_operator: RSHIFT  */
#line 1658 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">>";
}
#line 5498 "built/tmp/cppBison.yxx.c"
    break;

  case 138: /* function_operator: '='  */
#line 1662 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "=";
}
#line 5506 "built/tmp/cppBison.yxx.c"
    break;

  case 139: /* function_operator: ','  */
#line 1666 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ",";
}
#line 5514 "built/tmp/cppBison.yxx.c"
    break;

  case 140: /* function_operator: PLUSPLUS  */
#line 1670 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "++";
}
#line 5522 "built/tmp/cppBison.yxx.c"
    break;

  case 141: /* function_operator: MINUSMINUS  */
#line 1674 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "--";
}
#line 5530 "built/tmp/cppBison.yxx.c"
    break;

  case 142: /* function_operator: TIMESEQUAL  */
#line 1678 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "*=";
}
#line 5538 "built/tmp/cppBison.yxx.c"
    break;

  case 143: /* function_operator: DIVIDEEQUAL  */
#line 1682 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "/=";
}
#line 5546 "built/tmp/cppBison.yxx.c"
    break;

  case 144: /* function_operator: MODEQUAL  */
#line 1686 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "%=";
}
#line 5554 "built/tmp/cppBison.yxx.c"
    break;

  case 145: /* function_operator: PLUSEQUAL  */
#line 1690 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "+=";
}
#line 5562 "built/tmp/cppBison.yxx.c"
    break;

  case 146: /* function_operator: MINUSEQUAL  */
#line 1694 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "-=";
}
#line 5570 "built/tmp/cppBison.yxx.c"
    break;

  case 147: /* function_operator: OREQUAL  */
#line 1698 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "|=";
}
#line 5578 "built/tmp/cppBison.yxx.c"
    break;

  case 148: /* function_operator: ANDEQUAL  */
#line 1702 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&=";
}
#line 5586 "built/tmp/cppBison.yxx.c"
    break;

  case 149: /* function_operator: XOREQUAL  */
#line 1706 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "^=";
}
#line 5594 "built/tmp/cppBison.yxx.c"
    break;

  case 150: /* function_operator: LSHIFTEQUAL  */
#line 1710 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<<=";
}
#line 5602 "built/tmp/cppBison.yxx.c"
    break;

  case 151: /* function_operator: RSHIFTEQUAL  */
#line 1714 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">>=";
}
#line 5610 "built/tmp/cppBison.yxx.c"
    break;

  case 152: /* function_operator: POINTSAT  */
#line 1718 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "->";
}
#line 5618 "built/tmp/cppBison.yxx.c"
    break;

  case 153: /* function_operator: '[' ']'  */
#line 1722 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "[]";
}
#line 5626 "built/tmp/cppBison.yxx.c"
    break;

  case 154: /* function_operator: '(' ')'  */
#line 1726 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "()";
}
#line 5634 "built/tmp/cppBison.yxx.c"
    break;

  case 155: /* function_operator: KW_NEW  */
#line 1730 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "new";
}
#line 5642 "built/tmp/cppBison.yxx.c"
    break;

  case 156: /* function_operator: KW_DELETE  */
#line 1734 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "delete";
}
#line 5650 "built/tmp/cppBison.yxx.c"
    break;

  case 161: /* $@15: %empty  */
#line 1748 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope(new CPPTemplateScope(current_scope));
}
#line 5658 "built/tmp/cppBison.yxx.c"
    break;

  case 162: /* template_declaration: KW_TEMPLATE $@15 '<' template_formal_parameters '>' more_template_declaration  */
#line 1752 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 5666 "built/tmp/cppBison.yxx.c"
    break;

  case 167: /* template_nonempty_formal_parameters: template_formal_parameter  */
#line 1766 "dtool/src/cppparser/cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5676 "built/tmp/cppBison.yxx.c"
    break;

  case 168: /* template_nonempty_formal_parameters: template_nonempty_formal_parameters ',' template_formal_parameter  */
#line 1772 "dtool/src/cppparser/cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5686 "built/tmp/cppBison.yxx.c"
    break;

  case 171: /* template_formal_parameter: typename_keyword  */
#line 1786 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter(nullptr));
}
#line 5694 "built/tmp/cppBison.yxx.c"
    break;

  case 172: /* template_formal_parameter: typename_keyword name  */
#line 1790 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 5702 "built/tmp/cppBison.yxx.c"
    break;

  case 173: /* template_formal_parameter: typename_keyword name '=' full_type  */
#line 1794 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 5710 "built/tmp/cppBison.yxx.c"
    break;

  case 174: /* template_formal_parameter: typename_keyword ELLIPSIS  */
#line 1798 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter(nullptr);
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5720 "built/tmp/cppBison.yxx.c"
    break;

  case 175: /* template_formal_parameter: typename_keyword ELLIPSIS name  */
#line 1804 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[0].u.identifier));
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5730 "built/tmp/cppBison.yxx.c"
    break;

  case 176: /* template_formal_parameter: template_formal_parameter_type formal_parameter_identifier template_parameter_maybe_initialize  */
#line 1810 "dtool/src/cppparser/cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5740 "built/tmp/cppBison.yxx.c"
    break;

  case 177: /* template_formal_parameter: KW_CONST template_formal_parameter_type formal_parameter_identifier template_parameter_maybe_initialize  */
#line 1816 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5751 "built/tmp/cppBison.yxx.c"
    break;

  case 178: /* template_formal_parameter: template_formal_parameter_type parameter_pack_identifier  */
#line 1823 "dtool/src/cppparser/cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5760 "built/tmp/cppBison.yxx.c"
    break;

  case 179: /* template_formal_parameter: KW_CONST template_formal_parameter_type parameter_pack_identifier  */
#line 1828 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5770 "built/tmp/cppBison.yxx.c"
    break;

  case 180: /* template_formal_parameter_type: simple_type  */
#line 1837 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5778 "built/tmp/cppBison.yxx.c"
    break;

  case 181: /* template_formal_parameter_type: IDENTIFIER  */
#line 1841 "dtool/src/cppparser/cppBison.yxx"
{
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 5787 "built/tmp/cppBison.yxx.c"
    break;

  case 182: /* template_formal_parameter_type: TYPENAME_IDENTIFIER  */
#line 1846 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5799 "built/tmp/cppBison.yxx.c"
    break;

  case 183: /* template_formal_parameter_type: TYPEPACK_IDENTIFIER  */
#line 1854 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5811 "built/tmp/cppBison.yxx.c"
    break;

  case 184: /* instance_identifier: name_no_final optional_attributes  */
#line 1866 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
}
#line 5819 "built/tmp/cppBison.yxx.c"
    break;

  case 185: /* instance_identifier: KW_OPERATOR function_operator optional_attributes  */
#line 1870 "dtool/src/cppparser/cppBison.yxx"
{
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-2].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator "+(yyvsp[-1].str), (yylsp[-1]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[-1].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident, (yyvsp[0].attr_list));
}
#line 5837 "built/tmp/cppBison.yxx.c"
    break;

  case 186: /* instance_identifier: KW_OPERATOR SIMPLE_STRING IDENTIFIER optional_attributes  */
#line 1884 "dtool/src/cppparser/cppBison.yxx"
{
  // A C++11 literal operator.
  if (!(yyvsp[-2].str).empty()) {
    yyerror("expected empty string", (yylsp[-2]));
  }
  CPPIdentifier *ident = (yyvsp[-3].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[-1].u.identifier)->get_simple_name(), (yylsp[-1]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[-1].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident, (yyvsp[0].attr_list));
}
#line 5856 "built/tmp/cppBison.yxx.c"
    break;

  case 187: /* instance_identifier: KW_CONST instance_identifier  */
#line 1899 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5865 "built/tmp/cppBison.yxx.c"
    break;

  case 188: /* instance_identifier: KW_VOLATILE instance_identifier  */
#line 1904 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5874 "built/tmp/cppBison.yxx.c"
    break;

  case 189: /* instance_identifier: '*' optional_attributes instance_identifier  */
#line 1909 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 5883 "built/tmp/cppBison.yxx.c"
    break;

  case 190: /* instance_identifier: '&' optional_attributes instance_identifier  */
#line 1914 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 5892 "built/tmp/cppBison.yxx.c"
    break;

  case 191: /* instance_identifier: ANDAND optional_attributes instance_identifier  */
#line 1919 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 5901 "built/tmp/cppBison.yxx.c"
    break;

  case 192: /* instance_identifier: SCOPING '*' optional_attributes instance_identifier  */
#line 1924 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 5910 "built/tmp/cppBison.yxx.c"
    break;

  case 193: /* instance_identifier: instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 1929 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 5919 "built/tmp/cppBison.yxx.c"
    break;

  case 194: /* instance_identifier: '(' instance_identifier ')'  */
#line 1934 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 5928 "built/tmp/cppBison.yxx.c"
    break;

  case 195: /* $@16: %empty  */
#line 1939 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function (in case it is a function)
  CPPScope *scope = new CPPScope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope),
                                 CPPNameComponent(""), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5945 "built/tmp/cppBison.yxx.c"
    break;

  case 196: /* instance_identifier: instance_identifier '(' $@16 formal_parameter_list ')' function_post optional_attributes  */
#line 1952 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  if ((yyvsp[-3].u.param_list)->is_parameter_expr() && (yyvsp[-1].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-3].u.param_list));
  }
  else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  }
}
#line 5963 "built/tmp/cppBison.yxx.c"
    break;

  case 197: /* instance_identifier_and_maybe_trailing_return_type: instance_identifier maybe_trailing_return_type  */
#line 1970 "dtool/src/cppparser/cppBison.yxx"
{
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[0].u.type) != nullptr) {
    (yyvsp[-1].u.inst_ident)->add_trailing_return_type((yyvsp[0].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
}
#line 5977 "built/tmp/cppBison.yxx.c"
    break;

  case 198: /* instance_identifier_and_maybe_trailing_return_type: instance_identifier ':' const_expr  */
#line 1980 "dtool/src/cppparser/cppBison.yxx"
{
  // Bitfield definition.
  (yyvsp[-2].u.inst_ident)->_bit_width = (yyvsp[0].u.expr);
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
#line 5987 "built/tmp/cppBison.yxx.c"
    break;

  case 199: /* maybe_trailing_return_type: empty  */
#line 1990 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = nullptr;
}
#line 5995 "built/tmp/cppBison.yxx.c"
    break;

  case 200: /* maybe_trailing_return_type: POINTSAT predefined_type empty_instance_identifier  */
#line 1994 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6003 "built/tmp/cppBison.yxx.c"
    break;

  case 201: /* maybe_trailing_return_type: POINTSAT KW_CONST predefined_type empty_instance_identifier  */
#line 1998 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6012 "built/tmp/cppBison.yxx.c"
    break;

  case 202: /* maybe_comma_identifier: empty  */
#line 2007 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = nullptr;
}
#line 6020 "built/tmp/cppBison.yxx.c"
    break;

  case 203: /* maybe_comma_identifier: ',' IDENTIFIER  */
#line 2011 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 6028 "built/tmp/cppBison.yxx.c"
    break;

  case 204: /* function_parameter_list: empty  */
#line 2019 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
}
#line 6036 "built/tmp/cppBison.yxx.c"
    break;

  case 205: /* function_parameter_list: ELLIPSIS  */
#line 2023 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6045 "built/tmp/cppBison.yxx.c"
    break;

  case 206: /* function_parameter_list: function_parameters  */
#line 2028 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6053 "built/tmp/cppBison.yxx.c"
    break;

  case 207: /* function_parameter_list: function_parameters ',' ELLIPSIS  */
#line 2032 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6062 "built/tmp/cppBison.yxx.c"
    break;

  case 208: /* function_parameter_list: function_parameters ELLIPSIS  */
#line 2037 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6071 "built/tmp/cppBison.yxx.c"
    break;

  case 209: /* function_parameters: function_parameter  */
#line 2045 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6080 "built/tmp/cppBison.yxx.c"
    break;

  case 210: /* function_parameters: function_parameters ',' function_parameter  */
#line 2050 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6089 "built/tmp/cppBison.yxx.c"
    break;

  case 211: /* formal_parameter_list: empty  */
#line 2058 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
}
#line 6097 "built/tmp/cppBison.yxx.c"
    break;

  case 212: /* formal_parameter_list: ELLIPSIS  */
#line 2062 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6106 "built/tmp/cppBison.yxx.c"
    break;

  case 213: /* formal_parameter_list: formal_parameters  */
#line 2067 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6114 "built/tmp/cppBison.yxx.c"
    break;

  case 214: /* formal_parameter_list: formal_parameters ',' ELLIPSIS  */
#line 2071 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6123 "built/tmp/cppBison.yxx.c"
    break;

  case 215: /* formal_parameter_list: formal_parameters ELLIPSIS  */
#line 2076 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6132 "built/tmp/cppBison.yxx.c"
    break;

  case 216: /* formal_parameters: formal_parameter  */
#line 2084 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6141 "built/tmp/cppBison.yxx.c"
    break;

  case 217: /* formal_parameters: formal_parameters ',' formal_parameter  */
#line 2089 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6150 "built/tmp/cppBison.yxx.c"
    break;

  case 218: /* template_parameter_maybe_initialize: empty  */
#line 2097 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6158 "built/tmp/cppBison.yxx.c"
    break;

  case 219: /* template_parameter_maybe_initialize: '=' no_angle_bracket_const_expr  */
#line 2101 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6166 "built/tmp/cppBison.yxx.c"
    break;

  case 220: /* maybe_initialize: empty  */
#line 2108 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6174 "built/tmp/cppBison.yxx.c"
    break;

  case 221: /* maybe_initialize: '=' const_expr  */
#line 2112 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6182 "built/tmp/cppBison.yxx.c"
    break;

  case 222: /* maybe_initialize_or_constructor_body: ';'  */
#line 2119 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6190 "built/tmp/cppBison.yxx.c"
    break;

  case 223: /* maybe_initialize_or_constructor_body: '{' code '}'  */
#line 2123 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6198 "built/tmp/cppBison.yxx.c"
    break;

  case 224: /* maybe_initialize_or_constructor_body: ':' constructor_inits '{' code '}'  */
#line 2127 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6206 "built/tmp/cppBison.yxx.c"
    break;

  case 225: /* maybe_initialize_or_constructor_body: '=' KW_DEFAULT ';'  */
#line 2131 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6214 "built/tmp/cppBison.yxx.c"
    break;

  case 226: /* maybe_initialize_or_constructor_body: '=' KW_DELETE ';'  */
#line 2135 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6222 "built/tmp/cppBison.yxx.c"
    break;

  case 227: /* maybe_initialize_or_function_body: ';'  */
#line 2142 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6230 "built/tmp/cppBison.yxx.c"
    break;

  case 228: /* maybe_initialize_or_function_body: '{' code '}'  */
#line 2146 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6238 "built/tmp/cppBison.yxx.c"
    break;

  case 229: /* maybe_initialize_or_function_body: '=' const_expr ';'  */
#line 2150 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 6246 "built/tmp/cppBison.yxx.c"
    break;

  case 230: /* maybe_initialize_or_function_body: '=' KW_DEFAULT ';'  */
#line 2154 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6254 "built/tmp/cppBison.yxx.c"
    break;

  case 231: /* maybe_initialize_or_function_body: '=' KW_DELETE ';'  */
#line 2158 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6262 "built/tmp/cppBison.yxx.c"
    break;

  case 232: /* maybe_initialize_or_function_body: '=' '{' structure_init '}'  */
#line 2162 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6270 "built/tmp/cppBison.yxx.c"
    break;

  case 236: /* structure_init_body: const_expr  */
#line 2175 "dtool/src/cppparser/cppBison.yxx"
{
}
#line 6277 "built/tmp/cppBison.yxx.c"
    break;

  case 240: /* function_parameter: optional_attributes type formal_parameter_identifier maybe_initialize  */
#line 2184 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-3].attr_list));
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6287 "built/tmp/cppBison.yxx.c"
    break;

  case 241: /* function_parameter: optional_attributes KW_CONST type formal_parameter_identifier maybe_initialize  */
#line 2190 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-4].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6298 "built/tmp/cppBison.yxx.c"
    break;

  case 242: /* function_parameter: optional_attributes KW_CONST KW_REGISTER type formal_parameter_identifier maybe_initialize  */
#line 2197 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-5].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6309 "built/tmp/cppBison.yxx.c"
    break;

  case 243: /* function_parameter: optional_attributes type_pack parameter_pack_identifier maybe_initialize  */
#line 2204 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-3].attr_list));
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6319 "built/tmp/cppBison.yxx.c"
    break;

  case 244: /* function_parameter: optional_attributes KW_CONST type_pack parameter_pack_identifier maybe_initialize  */
#line 2210 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-4].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6330 "built/tmp/cppBison.yxx.c"
    break;

  case 245: /* function_parameter: optional_attributes KW_CONST KW_REGISTER type_pack parameter_pack_identifier maybe_initialize  */
#line 2217 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-5].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6341 "built/tmp/cppBison.yxx.c"
    break;

  case 246: /* function_parameter: optional_attributes KW_REGISTER function_parameter  */
#line 2224 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
  (yyval.u.instance)->_attributes.add_attributes_from((yyvsp[-2].attr_list));
}
#line 6350 "built/tmp/cppBison.yxx.c"
    break;

  case 247: /* formal_parameter: function_parameter  */
#line 2236 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6358 "built/tmp/cppBison.yxx.c"
    break;

  case 248: /* formal_parameter: formal_const_expr  */
#line 2240 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6369 "built/tmp/cppBison.yxx.c"
    break;

  case 249: /* not_paren_formal_parameter_identifier: empty  */
#line 2250 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6377 "built/tmp/cppBison.yxx.c"
    break;

  case 250: /* not_paren_formal_parameter_identifier: name_no_final optional_attributes  */
#line 2254 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
}
#line 6385 "built/tmp/cppBison.yxx.c"
    break;

  case 251: /* not_paren_formal_parameter_identifier: KW_CONST not_paren_formal_parameter_identifier  */
#line 2258 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6394 "built/tmp/cppBison.yxx.c"
    break;

  case 252: /* not_paren_formal_parameter_identifier: KW_VOLATILE not_paren_formal_parameter_identifier  */
#line 2263 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6403 "built/tmp/cppBison.yxx.c"
    break;

  case 253: /* not_paren_formal_parameter_identifier: '*' optional_attributes not_paren_formal_parameter_identifier  */
#line 2268 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6412 "built/tmp/cppBison.yxx.c"
    break;

  case 254: /* not_paren_formal_parameter_identifier: '&' optional_attributes not_paren_formal_parameter_identifier  */
#line 2273 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6421 "built/tmp/cppBison.yxx.c"
    break;

  case 255: /* not_paren_formal_parameter_identifier: ANDAND optional_attributes not_paren_formal_parameter_identifier  */
#line 2278 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6430 "built/tmp/cppBison.yxx.c"
    break;

  case 256: /* not_paren_formal_parameter_identifier: SCOPING '*' optional_attributes not_paren_formal_parameter_identifier  */
#line 2283 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6439 "built/tmp/cppBison.yxx.c"
    break;

  case 257: /* not_paren_formal_parameter_identifier: not_paren_formal_parameter_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2288 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6448 "built/tmp/cppBison.yxx.c"
    break;

  case 258: /* formal_parameter_identifier: empty  */
#line 2296 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6456 "built/tmp/cppBison.yxx.c"
    break;

  case 259: /* formal_parameter_identifier: name_no_final optional_attributes  */
#line 2300 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
}
#line 6464 "built/tmp/cppBison.yxx.c"
    break;

  case 260: /* formal_parameter_identifier: KW_CONST formal_parameter_identifier  */
#line 2304 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6473 "built/tmp/cppBison.yxx.c"
    break;

  case 261: /* formal_parameter_identifier: KW_VOLATILE formal_parameter_identifier  */
#line 2309 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6482 "built/tmp/cppBison.yxx.c"
    break;

  case 262: /* formal_parameter_identifier: '*' optional_attributes formal_parameter_identifier  */
#line 2314 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6491 "built/tmp/cppBison.yxx.c"
    break;

  case 263: /* formal_parameter_identifier: '&' optional_attributes formal_parameter_identifier  */
#line 2319 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6500 "built/tmp/cppBison.yxx.c"
    break;

  case 264: /* formal_parameter_identifier: ANDAND optional_attributes formal_parameter_identifier  */
#line 2324 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6509 "built/tmp/cppBison.yxx.c"
    break;

  case 265: /* formal_parameter_identifier: SCOPING '*' optional_attributes formal_parameter_identifier  */
#line 2329 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6518 "built/tmp/cppBison.yxx.c"
    break;

  case 266: /* formal_parameter_identifier: formal_parameter_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2334 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6527 "built/tmp/cppBison.yxx.c"
    break;

  case 267: /* formal_parameter_identifier: '(' formal_parameter_identifier ')' '(' function_parameter_list ')' function_post optional_attributes  */
#line 2339 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
}
#line 6537 "built/tmp/cppBison.yxx.c"
    break;

  case 268: /* formal_parameter_identifier: '(' formal_parameter_identifier ')'  */
#line 2345 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6546 "built/tmp/cppBison.yxx.c"
    break;

  case 269: /* parameter_pack_identifier: ELLIPSIS  */
#line 2353 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6555 "built/tmp/cppBison.yxx.c"
    break;

  case 270: /* parameter_pack_identifier: ELLIPSIS name optional_attributes  */
#line 2358 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6564 "built/tmp/cppBison.yxx.c"
    break;

  case 271: /* parameter_pack_identifier: KW_CONST parameter_pack_identifier  */
#line 2363 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6573 "built/tmp/cppBison.yxx.c"
    break;

  case 272: /* parameter_pack_identifier: KW_VOLATILE parameter_pack_identifier  */
#line 2368 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6582 "built/tmp/cppBison.yxx.c"
    break;

  case 273: /* parameter_pack_identifier: '*' optional_attributes parameter_pack_identifier  */
#line 2373 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6591 "built/tmp/cppBison.yxx.c"
    break;

  case 274: /* parameter_pack_identifier: '&' optional_attributes parameter_pack_identifier  */
#line 2378 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6600 "built/tmp/cppBison.yxx.c"
    break;

  case 275: /* parameter_pack_identifier: ANDAND optional_attributes parameter_pack_identifier  */
#line 2383 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6609 "built/tmp/cppBison.yxx.c"
    break;

  case 276: /* parameter_pack_identifier: SCOPING '*' optional_attributes parameter_pack_identifier  */
#line 2388 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6618 "built/tmp/cppBison.yxx.c"
    break;

  case 277: /* parameter_pack_identifier: parameter_pack_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2393 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6627 "built/tmp/cppBison.yxx.c"
    break;

  case 278: /* parameter_pack_identifier: '(' parameter_pack_identifier ')' '(' function_parameter_list ')' function_post optional_attributes  */
#line 2398 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
}
#line 6637 "built/tmp/cppBison.yxx.c"
    break;

  case 279: /* parameter_pack_identifier: '(' parameter_pack_identifier ')'  */
#line 2404 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6646 "built/tmp/cppBison.yxx.c"
    break;

  case 280: /* not_paren_empty_instance_identifier: empty  */
#line 2412 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6654 "built/tmp/cppBison.yxx.c"
    break;

  case 281: /* not_paren_empty_instance_identifier: ELLIPSIS  */
#line 2416 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6663 "built/tmp/cppBison.yxx.c"
    break;

  case 282: /* not_paren_empty_instance_identifier: ELLIPSIS name optional_attributes  */
#line 2421 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6672 "built/tmp/cppBison.yxx.c"
    break;

  case 283: /* not_paren_empty_instance_identifier: KW_CONST not_paren_empty_instance_identifier  */
#line 2426 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6681 "built/tmp/cppBison.yxx.c"
    break;

  case 284: /* not_paren_empty_instance_identifier: KW_VOLATILE not_paren_empty_instance_identifier  */
#line 2431 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6690 "built/tmp/cppBison.yxx.c"
    break;

  case 285: /* not_paren_empty_instance_identifier: '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2436 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6699 "built/tmp/cppBison.yxx.c"
    break;

  case 286: /* not_paren_empty_instance_identifier: '&' optional_attributes not_paren_empty_instance_identifier  */
#line 2441 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6708 "built/tmp/cppBison.yxx.c"
    break;

  case 287: /* not_paren_empty_instance_identifier: ANDAND optional_attributes not_paren_empty_instance_identifier  */
#line 2446 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6717 "built/tmp/cppBison.yxx.c"
    break;

  case 288: /* not_paren_empty_instance_identifier: SCOPING '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2451 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6726 "built/tmp/cppBison.yxx.c"
    break;

  case 289: /* not_paren_empty_instance_identifier: not_paren_empty_instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2456 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6735 "built/tmp/cppBison.yxx.c"
    break;

  case 290: /* empty_instance_identifier: empty  */
#line 2464 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6743 "built/tmp/cppBison.yxx.c"
    break;

  case 291: /* empty_instance_identifier: ELLIPSIS  */
#line 2468 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6752 "built/tmp/cppBison.yxx.c"
    break;

  case 292: /* empty_instance_identifier: ELLIPSIS name optional_attributes  */
#line 2473 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6761 "built/tmp/cppBison.yxx.c"
    break;

  case 293: /* empty_instance_identifier: KW_CONST empty_instance_identifier  */
#line 2478 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6770 "built/tmp/cppBison.yxx.c"
    break;

  case 294: /* empty_instance_identifier: KW_VOLATILE empty_instance_identifier  */
#line 2483 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6779 "built/tmp/cppBison.yxx.c"
    break;

  case 295: /* empty_instance_identifier: '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2488 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6788 "built/tmp/cppBison.yxx.c"
    break;

  case 296: /* empty_instance_identifier: '&' optional_attributes not_paren_empty_instance_identifier  */
#line 2493 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6797 "built/tmp/cppBison.yxx.c"
    break;

  case 297: /* empty_instance_identifier: ANDAND optional_attributes not_paren_empty_instance_identifier  */
#line 2498 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6806 "built/tmp/cppBison.yxx.c"
    break;

  case 298: /* empty_instance_identifier: SCOPING '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2503 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6815 "built/tmp/cppBison.yxx.c"
    break;

  case 299: /* empty_instance_identifier: not_paren_empty_instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2508 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6824 "built/tmp/cppBison.yxx.c"
    break;

  case 300: /* empty_instance_identifier: '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2513 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6834 "built/tmp/cppBison.yxx.c"
    break;

  case 301: /* empty_instance_identifier: '(' '*' optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2519 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-7].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-8].attr_list));
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6845 "built/tmp/cppBison.yxx.c"
    break;

  case 302: /* empty_instance_identifier: '(' '&' optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2526 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-7].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-8].attr_list));
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6856 "built/tmp/cppBison.yxx.c"
    break;

  case 303: /* empty_instance_identifier: '(' ANDAND optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2533 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-7].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-8].attr_list));
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6867 "built/tmp/cppBison.yxx.c"
    break;

  case 304: /* type: simple_type  */
#line 2543 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6875 "built/tmp/cppBison.yxx.c"
    break;

  case 305: /* type: TYPENAME_IDENTIFIER  */
#line 2547 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 6887 "built/tmp/cppBison.yxx.c"
    break;

  case 306: /* type: KW_TYPENAME name  */
#line 2555 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6895 "built/tmp/cppBison.yxx.c"
    break;

  case 307: /* type: anonymous_struct  */
#line 2559 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6903 "built/tmp/cppBison.yxx.c"
    break;

  case 308: /* type: named_struct  */
#line 2563 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6911 "built/tmp/cppBison.yxx.c"
    break;

  case 309: /* type: enum  */
#line 2567 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
#line 6919 "built/tmp/cppBison.yxx.c"
    break;

  case 310: /* type: struct_keyword optional_attributes name  */
#line 2571 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6939 "built/tmp/cppBison.yxx.c"
    break;

  case 311: /* type: enum_keyword optional_attributes name_no_final ':' enum_element_type  */
#line 2587 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-4].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-4]).file, (yyvsp[-3].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6959 "built/tmp/cppBison.yxx.c"
    break;

  case 312: /* type: KW_DECLTYPE '(' const_expr ')'  */
#line 2603 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6972 "built/tmp/cppBison.yxx.c"
    break;

  case 313: /* type: KW_DECLTYPE '(' KW_AUTO ')'  */
#line 2612 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6980 "built/tmp/cppBison.yxx.c"
    break;

  case 314: /* type: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2616 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 6994 "built/tmp/cppBison.yxx.c"
    break;

  case 315: /* type: KW_AUTO  */
#line 2626 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7002 "built/tmp/cppBison.yxx.c"
    break;

  case 316: /* type_pack: TYPEPACK_IDENTIFIER  */
#line 2633 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 7014 "built/tmp/cppBison.yxx.c"
    break;

  case 317: /* type_decl: simple_type  */
#line 2644 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7022 "built/tmp/cppBison.yxx.c"
    break;

  case 318: /* type_decl: TYPENAME_IDENTIFIER  */
#line 2648 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.decl) != nullptr);
}
#line 7034 "built/tmp/cppBison.yxx.c"
    break;

  case 319: /* type_decl: KW_TYPENAME name  */
#line 2656 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7042 "built/tmp/cppBison.yxx.c"
    break;

  case 320: /* type_decl: anonymous_struct  */
#line 2660 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 7050 "built/tmp/cppBison.yxx.c"
    break;

  case 321: /* type_decl: named_struct  */
#line 2664 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
#line 7058 "built/tmp/cppBison.yxx.c"
    break;

  case 322: /* type_decl: enum  */
#line 2668 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
#line 7066 "built/tmp/cppBison.yxx.c"
    break;

  case 323: /* type_decl: struct_keyword optional_attributes name  */
#line 2672 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7086 "built/tmp/cppBison.yxx.c"
    break;

  case 324: /* type_decl: enum_keyword optional_attributes name_no_final ':' enum_element_type  */
#line 2688 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-4].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-4]).file, (yyvsp[-3].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7106 "built/tmp/cppBison.yxx.c"
    break;

  case 325: /* type_decl: enum_keyword optional_attributes name  */
#line 2704 "dtool/src/cppparser/cppBison.yxx"
{
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7128 "built/tmp/cppBison.yxx.c"
    break;

  case 326: /* type_decl: KW_DECLTYPE '(' const_expr ')'  */
#line 2722 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.decl) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7141 "built/tmp/cppBison.yxx.c"
    break;

  case 327: /* type_decl: KW_DECLTYPE '(' KW_AUTO ')'  */
#line 2731 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7149 "built/tmp/cppBison.yxx.c"
    break;

  case 328: /* type_decl: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2735 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.decl) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.decl) = enum_type->get_underlying_type();
  }
}
#line 7163 "built/tmp/cppBison.yxx.c"
    break;

  case 329: /* type_decl: KW_AUTO  */
#line 2745 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7171 "built/tmp/cppBison.yxx.c"
    break;

  case 330: /* predefined_type: simple_type  */
#line 2752 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7179 "built/tmp/cppBison.yxx.c"
    break;

  case 331: /* predefined_type: TYPENAME_IDENTIFIER  */
#line 2756 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 7191 "built/tmp/cppBison.yxx.c"
    break;

  case 332: /* predefined_type: KW_TYPENAME name  */
#line 2764 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7199 "built/tmp/cppBison.yxx.c"
    break;

  case 333: /* predefined_type: struct_keyword optional_attributes name  */
#line 2768 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7219 "built/tmp/cppBison.yxx.c"
    break;

  case 334: /* predefined_type: enum_keyword optional_attributes name  */
#line 2784 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7239 "built/tmp/cppBison.yxx.c"
    break;

  case 335: /* predefined_type: KW_DECLTYPE '(' const_expr ')'  */
#line 2800 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7252 "built/tmp/cppBison.yxx.c"
    break;

  case 336: /* predefined_type: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2809 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 7266 "built/tmp/cppBison.yxx.c"
    break;

  case 337: /* predefined_type: KW_AUTO  */
#line 2819 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7274 "built/tmp/cppBison.yxx.c"
    break;

  case 338: /* var_type_decl: type_decl  */
#line 2826 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[0].u.decl);
}
#line 7282 "built/tmp/cppBison.yxx.c"
    break;

  case 339: /* var_type_decl: IDENTIFIER  */
#line 2830 "dtool/src/cppparser/cppBison.yxx"
{
  yyerror(string("unknown type '") + (yyvsp[0].u.identifier)->get_fully_scoped_name() + "'", (yylsp[0]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 7292 "built/tmp/cppBison.yxx.c"
    break;

  case 340: /* full_type: type empty_instance_identifier  */
#line 2838 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7300 "built/tmp/cppBison.yxx.c"
    break;

  case 341: /* full_type: KW_CONST type empty_instance_identifier  */
#line 2842 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7309 "built/tmp/cppBison.yxx.c"
    break;

  case 342: /* full_type: type_pack empty_instance_identifier  */
#line 2847 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7317 "built/tmp/cppBison.yxx.c"
    break;

  case 343: /* full_type: KW_CONST type_pack empty_instance_identifier  */
#line 2851 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7326 "built/tmp/cppBison.yxx.c"
    break;

  case 344: /* $@17: %empty  */
#line 2859 "dtool/src/cppparser/cppBison.yxx"
{
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), nullptr, current_scope,
                                        new_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list));
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7344 "built/tmp/cppBison.yxx.c"
    break;

  case 345: /* anonymous_struct: struct_keyword optional_attributes '{' $@17 cpp '}'  */
#line 2873 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7355 "built/tmp/cppBison.yxx.c"
    break;

  case 346: /* $@18: %empty  */
#line 2883 "dtool/src/cppparser/cppBison.yxx"
{
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list));
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7379 "built/tmp/cppBison.yxx.c"
    break;

  case 347: /* named_struct: struct_keyword optional_attributes name_no_final $@18 maybe_final maybe_class_derivation '{' cpp '}'  */
#line 2903 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7390 "built/tmp/cppBison.yxx.c"
    break;

  case 349: /* maybe_final: KW_FINAL  */
#line 2914 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->_final = true;
}
#line 7398 "built/tmp/cppBison.yxx.c"
    break;

  case 354: /* base_specification: class_derivation_name  */
#line 2931 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_unknown, false);
}
#line 7406 "built/tmp/cppBison.yxx.c"
    break;

  case 355: /* base_specification: KW_PUBLIC class_derivation_name  */
#line 2935 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
#line 7414 "built/tmp/cppBison.yxx.c"
    break;

  case 356: /* base_specification: KW_PROTECTED class_derivation_name  */
#line 2939 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
#line 7422 "built/tmp/cppBison.yxx.c"
    break;

  case 357: /* base_specification: KW_PRIVATE class_derivation_name  */
#line 2943 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
#line 7430 "built/tmp/cppBison.yxx.c"
    break;

  case 358: /* base_specification: KW_VIRTUAL KW_PUBLIC class_derivation_name  */
#line 2947 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7438 "built/tmp/cppBison.yxx.c"
    break;

  case 359: /* base_specification: KW_VIRTUAL KW_PROTECTED class_derivation_name  */
#line 2951 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7446 "built/tmp/cppBison.yxx.c"
    break;

  case 360: /* base_specification: KW_VIRTUAL KW_PRIVATE class_derivation_name  */
#line 2955 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7454 "built/tmp/cppBison.yxx.c"
    break;

  case 361: /* base_specification: KW_PUBLIC KW_VIRTUAL class_derivation_name  */
#line 2959 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7462 "built/tmp/cppBison.yxx.c"
    break;

  case 362: /* base_specification: KW_PROTECTED KW_VIRTUAL class_derivation_name  */
#line 2963 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7470 "built/tmp/cppBison.yxx.c"
    break;

  case 363: /* base_specification: KW_PRIVATE KW_VIRTUAL class_derivation_name  */
#line 2967 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7478 "built/tmp/cppBison.yxx.c"
    break;

  case 364: /* enum: enum_decl '{' enum_body '}'  */
#line 2974 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.enum_type) = current_enum;
  current_enum = nullptr;
}
#line 7487 "built/tmp/cppBison.yxx.c"
    break;

  case 365: /* enum_decl: enum_keyword optional_attributes ':' enum_element_type  */
#line 2982 "dtool/src/cppparser/cppBison.yxx"
{
  current_enum = new CPPEnumType((yyvsp[-3].u.extension_enum), nullptr, (yyvsp[0].u.type), current_scope, nullptr, (yylsp[-3]).file, (yyvsp[-2].attr_list));
}
#line 7495 "built/tmp/cppBison.yxx.c"
    break;

  case 366: /* enum_decl: enum_keyword optional_attributes  */
#line 2986 "dtool/src/cppparser/cppBison.yxx"
{
  current_enum = new CPPEnumType((yyvsp[-1].u.extension_enum), nullptr, current_scope, nullptr, (yylsp[-1]).file, (yyvsp[0].attr_list));
}
#line 7503 "built/tmp/cppBison.yxx.c"
    break;

  case 367: /* enum_decl: enum_keyword optional_attributes name_no_final ':' enum_element_type  */
#line 2990 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[-2].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-4].u.extension_enum), (yyvsp[-2].u.identifier), (yyvsp[0].u.type), current_scope, new_scope, (yylsp[-4]).file, (yyvsp[-3].attr_list));
}
#line 7512 "built/tmp/cppBison.yxx.c"
    break;

  case 368: /* enum_decl: enum_keyword optional_attributes name_no_final  */
#line 2995 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[0].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, new_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list));
}
#line 7521 "built/tmp/cppBison.yxx.c"
    break;

  case 369: /* enum_element_type: simple_int_type  */
#line 3003 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7529 "built/tmp/cppBison.yxx.c"
    break;

  case 370: /* enum_element_type: TYPENAME_IDENTIFIER  */
#line 3007 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
#line 7537 "built/tmp/cppBison.yxx.c"
    break;

  case 372: /* enum_body_trailing_comma: enum_body_trailing_comma name optional_attributes ','  */
#line 3015 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[-2]), (yyvsp[-1].attr_list));
}
#line 7546 "built/tmp/cppBison.yxx.c"
    break;

  case 373: /* enum_body_trailing_comma: enum_body_trailing_comma name optional_attributes '=' const_expr ','  */
#line 3020 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-4].u.identifier)->get_simple_name(), (yyvsp[-1].u.expr), current_lexer, (yylsp[-4]), (yyvsp[-3].attr_list));
}
#line 7555 "built/tmp/cppBison.yxx.c"
    break;

  case 375: /* enum_body: enum_body_trailing_comma name optional_attributes  */
#line 3028 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-1].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[-1]), (yyvsp[0].attr_list));
}
#line 7564 "built/tmp/cppBison.yxx.c"
    break;

  case 376: /* enum_body: enum_body_trailing_comma name optional_attributes '=' const_expr  */
#line 3033 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-3].u.identifier)->get_simple_name(), (yyvsp[0].u.expr), current_lexer, (yylsp[-3]), (yyvsp[-2].attr_list));
}
#line 7573 "built/tmp/cppBison.yxx.c"
    break;

  case 377: /* enum_keyword: KW_ENUM  */
#line 3041 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
#line 7581 "built/tmp/cppBison.yxx.c"
    break;

  case 378: /* enum_keyword: KW_ENUM KW_CLASS  */
#line 3045 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_class;
}
#line 7589 "built/tmp/cppBison.yxx.c"
    break;

  case 379: /* enum_keyword: KW_ENUM KW_STRUCT  */
#line 3049 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_struct;
}
#line 7597 "built/tmp/cppBison.yxx.c"
    break;

  case 380: /* struct_keyword: KW_CLASS  */
#line 3056 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
#line 7605 "built/tmp/cppBison.yxx.c"
    break;

  case 381: /* struct_keyword: KW_STRUCT  */
#line 3060 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
#line 7613 "built/tmp/cppBison.yxx.c"
    break;

  case 382: /* struct_keyword: KW_UNION  */
#line 3064 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
#line 7621 "built/tmp/cppBison.yxx.c"
    break;

  case 383: /* $@19: %empty  */
#line 3071 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-3]).file, (yyvsp[-2].attr_list));
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-3]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7643 "built/tmp/cppBison.yxx.c"
    break;

  case 384: /* namespace_declaration: KW_NAMESPACE optional_attributes name '{' $@19 cpp '}'  */
#line 3089 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 7651 "built/tmp/cppBison.yxx.c"
    break;

  case 385: /* $@20: %empty  */
#line 3093 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7674 "built/tmp/cppBison.yxx.c"
    break;

  case 386: /* namespace_declaration: KW_INLINE KW_NAMESPACE name '{' $@20 cpp '}'  */
#line 3112 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 7682 "built/tmp/cppBison.yxx.c"
    break;

  case 389: /* using_declaration: KW_USING name ';'  */
#line 3121 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7692 "built/tmp/cppBison.yxx.c"
    break;

  case 390: /* using_declaration: KW_USING name optional_attributes '=' full_type ';'  */
#line 3127 "dtool/src/cppparser/cppBison.yxx"
{
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[-1].u.type), (yyvsp[-4].u.identifier), current_scope, (yyvsp[-3].attr_list));
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-5]));
}
#line 7703 "built/tmp/cppBison.yxx.c"
    break;

  case 391: /* using_declaration: KW_USING KW_NAMESPACE name ';'  */
#line 3134 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), true, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7713 "built/tmp/cppBison.yxx.c"
    break;

  case 392: /* using_declaration: KW_USING KW_ENUM name ';'  */
#line 3140 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7723 "built/tmp/cppBison.yxx.c"
    break;

  case 396: /* simple_int_type: KW_BOOL  */
#line 3155 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
#line 7731 "built/tmp/cppBison.yxx.c"
    break;

  case 397: /* simple_int_type: KW_CHAR  */
#line 3159 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
#line 7739 "built/tmp/cppBison.yxx.c"
    break;

  case 398: /* simple_int_type: KW_WCHAR_T  */
#line 3163 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
#line 7747 "built/tmp/cppBison.yxx.c"
    break;

  case 399: /* simple_int_type: KW_CHAR8_T  */
#line 3167 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char8_t);
}
#line 7755 "built/tmp/cppBison.yxx.c"
    break;

  case 400: /* simple_int_type: KW_CHAR16_T  */
#line 3171 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
#line 7763 "built/tmp/cppBison.yxx.c"
    break;

  case 401: /* simple_int_type: KW_CHAR32_T  */
#line 3175 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
#line 7771 "built/tmp/cppBison.yxx.c"
    break;

  case 402: /* simple_int_type: KW_SHORT  */
#line 3179 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
#line 7780 "built/tmp/cppBison.yxx.c"
    break;

  case 403: /* simple_int_type: KW_LONG  */
#line 3184 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
#line 7789 "built/tmp/cppBison.yxx.c"
    break;

  case 404: /* simple_int_type: KW_UNSIGNED  */
#line 3189 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
#line 7798 "built/tmp/cppBison.yxx.c"
    break;

  case 405: /* simple_int_type: KW_SIGNED  */
#line 3194 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
#line 7807 "built/tmp/cppBison.yxx.c"
    break;

  case 406: /* simple_int_type: KW_INT  */
#line 3199 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
#line 7815 "built/tmp/cppBison.yxx.c"
    break;

  case 407: /* simple_int_type: KW_SHORT simple_int_type  */
#line 3203 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
#line 7824 "built/tmp/cppBison.yxx.c"
    break;

  case 408: /* simple_int_type: KW_LONG simple_int_type  */
#line 3208 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
#line 7837 "built/tmp/cppBison.yxx.c"
    break;

  case 409: /* simple_int_type: KW_UNSIGNED simple_int_type  */
#line 3217 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
#line 7846 "built/tmp/cppBison.yxx.c"
    break;

  case 410: /* simple_int_type: KW_SIGNED simple_int_type  */
#line 3222 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
#line 7855 "built/tmp/cppBison.yxx.c"
    break;

  case 411: /* simple_float_type: KW_FLOAT  */
#line 3230 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
#line 7863 "built/tmp/cppBison.yxx.c"
    break;

  case 412: /* simple_float_type: KW_DOUBLE  */
#line 3234 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
#line 7871 "built/tmp/cppBison.yxx.c"
    break;

  case 413: /* simple_float_type: KW_LONG KW_DOUBLE  */
#line 3238 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
#line 7880 "built/tmp/cppBison.yxx.c"
    break;

  case 414: /* simple_void_type: KW_VOID  */
#line 3246 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
#line 7888 "built/tmp/cppBison.yxx.c"
    break;

  case 415: /* $@21: %empty  */
#line 3255 "dtool/src/cppparser/cppBison.yxx"
{
  current_lexer->_resolve_identifiers = false;
}
#line 7896 "built/tmp/cppBison.yxx.c"
    break;

  case 416: /* code: $@21 code_block  */
#line 3259 "dtool/src/cppparser/cppBison.yxx"
{
  current_lexer->_resolve_identifiers = true;
}
#line 7904 "built/tmp/cppBison.yxx.c"
    break;

  case 531: /* element: KW_WHILE  */
#line 3304 "dtool/src/cppparser/cppBison.yxx"
{
}
#line 7911 "built/tmp/cppBison.yxx.c"
    break;

  case 555: /* optional_const_expr: empty  */
#line 3313 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 7919 "built/tmp/cppBison.yxx.c"
    break;

  case 556: /* optional_const_expr: const_expr  */
#line 3317 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7927 "built/tmp/cppBison.yxx.c"
    break;

  case 557: /* optional_const_expr_comma: empty  */
#line 3324 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 7935 "built/tmp/cppBison.yxx.c"
    break;

  case 558: /* optional_const_expr_comma: const_expr_comma  */
#line 3328 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7943 "built/tmp/cppBison.yxx.c"
    break;

  case 559: /* const_expr_comma: const_expr  */
#line 3335 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7951 "built/tmp/cppBison.yxx.c"
    break;

  case 560: /* const_expr_comma: const_expr_comma ',' const_expr  */
#line 3339 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7959 "built/tmp/cppBison.yxx.c"
    break;

  case 561: /* no_angle_bracket_const_expr: const_operand  */
#line 3346 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7967 "built/tmp/cppBison.yxx.c"
    break;

  case 562: /* no_angle_bracket_const_expr: '(' full_type ')' no_angle_bracket_const_expr  */
#line 3350 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 7975 "built/tmp/cppBison.yxx.c"
    break;

  case 563: /* no_angle_bracket_const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3354 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 7983 "built/tmp/cppBison.yxx.c"
    break;

  case 564: /* no_angle_bracket_const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3358 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 7991 "built/tmp/cppBison.yxx.c"
    break;

  case 565: /* no_angle_bracket_const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3362 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 7999 "built/tmp/cppBison.yxx.c"
    break;

  case 566: /* no_angle_bracket_const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3366 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8007 "built/tmp/cppBison.yxx.c"
    break;

  case 567: /* no_angle_bracket_const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3370 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8015 "built/tmp/cppBison.yxx.c"
    break;

  case 568: /* no_angle_bracket_const_expr: KW_SIZEOF no_angle_bracket_const_expr  */
#line 3374 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 8023 "built/tmp/cppBison.yxx.c"
    break;

  case 569: /* no_angle_bracket_const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3378 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8031 "built/tmp/cppBison.yxx.c"
    break;

  case 570: /* no_angle_bracket_const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3382 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8039 "built/tmp/cppBison.yxx.c"
    break;

  case 571: /* no_angle_bracket_const_expr: '!' no_angle_bracket_const_expr  */
#line 3386 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8047 "built/tmp/cppBison.yxx.c"
    break;

  case 572: /* no_angle_bracket_const_expr: '~' no_angle_bracket_const_expr  */
#line 3390 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8055 "built/tmp/cppBison.yxx.c"
    break;

  case 573: /* no_angle_bracket_const_expr: '-' no_angle_bracket_const_expr  */
#line 3394 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8063 "built/tmp/cppBison.yxx.c"
    break;

  case 574: /* no_angle_bracket_const_expr: '+' no_angle_bracket_const_expr  */
#line 3398 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8071 "built/tmp/cppBison.yxx.c"
    break;

  case 575: /* no_angle_bracket_const_expr: '*' no_angle_bracket_const_expr  */
#line 3402 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8079 "built/tmp/cppBison.yxx.c"
    break;

  case 576: /* no_angle_bracket_const_expr: '&' no_angle_bracket_const_expr  */
#line 3406 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8087 "built/tmp/cppBison.yxx.c"
    break;

  case 577: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '*' no_angle_bracket_const_expr  */
#line 3410 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8095 "built/tmp/cppBison.yxx.c"
    break;

  case 578: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '/' no_angle_bracket_const_expr  */
#line 3414 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8103 "built/tmp/cppBison.yxx.c"
    break;

  case 579: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '%' no_angle_bracket_const_expr  */
#line 3418 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8111 "built/tmp/cppBison.yxx.c"
    break;

  case 580: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '+' no_angle_bracket_const_expr  */
#line 3422 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8119 "built/tmp/cppBison.yxx.c"
    break;

  case 581: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '-' no_angle_bracket_const_expr  */
#line 3426 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8127 "built/tmp/cppBison.yxx.c"
    break;

  case 582: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '|' no_angle_bracket_const_expr  */
#line 3430 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8135 "built/tmp/cppBison.yxx.c"
    break;

  case 583: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '^' no_angle_bracket_const_expr  */
#line 3434 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8143 "built/tmp/cppBison.yxx.c"
    break;

  case 584: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '&' no_angle_bracket_const_expr  */
#line 3438 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8151 "built/tmp/cppBison.yxx.c"
    break;

  case 585: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr OROR no_angle_bracket_const_expr  */
#line 3442 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8159 "built/tmp/cppBison.yxx.c"
    break;

  case 586: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr ANDAND no_angle_bracket_const_expr  */
#line 3446 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8167 "built/tmp/cppBison.yxx.c"
    break;

  case 587: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr EQCOMPARE no_angle_bracket_const_expr  */
#line 3450 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8175 "built/tmp/cppBison.yxx.c"
    break;

  case 588: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr NECOMPARE no_angle_bracket_const_expr  */
#line 3454 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8183 "built/tmp/cppBison.yxx.c"
    break;

  case 589: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr LECOMPARE no_angle_bracket_const_expr  */
#line 3458 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8191 "built/tmp/cppBison.yxx.c"
    break;

  case 590: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr GECOMPARE no_angle_bracket_const_expr  */
#line 3462 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8199 "built/tmp/cppBison.yxx.c"
    break;

  case 591: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr SPACESHIP no_angle_bracket_const_expr  */
#line 3466 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8207 "built/tmp/cppBison.yxx.c"
    break;

  case 592: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr LSHIFT no_angle_bracket_const_expr  */
#line 3470 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8215 "built/tmp/cppBison.yxx.c"
    break;

  case 593: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr RSHIFT no_angle_bracket_const_expr  */
#line 3474 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8223 "built/tmp/cppBison.yxx.c"
    break;

  case 594: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '?' no_angle_bracket_const_expr ':' no_angle_bracket_const_expr  */
#line 3478 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8231 "built/tmp/cppBison.yxx.c"
    break;

  case 595: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '[' const_expr ']'  */
#line 3482 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8239 "built/tmp/cppBison.yxx.c"
    break;

  case 596: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '(' const_expr_comma ')'  */
#line 3486 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8247 "built/tmp/cppBison.yxx.c"
    break;

  case 597: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '(' ')'  */
#line 3490 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8255 "built/tmp/cppBison.yxx.c"
    break;

  case 598: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '.' name  */
#line 3494 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 8263 "built/tmp/cppBison.yxx.c"
    break;

  case 599: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr POINTSAT no_angle_bracket_const_expr  */
#line 3498 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8271 "built/tmp/cppBison.yxx.c"
    break;

  case 600: /* no_angle_bracket_const_expr: '(' const_expr_comma ')'  */
#line 3502 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8279 "built/tmp/cppBison.yxx.c"
    break;

  case 601: /* const_expr: const_operand  */
#line 3510 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8287 "built/tmp/cppBison.yxx.c"
    break;

  case 602: /* const_expr: '(' full_type ')' const_expr  */
#line 3514 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8295 "built/tmp/cppBison.yxx.c"
    break;

  case 603: /* const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3518 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8303 "built/tmp/cppBison.yxx.c"
    break;

  case 604: /* const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3522 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8311 "built/tmp/cppBison.yxx.c"
    break;

  case 605: /* const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3526 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8319 "built/tmp/cppBison.yxx.c"
    break;

  case 606: /* const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3530 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8327 "built/tmp/cppBison.yxx.c"
    break;

  case 607: /* const_expr: TYPENAME_IDENTIFIER '(' optional_const_expr_comma ')'  */
#line 3534 "dtool/src/cppparser/cppBison.yxx"
{
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8341 "built/tmp/cppBison.yxx.c"
    break;

  case 608: /* const_expr: TYPENAME_IDENTIFIER '{' optional_const_expr_comma '}'  */
#line 3544 "dtool/src/cppparser/cppBison.yxx"
{
  // Aggregate initialization.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::aggregate_init_op(type, (yyvsp[-1].u.expr)));
}
#line 8355 "built/tmp/cppBison.yxx.c"
    break;

  case 609: /* const_expr: KW_INT '(' optional_const_expr_comma ')'  */
#line 3554 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8365 "built/tmp/cppBison.yxx.c"
    break;

  case 610: /* const_expr: KW_CHAR '(' optional_const_expr_comma ')'  */
#line 3560 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8375 "built/tmp/cppBison.yxx.c"
    break;

  case 611: /* const_expr: KW_WCHAR_T '(' optional_const_expr_comma ')'  */
#line 3566 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8385 "built/tmp/cppBison.yxx.c"
    break;

  case 612: /* const_expr: KW_CHAR8_T '(' optional_const_expr_comma ')'  */
#line 3572 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char8_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8395 "built/tmp/cppBison.yxx.c"
    break;

  case 613: /* const_expr: KW_CHAR16_T '(' optional_const_expr_comma ')'  */
#line 3578 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8405 "built/tmp/cppBison.yxx.c"
    break;

  case 614: /* const_expr: KW_CHAR32_T '(' optional_const_expr_comma ')'  */
#line 3584 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8415 "built/tmp/cppBison.yxx.c"
    break;

  case 615: /* const_expr: KW_BOOL '(' optional_const_expr_comma ')'  */
#line 3590 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8425 "built/tmp/cppBison.yxx.c"
    break;

  case 616: /* const_expr: KW_SHORT '(' optional_const_expr_comma ')'  */
#line 3596 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8436 "built/tmp/cppBison.yxx.c"
    break;

  case 617: /* const_expr: KW_LONG '(' optional_const_expr_comma ')'  */
#line 3603 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8447 "built/tmp/cppBison.yxx.c"
    break;

  case 618: /* const_expr: KW_UNSIGNED '(' optional_const_expr_comma ')'  */
#line 3610 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8458 "built/tmp/cppBison.yxx.c"
    break;

  case 619: /* const_expr: KW_SIGNED '(' optional_const_expr_comma ')'  */
#line 3617 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8469 "built/tmp/cppBison.yxx.c"
    break;

  case 620: /* const_expr: KW_FLOAT '(' optional_const_expr_comma ')'  */
#line 3624 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8479 "built/tmp/cppBison.yxx.c"
    break;

  case 621: /* const_expr: KW_DOUBLE '(' optional_const_expr_comma ')'  */
#line 3630 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8489 "built/tmp/cppBison.yxx.c"
    break;

  case 622: /* const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3636 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8497 "built/tmp/cppBison.yxx.c"
    break;

  case 623: /* const_expr: KW_SIZEOF const_expr  */
#line 3640 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 8505 "built/tmp/cppBison.yxx.c"
    break;

  case 624: /* const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3644 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8513 "built/tmp/cppBison.yxx.c"
    break;

  case 625: /* const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3648 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8521 "built/tmp/cppBison.yxx.c"
    break;

  case 626: /* const_expr: KW_NEW predefined_type  */
#line 3652 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8529 "built/tmp/cppBison.yxx.c"
    break;

  case 627: /* const_expr: KW_NEW predefined_type '(' optional_const_expr_comma ')'  */
#line 3656 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8537 "built/tmp/cppBison.yxx.c"
    break;

  case 628: /* const_expr: KW_TYPEID '(' full_type ')'  */
#line 3660 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 8552 "built/tmp/cppBison.yxx.c"
    break;

  case 629: /* const_expr: KW_TYPEID '(' const_expr ')'  */
#line 3671 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 8567 "built/tmp/cppBison.yxx.c"
    break;

  case 630: /* const_expr: '!' const_expr  */
#line 3682 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8575 "built/tmp/cppBison.yxx.c"
    break;

  case 631: /* const_expr: '~' const_expr  */
#line 3686 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8583 "built/tmp/cppBison.yxx.c"
    break;

  case 632: /* const_expr: '-' const_expr  */
#line 3690 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8591 "built/tmp/cppBison.yxx.c"
    break;

  case 633: /* const_expr: '+' const_expr  */
#line 3694 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8599 "built/tmp/cppBison.yxx.c"
    break;

  case 634: /* const_expr: '*' const_expr  */
#line 3698 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8607 "built/tmp/cppBison.yxx.c"
    break;

  case 635: /* const_expr: '&' const_expr  */
#line 3702 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8615 "built/tmp/cppBison.yxx.c"
    break;

  case 636: /* const_expr: const_expr '*' const_expr  */
#line 3706 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8623 "built/tmp/cppBison.yxx.c"
    break;

  case 637: /* const_expr: const_expr '/' const_expr  */
#line 3710 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8631 "built/tmp/cppBison.yxx.c"
    break;

  case 638: /* const_expr: const_expr '%' const_expr  */
#line 3714 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8639 "built/tmp/cppBison.yxx.c"
    break;

  case 639: /* const_expr: const_expr '+' const_expr  */
#line 3718 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8647 "built/tmp/cppBison.yxx.c"
    break;

  case 640: /* const_expr: const_expr '-' const_expr  */
#line 3722 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8655 "built/tmp/cppBison.yxx.c"
    break;

  case 641: /* const_expr: const_expr '|' const_expr  */
#line 3726 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8663 "built/tmp/cppBison.yxx.c"
    break;

  case 642: /* const_expr: const_expr '^' const_expr  */
#line 3730 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8671 "built/tmp/cppBison.yxx.c"
    break;

  case 643: /* const_expr: const_expr '&' const_expr  */
#line 3734 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8679 "built/tmp/cppBison.yxx.c"
    break;

  case 644: /* const_expr: const_expr OROR const_expr  */
#line 3738 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8687 "built/tmp/cppBison.yxx.c"
    break;

  case 645: /* const_expr: const_expr ANDAND const_expr  */
#line 3742 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8695 "built/tmp/cppBison.yxx.c"
    break;

  case 646: /* const_expr: const_expr EQCOMPARE const_expr  */
#line 3746 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8703 "built/tmp/cppBison.yxx.c"
    break;

  case 647: /* const_expr: const_expr NECOMPARE const_expr  */
#line 3750 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8711 "built/tmp/cppBison.yxx.c"
    break;

  case 648: /* const_expr: const_expr LECOMPARE const_expr  */
#line 3754 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8719 "built/tmp/cppBison.yxx.c"
    break;

  case 649: /* const_expr: const_expr GECOMPARE const_expr  */
#line 3758 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8727 "built/tmp/cppBison.yxx.c"
    break;

  case 650: /* const_expr: const_expr SPACESHIP const_expr  */
#line 3762 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8735 "built/tmp/cppBison.yxx.c"
    break;

  case 651: /* const_expr: const_expr '<' const_expr  */
#line 3766 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8743 "built/tmp/cppBison.yxx.c"
    break;

  case 652: /* const_expr: const_expr '>' const_expr  */
#line 3770 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8751 "built/tmp/cppBison.yxx.c"
    break;

  case 653: /* const_expr: const_expr LSHIFT const_expr  */
#line 3774 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8759 "built/tmp/cppBison.yxx.c"
    break;

  case 654: /* const_expr: const_expr RSHIFT const_expr  */
#line 3778 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8767 "built/tmp/cppBison.yxx.c"
    break;

  case 655: /* const_expr: const_expr '?' const_expr ':' const_expr  */
#line 3782 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8775 "built/tmp/cppBison.yxx.c"
    break;

  case 656: /* const_expr: const_expr '[' const_expr ']'  */
#line 3786 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8783 "built/tmp/cppBison.yxx.c"
    break;

  case 657: /* const_expr: const_expr '(' const_expr_comma ')'  */
#line 3790 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8791 "built/tmp/cppBison.yxx.c"
    break;

  case 658: /* const_expr: const_expr '(' ')'  */
#line 3794 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8799 "built/tmp/cppBison.yxx.c"
    break;

  case 659: /* const_expr: KW_NOEXCEPT_LPAREN const_expr ')'  */
#line 3798 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(KW_NOEXCEPT, (yyvsp[-1].u.expr));
}
#line 8807 "built/tmp/cppBison.yxx.c"
    break;

  case 660: /* const_expr: const_expr '.' name  */
#line 3802 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 8815 "built/tmp/cppBison.yxx.c"
    break;

  case 661: /* const_expr: const_expr POINTSAT const_expr  */
#line 3806 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8823 "built/tmp/cppBison.yxx.c"
    break;

  case 662: /* const_expr: '(' const_expr_comma ')'  */
#line 3810 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8831 "built/tmp/cppBison.yxx.c"
    break;

  case 663: /* const_operand: INTEGER  */
#line 3817 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8839 "built/tmp/cppBison.yxx.c"
    break;

  case 664: /* const_operand: KW_TRUE  */
#line 3821 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(true);
}
#line 8847 "built/tmp/cppBison.yxx.c"
    break;

  case 665: /* const_operand: KW_FALSE  */
#line 3825 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(false);
}
#line 8855 "built/tmp/cppBison.yxx.c"
    break;

  case 666: /* const_operand: CHAR_TOK  */
#line 3829 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8863 "built/tmp/cppBison.yxx.c"
    break;

  case 667: /* const_operand: REAL  */
#line 3833 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 8871 "built/tmp/cppBison.yxx.c"
    break;

  case 668: /* const_operand: string_literal  */
#line 3837 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8879 "built/tmp/cppBison.yxx.c"
    break;

  case 669: /* const_operand: CUSTOM_LITERAL  */
#line 3841 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8887 "built/tmp/cppBison.yxx.c"
    break;

  case 670: /* const_operand: IDENTIFIER  */
#line 3845 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 8895 "built/tmp/cppBison.yxx.c"
    break;

  case 671: /* const_operand: KW_FINAL  */
#line 3849 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8905 "built/tmp/cppBison.yxx.c"
    break;

  case 672: /* const_operand: KW_OVERRIDE  */
#line 3855 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8915 "built/tmp/cppBison.yxx.c"
    break;

  case 673: /* const_operand: KW_NULLPTR  */
#line 3861 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 8923 "built/tmp/cppBison.yxx.c"
    break;

  case 674: /* const_operand: '[' capture_list ']' function_post optional_attributes maybe_trailing_return_type '{' code '}'  */
#line 3865 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-7].u.closure_type)->_flags = (yyvsp[-5].u.integer);
  (yyvsp[-7].u.closure_type)->_attributes = (yyvsp[-4].attr_list);
  (yyvsp[-7].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-7].u.closure_type)));
}
#line 8934 "built/tmp/cppBison.yxx.c"
    break;

  case 675: /* const_operand: '[' capture_list ']' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type '{' code '}'  */
#line 3872 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-10].u.closure_type)->_parameters = (yyvsp[-7].u.param_list);
  (yyvsp[-10].u.closure_type)->_flags = (yyvsp[-5].u.integer);
  (yyvsp[-10].u.closure_type)->_attributes = (yyvsp[-4].attr_list);
  (yyvsp[-10].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-10].u.closure_type)));
}
#line 8946 "built/tmp/cppBison.yxx.c"
    break;

  case 676: /* const_operand: KW_HAS_VIRTUAL_DESTRUCTOR '(' full_type ')'  */
#line 3880 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_HAS_VIRTUAL_DESTRUCTOR, (yyvsp[-1].u.type)));
}
#line 8954 "built/tmp/cppBison.yxx.c"
    break;

  case 677: /* const_operand: KW_IS_ABSTRACT '(' full_type ')'  */
#line 3884 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ABSTRACT, (yyvsp[-1].u.type)));
}
#line 8962 "built/tmp/cppBison.yxx.c"
    break;

  case 678: /* const_operand: KW_IS_BASE_OF '(' full_type ',' full_type ')'  */
#line 3888 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8970 "built/tmp/cppBison.yxx.c"
    break;

  case 679: /* const_operand: KW_IS_CLASS '(' full_type ')'  */
#line 3892 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-1].u.type)));
}
#line 8978 "built/tmp/cppBison.yxx.c"
    break;

  case 680: /* const_operand: KW_IS_CONSTRUCTIBLE '(' full_type ')'  */
#line 3896 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8986 "built/tmp/cppBison.yxx.c"
    break;

  case 681: /* const_operand: KW_IS_CONSTRUCTIBLE '(' full_type ',' full_type ')'  */
#line 3900 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8994 "built/tmp/cppBison.yxx.c"
    break;

  case 682: /* const_operand: KW_IS_CONVERTIBLE_TO '(' full_type ',' full_type ')'  */
#line 3904 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONVERTIBLE_TO, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 9002 "built/tmp/cppBison.yxx.c"
    break;

  case 683: /* const_operand: KW_IS_DESTRUCTIBLE '(' full_type ')'  */
#line 3908 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_DESTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 9010 "built/tmp/cppBison.yxx.c"
    break;

  case 684: /* const_operand: KW_IS_EMPTY '(' full_type ')'  */
#line 3912 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_EMPTY, (yyvsp[-1].u.type)));
}
#line 9018 "built/tmp/cppBison.yxx.c"
    break;

  case 685: /* const_operand: KW_IS_ENUM '(' full_type ')'  */
#line 3916 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ENUM, (yyvsp[-1].u.type)));
}
#line 9026 "built/tmp/cppBison.yxx.c"
    break;

  case 686: /* const_operand: KW_IS_FINAL '(' full_type ')'  */
#line 3920 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FINAL, (yyvsp[-1].u.type)));
}
#line 9034 "built/tmp/cppBison.yxx.c"
    break;

  case 687: /* const_operand: KW_IS_FUNDAMENTAL '(' full_type ')'  */
#line 3924 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FUNDAMENTAL, (yyvsp[-1].u.type)));
}
#line 9042 "built/tmp/cppBison.yxx.c"
    break;

  case 688: /* const_operand: KW_IS_POD '(' full_type ')'  */
#line 3928 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POD, (yyvsp[-1].u.type)));
}
#line 9050 "built/tmp/cppBison.yxx.c"
    break;

  case 689: /* const_operand: KW_IS_POLYMORPHIC '(' full_type ')'  */
#line 3932 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POLYMORPHIC, (yyvsp[-1].u.type)));
}
#line 9058 "built/tmp/cppBison.yxx.c"
    break;

  case 690: /* const_operand: KW_IS_STANDARD_LAYOUT '(' full_type ')'  */
#line 3936 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_STANDARD_LAYOUT, (yyvsp[-1].u.type)));
}
#line 9066 "built/tmp/cppBison.yxx.c"
    break;

  case 691: /* const_operand: KW_IS_TRIVIAL '(' full_type ')'  */
#line 3940 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIAL, (yyvsp[-1].u.type)));
}
#line 9074 "built/tmp/cppBison.yxx.c"
    break;

  case 692: /* const_operand: KW_IS_UNION '(' full_type ')'  */
#line 3944 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_UNION, (yyvsp[-1].u.type)));
}
#line 9082 "built/tmp/cppBison.yxx.c"
    break;

  case 693: /* formal_const_expr: formal_const_operand  */
#line 3958 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9090 "built/tmp/cppBison.yxx.c"
    break;

  case 694: /* formal_const_expr: '(' full_type ')' const_expr  */
#line 3962 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 9098 "built/tmp/cppBison.yxx.c"
    break;

  case 695: /* formal_const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3966 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 9106 "built/tmp/cppBison.yxx.c"
    break;

  case 696: /* formal_const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3970 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 9114 "built/tmp/cppBison.yxx.c"
    break;

  case 697: /* formal_const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3974 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 9122 "built/tmp/cppBison.yxx.c"
    break;

  case 698: /* formal_const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3978 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 9130 "built/tmp/cppBison.yxx.c"
    break;

  case 699: /* formal_const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3982 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 9138 "built/tmp/cppBison.yxx.c"
    break;

  case 700: /* formal_const_expr: KW_SIZEOF formal_const_expr  */
#line 3986 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 9146 "built/tmp/cppBison.yxx.c"
    break;

  case 701: /* formal_const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3990 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 9154 "built/tmp/cppBison.yxx.c"
    break;

  case 702: /* formal_const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3994 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 9162 "built/tmp/cppBison.yxx.c"
    break;

  case 703: /* formal_const_expr: KW_NEW predefined_type  */
#line 3998 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 9170 "built/tmp/cppBison.yxx.c"
    break;

  case 704: /* formal_const_expr: KW_NEW predefined_type '(' optional_const_expr_comma ')'  */
#line 4002 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 9178 "built/tmp/cppBison.yxx.c"
    break;

  case 705: /* formal_const_expr: KW_TYPEID '(' full_type ')'  */
#line 4006 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 9193 "built/tmp/cppBison.yxx.c"
    break;

  case 706: /* formal_const_expr: KW_TYPEID '(' const_expr ')'  */
#line 4017 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 9208 "built/tmp/cppBison.yxx.c"
    break;

  case 707: /* formal_const_expr: '!' const_expr  */
#line 4028 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 9216 "built/tmp/cppBison.yxx.c"
    break;

  case 708: /* formal_const_expr: '~' const_expr  */
#line 4032 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 9224 "built/tmp/cppBison.yxx.c"
    break;

  case 709: /* formal_const_expr: '-' const_expr  */
#line 4036 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 9232 "built/tmp/cppBison.yxx.c"
    break;

  case 710: /* formal_const_expr: '+' const_expr  */
#line 4040 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 9240 "built/tmp/cppBison.yxx.c"
    break;

  case 711: /* formal_const_expr: '&' const_expr  */
#line 4044 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 9248 "built/tmp/cppBison.yxx.c"
    break;

  case 712: /* formal_const_expr: formal_const_expr '*' const_expr  */
#line 4048 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9256 "built/tmp/cppBison.yxx.c"
    break;

  case 713: /* formal_const_expr: formal_const_expr '/' const_expr  */
#line 4052 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9264 "built/tmp/cppBison.yxx.c"
    break;

  case 714: /* formal_const_expr: formal_const_expr '%' const_expr  */
#line 4056 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9272 "built/tmp/cppBison.yxx.c"
    break;

  case 715: /* formal_const_expr: formal_const_expr '+' const_expr  */
#line 4060 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9280 "built/tmp/cppBison.yxx.c"
    break;

  case 716: /* formal_const_expr: formal_const_expr '-' const_expr  */
#line 4064 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9288 "built/tmp/cppBison.yxx.c"
    break;

  case 717: /* formal_const_expr: formal_const_expr '|' const_expr  */
#line 4068 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9296 "built/tmp/cppBison.yxx.c"
    break;

  case 718: /* formal_const_expr: formal_const_expr '^' const_expr  */
#line 4072 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9304 "built/tmp/cppBison.yxx.c"
    break;

  case 719: /* formal_const_expr: formal_const_expr '&' const_expr  */
#line 4076 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9312 "built/tmp/cppBison.yxx.c"
    break;

  case 720: /* formal_const_expr: formal_const_expr OROR const_expr  */
#line 4080 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9320 "built/tmp/cppBison.yxx.c"
    break;

  case 721: /* formal_const_expr: formal_const_expr ANDAND const_expr  */
#line 4084 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9328 "built/tmp/cppBison.yxx.c"
    break;

  case 722: /* formal_const_expr: formal_const_expr EQCOMPARE const_expr  */
#line 4088 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9336 "built/tmp/cppBison.yxx.c"
    break;

  case 723: /* formal_const_expr: formal_const_expr NECOMPARE const_expr  */
#line 4092 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9344 "built/tmp/cppBison.yxx.c"
    break;

  case 724: /* formal_const_expr: formal_const_expr LECOMPARE const_expr  */
#line 4096 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9352 "built/tmp/cppBison.yxx.c"
    break;

  case 725: /* formal_const_expr: formal_const_expr GECOMPARE const_expr  */
#line 4100 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9360 "built/tmp/cppBison.yxx.c"
    break;

  case 726: /* formal_const_expr: formal_const_expr SPACESHIP const_expr  */
#line 4104 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9368 "built/tmp/cppBison.yxx.c"
    break;

  case 727: /* formal_const_expr: formal_const_expr '<' const_expr  */
#line 4108 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9376 "built/tmp/cppBison.yxx.c"
    break;

  case 728: /* formal_const_expr: formal_const_expr '>' const_expr  */
#line 4112 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9384 "built/tmp/cppBison.yxx.c"
    break;

  case 729: /* formal_const_expr: formal_const_expr LSHIFT const_expr  */
#line 4116 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9392 "built/tmp/cppBison.yxx.c"
    break;

  case 730: /* formal_const_expr: formal_const_expr RSHIFT const_expr  */
#line 4120 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9400 "built/tmp/cppBison.yxx.c"
    break;

  case 731: /* formal_const_expr: formal_const_expr '?' const_expr ':' const_expr  */
#line 4124 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9408 "built/tmp/cppBison.yxx.c"
    break;

  case 732: /* formal_const_expr: formal_const_expr '[' const_expr ']'  */
#line 4128 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9416 "built/tmp/cppBison.yxx.c"
    break;

  case 733: /* formal_const_expr: formal_const_expr '(' const_expr_comma ')'  */
#line 4132 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9424 "built/tmp/cppBison.yxx.c"
    break;

  case 734: /* formal_const_expr: formal_const_expr '(' ')'  */
#line 4136 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 9432 "built/tmp/cppBison.yxx.c"
    break;

  case 735: /* formal_const_expr: formal_const_expr '.' name  */
#line 4140 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 9440 "built/tmp/cppBison.yxx.c"
    break;

  case 736: /* formal_const_expr: formal_const_expr POINTSAT const_expr  */
#line 4144 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9448 "built/tmp/cppBison.yxx.c"
    break;

  case 737: /* formal_const_expr: '(' const_expr_comma ')'  */
#line 4148 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 9456 "built/tmp/cppBison.yxx.c"
    break;

  case 738: /* formal_const_operand: INTEGER  */
#line 4155 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9464 "built/tmp/cppBison.yxx.c"
    break;

  case 739: /* formal_const_operand: KW_TRUE  */
#line 4159 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(true);
}
#line 9472 "built/tmp/cppBison.yxx.c"
    break;

  case 740: /* formal_const_operand: KW_FALSE  */
#line 4163 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(false);
}
#line 9480 "built/tmp/cppBison.yxx.c"
    break;

  case 741: /* formal_const_operand: CHAR_TOK  */
#line 4167 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9488 "built/tmp/cppBison.yxx.c"
    break;

  case 742: /* formal_const_operand: REAL  */
#line 4171 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 9496 "built/tmp/cppBison.yxx.c"
    break;

  case 743: /* formal_const_operand: string_literal  */
#line 4175 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9504 "built/tmp/cppBison.yxx.c"
    break;

  case 744: /* formal_const_operand: CUSTOM_LITERAL  */
#line 4179 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9512 "built/tmp/cppBison.yxx.c"
    break;

  case 745: /* formal_const_operand: IDENTIFIER  */
#line 4183 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 9520 "built/tmp/cppBison.yxx.c"
    break;

  case 746: /* formal_const_operand: KW_FINAL  */
#line 4187 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9530 "built/tmp/cppBison.yxx.c"
    break;

  case 747: /* formal_const_operand: KW_OVERRIDE  */
#line 4193 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9540 "built/tmp/cppBison.yxx.c"
    break;

  case 748: /* formal_const_operand: KW_NULLPTR  */
#line 4199 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 9548 "built/tmp/cppBison.yxx.c"
    break;

  case 749: /* capture_list: empty  */
#line 4207 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType();
}
#line 9556 "built/tmp/cppBison.yxx.c"
    break;

  case 750: /* capture_list: '='  */
#line 4211 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_value);
}
#line 9564 "built/tmp/cppBison.yxx.c"
    break;

  case 751: /* capture_list: '&'  */
#line 4215 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_reference);
}
#line 9572 "built/tmp/cppBison.yxx.c"
    break;

  case 752: /* capture_list: capture maybe_initialize  */
#line 4219 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType();
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9583 "built/tmp/cppBison.yxx.c"
    break;

  case 753: /* capture_list: capture_list ',' capture maybe_initialize  */
#line 4226 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = (yyvsp[-3].u.closure_type);
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9594 "built/tmp/cppBison.yxx.c"
    break;

  case 754: /* capture: '&' name  */
#line 4236 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9604 "built/tmp/cppBison.yxx.c"
    break;

  case 755: /* capture: '&' name ELLIPSIS  */
#line 4242 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[-1].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9614 "built/tmp/cppBison.yxx.c"
    break;

  case 756: /* capture: name  */
#line 4248 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  if ((yyval.u.capture)->_name == "this") {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
  } else {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  }
}
#line 9628 "built/tmp/cppBison.yxx.c"
    break;

  case 757: /* capture: '*' name  */
#line 4258 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  if ((yyval.u.capture)->_name != "this") {
    yywarning("only capture name 'this' may be preceded by an asterisk", (yylsp[0]));
  }
}
#line 9641 "built/tmp/cppBison.yxx.c"
    break;

  case 758: /* class_derivation_name: name  */
#line 4270 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == nullptr) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 9653 "built/tmp/cppBison.yxx.c"
    break;

  case 759: /* class_derivation_name: KW_TYPENAME name  */
#line 4278 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 9661 "built/tmp/cppBison.yxx.c"
    break;

  case 760: /* class_derivation_name: name ELLIPSIS  */
#line 4282 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[-1].u.identifier));
  ctp->_packed = true;
  (yyval.u.type) = CPPType::new_type(ctp);
}
#line 9671 "built/tmp/cppBison.yxx.c"
    break;

  case 761: /* name: IDENTIFIER  */
#line 4312 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9679 "built/tmp/cppBison.yxx.c"
    break;

  case 762: /* name: TYPENAME_IDENTIFIER  */
#line 4316 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9687 "built/tmp/cppBison.yxx.c"
    break;

  case 763: /* name: TYPEPACK_IDENTIFIER  */
#line 4320 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9695 "built/tmp/cppBison.yxx.c"
    break;

  case 764: /* name: KW_FINAL  */
#line 4324 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[0]));
}
#line 9703 "built/tmp/cppBison.yxx.c"
    break;

  case 765: /* name: KW_OVERRIDE  */
#line 4328 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9711 "built/tmp/cppBison.yxx.c"
    break;

  case 766: /* name: KW_SIGNED  */
#line 4332 "dtool/src/cppparser/cppBison.yxx"
{
  // This is not a keyword in Python, so it is useful to be able to use this
  // in MAKE_PROPERTY definitions, etc.
  (yyval.u.identifier) = new CPPIdentifier("signed", (yylsp[0]));
}
#line 9721 "built/tmp/cppBison.yxx.c"
    break;

  case 767: /* name: KW_FLOAT  */
#line 4338 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("float", (yylsp[0]));
}
#line 9729 "built/tmp/cppBison.yxx.c"
    break;

  case 768: /* name: KW_PUBLIC  */
#line 4342 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("public", (yylsp[0]));
}
#line 9737 "built/tmp/cppBison.yxx.c"
    break;

  case 769: /* name: KW_PRIVATE  */
#line 4346 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("private", (yylsp[0]));
}
#line 9745 "built/tmp/cppBison.yxx.c"
    break;

  case 770: /* name: KW_STATIC  */
#line 4350 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("static", (yylsp[0]));
}
#line 9753 "built/tmp/cppBison.yxx.c"
    break;

  case 771: /* name: KW_DEFAULT  */
#line 4354 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("default", (yylsp[0]));
}
#line 9761 "built/tmp/cppBison.yxx.c"
    break;

  case 772: /* name_no_final: IDENTIFIER  */
#line 4365 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9769 "built/tmp/cppBison.yxx.c"
    break;

  case 773: /* name_no_final: TYPENAME_IDENTIFIER  */
#line 4369 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9777 "built/tmp/cppBison.yxx.c"
    break;

  case 774: /* name_no_final: TYPEPACK_IDENTIFIER  */
#line 4373 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9785 "built/tmp/cppBison.yxx.c"
    break;

  case 775: /* name_no_final: KW_OVERRIDE  */
#line 4377 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9793 "built/tmp/cppBison.yxx.c"
    break;

  case 776: /* string_literal: SIMPLE_STRING  */
#line 4385 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 9801 "built/tmp/cppBison.yxx.c"
    break;

  case 777: /* string_literal: STRING_LITERAL  */
#line 4389 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9809 "built/tmp/cppBison.yxx.c"
    break;

  case 778: /* string_literal: string_literal SIMPLE_STRING  */
#line 4393 "dtool/src/cppparser/cppBison.yxx"
{
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  (yyval.u.expr)->_str += (yyvsp[0].str);
}
#line 9819 "built/tmp/cppBison.yxx.c"
    break;

  case 779: /* string_literal: string_literal STRING_LITERAL  */
#line 4399 "dtool/src/cppparser/cppBison.yxx"
{
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  if ((yyvsp[0].u.expr)->_type != CPPExpression::T_string && (yyvsp[0].u.expr)->_type != (yyvsp[-1].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[0].u.expr)->_str;
}
#line 9832 "built/tmp/cppBison.yxx.c"
    break;


#line 9836 "built/tmp/cppBison.yxx.c"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

