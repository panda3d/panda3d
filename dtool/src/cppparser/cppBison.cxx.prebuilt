/* A Bison parser, made by GNU Bison 2.7.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yylval          cppyylval
#define yychar          cppyychar
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs
#define yylloc          cppyylloc

/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 6 "dtool/src/cppparser/cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL;
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


/* Line 371 of yacc.c  */
#line 270 "built/tmp/cppBison.yxx.c"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "cppBison.yxx.h".  */
#ifndef YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     REAL = 258,
     INTEGER = 259,
     CHAR_TOK = 260,
     SIMPLE_STRING = 261,
     SIMPLE_IDENTIFIER = 262,
     STRING_LITERAL = 263,
     CUSTOM_LITERAL = 264,
     IDENTIFIER = 265,
     TYPENAME_IDENTIFIER = 266,
     SCOPING = 267,
     TYPEDEFNAME = 268,
     ELLIPSIS = 269,
     OROR = 270,
     ANDAND = 271,
     EQCOMPARE = 272,
     NECOMPARE = 273,
     LECOMPARE = 274,
     GECOMPARE = 275,
     LSHIFT = 276,
     RSHIFT = 277,
     POINTSAT_STAR = 278,
     DOT_STAR = 279,
     UNARY = 280,
     UNARY_NOT = 281,
     UNARY_NEGATE = 282,
     UNARY_MINUS = 283,
     UNARY_PLUS = 284,
     UNARY_STAR = 285,
     UNARY_REF = 286,
     POINTSAT = 287,
     SCOPE = 288,
     PLUSPLUS = 289,
     MINUSMINUS = 290,
     TIMESEQUAL = 291,
     DIVIDEEQUAL = 292,
     MODEQUAL = 293,
     PLUSEQUAL = 294,
     MINUSEQUAL = 295,
     OREQUAL = 296,
     ANDEQUAL = 297,
     XOREQUAL = 298,
     LSHIFTEQUAL = 299,
     RSHIFTEQUAL = 300,
     KW_ALIGNAS = 301,
     KW_ALIGNOF = 302,
     KW_AUTO = 303,
     KW_BEGIN_PUBLISH = 304,
     KW_BLOCKING = 305,
     KW_BOOL = 306,
     KW_CATCH = 307,
     KW_CHAR = 308,
     KW_CHAR16_T = 309,
     KW_CHAR32_T = 310,
     KW_CLASS = 311,
     KW_CONST = 312,
     KW_CONSTEXPR = 313,
     KW_CONST_CAST = 314,
     KW_DECLTYPE = 315,
     KW_DEFAULT = 316,
     KW_DELETE = 317,
     KW_DOUBLE = 318,
     KW_DYNAMIC_CAST = 319,
     KW_ELSE = 320,
     KW_END_PUBLISH = 321,
     KW_ENUM = 322,
     KW_EXTENSION = 323,
     KW_EXTERN = 324,
     KW_EXPLICIT = 325,
     KW_PUBLISHED = 326,
     KW_FALSE = 327,
     KW_FINAL = 328,
     KW_FLOAT = 329,
     KW_FRIEND = 330,
     KW_FOR = 331,
     KW_GOTO = 332,
     KW_IF = 333,
     KW_INLINE = 334,
     KW_INT = 335,
     KW_LONG = 336,
     KW_MAKE_PROPERTY = 337,
     KW_MAKE_PROPERTY2 = 338,
     KW_MAKE_SEQ = 339,
     KW_MUTABLE = 340,
     KW_NAMESPACE = 341,
     KW_NEW = 342,
     KW_NOEXCEPT = 343,
     KW_NULLPTR = 344,
     KW_OPERATOR = 345,
     KW_OVERRIDE = 346,
     KW_PRIVATE = 347,
     KW_PROTECTED = 348,
     KW_PUBLIC = 349,
     KW_REGISTER = 350,
     KW_REINTERPRET_CAST = 351,
     KW_RETURN = 352,
     KW_SHORT = 353,
     KW_SIGNED = 354,
     KW_SIZEOF = 355,
     KW_STATIC = 356,
     KW_STATIC_ASSERT = 357,
     KW_STATIC_CAST = 358,
     KW_STRUCT = 359,
     KW_TEMPLATE = 360,
     KW_THREAD_LOCAL = 361,
     KW_THROW = 362,
     KW_TRUE = 363,
     KW_TRY = 364,
     KW_TYPEDEF = 365,
     KW_TYPEID = 366,
     KW_TYPENAME = 367,
     KW_UNION = 368,
     KW_UNSIGNED = 369,
     KW_USING = 370,
     KW_VIRTUAL = 371,
     KW_VOID = 372,
     KW_VOLATILE = 373,
     KW_WCHAR_T = 374,
     KW_WHILE = 375,
     START_CPP = 376,
     START_CONST_EXPR = 377,
     START_TYPE = 378
   };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define SIMPLE_STRING 261
#define SIMPLE_IDENTIFIER 262
#define STRING_LITERAL 263
#define CUSTOM_LITERAL 264
#define IDENTIFIER 265
#define TYPENAME_IDENTIFIER 266
#define SCOPING 267
#define TYPEDEFNAME 268
#define ELLIPSIS 269
#define OROR 270
#define ANDAND 271
#define EQCOMPARE 272
#define NECOMPARE 273
#define LECOMPARE 274
#define GECOMPARE 275
#define LSHIFT 276
#define RSHIFT 277
#define POINTSAT_STAR 278
#define DOT_STAR 279
#define UNARY 280
#define UNARY_NOT 281
#define UNARY_NEGATE 282
#define UNARY_MINUS 283
#define UNARY_PLUS 284
#define UNARY_STAR 285
#define UNARY_REF 286
#define POINTSAT 287
#define SCOPE 288
#define PLUSPLUS 289
#define MINUSMINUS 290
#define TIMESEQUAL 291
#define DIVIDEEQUAL 292
#define MODEQUAL 293
#define PLUSEQUAL 294
#define MINUSEQUAL 295
#define OREQUAL 296
#define ANDEQUAL 297
#define XOREQUAL 298
#define LSHIFTEQUAL 299
#define RSHIFTEQUAL 300
#define KW_ALIGNAS 301
#define KW_ALIGNOF 302
#define KW_AUTO 303
#define KW_BEGIN_PUBLISH 304
#define KW_BLOCKING 305
#define KW_BOOL 306
#define KW_CATCH 307
#define KW_CHAR 308
#define KW_CHAR16_T 309
#define KW_CHAR32_T 310
#define KW_CLASS 311
#define KW_CONST 312
#define KW_CONSTEXPR 313
#define KW_CONST_CAST 314
#define KW_DECLTYPE 315
#define KW_DEFAULT 316
#define KW_DELETE 317
#define KW_DOUBLE 318
#define KW_DYNAMIC_CAST 319
#define KW_ELSE 320
#define KW_END_PUBLISH 321
#define KW_ENUM 322
#define KW_EXTENSION 323
#define KW_EXTERN 324
#define KW_EXPLICIT 325
#define KW_PUBLISHED 326
#define KW_FALSE 327
#define KW_FINAL 328
#define KW_FLOAT 329
#define KW_FRIEND 330
#define KW_FOR 331
#define KW_GOTO 332
#define KW_IF 333
#define KW_INLINE 334
#define KW_INT 335
#define KW_LONG 336
#define KW_MAKE_PROPERTY 337
#define KW_MAKE_PROPERTY2 338
#define KW_MAKE_SEQ 339
#define KW_MUTABLE 340
#define KW_NAMESPACE 341
#define KW_NEW 342
#define KW_NOEXCEPT 343
#define KW_NULLPTR 344
#define KW_OPERATOR 345
#define KW_OVERRIDE 346
#define KW_PRIVATE 347
#define KW_PROTECTED 348
#define KW_PUBLIC 349
#define KW_REGISTER 350
#define KW_REINTERPRET_CAST 351
#define KW_RETURN 352
#define KW_SHORT 353
#define KW_SIGNED 354
#define KW_SIZEOF 355
#define KW_STATIC 356
#define KW_STATIC_ASSERT 357
#define KW_STATIC_CAST 358
#define KW_STRUCT 359
#define KW_TEMPLATE 360
#define KW_THREAD_LOCAL 361
#define KW_THROW 362
#define KW_TRUE 363
#define KW_TRY 364
#define KW_TYPEDEF 365
#define KW_TYPEID 366
#define KW_TYPENAME 367
#define KW_UNION 368
#define KW_UNSIGNED 369
#define KW_USING 370
#define KW_VIRTUAL 371
#define KW_VOID 372
#define KW_VOLATILE 373
#define KW_WCHAR_T 374
#define KW_WHILE 375
#define START_CPP 376
#define START_CONST_EXPR 377
#define START_TYPE 378



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void *YYPARSE_PARAM);
#else
int cppyyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void);
#else
int cppyyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED  */

/* Copy the second part of user declarations.  */

/* Line 390 of yacc.c  */
#line 593 "built/tmp/cppBison.yxx.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  85
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   5299

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  148
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  109
/* YYNRULES -- Number of rules.  */
#define YYNRULES  669
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1311

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   378

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   147,     2,     2,     2,   139,   132,     2,
     142,   144,   137,   135,   125,   136,   141,   138,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   127,   126,
     133,   128,   134,   129,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   143,     2,   146,   131,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   124,   130,   145,   140,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    17,    20,    22,
      26,    31,    36,    37,    43,    45,    47,    49,    51,    53,
      55,    58,    60,    62,    65,    68,    71,    74,    82,    92,
     102,   116,   126,   134,   140,   141,   145,   147,   150,   154,
     157,   160,   163,   166,   169,   172,   175,   178,   181,   184,
     187,   194,   196,   200,   202,   207,   209,   213,   217,   221,
     222,   227,   228,   234,   237,   242,   245,   250,   251,   256,
     257,   263,   267,   270,   275,   278,   283,   284,   291,   292,
     299,   300,   308,   309,   321,   322,   335,   336,   345,   346,
     356,   358,   360,   362,   365,   368,   371,   374,   379,   385,
     387,   389,   391,   393,   395,   397,   399,   401,   403,   405,
     407,   409,   411,   413,   415,   417,   419,   421,   423,   425,
     427,   429,   431,   433,   435,   437,   439,   441,   443,   445,
     447,   449,   451,   453,   455,   458,   461,   463,   465,   467,
     469,   470,   477,   480,   482,   484,   486,   490,   493,   498,
     501,   506,   510,   515,   517,   519,   521,   523,   526,   530,
     533,   536,   539,   542,   545,   549,   554,   558,   559,   566,
     569,   573,   575,   579,   584,   586,   588,   590,   594,   597,
     599,   603,   605,   607,   609,   613,   616,   618,   622,   624,
     627,   629,   632,   634,   638,   644,   648,   652,   654,   658,
     662,   666,   670,   675,   677,   679,   682,   684,   688,   692,
     698,   702,   707,   713,   716,   718,   720,   722,   724,   727,
     730,   733,   736,   739,   743,   748,   750,   752,   755,   758,
     761,   764,   767,   771,   776,   784,   788,   790,   793,   796,
     799,   802,   805,   809,   814,   816,   819,   822,   825,   828,
     831,   835,   840,   846,   856,   866,   876,   878,   880,   883,
     885,   887,   889,   892,   897,   902,   904,   906,   908,   911,
     913,   915,   917,   920,   925,   928,   933,   935,   937,   939,
     942,   945,   948,   953,   955,   957,   959,   962,   966,   967,
     973,   974,   983,   985,   987,   989,   991,   994,   998,  1000,
    1003,  1006,  1009,  1013,  1017,  1021,  1025,  1029,  1033,  1038,
    1043,  1046,  1050,  1052,  1054,  1056,  1058,  1062,  1068,  1070,
    1073,  1078,  1080,  1082,  1084,  1086,  1087,  1094,  1095,  1103,
    1108,  1114,  1118,  1124,  1129,  1131,  1133,  1135,  1137,  1139,
    1141,  1143,  1145,  1147,  1149,  1151,  1153,  1155,  1158,  1161,
    1164,  1167,  1169,  1171,  1174,  1176,  1177,  1180,  1182,  1185,
    1187,  1189,  1191,  1193,  1195,  1197,  1199,  1201,  1203,  1205,
    1207,  1209,  1211,  1213,  1215,  1217,  1219,  1221,  1223,  1225,
    1227,  1229,  1231,  1233,  1235,  1237,  1239,  1241,  1243,  1245,
    1247,  1249,  1251,  1253,  1255,  1257,  1259,  1261,  1263,  1265,
    1267,  1269,  1271,  1273,  1275,  1277,  1279,  1281,  1283,  1285,
    1287,  1289,  1291,  1293,  1295,  1297,  1299,  1301,  1303,  1305,
    1307,  1309,  1311,  1313,  1315,  1317,  1319,  1321,  1323,  1325,
    1327,  1329,  1331,  1333,  1335,  1337,  1339,  1341,  1343,  1345,
    1347,  1349,  1351,  1353,  1355,  1357,  1359,  1361,  1363,  1365,
    1367,  1369,  1371,  1373,  1375,  1377,  1379,  1381,  1383,  1385,
    1387,  1389,  1391,  1393,  1395,  1397,  1399,  1401,  1403,  1405,
    1407,  1409,  1411,  1413,  1415,  1417,  1419,  1421,  1423,  1425,
    1427,  1429,  1431,  1435,  1437,  1439,  1441,  1443,  1445,  1449,
    1451,  1456,  1464,  1472,  1480,  1488,  1493,  1498,  1501,  1504,
    1507,  1510,  1513,  1516,  1520,  1524,  1528,  1532,  1536,  1540,
    1544,  1548,  1552,  1556,  1560,  1564,  1568,  1572,  1576,  1580,
    1586,  1591,  1596,  1600,  1604,  1608,  1612,  1614,  1619,  1627,
    1635,  1643,  1651,  1656,  1661,  1666,  1671,  1676,  1681,  1686,
    1691,  1696,  1701,  1706,  1711,  1716,  1721,  1726,  1729,  1735,
    1740,  1745,  1748,  1751,  1754,  1757,  1760,  1763,  1767,  1771,
    1775,  1779,  1783,  1787,  1791,  1795,  1799,  1803,  1807,  1811,
    1815,  1819,  1823,  1827,  1831,  1835,  1841,  1846,  1851,  1855,
    1859,  1863,  1867,  1869,  1871,  1873,  1875,  1877,  1879,  1881,
    1883,  1885,  1887,  1889,  1898,  1910,  1912,  1917,  1925,  1933,
    1941,  1949,  1954,  1959,  1962,  1968,  1973,  1978,  1981,  1984,
    1987,  1990,  1993,  1997,  2001,  2005,  2009,  2013,  2017,  2021,
    2025,  2029,  2033,  2037,  2041,  2045,  2049,  2053,  2057,  2061,
    2065,  2071,  2076,  2081,  2085,  2089,  2093,  2097,  2099,  2101,
    2103,  2105,  2107,  2109,  2111,  2113,  2115,  2117,  2119,  2121,
    2123,  2127,  2129,  2131,  2134,  2136,  2138,  2141,  2144,  2146,
    2148,  2150,  2152,  2154,  2156,  2158,  2160,  2162,  2165,  2168
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     149,     0,    -1,   121,   150,    -1,   122,   246,    -1,   123,
     214,    -1,   256,    -1,   150,   126,    -1,   150,   155,    -1,
     152,    -1,   151,   125,   152,    -1,   253,   142,   243,   144,
      -1,   253,   124,   243,   145,    -1,    -1,   158,   124,   154,
     150,   145,    -1,   161,    -1,   184,    -1,   153,    -1,   230,
      -1,   233,    -1,   156,    -1,   110,   167,    -1,    49,    -1,
      66,    -1,    71,   127,    -1,    94,   127,    -1,    93,   127,
      -1,    92,   127,    -1,    82,   142,   253,   125,    10,   144,
     126,    -1,    82,   142,   253,   125,    10,   125,    10,   144,
     126,    -1,    83,   142,   253,   125,    10,   125,    10,   144,
     126,    -1,    83,   142,   253,   125,    10,   125,    10,   125,
      10,   125,    10,   144,   126,    -1,    84,   142,   253,   125,
      10,   125,    10,   144,   126,    -1,   102,   142,   246,   125,
     255,   144,   126,    -1,   102,   142,   246,   144,   126,    -1,
      -1,    75,   157,   155,    -1,   256,    -1,    69,   158,    -1,
      69,     6,   158,    -1,   101,   158,    -1,    79,   158,    -1,
     116,   158,    -1,    70,   158,    -1,    95,   158,    -1,   118,
     158,    -1,    85,   158,    -1,    58,   158,    -1,    50,   158,
      -1,    68,   158,    -1,   106,   158,    -1,   143,   143,   159,
     146,   146,   158,    -1,   160,    -1,   160,   125,   159,    -1,
     253,    -1,   253,   142,   196,   144,    -1,   162,    -1,   158,
     211,   126,    -1,   158,   172,   200,    -1,   158,   175,   201,
      -1,    -1,   158,   213,   163,   165,    -1,    -1,   158,    57,
     213,   164,   166,    -1,   192,   201,    -1,   192,   199,   125,
     165,    -1,   192,   201,    -1,   192,   199,   125,   166,    -1,
      -1,   158,   213,   168,   170,    -1,    -1,   158,    57,   213,
     169,   171,    -1,   158,   175,   201,    -1,   192,   201,    -1,
     192,   199,   125,   170,    -1,   192,   201,    -1,   192,   199,
     125,   171,    -1,    -1,    10,   142,   173,   194,   144,   181,
      -1,    -1,    11,   142,   174,   194,   144,   181,    -1,    -1,
     140,   253,   142,   176,   194,   144,   181,    -1,    -1,    11,
     142,   137,   190,   144,   142,   177,   194,   144,   181,   193,
      -1,    -1,    11,   142,    12,   137,   190,   144,   142,   178,
     194,   144,   181,   193,    -1,    -1,    90,   210,   206,   142,
     179,   194,   144,   181,    -1,    -1,    90,    57,   210,   206,
     142,   180,   194,   144,   181,    -1,    10,    -1,   256,    -1,
      57,    -1,   181,    88,    -1,   181,    73,    -1,   181,    91,
      -1,   181,    85,    -1,   181,   107,   142,   144,    -1,   181,
     107,   142,   253,   144,    -1,   147,    -1,   140,    -1,   137,
      -1,   138,    -1,   139,    -1,   135,    -1,   136,    -1,   130,
      -1,   132,    -1,   131,    -1,    15,    -1,    16,    -1,    17,
      -1,    18,    -1,    19,    -1,    20,    -1,   133,    -1,   134,
      -1,    21,    -1,    22,    -1,   128,    -1,   125,    -1,    34,
      -1,    35,    -1,    36,    -1,    37,    -1,    38,    -1,    39,
      -1,    40,    -1,    41,    -1,    42,    -1,    43,    -1,    44,
      -1,    45,    -1,    32,    -1,   143,   146,    -1,   142,   144,
      -1,    87,    -1,    62,    -1,   161,    -1,   184,    -1,    -1,
     105,   185,   133,   186,   134,   183,    -1,   105,   161,    -1,
     256,    -1,   187,    -1,   188,    -1,   187,   125,   188,    -1,
      56,   253,    -1,    56,   253,   128,   214,    -1,   112,   253,
      -1,   112,   253,   128,   214,    -1,   189,   207,   198,    -1,
      57,   189,   207,   198,    -1,   234,    -1,    10,    -1,    11,
      -1,   254,    -1,    90,   182,    -1,    90,     6,    10,    -1,
      57,   190,    -1,   118,   190,    -1,   137,   190,    -1,   132,
     190,    -1,    16,   190,    -1,    12,   137,   190,    -1,   190,
     143,   242,   146,    -1,   142,   190,   144,    -1,    -1,   190,
     142,   191,   196,   144,   181,    -1,   190,   193,    -1,   190,
     127,     4,    -1,   256,    -1,    32,   212,   209,    -1,    32,
      57,   212,   209,    -1,   256,    -1,    14,    -1,   195,    -1,
     195,   125,    14,    -1,   195,    14,    -1,   204,    -1,   195,
     125,   204,    -1,   256,    -1,    14,    -1,   197,    -1,   197,
     125,    14,    -1,   197,    14,    -1,   205,    -1,   197,   125,
     205,    -1,   256,    -1,   128,   245,    -1,   256,    -1,   128,
     246,    -1,   126,    -1,   124,   238,   145,    -1,   127,   151,
     124,   238,   145,    -1,   128,    61,   126,    -1,   128,    62,
     126,    -1,   126,    -1,   124,   238,   145,    -1,   128,   246,
     126,    -1,   128,    61,   126,    -1,   128,    62,   126,    -1,
     128,   124,   202,   145,    -1,   256,    -1,   203,    -1,   203,
     125,    -1,   246,    -1,   124,   202,   145,    -1,   203,   125,
     246,    -1,   203,   125,   124,   202,   145,    -1,   210,   207,
     199,    -1,    57,   210,   207,   199,    -1,    57,    95,   210,
     207,   199,    -1,    95,   204,    -1,   204,    -1,   248,    -1,
     256,    -1,   254,    -1,    57,   206,    -1,   118,   206,    -1,
     137,   206,    -1,   132,   206,    -1,    16,   206,    -1,    12,
     137,   206,    -1,   206,   143,   242,   146,    -1,   256,    -1,
     254,    -1,    57,   207,    -1,   118,   207,    -1,   137,   207,
      -1,   132,   207,    -1,    16,   207,    -1,    12,   137,   207,
      -1,   207,   143,   242,   146,    -1,   142,   207,   144,   142,
     194,   144,   181,    -1,   142,   207,   144,    -1,   256,    -1,
      57,   208,    -1,   118,   208,    -1,   137,   208,    -1,   132,
     208,    -1,    16,   208,    -1,    12,   137,   208,    -1,   208,
     143,   242,   146,    -1,   256,    -1,    57,   209,    -1,   118,
     209,    -1,   137,   208,    -1,   132,   208,    -1,    16,   208,
      -1,    12,   137,   208,    -1,   208,   143,   242,   146,    -1,
     142,   194,   144,   181,   193,    -1,   142,   137,   208,   144,
     142,   194,   144,   181,   193,    -1,   142,   132,   208,   144,
     142,   194,   144,   181,   193,    -1,   142,    16,   208,   144,
     142,   194,   144,   181,   193,    -1,   234,    -1,    11,    -1,
     112,   253,    -1,   215,    -1,   217,    -1,   223,    -1,   229,
     253,    -1,   228,   254,   127,   225,    -1,    60,   142,   246,
     144,    -1,    48,    -1,   234,    -1,    11,    -1,   112,   253,
      -1,   215,    -1,   217,    -1,   223,    -1,   229,   253,    -1,
     228,   254,   127,   225,    -1,   228,   253,    -1,    60,   142,
     246,   144,    -1,    48,    -1,   234,    -1,    11,    -1,   112,
     253,    -1,   229,   253,    -1,   228,   253,    -1,    60,   142,
     246,   144,    -1,    48,    -1,   211,    -1,    10,    -1,   210,
     209,    -1,    57,   210,   209,    -1,    -1,   229,   124,   216,
     150,   145,    -1,    -1,   229,   254,   218,   219,   220,   124,
     150,   145,    -1,   256,    -1,    73,    -1,   256,    -1,   221,
      -1,   127,   222,    -1,   221,   125,   222,    -1,   252,    -1,
      94,   252,    -1,    93,   252,    -1,    92,   252,    -1,   116,
      94,   252,    -1,   116,    93,   252,    -1,   116,    92,   252,
      -1,    94,   116,   252,    -1,    93,   116,   252,    -1,    92,
     116,   252,    -1,   224,   124,   227,   145,    -1,   228,   254,
     127,   225,    -1,   228,   254,    -1,   228,   127,   225,    -1,
     228,    -1,   235,    -1,    11,    -1,   256,    -1,   226,   253,
     125,    -1,   226,   253,   128,   246,   125,    -1,   226,    -1,
     226,   253,    -1,   226,   253,   128,   246,    -1,    67,    -1,
      56,    -1,   104,    -1,   113,    -1,    -1,    86,   253,   124,
     231,   150,   145,    -1,    -1,    79,    86,   253,   124,   232,
     150,   145,    -1,    86,   124,   150,   145,    -1,    79,    86,
     124,   150,   145,    -1,   115,   253,   126,    -1,   115,   253,
     128,   214,   126,    -1,   115,    86,   253,   126,    -1,   235,
      -1,   236,    -1,   237,    -1,    51,    -1,    53,    -1,   119,
      -1,    54,    -1,    55,    -1,    98,    -1,    81,    -1,   114,
      -1,    99,    -1,    80,    -1,    98,   235,    -1,    81,   235,
      -1,   114,   235,    -1,    99,   235,    -1,    74,    -1,    63,
      -1,    81,    63,    -1,   117,    -1,    -1,   239,   240,    -1,
     256,    -1,   240,   241,    -1,     3,    -1,     4,    -1,     6,
      -1,     8,    -1,     9,    -1,     5,    -1,    10,    -1,    11,
      -1,    12,    -1,     7,    -1,    14,    -1,    15,    -1,    16,
      -1,    17,    -1,    18,    -1,    19,    -1,    20,    -1,    21,
      -1,    22,    -1,    23,    -1,    24,    -1,    32,    -1,    33,
      -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,    38,
      -1,    39,    -1,    40,    -1,    41,    -1,    42,    -1,    43,
      -1,    44,    -1,    45,    -1,    46,    -1,    47,    -1,    48,
      -1,    51,    -1,    52,    -1,    53,    -1,    54,    -1,    55,
      -1,    56,    -1,    57,    -1,    58,    -1,    59,    -1,    60,
      -1,    61,    -1,    62,    -1,    63,    -1,    64,    -1,    65,
      -1,    67,    -1,    69,    -1,    70,    -1,    72,    -1,    73,
      -1,    74,    -1,    75,    -1,    76,    -1,    77,    -1,    78,
      -1,    79,    -1,    80,    -1,    81,    -1,    85,    -1,    86,
      -1,    87,    -1,    89,    -1,    90,    -1,    91,    -1,    92,
      -1,    93,    -1,    94,    -1,    71,    -1,    95,    -1,    96,
      -1,    97,    -1,    98,    -1,    99,    -1,   100,    -1,   101,
      -1,   102,    -1,   103,    -1,   104,    -1,   106,    -1,   107,
      -1,   108,    -1,   109,    -1,   110,    -1,   111,    -1,   112,
      -1,   113,    -1,   114,    -1,   115,    -1,   116,    -1,   117,
      -1,   118,    -1,   119,    -1,   120,    -1,   135,    -1,   136,
      -1,   137,    -1,   138,    -1,   132,    -1,   130,    -1,   131,
      -1,   147,    -1,   140,    -1,   128,    -1,   139,    -1,   133,
      -1,   134,    -1,   142,    -1,   144,    -1,   141,    -1,   125,
      -1,   126,    -1,   127,    -1,   143,    -1,   146,    -1,   129,
      -1,   124,   240,   145,    -1,   256,    -1,   246,    -1,   256,
      -1,   244,    -1,   246,    -1,   244,   125,   246,    -1,   247,
      -1,   142,   214,   144,   245,    -1,   103,   133,   214,   134,
     142,   244,   144,    -1,    64,   133,   214,   134,   142,   244,
     144,    -1,    59,   133,   214,   134,   142,   244,   144,    -1,
      96,   133,   214,   134,   142,   244,   144,    -1,   100,   142,
     214,   144,    -1,    47,   142,   214,   144,    -1,   147,   245,
      -1,   140,   245,    -1,   136,   245,    -1,   135,   245,    -1,
     137,   245,    -1,   132,   245,    -1,   245,   137,   245,    -1,
     245,   138,   245,    -1,   245,   139,   245,    -1,   245,   135,
     245,    -1,   245,   136,   245,    -1,   245,   130,   245,    -1,
     245,   131,   245,    -1,   245,   132,   245,    -1,   245,    15,
     245,    -1,   245,    16,   245,    -1,   245,    17,   245,    -1,
     245,    18,   245,    -1,   245,    19,   245,    -1,   245,    20,
     245,    -1,   245,    21,   245,    -1,   245,    22,   245,    -1,
     245,   129,   245,   127,   245,    -1,   245,   143,   246,   146,
      -1,   245,   142,   244,   144,    -1,   245,   142,   144,    -1,
     245,   141,   245,    -1,   245,    32,   245,    -1,   142,   244,
     144,    -1,   247,    -1,   142,   214,   144,   246,    -1,   103,
     133,   214,   134,   142,   244,   144,    -1,    64,   133,   214,
     134,   142,   244,   144,    -1,    59,   133,   214,   134,   142,
     244,   144,    -1,    96,   133,   214,   134,   142,   244,   144,
      -1,    11,   142,   243,   144,    -1,    80,   142,   243,   144,
      -1,    53,   142,   243,   144,    -1,   119,   142,   243,   144,
      -1,    54,   142,   243,   144,    -1,    55,   142,   243,   144,
      -1,    51,   142,   243,   144,    -1,    98,   142,   243,   144,
      -1,    81,   142,   243,   144,    -1,   114,   142,   243,   144,
      -1,    99,   142,   243,   144,    -1,    74,   142,   243,   144,
      -1,    63,   142,   243,   144,    -1,   100,   142,   214,   144,
      -1,    47,   142,   214,   144,    -1,    87,   212,    -1,    87,
     212,   142,   243,   144,    -1,   111,   142,   214,   144,    -1,
     111,   142,   246,   144,    -1,   147,   246,    -1,   140,   246,
      -1,   136,   246,    -1,   135,   246,    -1,   137,   246,    -1,
     132,   246,    -1,   246,   137,   246,    -1,   246,   138,   246,
      -1,   246,   139,   246,    -1,   246,   135,   246,    -1,   246,
     136,   246,    -1,   246,   130,   246,    -1,   246,   131,   246,
      -1,   246,   132,   246,    -1,   246,    15,   246,    -1,   246,
      16,   246,    -1,   246,    17,   246,    -1,   246,    18,   246,
      -1,   246,    19,   246,    -1,   246,    20,   246,    -1,   246,
     133,   246,    -1,   246,   134,   246,    -1,   246,    21,   246,
      -1,   246,    22,   246,    -1,   246,   129,   246,   127,   246,
      -1,   246,   143,   246,   146,    -1,   246,   142,   244,   144,
      -1,   246,   142,   144,    -1,   246,   141,   246,    -1,   246,
      32,   246,    -1,   142,   244,   144,    -1,     4,    -1,   108,
      -1,    72,    -1,     5,    -1,     3,    -1,   255,    -1,     9,
      -1,    10,    -1,    73,    -1,    91,    -1,    89,    -1,   143,
     250,   146,   181,   193,   124,   238,   145,    -1,   143,   250,
     146,   142,   194,   144,   181,   193,   124,   238,   145,    -1,
     249,    -1,   142,   214,   144,   246,    -1,   103,   133,   214,
     134,   142,   244,   144,    -1,    64,   133,   214,   134,   142,
     244,   144,    -1,    59,   133,   214,   134,   142,   244,   144,
      -1,    96,   133,   214,   134,   142,   244,   144,    -1,   100,
     142,   214,   144,    -1,    47,   142,   214,   144,    -1,    87,
     212,    -1,    87,   212,   142,   243,   144,    -1,   111,   142,
     214,   144,    -1,   111,   142,   246,   144,    -1,   147,   246,
      -1,   140,   246,    -1,   136,   246,    -1,   135,   246,    -1,
     132,   246,    -1,   248,   137,   246,    -1,   248,   138,   246,
      -1,   248,   139,   246,    -1,   248,   135,   246,    -1,   248,
     136,   246,    -1,   248,   130,   246,    -1,   248,   131,   246,
      -1,   248,   132,   246,    -1,   248,    15,   246,    -1,   248,
      16,   246,    -1,   248,    17,   246,    -1,   248,    18,   246,
      -1,   248,    19,   246,    -1,   248,    20,   246,    -1,   248,
     133,   246,    -1,   248,   134,   246,    -1,   248,    21,   246,
      -1,   248,    22,   246,    -1,   248,   129,   246,   127,   246,
      -1,   248,   143,   246,   146,    -1,   248,   142,   244,   144,
      -1,   248,   142,   144,    -1,   248,   141,   246,    -1,   248,
      32,   246,    -1,   142,   244,   144,    -1,     4,    -1,   108,
      -1,    72,    -1,     5,    -1,     3,    -1,   255,    -1,     9,
      -1,    10,    -1,    73,    -1,    91,    -1,    89,    -1,   256,
      -1,   251,    -1,   251,   125,   250,    -1,   132,    -1,   128,
      -1,   132,   253,    -1,   253,    -1,   253,    -1,   229,   253,
      -1,   112,   253,    -1,    10,    -1,    11,    -1,    73,    -1,
      91,    -1,    10,    -1,    11,    -1,    91,    -1,     6,    -1,
       8,    -1,   255,     6,    -1,   255,     8,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   421,   421,   422,   426,   433,   434,   435,   439,   440,
     444,   448,   461,   460,   472,   473,   474,   475,   476,   477,
     478,   479,   492,   501,   505,   513,   517,   521,   532,   553,
     575,   608,   630,   641,   655,   654,   669,   673,   677,   688,
     692,   696,   700,   704,   708,   712,   716,   720,   724,   728,
     732,   740,   741,   745,   746,   750,   754,   763,   771,   783,
     782,   798,   797,   819,   827,   838,   847,   861,   860,   876,
     875,   890,   905,   911,   920,   927,   940,   939,   964,   963,
     991,   990,  1021,  1020,  1039,  1038,  1059,  1058,  1090,  1089,
    1115,  1128,  1132,  1136,  1140,  1144,  1148,  1153,  1157,  1168,
    1172,  1176,  1180,  1184,  1188,  1192,  1196,  1200,  1204,  1208,
    1212,  1216,  1220,  1224,  1228,  1232,  1236,  1240,  1244,  1248,
    1252,  1256,  1260,  1264,  1268,  1272,  1276,  1280,  1284,  1288,
    1292,  1296,  1300,  1304,  1308,  1312,  1316,  1320,  1327,  1328,
    1333,  1332,  1340,  1344,  1345,  1349,  1355,  1364,  1368,  1372,
    1376,  1380,  1386,  1396,  1400,  1405,  1417,  1421,  1435,  1450,
    1455,  1460,  1465,  1470,  1475,  1480,  1485,  1491,  1490,  1512,
    1522,  1532,  1536,  1540,  1549,  1553,  1558,  1562,  1567,  1575,
    1580,  1588,  1592,  1597,  1601,  1606,  1614,  1619,  1627,  1631,
    1638,  1642,  1649,  1653,  1657,  1661,  1665,  1672,  1676,  1680,
    1684,  1688,  1692,  1699,  1700,  1701,  1705,  1708,  1709,  1710,
    1714,  1719,  1725,  1731,  1742,  1746,  1756,  1760,  1764,  1769,
    1774,  1779,  1784,  1789,  1794,  1802,  1806,  1810,  1815,  1820,
    1825,  1830,  1835,  1840,  1845,  1851,  1859,  1863,  1868,  1873,
    1878,  1883,  1888,  1893,  1901,  1905,  1910,  1915,  1920,  1925,
    1930,  1935,  1940,  1946,  1953,  1960,  1970,  1974,  1982,  1986,
    1990,  1994,  1998,  2014,  2030,  2039,  2046,  2050,  2058,  2062,
    2066,  2070,  2074,  2090,  2106,  2124,  2133,  2140,  2144,  2152,
    2156,  2172,  2188,  2197,  2204,  2208,  2216,  2220,  2229,  2228,
    2253,  2252,  2282,  2283,  2290,  2291,  2295,  2296,  2300,  2304,
    2308,  2312,  2316,  2320,  2324,  2328,  2332,  2336,  2343,  2351,
    2355,  2359,  2363,  2370,  2374,  2381,  2382,  2388,  2396,  2397,
    2403,  2412,  2419,  2423,  2427,  2435,  2434,  2457,  2456,  2479,
    2480,  2484,  2490,  2497,  2506,  2507,  2508,  2512,  2516,  2520,
    2524,  2528,  2532,  2537,  2542,  2547,  2552,  2556,  2561,  2570,
    2575,  2583,  2587,  2591,  2599,  2609,  2609,  2619,  2620,  2624,
    2625,  2626,  2627,  2628,  2629,  2630,  2631,  2632,  2633,  2634,
    2634,  2634,  2635,  2635,  2635,  2635,  2636,  2636,  2636,  2636,
    2636,  2637,  2637,  2637,  2638,  2638,  2638,  2638,  2638,  2639,
    2639,  2639,  2639,  2639,  2640,  2640,  2640,  2640,  2640,  2641,
    2641,  2641,  2641,  2641,  2642,  2642,  2642,  2642,  2643,  2643,
    2643,  2643,  2643,  2644,  2644,  2644,  2644,  2644,  2645,  2645,
    2645,  2645,  2645,  2645,  2646,  2646,  2646,  2646,  2646,  2647,
    2647,  2647,  2647,  2648,  2648,  2648,  2648,  2649,  2649,  2649,
    2649,  2649,  2650,  2650,  2650,  2651,  2651,  2651,  2651,  2651,
    2652,  2652,  2652,  2652,  2652,  2653,  2653,  2653,  2653,  2653,
    2656,  2656,  2656,  2656,  2656,  2656,  2656,  2656,  2656,  2656,
    2656,  2657,  2657,  2657,  2657,  2657,  2657,  2657,  2657,  2657,
    2657,  2658,  2658,  2662,  2666,  2673,  2677,  2684,  2688,  2695,
    2699,  2703,  2707,  2711,  2715,  2719,  2723,  2727,  2731,  2735,
    2739,  2743,  2747,  2751,  2755,  2759,  2763,  2767,  2771,  2775,
    2779,  2783,  2787,  2791,  2795,  2799,  2803,  2807,  2811,  2815,
    2819,  2823,  2827,  2831,  2835,  2839,  2847,  2851,  2855,  2859,
    2863,  2867,  2871,  2881,  2887,  2893,  2899,  2905,  2911,  2917,
    2924,  2931,  2938,  2945,  2951,  2957,  2961,  2965,  2969,  2973,
    2984,  2995,  2999,  3003,  3007,  3011,  3015,  3019,  3023,  3027,
    3031,  3035,  3039,  3043,  3047,  3051,  3055,  3059,  3063,  3067,
    3071,  3075,  3079,  3083,  3087,  3091,  3095,  3099,  3103,  3107,
    3111,  3115,  3122,  3126,  3130,  3134,  3138,  3142,  3146,  3150,
    3154,  3160,  3166,  3170,  3174,  3188,  3192,  3196,  3200,  3204,
    3208,  3212,  3216,  3220,  3224,  3228,  3239,  3250,  3254,  3258,
    3262,  3266,  3270,  3274,  3278,  3282,  3286,  3290,  3294,  3298,
    3302,  3306,  3310,  3314,  3318,  3322,  3326,  3330,  3334,  3338,
    3342,  3346,  3350,  3354,  3358,  3362,  3366,  3373,  3377,  3381,
    3385,  3389,  3393,  3397,  3401,  3405,  3411,  3417,  3425,  3426,
    3427,  3431,  3432,  3433,  3434,  3438,  3446,  3454,  3482,  3486,
    3490,  3494,  3505,  3509,  3513,  3521,  3525,  3529,  3535,  3546
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK",
  "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL", "CUSTOM_LITERAL",
  "IDENTIFIER", "TYPENAME_IDENTIFIER", "SCOPING", "TYPEDEFNAME",
  "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE", "LECOMPARE",
  "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR", "DOT_STAR", "UNARY",
  "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS", "UNARY_PLUS", "UNARY_STAR",
  "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS", "TIMESEQUAL",
  "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL", "OREQUAL",
  "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL", "KW_ALIGNAS",
  "KW_ALIGNOF", "KW_AUTO", "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL",
  "KW_CATCH", "KW_CHAR", "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS",
  "KW_CONST", "KW_CONSTEXPR", "KW_CONST_CAST", "KW_DECLTYPE", "KW_DEFAULT",
  "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH",
  "KW_ENUM", "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED",
  "KW_FALSE", "KW_FINAL", "KW_FLOAT", "KW_FRIEND", "KW_FOR", "KW_GOTO",
  "KW_IF", "KW_INLINE", "KW_INT", "KW_LONG", "KW_MAKE_PROPERTY",
  "KW_MAKE_PROPERTY2", "KW_MAKE_SEQ", "KW_MUTABLE", "KW_NAMESPACE",
  "KW_NEW", "KW_NOEXCEPT", "KW_NULLPTR", "KW_OPERATOR", "KW_OVERRIDE",
  "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER",
  "KW_REINTERPRET_CAST", "KW_RETURN", "KW_SHORT", "KW_SIGNED", "KW_SIZEOF",
  "KW_STATIC", "KW_STATIC_ASSERT", "KW_STATIC_CAST", "KW_STRUCT",
  "KW_TEMPLATE", "KW_THREAD_LOCAL", "KW_THROW", "KW_TRUE", "KW_TRY",
  "KW_TYPEDEF", "KW_TYPEID", "KW_TYPENAME", "KW_UNION", "KW_UNSIGNED",
  "KW_USING", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WCHAR_T",
  "KW_WHILE", "START_CPP", "START_CONST_EXPR", "START_TYPE", "'{'", "','",
  "';'", "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'",
  "']'", "'!'", "$accept", "grammar", "cpp", "constructor_inits",
  "constructor_init", "extern_c", "$@1", "declaration",
  "friend_declaration", "$@2", "storage_class", "attribute_specifiers",
  "attribute_specifier", "type_like_declaration",
  "multiple_var_declaration", "$@3", "$@4",
  "multiple_instance_identifiers", "multiple_const_instance_identifiers",
  "typedef_declaration", "$@5", "$@6", "typedef_instance_identifiers",
  "typedef_const_instance_identifiers", "constructor_prototype", "$@7",
  "$@8", "function_prototype", "$@9", "$@10", "$@11", "$@12", "$@13",
  "function_post", "function_operator", "more_template_declaration",
  "template_declaration", "$@14", "template_formal_parameters",
  "template_nonempty_formal_parameters", "template_formal_parameter",
  "template_formal_parameter_type", "instance_identifier", "$@15",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "function_parameter_list",
  "function_parameters", "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "not_paren_empty_instance_identifier", "empty_instance_identifier",
  "type", "type_decl", "predefined_type", "var_type_decl", "full_type",
  "anonymous_struct", "$@16", "named_struct", "$@17", "maybe_final",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "enum", "enum_decl", "enum_element_type", "enum_body_trailing_comma",
  "enum_body", "enum_keyword", "struct_keyword", "namespace_declaration",
  "$@18", "$@19", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@20", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   123,    44,    59,    58,    61,    63,
     124,    94,    38,    60,    62,    43,    45,    42,    47,    37,
     126,    46,    40,    91,    41,   125,    93,    33
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   148,   149,   149,   149,   150,   150,   150,   151,   151,
     152,   152,   154,   153,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   157,   156,   158,   158,   158,   158,
     158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
     158,   159,   159,   160,   160,   161,   161,   161,   161,   163,
     162,   164,   162,   165,   165,   166,   166,   168,   167,   169,
     167,   167,   170,   170,   171,   171,   173,   172,   174,   172,
     176,   175,   177,   175,   178,   175,   179,   175,   180,   175,
     175,   181,   181,   181,   181,   181,   181,   181,   181,   182,
     182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
     182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
     182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
     182,   182,   182,   182,   182,   182,   182,   182,   183,   183,
     185,   184,   184,   186,   186,   187,   187,   188,   188,   188,
     188,   188,   188,   189,   189,   189,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   191,   190,   192,
     192,   193,   193,   193,   194,   194,   194,   194,   194,   195,
     195,   196,   196,   196,   196,   196,   197,   197,   198,   198,
     199,   199,   200,   200,   200,   200,   200,   201,   201,   201,
     201,   201,   201,   202,   202,   202,   203,   203,   203,   203,
     204,   204,   204,   204,   205,   205,   206,   206,   206,   206,
     206,   206,   206,   206,   206,   207,   207,   207,   207,   207,
     207,   207,   207,   207,   207,   207,   208,   208,   208,   208,
     208,   208,   208,   208,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   212,   212,   212,
     212,   212,   212,   212,   213,   213,   214,   214,   216,   215,
     218,   217,   219,   219,   220,   220,   221,   221,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   223,   224,
     224,   224,   224,   225,   225,   226,   226,   226,   227,   227,
     227,   228,   229,   229,   229,   231,   230,   232,   230,   230,
     230,   233,   233,   233,   234,   234,   234,   235,   235,   235,
     235,   235,   235,   235,   235,   235,   235,   235,   235,   235,
     235,   236,   236,   236,   237,   239,   238,   240,   240,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   242,   242,   243,   243,   244,   244,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     245,   245,   245,   245,   245,   245,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   247,   247,   247,   247,   247,   247,   247,   247,
     247,   247,   247,   247,   247,   248,   248,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   249,   249,   249,
     249,   249,   249,   249,   249,   249,   249,   249,   250,   250,
     250,   251,   251,   251,   251,   252,   252,   252,   253,   253,
     253,   253,   254,   254,   254,   255,   255,   255,   255,   256
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     4,     0,     5,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     2,     2,     2,     7,     9,     9,
      13,     9,     7,     5,     0,     3,     1,     2,     3,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       6,     1,     3,     1,     4,     1,     3,     3,     3,     0,
       4,     0,     5,     2,     4,     2,     4,     0,     4,     0,
       5,     3,     2,     4,     2,     4,     0,     6,     0,     6,
       0,     7,     0,    11,     0,    12,     0,     8,     0,     9,
       1,     1,     1,     2,     2,     2,     2,     4,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     1,     1,     1,
       0,     6,     2,     1,     1,     1,     3,     2,     4,     2,
       4,     3,     4,     1,     1,     1,     1,     2,     3,     2,
       2,     2,     2,     2,     3,     4,     3,     0,     6,     2,
       3,     1,     3,     4,     1,     1,     1,     3,     2,     1,
       3,     1,     1,     1,     3,     2,     1,     3,     1,     2,
       1,     2,     1,     3,     5,     3,     3,     1,     3,     3,
       3,     3,     4,     1,     1,     2,     1,     3,     3,     5,
       3,     4,     5,     2,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     3,     4,     1,     1,     2,     2,     2,
       2,     2,     3,     4,     7,     3,     1,     2,     2,     2,
       2,     2,     3,     4,     1,     2,     2,     2,     2,     2,
       3,     4,     5,     9,     9,     9,     1,     1,     2,     1,
       1,     1,     2,     4,     4,     1,     1,     1,     2,     1,
       1,     1,     2,     4,     2,     4,     1,     1,     1,     2,
       2,     2,     4,     1,     1,     1,     2,     3,     0,     5,
       0,     8,     1,     1,     1,     1,     2,     3,     1,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     4,     4,
       2,     3,     1,     1,     1,     1,     3,     5,     1,     2,
       4,     1,     1,     1,     1,     0,     6,     0,     7,     4,
       5,     3,     5,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     1,     1,     2,     1,     0,     2,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     3,     1,
       4,     7,     7,     7,     7,     4,     4,     2,     2,     2,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       4,     4,     3,     3,     3,     3,     1,     4,     7,     7,
       7,     7,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     2,     5,     4,
       4,     2,     2,     2,     2,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     4,     4,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     8,    11,     1,     4,     7,     7,     7,
       7,     4,     4,     2,     5,     4,     4,     2,     2,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     4,     4,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     2,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     0
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   669,     0,     0,     0,   669,     5,   586,   582,   585,
     665,   666,   588,   589,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   584,   590,     0,     0,     0,     0,   592,
     591,     0,     0,     0,     0,     0,   583,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   669,     0,     3,   526,
     587,   257,   265,   337,   338,   340,   341,   322,     0,     0,
     352,   321,   351,   346,   343,   342,   345,   323,     0,   324,
     344,   354,   339,   669,     4,   259,   260,   261,     0,   312,
       0,   256,   334,   335,   336,     1,    21,   669,   669,    22,
     669,   669,   669,     0,    34,   669,     0,     0,     0,   669,
       0,     0,     0,     0,   669,   669,     0,   669,   669,   669,
       0,   669,   669,     6,     0,    16,     7,    19,     0,    14,
      55,    15,    17,    18,    36,   669,     0,   669,   669,   669,
     669,     0,   669,     0,   669,   669,   669,   278,   283,     0,
       0,   547,     0,     0,   277,     0,   669,   669,     0,     0,
       0,   669,   669,   556,   554,   553,   555,   552,   257,   337,
     338,   340,   341,   352,   351,   346,   343,   342,   345,   344,
     339,     0,     0,   487,   658,   659,   660,   661,   652,   651,
       0,   649,   654,   648,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   667,   668,
     669,     0,   353,   343,   348,   347,   350,   258,   349,     0,
     669,   669,   669,   669,   669,   669,     0,   286,   244,   669,
     662,   663,   664,     0,   310,   658,   659,   661,   288,   262,
     290,   669,    47,    46,    48,   669,    37,    42,    23,   669,
       0,    40,     0,     0,     0,    45,   669,     0,    26,    25,
      24,    43,    39,     0,     0,   142,     0,    49,     0,    20,
       0,     0,    41,    44,     0,   285,   267,   276,     0,     0,
       0,     0,    12,     0,     0,     0,   284,    59,   269,   270,
     271,   312,     0,   266,     0,   486,   485,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   279,
     669,   281,   280,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   581,   653,   669,   669,   565,   566,
     567,   568,   569,   570,   573,   574,   580,     0,   562,   563,
     564,   571,   572,   560,   561,   557,   558,   559,   579,   578,
       0,     0,   287,     0,   669,     0,   669,   669,   669,   669,
     669,   249,   236,     0,   245,     0,   246,   248,   247,   175,
     669,     0,     0,   669,   669,     0,   176,   179,   669,   174,
     669,   318,     0,   315,   314,   311,   313,     0,   669,   669,
      38,    35,   669,     0,     0,     0,     0,   669,   325,     0,
     669,   285,   267,     0,     0,   284,    67,     0,   331,     0,
       0,    51,    53,    76,    78,   285,   267,    61,     0,     0,
     669,   268,   669,     0,   355,   192,     0,     0,    57,   355,
     197,     0,    58,    56,     0,   274,   310,   272,   532,   546,
     538,   534,   536,   537,     0,   544,     0,   543,   533,   540,
       0,     0,     0,   539,   542,   545,     0,   549,   550,   541,
     535,   527,   488,    92,   669,   669,    91,   650,     0,   577,
     576,   264,   250,   669,   241,   237,   238,   240,   239,   669,
       0,     0,   669,   213,     0,     0,   669,   178,     0,     0,
     669,   669,   669,   669,   669,   669,   669,   226,   225,     0,
     484,   483,   319,   308,   263,   669,   293,   669,   292,   669,
     327,     0,     0,     0,   329,   669,     0,     0,   154,   155,
       0,     0,     0,     0,   144,   145,   669,   153,   143,     0,
      69,    71,     0,   333,     0,     0,     0,   669,   669,     0,
       0,   669,     0,     0,   669,     0,   669,   669,   669,   669,
     669,     0,   217,   216,   669,    80,     0,   669,     0,     8,
       0,     0,     0,     0,     0,     0,   669,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    60,   669,   669,   156,
       0,     0,     0,   282,   548,     0,     0,     0,     0,    94,
      96,    93,    95,     0,     0,   171,   575,   242,     0,     0,
     669,   669,     0,     0,   669,   177,   180,   669,   231,   227,
     228,   230,   229,     0,     0,   669,   210,   190,   251,   316,
       0,   289,     0,     0,   295,   294,   330,   669,     0,     0,
       0,   669,     0,    33,   147,   669,   149,   669,     0,   669,
       0,    68,   669,   332,   669,    52,   641,   637,   640,   643,
     644,   182,     0,     0,     0,   639,   645,     0,   647,   646,
       0,     0,     0,   638,     0,     0,     0,     0,     0,     0,
       0,     0,   183,   214,   186,   215,   595,   642,   181,     0,
       0,     0,     0,    62,   669,   275,     0,   669,   222,   218,
     219,   221,   220,    86,   669,    13,   669,   193,   356,   357,
     355,     0,   669,   669,   195,   196,   198,   200,   201,   669,
       0,   204,   206,   203,   199,     0,   163,   159,     0,   109,
     110,   111,   112,   113,   114,   117,   118,   133,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     137,   136,   120,   119,   106,   108,   107,   115,   116,   104,
     105,   101,   102,   103,   100,     0,     0,    99,   157,   160,
     162,   161,     0,     0,   167,   669,   169,     0,     0,    63,
     273,     0,     0,     0,     0,   669,     0,   669,     0,   355,
     243,   669,   669,   211,   669,   669,   252,   232,   235,   191,
       0,   320,     0,     0,     0,     0,     0,   296,     0,   298,
     655,   669,     0,   669,     0,     0,     0,     0,   326,     0,
       0,   669,     0,   138,   141,   139,   146,     0,   151,   188,
      70,   669,     0,    72,    50,     0,     0,     0,   603,     0,
       0,     0,     0,   611,   610,   609,   608,     0,     0,   607,
      54,   185,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   669,     0,     0,   669,
       0,    65,    88,   223,   669,     0,     0,   359,   360,   364,
     361,   368,   362,   363,   365,   366,   367,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   434,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   669,   476,
     477,   478,   469,   481,   465,   466,   464,   471,   472,   460,
     461,   462,   463,   470,   468,   475,   473,   479,   474,   480,
     467,   358,     0,     9,     0,     0,     0,   202,   205,   164,
     158,   135,   134,   166,   170,   669,     0,   191,     0,   530,
     529,   531,   528,   669,   669,   172,    97,     0,     0,     0,
     212,     0,     0,   669,   233,   317,     0,   301,     0,   300,
       0,   299,   657,     0,     0,     0,   656,   669,   297,   328,
       0,    27,     0,     0,    32,   148,   152,   150,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   189,   489,     0,    74,     0,     0,     0,     0,   669,
       0,     0,     0,     0,     0,     0,   636,   184,   187,   620,
     621,   622,   623,   624,   625,   628,   629,   635,     0,   617,
     618,   619,   626,   627,   615,   616,   612,   613,   614,   634,
     633,     0,     0,    77,     0,    82,    79,     0,   669,     0,
     224,   669,     0,   194,    11,    10,   207,   669,   208,     0,
     165,    64,     0,   173,    98,   593,   669,   669,   669,     0,
     307,   306,   305,   304,   303,   302,   291,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   502,   500,   499,
     501,   498,     0,     0,   497,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    73,   602,     0,
       0,     0,     0,   601,     0,   605,   606,   596,     0,   632,
     631,    84,   669,    66,     0,   669,    81,   482,     0,   669,
     355,   669,   669,   669,   669,    28,     0,    29,    31,     0,
       0,     0,     0,     0,     0,     0,   525,   511,   512,   513,
     514,   515,   516,   517,   518,   524,     0,   508,   509,   510,
     506,   507,   503,   504,   505,   523,   522,     0,     0,    75,
       0,     0,   604,     0,     0,   630,   669,     0,   669,    87,
     209,   168,     0,   255,   254,   253,   234,     0,   496,     0,
       0,     0,   495,     0,   490,     0,   521,   520,     0,     0,
       0,     0,     0,   669,    89,   594,     0,     0,     0,     0,
       0,   519,   599,   598,   600,   597,   669,   669,     0,     0,
       0,     0,     0,   669,    83,    30,   493,   492,   494,   491,
      85
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   558,   559,   115,   422,   116,   117,   249,
     118,   410,   411,   119,   120,   434,   542,   576,   683,   269,
     532,   640,   641,   820,   284,   538,   541,   285,   696,  1202,
    1256,   874,  1118,   465,   758,   814,   121,   266,   523,   524,
     525,   526,   577,  1015,   578,   594,   375,   376,   671,   672,
     818,   616,   428,   432,   710,   711,   377,   674,   551,   496,
     226,   227,    73,   405,   141,   287,    74,    75,   388,    76,
     389,   507,   623,   624,   797,    77,    78,   385,   381,   382,
      79,    80,   122,   515,   627,   123,    81,    82,    83,    84,
     556,   557,   698,  1001,   499,   294,   295,  1071,   173,    49,
     675,   676,   180,   181,   799,   800,   579,    50,   124
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -755
static const yytype_int16 yypact[] =
{
     365,  -755,  2777,  4408,    50,  2969,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,   -61,   -39,     6,    23,    53,    63,
     -34,    93,    10,  -755,  -755,    98,   102,   104,  4607,  -755,
    -755,    78,   114,   134,   141,   135,  -755,   166,   182,   192,
    2777,  2777,  2777,  2777,  2777,  1416,    84,  2777,  3633,  -755,
     117,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  4629,   195,
    -755,  -755,  -755,  -755,  2652,  2740,  2740,  -755,   382,  -755,
    2740,  -755,  -755,   185,  -755,  -755,  -755,  -755,   262,   126,
      69,  -755,  -755,  -755,  -755,  -755,  -755,  5156,  5156,  -755,
    5156,   359,  5156,   247,  -755,  5112,   218,   248,   258,  5156,
     290,   275,   279,   288,  5156,  5156,   299,  5126,  5156,  5156,
     360,  5156,  5156,  -755,   302,  -755,  -755,  -755,  3179,  -755,
    -755,  -755,  -755,  -755,  -755,  2777,  4408,  2777,  2777,  2777,
    2777,  4408,  2777,  4408,  2777,  2777,  2777,  -755,  -755,   311,
     382,   314,   382,   382,  -755,  4408,  2777,  2777,  4408,  4408,
    1416,  2777,  2777,    90,    90,    90,    90,    90,   -61,     6,
      23,    53,    63,    93,    98,   102,  2119,  2292,  2455,  2540,
     192,   330,   -60,  3633,  -755,  -755,  -755,  -755,  -755,   382,
     333,   373,  -755,  -755,    90,  2777,  2777,  2777,  2777,  2777,
    2777,  2777,  2777,  2777,  2777,  2777,  2777,  2777,  2777,  2777,
    2777,  2777,  2777,  2777,  2777,  2777,  2217,  2777,  -755,  -755,
     185,  2777,  -755,  2740,  -755,  -755,  -755,  -755,  -755,   347,
      31,   185,   185,    31,    31,  3948,   356,  -755,   366,  -755,
    -755,  -755,  -755,  1119,   388,    17,    45,   154,  -755,  -755,
    -755,  5156,  -755,  -755,  -755,  5156,  -755,  -755,  -755,  5059,
     294,  -755,   382,   382,   382,  -755,  -755,   399,  -755,  -755,
    -755,  -755,  -755,  2777,  3083,  -755,   397,  -755,  3251,  -755,
     382,   115,  -755,  -755,   382,   226,   384,  -755,  4175,   396,
    4475,   382,  -755,   382,   393,   238,   398,  -755,  -755,  -755,
    -755,   219,    69,  -755,   395,   416,  -755,   400,   406,   407,
     409,   417,   429,   428,   440,   431,   438,   439,  2777,  -755,
    2777,  -755,  -755,   454,   448,   449,   451,   462,   458,  3356,
     460,   461,  2777,  2777,  -755,  -755,    64,    84,  3815,  3835,
     946,   946,   486,   486,   206,   206,  -755,  3449,  3851,  3899,
    4036,   486,   486,   121,   121,    90,    90,    90,  -755,  -755,
     -47,  1299,  -755,  3377,    31,   473,    31,    31,    31,    31,
      31,   468,  -755,   356,  -755,   356,  -755,   468,   468,  -755,
      31,  4530,  4386,    31,    31,   469,    27,  -755,  1148,  -755,
    2777,   382,   467,  -755,  -755,  -755,  -755,  1119,  -755,   543,
    -755,  -755,  -755,   495,   492,   505,   506,  4681,  -755,  1318,
    2876,   403,   478,  4175,   238,  -755,  -755,   507,  -755,  4408,
     489,   511,   498,  -755,    34,  -755,  -755,  -755,  2777,  4629,
     500,  -755,  -755,   502,  -755,  -755,   382,    15,  -755,  -755,
    -755,  2105,  -755,  -755,   786,  -755,   527,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,   514,  -755,   515,  -755,  -755,  -755,
    3395,   517,   520,  -755,  -755,  -755,   522,  -755,  -755,  -755,
    -755,    90,  3633,  -755,  4247,   672,  -755,  -755,  2777,  -755,
    -755,  -755,   468,    31,   468,   468,   468,   468,   468,  2777,
      -4,  4629,  1148,  -755,    12,   108,   608,  -755,  4319,   529,
    1148,  1148,  1148,  1148,  1148,  1148,   -45,  -755,  -755,   521,
    3633,  -755,   -12,  -755,   544,  4735,  -755,   546,  -755,  4789,
    -755,   665,   667,   669,  -755,  -755,   315,   556,  -755,  -755,
     382,  2204,   382,   550,   560,  -755,  1148,  -755,  -755,    34,
    -755,  -755,   786,  -755,   561,   542,   382,  1533,  4247,   552,
     786,  4247,   786,  3413,   500,   553,   500,   500,   500,   500,
     500,   293,  -755,  -755,  4843,  -755,   547,  -755,   334,  -755,
     -68,   568,   570,   562,   579,   583,  2329,  3578,   573,   786,
     786,  3082,   786,   786,   786,   786,  -755,   186,   436,  -755,
    1119,  2777,  2777,  -755,  -755,  2777,  2777,   588,  4552,  -755,
    -755,  -755,  -755,   592,   612,  -755,  3633,   468,   593,   596,
    1148,   -45,   599,   600,   672,  -755,  -755,  1148,   603,   603,
     603,   603,   603,   306,  2777,  2777,  -755,  -755,   604,  -755,
    2777,  -755,  2386,   624,   629,  -755,  -755,  -755,   -43,   630,
     633,  4897,    36,  -755,   621,  1148,   631,  4286,  2876,   -13,
     786,  -755,   436,  -755,  5156,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,   619,   632,   635,  -755,  -755,  4607,  -755,  -755,
     637,   646,   638,  -755,   648,  2777,  2777,  2777,  2777,  1416,
    2777,   622,    57,  -755,  -755,  3651,  -755,   117,  -755,   628,
     786,   361,   647,  -755,   436,  -755,   324,   500,   649,   649,
     649,   649,   649,  -755,  2777,  -755,  4247,  -755,  1843,  -755,
    -755,   382,  2777,  2777,  -755,  -755,  -755,  -755,  -755,  2329,
     654,   650,  3633,  -755,  -755,   786,   328,   328,   763,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,   659,   658,  -755,  -755,   328,
     328,   328,   391,   801,  -755,  2777,  -755,  2105,   681,  -755,
     544,    39,    66,   123,   149,   608,  4607,   185,    41,  -755,
    -755,  4247,   -45,  -755,  4247,  4247,  -755,   603,   666,  3633,
     668,  3597,   587,   783,   897,   382,   493,  -755,   382,  -755,
    -755,  -755,  2386,  4951,   808,   695,   812,   814,  -755,   699,
    4408,   -13,  4408,  -755,  -755,  -755,  -755,  2889,  -755,  -755,
    -755,   436,   701,  -755,  -755,  4408,  4408,  4408,   687,  4408,
    4408,  4408,  1416,    90,    90,    90,    90,   686,   152,    90,
    -755,  -755,  1988,  2777,  2777,  2777,  2777,  2777,  2777,  2777,
    2777,  2777,  2777,  2777,  2777,  2777,  2777,  2777,  2777,  2777,
    2777,  2777,  2777,  2777,  2441,  2777,   608,   465,   689,   608,
     707,  -755,  -755,   649,  4247,   690,   691,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,  -755,
    -755,  -755,   696,  -755,   697,   702,   700,  -755,  2553,   328,
    -755,  -755,  -755,  -755,  -755,  1533,   704,  3578,   786,  -755,
    -755,  -755,  -755,   672,   185,  -755,  -755,   703,   716,   708,
    -755,   718,   719,  4247,  -755,  -755,  1030,  -755,  1030,  -755,
    1030,  -755,  -755,  1030,  1030,  1030,  -755,  5005,  -755,  -755,
     720,  -755,   163,   722,  -755,  -755,  -755,  -755,   727,   737,
     742,   745,   743,   753,  2889,  2889,  2889,  2889,  2889,  1416,
    2889,  3798,  -755,   765,  -755,   786,   744,   757,   758,  2777,
     759,   750,   764,   756,  3431,  2777,  -755,  -755,  -755,  3815,
    3835,   946,   946,   486,   486,   206,   206,  -755,  3615,  3851,
    3899,  4036,   486,   486,   121,   121,    90,    90,    90,  -755,
    -755,   236,  1553,   325,   760,  -755,   325,   786,  4247,   761,
    -755,   608,  1698,  -755,  -755,  -755,  -755,  2329,  3633,   767,
    -755,  -755,   779,  -755,  -755,  -755,   608,   608,   608,   768,
    -755,  -755,  -755,  -755,  -755,  -755,  -755,   787,   899,   788,
     790,  4408,  4408,  4408,  4408,  4408,  4408,   241,   241,   241,
     241,   241,   773,   250,   241,  2889,  2889,  2889,  2889,  2889,
    2889,  2889,  2889,  2889,  2889,  2889,  2889,  2889,  2889,  2889,
    2889,  2889,  2889,  2889,  2665,  2777,   786,  -755,  -755,   777,
     778,   780,   784,  -755,   785,  -755,  -755,    90,  2777,  -755,
    -755,  -755,  4247,  -755,   781,   608,   325,  -755,   789,   608,
    -755,   672,   672,   672,   608,  -755,   797,  -755,  -755,   796,
     798,   807,   809,   806,   818,  2889,  -755,  1224,  3882,  3244,
    3244,  2868,  2868,   510,   510,  -755,  3669,  4052,  4069,  4078,
     674,   674,   241,   241,   241,  -755,  -755,   251,  2008,  -755,
    2777,  2777,  -755,  2777,  2777,  3633,  4247,   810,   608,   325,
    -755,   325,   811,  -755,  -755,  -755,   325,   919,  -755,   800,
     816,   817,  -755,   820,   241,  2889,  -755,  -755,   278,   282,
     286,   287,   825,   608,   325,  -755,   827,  2777,  2777,  2777,
    2777,  3798,  -755,  -755,  -755,  -755,   608,   672,   804,   295,
     317,   318,   332,   672,  -755,  -755,  -755,  -755,  -755,  -755,
    -755
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -755,  -755,  -230,  -755,   259,  -755,  -755,   723,  -755,  -755,
     207,   437,  -755,  -105,  -755,  -755,  -755,   -42,  -142,  -755,
    -755,  -755,   -96,  -206,  -755,  -755,  -755,   713,  -755,  -755,
    -755,  -755,  -755,  -386,  -755,  -755,   345,  -755,  -755,  -755,
     346,   464,  -465,  -755,  -523,  -541,  -449,  -755,   -32,  -755,
     175,  -546,  -755,  -397,  -693,  -755,  -341,   145,  -480,  -433,
     795,  -197,   -41,   -98,  -551,  -166,    28,   -70,  -755,   -65,
    -755,  -755,  -755,  -755,   188,   -64,  -755,  -354,  -755,  -755,
       2,    -7,  -755,  -755,  -755,  -755,     1,    21,  -755,  -755,
    -428,  -755,    13,  -755,  -445,  -124,   -27,   233,   526,  -119,
    -755,  -755,   670,  -755,  -754,   821,   389,  -502,    -1
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -665
static const yytype_int16 yytable[] =
{
       6,   563,   265,   298,   299,   300,   301,   531,   303,   642,
     305,   306,   307,   352,   632,   587,  1006,   210,   172,   684,
     286,   143,   314,   315,   364,   366,   397,   320,   321,   144,
     142,   483,   768,   504,   598,   677,   766,   777,  1037,  1039,
    1041,   487,   208,   355,   209,   183,   539,   356,   288,   601,
      85,   174,   175,   289,   290,   783,   702,   608,   609,   610,
     611,   612,   613,   786,   686,   323,   688,   689,   690,   691,
     692,   841,   228,   171,   703,   681,   561,   562,   323,   235,
     236,   125,   804,   614,   324,   214,   215,   216,   357,   679,
    -662,   218,   682,   639,   174,   175,   822,   469,   615,   131,
     604,   805,   406,   126,   716,   717,   828,   759,   760,   761,
     762,   292,   417,   619,   176,   817,   620,   821,  -663,   293,
     291,   463,   193,   208,   296,   209,   296,   296,   296,   296,
     615,   296,   177,   296,   296,   296,   230,   231,   870,   479,
     599,  -662,   176,   133,  -662,   296,   296,   606,   127,   358,
     296,   296,   488,   193,   297,   479,   602,   176,   505,   302,
     237,   304,   509,   359,   323,   128,   286,   782,   360,  -663,
     790,   540,  -663,   313,   787,   177,   316,   317,   318,   350,
     809,   769,   842,  1019,   378,  1026,   451,   214,   215,   216,
     218,   323,   554,   238,   288,   129,   673,   219,   288,   289,
     290,   220,   811,   289,   290,   130,   464,   873,   288,   228,
    1020,   145,   178,   289,   290,   867,   179,   232,   588,   362,
     228,   228,   362,   362,   379,  1024,   770,  -664,   383,   235,
     236,   205,   206,   207,   214,   132,  1030,   530,   193,   420,
     134,   408,   221,   409,   135,   823,   136,   876,   323,   875,
    1009,   479,   603,   233,   386,     6,   146,   292,   202,   203,
     204,   292,   205,   206,   207,   293,   291,  1021,   149,   293,
     291,   292,  1002,  1173,   323,  1073,   147,   323,  -664,   293,
     291,  -664,  1140,   148,  1141,   631,  1142,   871,  1148,  1143,
    1144,  1145,   176,  1022,   242,   243,  1086,   244,   246,   247,
     174,   175,   251,   222,   174,   175,   255,  1149,   150,   296,
     237,   261,   262,   763,   264,   267,   268,   223,   272,   273,
    1016,    10,   224,    11,   151,   466,   183,   225,   764,   765,
     482,   378,  1029,   288,   152,  1031,  1032,   211,   289,   290,
     677,   200,   201,   202,   203,   204,   233,   205,   206,   207,
     -90,  1028,   -90,   362,   -90,   362,   362,   362,   362,   362,
     252,   323,   429,   176,   430,   245,   431,   176,   413,   362,
     174,   175,   362,   362,   248,   323,   323,   498,   544,   501,
    1199,   177,  1183,  1184,  1185,   177,   229,     6,   508,  1023,
     253,     6,   174,   175,  1226,  1276,   292,   803,   589,   528,
     254,   527,   258,   323,   293,   291,   259,   323,   386,    87,
     590,   323,   323,   591,   256,   260,   592,    88,   392,   553,
     323,     6,  1292,   378,  1074,  1119,  1293,    90,    91,    92,
    1294,  1295,   593,   176,  1208,   693,   694,   534,   241,  1306,
     600,   263,   323,   323,    99,   274,   270,   378,   251,   615,
     788,   177,   390,   308,   104,   176,   310,   323,   700,   701,
     105,  1307,  1308,   379,   595,   108,   872,   694,   234,   240,
     764,   765,   362,   177,   322,   111,  1309,   112,   501,   326,
    1113,   498,  1132,  1116,   354,   466,     1,     2,     3,   498,
     498,   498,   498,   498,   498,   617,   378,   378,   327,   380,
     378,   673,   114,   764,   765,   868,   625,   191,   192,  -236,
     230,   231,   545,   677,     6,   387,   546,   424,   193,   425,
     426,   427,   527,   398,   433,   498,   414,   -90,    48,   -90,
     400,   -90,   813,   764,   765,  1013,   678,   379,   418,   438,
     379,   323,  1173,   553,   439,   553,   553,   553,   553,   553,
     440,   441,   642,   442,   771,   772,   699,   547,   773,   774,
     429,   443,   430,   444,   767,   713,   153,   154,   155,   156,
     157,  1047,   445,   184,   446,   447,   595,   617,  1004,  1005,
    1025,   143,   448,   449,  1139,  1043,  1044,  1045,   452,   144,
     142,   232,   453,   454,   684,   455,   456,   174,   175,   498,
     617,   386,   457,   595,   459,   460,   498,   764,   765,  1114,
     473,   479,   503,   486,   501,   798,   506,   511,   548,   510,
     529,   200,   201,   202,   203,   204,     6,   205,   206,   207,
     512,   513,   549,   533,   498,   535,   536,   550,   819,   527,
     537,   617,   838,    57,   555,  1178,  1179,  1180,  1181,  1182,
     143,  1183,  1184,  1185,   580,   378,   581,   582,   144,   142,
     176,   584,   585,   821,   586,   463,   607,   618,  -309,  1204,
    1263,  1264,  1265,   622,   673,   628,   319,   629,   177,   630,
     436,   240,   633,   617,   637,   638,   553,   643,   644,   680,
     687,    67,   697,   501,   704,   379,   705,   837,  1072,   795,
      69,   296,   296,  1036,   588,   707,  1173,   706,   713,   708,
     715,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   775,   351,   778,  1206,   779,   353,   781,   780,
     378,   784,   785,   378,   378,   589,   615,  -243,   801,   810,
    1211,  1212,  1213,  1257,   802,   806,  1304,   590,   807,   812,
     591,   825,  1310,   592,   501,   826,   840,   497,   827,   143,
     829,   831,   866,  1010,   466,  1008,   228,   144,   142,   593,
     379,   617,  1262,   379,   379,   798,   798,   798,   830,   399,
     832,   869,   694,   174,   175,   798,   230,   231,   568,  1007,
       6,   378,   569,  1011,  1012,  1014,  1018,  1282,  1033,   552,
     819,  1180,  1181,  1182,  1034,  1183,  1184,  1185,  1050,  1259,
     617,  1051,  1052,  1261,  1053,  1054,  1075,  1133,  1266,  1079,
    1085,  1115,  1117,   378,   450,  1121,  1120,  1111,  1055,    57,
    1057,  1123,  1124,   570,   264,  1126,  1125,  1134,   461,   462,
    1130,   824,  1136,  1076,  1077,  1078,   176,  1080,  1081,  1082,
    1083,  1135,  1137,  1138,  1147,   466,  1150,   182,   466,  1151,
    1152,   497,  1284,   379,   177,  1153,   571,   232,  1154,   497,
     497,   497,   497,   497,   497,  1155,  1156,    67,  1188,   217,
    1186,  1189,  1190,  1192,  1193,   795,    69,  1297,  1194,  1038,
    1195,   239,  1201,  1210,   572,  1205,   500,   174,   175,  1216,
    1303,  1209,  1214,  1215,  1217,   497,  1218,  1225,   573,  1250,
    1251,   257,  1267,   574,  1252,  1258,  1253,  1254,   575,  1286,
    1305,   271,  1269,   552,  1260,   552,   552,   552,   552,   552,
    1268,  1270,  1287,  1271,   543,  1072,  1072,  1072,  1072,  1072,
    1272,  1072,  1273,    57,  1283,  1191,  1285,   567,  1288,  1289,
    1003,   309,  1290,   311,   312,   189,   190,   191,   192,  1296,
     176,  1298,   391,   645,   378,  1203,  1131,   699,   193,  1187,
    1249,   404,   815,  1129,   816,   635,  1056,  1088,   177,   497,
    1048,  1122,   378,     0,   596,     0,   497,   467,     0,     0,
     325,    67,     0,     0,     0,   500,     0,     0,     0,   795,
      69,     0,     0,  1040,   678,   361,   363,   365,   367,   368,
       0,     0,   595,   228,   497,     0,     0,     0,     0,   798,
       0,   798,   379,   798,     0,     0,   798,   798,   798,     0,
     174,   175,  1163,     0,     0,     0,  1072,  1072,  1072,  1072,
    1072,  1072,  1072,  1072,  1072,  1072,  1072,  1072,  1072,  1072,
    1072,  1072,  1072,  1072,  1072,     0,     0,     0,     0,     0,
       0,   393,     0,   394,   395,   396,   552,   378,   296,   198,
     199,   200,   201,   202,   203,   204,    57,   205,   206,   207,
       0,   407,   712,     0,     0,   412,     0,  1162,     0,     0,
       0,     0,   421,   176,   423,     0,  1072,     0,     0,     0,
       0,     0,   435,   437,     0,     0,     0,   379,     0,     0,
     466,   177,     0,     0,     0,     0,   713,     0,     0,     0,
     384,     0,     0,     0,    67,   466,   466,   466,     0,     0,
     789,   500,   795,    69,     0,     0,   791,     0,   182,   472,
       0,   474,   475,   476,   477,   478,  1072,  1247,   230,   231,
     489,   378,     0,     0,   490,   480,     0,     0,   484,   485,
      53,     0,    54,    55,    56,     0,     0,     0,     0,  1219,
    1220,  1221,  1222,  1223,  1224,     0,     0,     0,     0,     0,
       0,   833,   834,   835,   836,     0,   839,     0,     0,    63,
     213,   379,   502,     0,   466,   491,     0,     0,   466,     0,
     595,   595,   595,   466,     0,   378,     0,    65,    66,     0,
     500,     0,     0,  1278,  1279,     0,  1280,  1281,     0,     0,
       0,     0,     0,    70,     0,   712,     0,     0,    72,   232,
    1166,  1167,  1168,  1169,  1170,  1171,  1172,   560,     0,     0,
       0,     0,     0,     0,     0,   379,  1173,   466,     0,     0,
    1299,  1300,  1301,  1302,     0,     0,   492,     0,   597,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     493,     0,   466,     0,     0,   494,     0,     0,     0,     0,
     495,   500,     0,  1017,     0,   466,   595,  1157,  1158,  1159,
    1160,  1161,   595,  1164,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   185,   186,   187,   188,   189,   190,
     191,   192,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   193,     0,   185,   186,   187,   188,   189,   190,   191,
     192,   634,     0,   636,     0,     0,     0,     0,     0,     0,
     193,     0,     0,     0,  1175,  1176,  1177,   412,  1084,  1178,
    1179,  1180,  1181,  1182,     0,  1183,  1184,  1185,     0,  1089,
    1090,  1091,  1092,  1093,  1094,  1095,  1096,  1097,  1098,  1099,
    1100,  1101,  1102,  1103,  1104,  1105,  1106,  1107,  1108,  1109,
       0,  1112,     0,     0,     0,     0,     0,     0,  1227,  1228,
    1229,  1230,  1231,  1232,  1233,  1234,  1235,  1236,  1237,  1238,
    1239,  1240,  1241,  1242,  1243,  1244,  1245,     0,     0,     7,
       8,     9,    10,     0,    11,    12,    13,   158,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,   206,   207,   516,     0,   470,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,  1274,   205,
     206,   207,   517,    15,    52,     0,     0,   159,     0,   160,
     161,   162,    57,    58,     0,    20,    59,     0,     0,   163,
      22,     0,     0,    61,     0,     0,     0,     0,    23,    24,
     164,     0,     0,     0,     0,     0,   165,   166,     0,     0,
       0,     0,     0,    28,     0,    29,     0,    30,  1291,     0,
       0,     0,    31,     0,   167,   168,    34,     0,     0,    35,
      67,     0,   560,     0,    36,     0,     0,    37,    68,    69,
     169,     0,     0,    71,  1128,   170,   646,   647,   648,    10,
       0,    11,   649,   650,    51,     0,     0,   651,    40,     0,
       0,    41,    42,    43,     0,     0,    44,     0,    45,    46,
       0,     0,     0,    47,     0,     0,     0,     0,   185,   186,
     187,   188,   189,   190,   191,   192,     0,     0,     0,     0,
     652,    52,     0,     0,    53,   193,    54,    55,    56,    57,
     371,     0,   653,    59,     0,     0,    60,   654,     0,  1027,
      61,     0,     0,     0,     0,   655,   656,    62,     0,     0,
       0,  1197,     0,    63,    64,     0,  1042,     0,     0,  1046,
     657,     0,   658,     0,   659,     0,     0,     0,   372,   660,
       0,    65,    66,   661,     0,     0,   662,    67,     0,     0,
       0,   663,     0,     0,   664,    68,    69,    70,     0,     0,
      71,     0,    72,   712,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   665,     0,     0,   666,   667,
       0,     0,     0,   668,     0,   669,     0,     0,     0,     0,
     670,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,   206,   207,     0,     0,  1200,
       0,   877,   878,   879,   880,   881,   882,   883,   884,   885,
     886,  1248,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,     0,  1255,     0,     0,     0,     0,     0,
     898,   899,   900,   901,   902,   903,   904,   905,   906,   907,
     908,   909,   910,   911,   912,   913,   914,     0,     0,   915,
     916,   917,   918,   919,   920,   921,   922,   923,   924,   925,
     926,   927,   928,   929,     0,   930,     0,   931,   932,   933,
     934,   935,   936,   937,   938,   939,   940,   941,   942,   943,
       0,     0,     0,   944,   945,   946,     0,   947,   948,   949,
     950,   951,   952,   953,   954,   955,   956,   957,   958,   959,
     960,   961,   962,     0,   963,   964,   965,   966,   967,   968,
     969,   970,   971,   972,   973,   974,   975,   976,   977,     0,
       0,     0,   978,   979,   980,   981,   982,   983,   984,   985,
     986,   987,   988,   989,   990,   991,   992,   993,   994,   995,
     996,   997,   998,  1207,   999,  1000,   877,   878,   879,   880,
     881,   882,   883,   884,   885,   886,     0,   887,   888,   889,
     890,   891,   892,   893,   894,   895,   896,   897,     0,     0,
       0,     0,     0,     0,     0,   898,   899,   900,   901,   902,
     903,   904,   905,   906,   907,   908,   909,   910,   911,   912,
     913,   914,     0,     0,   915,   916,   917,   918,   919,   920,
     921,   922,   923,   924,   925,   926,   927,   928,   929,     0,
     930,     0,   931,   932,   933,   934,   935,   936,   937,   938,
     939,   940,   941,   942,   943,     0,     0,     0,   944,   945,
     946,     0,   947,   948,   949,   950,   951,   952,   953,   954,
     955,   956,   957,   958,   959,   960,   961,   962,     0,   963,
     964,   965,   966,   967,   968,   969,   970,   971,   972,   973,
     974,   975,   976,   977,     0,     0,     0,   978,   979,   980,
     981,   982,   983,   984,   985,   986,   987,   988,   989,   990,
     991,   992,   993,   994,   995,   996,   997,   998,     0,   999,
    1000,   646,   647,   648,    10,     0,    11,   649,   650,    51,
       0,     0,  1087,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   185,   186,   187,   188,   189,   190,   191,
     192,     0,     0,     0,     0,   652,    52,     0,     0,    53,
     193,    54,    55,    56,    57,   371,     0,   653,    59,     0,
       0,    60,   654,     0,     0,    61,     0,     0,     0,     0,
     655,   656,    62,     0,     0,     0,     0,     0,    63,    64,
       0,     0,     0,     0,     0,   657,     0,   658,     0,   659,
       0,     0,     0,   372,   660,     0,    65,    66,   661,     0,
       0,   662,    67,     0,     0,     0,   663,     0,     0,   664,
      68,    69,    70,     0,     0,    71,     0,    72,     7,     8,
       9,    10,     0,    11,    12,    13,    14,     0,     0,     0,
     665,     0,     0,   666,   667,     0,     0,     0,   668,     0,
     669,     0,     0,     0,     0,   670,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,     0,   205,
     206,   207,    15,     0,  1277,     0,    16,     0,    17,    18,
      19,     0,     0,     0,    20,     0,   564,   565,    21,    22,
      53,     0,    54,    55,    56,     0,     0,    23,    24,    25,
       0,     0,   212,     0,     0,    26,    27,     0,     0,     0,
       0,     0,    28,     0,    29,     0,    30,     0,     0,    63,
     213,    31,     0,    32,    33,    34,     0,     0,    35,     0,
       0,     0,     0,    36,   518,   519,    37,    65,    66,    38,
       7,     8,     9,    10,    39,    11,    12,    13,    14,   566,
       0,     0,     0,    70,     0,     0,     0,    40,    72,     0,
      41,    42,    43,     0,     0,    44,     0,    45,    46,     0,
       0,     0,    47,     0,     0,    53,     0,    54,    55,    56,
       0,   136,     0,     0,    15,     0,     0,    60,    16,     0,
      17,    18,    19,     0,     0,     0,    20,     0,    62,     0,
      21,    22,     0,     0,    63,    64,     0,     0,     0,    23,
      24,    25,     0,     0,     0,     0,     0,    26,    27,     0,
       0,     0,    65,    66,    28,     0,    29,     0,    30,     0,
       0,     0,     0,    31,     0,    32,    33,    34,    70,     0,
      35,    71,     0,    72,     0,    36,     0,     0,    37,     0,
       0,    38,     7,     8,     9,    10,    39,    11,    12,    13,
      14,     0,     0,    53,     0,    54,    55,    56,     0,    40,
       0,     0,    41,    42,    43,     0,     0,    44,     0,    45,
      46,   349,     0,     0,    47,     0,     0,     0,     0,     0,
       0,     0,    63,   213,     0,     0,    15,     0,     0,     0,
      16,     0,    17,    18,    19,     0,     0,     0,    20,     0,
      65,    66,    21,    22,     0,     0,   174,   175,     0,     0,
       0,    23,    24,    25,     0,     0,    70,     0,     0,    26,
      27,    72,     0,     0,     0,     0,    28,     0,    29,     0,
      30,     0,     0,     0,     0,    31,     0,    32,    33,    34,
       0,     0,    35,     0,   146,     0,     0,    36,     0,     0,
      37,     0,    57,    38,     7,     8,     9,    10,    39,    11,
      12,    13,    14,   709,     0,     0,     0,     0,     0,   176,
       0,    40,     0,     0,    41,    42,    43,     0,     0,    44,
       0,    45,    46,     0,     0,     0,    47,   177,   792,   793,
     794,     0,     0,     0,     0,     0,     0,     0,    15,     0,
      67,     0,    16,     0,    17,    18,    19,     0,   795,    69,
      20,     0,   796,     0,    21,    22,    53,     0,    54,    55,
      56,     0,     0,    23,    24,    25,     0,     0,     0,     0,
       0,    26,    27,     0,     0,     0,     0,     0,    28,     0,
      29,     0,    30,     0,     0,    63,   213,    31,     0,    32,
      33,    34,     0,     0,    35,     0,     0,     0,     0,    36,
       0,     0,    37,    65,    66,    38,     7,     8,     9,    10,
      39,    11,    12,    13,    14,     0,     0,     0,     0,    70,
       0,     0,     0,    40,    72,     0,    41,    42,    43,     0,
       0,    44,     0,    45,    46,  1110,     0,     0,    47,     0,
       0,    53,     0,    54,    55,    56,     0,   147,     0,     0,
      15,     0,     0,     0,    16,     0,    17,    18,    19,     0,
       0,     0,    20,     0,     0,     0,    21,    22,     0,     0,
      63,   213,     0,     0,     0,    23,    24,    25,     0,     0,
       0,     0,     0,    26,    27,     0,     0,     0,    65,    66,
      28,     0,    29,     0,    30,     0,     0,     0,     0,    31,
       0,    32,    33,    34,    70,     0,    35,     0,     0,    72,
       0,    36,     0,     0,    37,     0,     0,    38,     7,     8,
       9,    10,    39,    11,    12,    13,    14,  1127,     0,     0,
       0,     0,   151,     0,     0,    40,     0,     0,    41,    42,
      43,     0,     0,    44,     0,    45,    46,     0,     0,     0,
      47,     0,     0,    53,     0,    54,    55,    56,     0,     0,
       0,     0,    15,     0,     0,   212,    16,     0,    17,    18,
      19,     0,     0,     0,    20,     0,     0,     0,    21,    22,
       0,     0,    63,   213,     0,     0,     0,    23,    24,    25,
       0,     0,     0,     0,     0,    26,    27,     0,     0,     0,
      65,    66,    28,     0,    29,     0,    30,     0,     0,     0,
       0,    31,     0,    32,    33,    34,    70,     0,    35,     0,
       0,    72,     0,    36,     0,     0,    37,     0,     0,    38,
       7,     8,     9,    10,    39,    11,    12,    13,    14,     0,
       0,    53,     0,    54,    55,    56,     0,    40,     0,     0,
      41,    42,    43,     0,     0,    44,     0,    45,    46,  1246,
       0,     0,    47,     0,     0,     0,     0,     0,     0,     0,
      63,   213,     0,     0,    15,     0,     0,     0,    16,     0,
      17,    18,    19,     0,     0,     0,    20,     0,    65,    66,
      21,    22,     0,     0,     0,     0,     0,     0,     0,    23,
      24,    25,     0,     0,    70,     0,     0,    26,    27,    72,
       0,     0,     0,     0,    28,     0,    29,     0,    30,     0,
       0,     0,     0,    31,     0,    32,    33,    34,     0,     0,
      35,     0,     0,     0,     0,    36,   518,   519,    37,  1171,
    1172,    38,     7,     8,     9,    10,    39,    11,    12,    13,
    1173,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,    41,    42,    43,     0,     0,    44,     0,    45,
      46,     0,     0,     0,    47,     0,     0,    53,     0,    54,
      55,    56,   520,   521,     0,     0,  1058,     0,     0,    60,
       0,     0,     0,     0,     0,     0,     0,     0,  1059,     0,
      62,     0,     0,  1060,     0,     0,    63,    64,     0,     0,
       0,    23,    24,     0,     0,     0,     0,     0,     0,    -2,
       0,     0,     0,     0,    65,    66,     0,     0,    29,     0,
      30,     0,     0,     0,     0,  1061,     0,     0,   522,  1062,
      70,     0,  1063,    71,     0,    72,     0,    36,     0,     0,
       0,     0,     0,  1178,  1179,  1180,  1181,  1182,     0,  1183,
    1184,  1185,     0,     0,     0,     0,     0,     0,    86,    87,
       0,  1064,     0,     0,  1065,  1066,  1067,    88,     0,  1068,
       0,  1069,    46,     0,     0,    89,  1070,    90,    91,    92,
      93,     0,     0,     0,    94,     0,     0,     0,    95,     0,
       0,    96,    97,    98,    99,   100,     0,     0,     0,     0,
       0,   101,   102,   103,   104,     0,     0,     0,     0,     0,
     105,   106,     0,     0,   107,   108,     0,     0,     0,   109,
       0,     0,     0,     0,   110,   111,     0,   112,   718,     0,
       0,     0,     0,   275,   276,   113,     0,   719,   720,   721,
     722,   723,   724,   725,   726,     0,     0,     0,     0,     0,
       0,     0,   114,     0,   727,     0,   728,   729,   730,   731,
     732,   733,   734,   735,   736,   737,   738,   739,     0,     0,
       0,   277,     0,     0,    53,     0,    54,    55,    56,    57,
     278,     0,     0,   279,   740,     0,    60,     0,     0,     0,
      61,     0,     0,     0,     0,     0,     0,    62,     0,     0,
       0,     0,     0,    63,    64,     0,     0,     0,     0,   741,
       0,     0,     0,   280,     0,     0,     0,     0,     0,     0,
       0,    65,    66,     0,     0,     0,     0,    67,     0,   275,
     276,     0,     0,     0,     0,   281,    69,    70,     0,     0,
      71,     0,    72,     0,     0,     0,     0,   742,     0,     0,
     743,     0,   744,   745,   746,   747,   748,   749,   750,   751,
     752,   753,   754,   283,   755,   756,     0,   277,     0,   757,
      53,     0,    54,    55,    56,    57,   278,     0,     0,   279,
       0,     0,    60,     0,     0,     0,    61,     0,     0,     0,
       0,     0,     0,    62,     0,     0,     0,     0,     0,    63,
      64,   401,   402,  1169,  1170,  1171,  1172,     0,     0,   280,
       0,     0,     0,     0,     0,     0,  1173,    65,    66,     0,
       0,     0,     0,    67,     0,     0,     0,     0,     0,     0,
       0,   281,    69,    70,     0,     0,    71,     0,    72,   277,
       0,     0,    53,   282,    54,    55,    56,    57,   403,     0,
       0,   279,     0,     0,    60,     0,     0,     0,    61,   283,
       0,     0,     0,     0,     0,    62,     0,     0,     0,     0,
       0,    63,    64,     0,     0,     0,     0,     0,     0,     0,
       0,   280,     0,     0,     0,     0,     0,     0,     0,    65,
      66,     0,     0,     0,     0,    67,     0,     0,     0,     0,
       0,     0,     0,   281,    69,    70,     0,     0,    71,     0,
      72,   185,   186,   187,   188,   189,   190,   191,   192,  1178,
    1179,  1180,  1181,  1182,     0,  1183,  1184,  1185,   193,     0,
       0,   283,   185,   186,   187,   188,   189,   190,   191,   192,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   193,
     185,   186,   187,   188,   189,   190,   191,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   193,   185,   186,
     187,   188,   189,   190,   191,   192,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   185,   186,   187,   188,
     189,   190,   191,   192,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   193,   185,   186,   187,   188,   189,   190,
     191,   192,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,   206,   207,
     458,     0,     0,     0,     0,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,   206,
     207,   471,     0,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,   206,   207,   583,
       0,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,   206,   207,   685,     0,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,   206,   207,  1196,   468,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,   206,   207,   185,   186,   187,   188,   189,   190,   191,
     192,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,     0,   185,   186,   187,   188,   189,   190,   191,   192,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   193,
     185,   186,   187,   188,   189,   190,   191,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   193,   185,   186,
     187,   188,   189,   190,   191,   192,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   843,   844,   845,   846,
     847,   848,   849,   850,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   851,  1165,  1166,  1167,  1168,  1169,  1170,
    1171,  1172,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1173,     0,     0,   714,     0,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,     0,   205,
     206,   207,  1035,     0,     0,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,   206,
     207,     0,  1198,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,   206,   207,     0,
       0,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,   206,   207,     0,     0,     0,
     852,   853,   854,   855,   856,   857,   858,   859,   860,   861,
     862,     0,   863,   864,   865,     0,  1275,     0,  1174,  1175,
    1176,  1177,     0,     0,  1178,  1179,  1180,  1181,  1182,     0,
    1183,  1184,  1185,  1165,  1166,  1167,  1168,  1169,  1170,  1171,
    1172,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1173,   186,   187,   188,   189,   190,   191,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   193,     0,     0,
       0,     0,   187,   188,   189,   190,   191,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   193,   187,   188,
     189,   190,   191,   192,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   193,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1167,
    1168,  1169,  1170,  1171,  1172,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1173,     0,   187,   188,   189,   190,
     191,   192,     0,     0,     0,     0,     0,  1174,  1175,  1176,
    1177,   193,     0,  1178,  1179,  1180,  1181,  1182,     0,  1183,
    1184,  1185,     0,     0,     0,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,   206,   207,    51,
       0,     0,   369,     0,   370,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,   206,   207,     0,
       0,     0,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,   206,   207,     0,    52,     0,     0,    53,
       0,    54,    55,    56,    57,   371,     0,     0,    59,     0,
       0,    60,  1175,  1176,  1177,    61,     0,  1178,  1179,  1180,
    1181,  1182,    62,  1183,  1184,  1185,     0,     0,    63,    64,
       0,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,   206,   207,   372,     0,     0,    65,    66,     0,     0,
       0,     0,    67,   187,   188,   189,   190,   191,   192,     0,
      68,    69,    70,     0,     0,    71,     0,    72,   193,  1167,
    1168,  1169,  1170,  1171,  1172,     0,     0,     0,     0,     0,
     373,     0,     0,     0,  1173,   374,  1167,  1168,  1169,  1170,
    1171,  1172,     0,     0,     0,  1167,  1168,  1169,  1170,  1171,
    1172,  1173,     0,     0,     0,     0,     0,     0,     0,     0,
    1173,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   198,
     199,   200,   201,   202,   203,   204,     0,   205,   206,   207,
       0,     0,     0,  1176,  1177,   415,   416,  1178,  1179,  1180,
    1181,  1182,     0,  1183,  1184,  1185,     0,     0,     0,     0,
       0,  1177,     0,     0,  1178,  1179,  1180,  1181,  1182,     0,
    1183,  1184,  1185,  1178,  1179,  1180,  1181,  1182,     0,  1183,
    1184,  1185,     0,   277,     0,     0,    53,     0,    54,    55,
      56,    57,     0,     0,     0,   279,     0,     0,    60,     0,
       0,     0,    61,     0,     0,     0,     0,     0,     0,    62,
       0,     0,     0,     0,     0,    63,    64,     0,    51,     0,
       0,   369,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    65,    66,     0,     0,     0,     0,    67,
       0,     0,     0,     0,     0,     0,     0,   281,    69,    70,
       0,     0,    71,     0,    72,    52,     0,     0,    53,     0,
      54,    55,    56,    57,   371,     0,     0,    59,     0,     0,
      60,     0,     0,     0,    61,     0,     0,     0,     0,     0,
       0,    62,     0,     0,     0,     0,     0,    63,    64,     0,
      51,     0,     0,   605,     0,     0,    87,     0,     0,     0,
       0,     0,   372,     0,    88,    65,    66,     0,     0,     0,
       0,    67,     0,     0,    90,    91,    92,     0,     0,    68,
      69,    70,     0,     0,    71,   241,    72,    52,     0,     0,
      53,    99,    54,    55,    56,    57,   371,     0,     0,    59,
       0,   104,    60,     0,     0,     0,    61,   105,     0,     0,
       0,   107,   108,    62,     0,     0,     0,    51,     0,    63,
      64,     0,   111,     0,   112,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   372,     0,     0,    65,    66,    51,
       0,     0,     0,    67,     0,     0,     0,     0,     0,   114,
       0,    68,    69,    70,    52,     0,    71,    53,    72,    54,
      55,    56,    57,   371,     0,     0,    59,     0,     0,    60,
       0,     0,     0,    61,     0,     0,    52,     0,     0,    53,
      62,    54,    55,    56,    57,    58,    63,    64,    59,     0,
       0,    60,     0,     0,     0,    61,     0,     0,     0,     0,
       0,   372,    62,     0,    65,    66,    51,     0,    63,    64,
      67,     0,     0,     0,     0,     0,     0,     0,    68,    69,
      70,     0,     0,    71,     0,    72,    65,    66,     0,     0,
       0,     0,    67,     0,     0,     0,     0,     0,     0,     0,
      68,    69,    70,    52,     0,    71,    53,    72,    54,    55,
      56,    57,   419,     0,     0,    59,     0,     0,    60,     0,
       0,    51,    61,     0,     0,     0,     0,     0,     0,    62,
       0,     0,     0,     0,     0,    63,    64,     0,     0,     0,
       0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    65,    66,     0,     0,     0,    52,    67,
       0,    53,     0,    54,    55,    56,    57,    68,    69,    70,
      59,     0,    71,    60,    72,     0,     0,    61,     0,     0,
     138,     0,     0,    53,    62,    54,    55,    56,    57,   776,
      63,    64,   139,     0,     0,    60,     0,     0,   137,    61,
       0,     0,     0,     0,     0,   481,    62,     0,    65,    66,
       0,     0,    63,    64,    67,     0,     0,     0,     0,     0,
      51,     0,    68,    69,    70,     0,     0,    71,     0,    72,
      65,    66,     0,     0,     0,   138,    67,     0,    53,     0,
      54,    55,    56,    57,   140,    69,    70,   139,     0,    71,
      60,    72,     0,     0,    61,     0,     0,    52,     0,     0,
      53,    62,    54,    55,    56,    57,     0,    63,    64,    59,
       0,     0,    60,     0,     0,     0,    61,     0,     0,     0,
       0,     0,     0,    62,     0,    65,    66,     0,     0,    63,
      64,    67,     0,     0,     0,     0,     0,     0,     0,   140,
      69,    70,     0,     0,    71,     0,    72,    65,    66,     0,
      86,    87,     0,    67,     0,     0,     0,     0,     0,    88,
       0,    68,    69,    70,     0,     0,    71,    89,    72,    90,
      91,    92,    93,     0,     0,     0,    94,     0,     0,     0,
      95,     0,     0,    96,    97,    98,    99,   100,     0,     0,
       0,     0,     0,   101,   102,   103,   104,     0,     0,     0,
       0,     0,   105,   106,    86,    87,   107,   108,     0,     0,
       0,   109,     0,    88,     0,     0,   110,   111,     0,   112,
       0,    89,     0,    90,    91,    92,    93,   113,     0,     0,
      94,     0,     0,     0,    95,     0,     0,    96,    97,    98,
      99,   100,     0,     0,   114,     0,   514,   101,   102,   103,
     104,     0,     0,     0,     0,     0,   105,   106,    86,    87,
     107,   108,     0,     0,     0,   109,     0,    88,     0,     0,
     110,   111,     0,   112,     0,    89,     0,    90,    91,    92,
      93,   113,     0,     0,    94,     0,     0,     0,    95,     0,
       0,    96,    97,    98,    99,   100,     0,     0,   114,     0,
     621,   101,   102,   103,   104,     0,     0,     0,     0,     0,
     105,   106,    86,    87,   107,   108,     0,     0,     0,   109,
       0,    88,     0,     0,   110,   111,     0,   112,     0,    89,
       0,    90,    91,    92,    93,   113,     0,     0,    94,     0,
       0,     0,    95,     0,     0,    96,    97,    98,    99,   100,
       0,     0,   114,     0,   626,   101,   102,   103,   104,     0,
       0,     0,     0,     0,   105,   106,    86,    87,   107,   108,
       0,     0,     0,   109,     0,    88,     0,     0,   110,   111,
       0,   112,     0,    89,     0,    90,    91,    92,    93,   113,
       0,     0,    94,     0,     0,     0,    95,     0,     0,    96,
      97,    98,    99,   100,     0,     0,   114,     0,   695,   101,
     102,   103,   104,     0,     0,     0,     0,     0,   105,   106,
      86,    87,   107,   108,     0,     0,     0,   109,     0,    88,
       0,     0,   110,   111,     0,   112,     0,    89,     0,    90,
      91,    92,    93,   113,     0,     0,    94,     0,     0,     0,
      95,     0,     0,    96,    97,    98,    99,   100,     0,     0,
     114,     0,   808,   101,   102,   103,   104,     0,     0,     0,
       0,     0,   105,   106,    86,    87,   107,   108,     0,     0,
       0,   109,     0,    88,     0,     0,   110,   111,     0,   112,
       0,    89,     0,    90,    91,    92,    93,   113,     0,     0,
      94,     0,     0,     0,    95,     0,     0,    96,    97,    98,
      99,   100,     0,     0,   114,     0,  1049,   101,   102,   103,
     104,     0,     0,     0,     0,     0,   105,   106,    86,    87,
     107,   108,     0,     0,     0,   109,     0,    88,     0,     0,
     110,   111,     0,   112,     0,    89,     0,    90,    91,    92,
      93,   113,     0,     0,    94,     0,     0,     0,    95,     0,
       0,    96,    97,    98,    99,   100,     0,     0,   114,     0,
    1146,   101,   102,   103,   104,     0,     0,     0,     0,     0,
     105,   106,    87,     0,   107,   108,     0,     0,     0,   109,
      88,     0,     0,     0,   110,   111,    87,   112,     0,     0,
      90,    91,    92,     0,    88,     0,     0,     0,     0,     0,
       0,   241,     0,     0,    90,    91,    92,    99,   250,     0,
       0,     0,   114,     0,     0,   241,    87,   104,     0,     0,
       0,    99,     0,   105,    88,     0,     0,     0,   108,     0,
       0,   104,     0,     0,    90,    91,    92,   105,   111,     0,
     112,     0,   108,     0,     0,   241,     0,     0,     0,     0,
       0,    99,   111,     0,   112,     0,     0,     0,     0,     0,
       0,   104,     0,     0,     0,   114,     0,   105,     0,  -140,
       0,     0,   108,     0,     0,     0,     0,     0,     0,   114,
       0,     0,   111,     0,   112,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-755)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       1,   429,   107,   127,   128,   129,   130,   404,   132,   532,
     134,   135,   136,   210,   516,   464,   709,    58,    45,   542,
     118,    28,   146,   147,   221,   222,   256,   151,   152,    28,
      28,   372,   578,   387,   479,   537,   577,   588,   792,   793,
     794,    14,     6,    12,     8,    46,    12,    16,   118,   482,
       0,    10,    11,   118,   118,   601,   124,   490,   491,   492,
     493,   494,   495,   604,   544,   125,   546,   547,   548,   549,
     550,    14,    73,    45,   142,   540,    61,    62,   125,    10,
      11,   142,   125,   128,   144,    64,    65,    66,    57,   538,
      73,    70,   541,   526,    10,    11,   642,   144,   143,   133,
     486,   144,   268,   142,   569,   570,   657,   572,   573,   574,
     575,   118,   278,   125,    73,   128,   128,   640,    73,   118,
     118,    57,    32,     6,   125,     8,   127,   128,   129,   130,
     143,   132,    91,   134,   135,   136,    10,    11,   684,   143,
     144,   124,    73,   133,   127,   146,   147,   488,   142,   118,
     151,   152,   125,    32,   126,   143,   144,    73,   388,   131,
      91,   133,   392,   132,   125,   142,   264,   600,   137,   124,
     615,   137,   127,   145,   607,    91,   148,   149,   150,   206,
     144,   578,   125,   144,   225,   144,   310,   166,   167,   168,
     169,   125,   422,   124,   264,   142,   537,    12,   268,   264,
     264,    16,   635,   268,   268,   142,   142,   687,   278,   210,
     144,   133,   128,   278,   278,   680,   132,    91,    32,   220,
     221,   222,   223,   224,   225,   776,   580,    73,   229,    10,
      11,   141,   142,   143,   213,   142,   782,   403,    32,   280,
     142,   126,    57,   128,   142,   642,   142,   696,   125,   694,
     715,   143,   144,   127,   233,   256,   142,   264,   137,   138,
     139,   268,   141,   142,   143,   264,   264,   144,   133,   268,
     268,   278,   700,    32,   125,   821,   142,   125,   124,   278,
     278,   127,  1036,   142,  1038,   515,  1040,   684,   125,  1043,
    1044,  1045,    73,   144,    87,    88,   144,    90,    91,    92,
      10,    11,    95,   118,    10,    11,    99,   144,   142,   310,
      91,   104,   105,   127,   107,   108,   109,   132,   111,   112,
     765,     6,   137,     8,   142,   326,   327,   142,   142,   143,
     371,   372,   781,   403,   142,   784,   785,   142,   403,   403,
     842,   135,   136,   137,   138,   139,   127,   141,   142,   143,
     124,   779,   126,   354,   128,   356,   357,   358,   359,   360,
     142,   125,   124,    73,   126,     6,   128,    73,   142,   370,
      10,    11,   373,   374,   127,   125,   125,   378,   419,   380,
     144,    91,   141,   142,   143,    91,   124,   388,   389,   775,
     142,   392,    10,    11,   144,   144,   403,   627,    73,   400,
     142,   400,   127,   125,   403,   403,   127,   125,   387,    50,
      85,   125,   125,    88,   124,   127,    91,    58,   124,   420,
     125,   422,   144,   464,   821,   874,   144,    68,    69,    70,
     144,   144,   107,    73,  1127,   142,   143,   409,    79,   144,
     481,   142,   125,   125,    85,   143,    86,   488,   241,   143,
     144,    91,   245,   142,    95,    73,   142,   125,   124,   125,
     101,   144,   144,   464,   465,   106,   142,   143,    79,    80,
     142,   143,   473,    91,   144,   116,   144,   118,   479,   146,
     866,   482,  1023,   869,   137,   486,   121,   122,   123,   490,
     491,   492,   493,   494,   495,   496,   537,   538,   125,   143,
     541,   842,   143,   142,   143,   144,   507,    21,    22,   143,
      10,    11,    12,  1015,   515,   127,    16,   124,    32,   126,
     127,   128,   521,   124,   126,   526,   142,   124,     2,   126,
     133,   128,   637,   142,   143,   144,   537,   538,   142,   144,
     541,   125,    32,   544,   144,   546,   547,   548,   549,   550,
     144,   144,  1075,   144,   581,   582,   557,    57,   585,   586,
     124,   144,   126,   134,   128,   566,    40,    41,    42,    43,
      44,   801,   144,    47,   134,   144,   577,   578,   702,   703,
     777,   588,   144,   144,  1033,    92,    93,    94,   134,   588,
     588,    91,   144,   144,  1117,   144,   134,    10,    11,   600,
     601,   580,   144,   604,   144,   144,   607,   142,   143,   144,
     137,   143,   145,   144,   615,   622,    73,   125,   118,   124,
     142,   135,   136,   137,   138,   139,   627,   141,   142,   143,
     125,   125,   132,   126,   635,   146,   125,   137,   639,   638,
     142,   642,   669,    56,   142,   135,   136,   137,   138,   139,
     657,   141,   142,   143,   127,   696,   142,   142,   657,   657,
      73,   144,   142,  1186,   142,    57,   137,   146,   124,  1118,
    1211,  1212,  1213,   127,  1015,    10,   150,    10,    91,    10,
     291,   292,   126,   684,   134,   125,   687,   126,   146,   137,
     137,   104,   145,   694,   126,   696,   126,   669,   817,   112,
     113,   702,   703,   116,    32,   126,    32,   145,   709,   126,
     137,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   144,   207,   142,  1121,   124,   211,   142,   146,
     781,   142,   142,   784,   785,    73,   143,   143,   124,   128,
    1136,  1137,  1138,  1202,   125,   125,  1297,    85,   125,   128,
      88,   142,  1303,    91,   765,   133,   144,   378,   133,   776,
     133,   133,   144,    10,   775,   125,   777,   776,   776,   107,
     781,   782,  1210,   784,   785,   792,   793,   794,   142,   263,
     142,   144,   143,    10,    11,   802,    10,    11,    12,   145,
     801,   842,    16,   144,   146,     4,   125,  1256,   142,   420,
     811,   137,   138,   139,   146,   141,   142,   143,    10,  1205,
     821,   126,    10,  1209,    10,   126,   125,  1024,  1214,   142,
     144,   142,   125,   874,   308,   144,   146,   864,   810,    56,
     812,   145,   145,    57,   637,   145,   144,   144,   322,   323,
     146,   644,   144,   825,   826,   827,    73,   829,   830,   831,
     832,   145,   144,   144,   144,   866,   144,    46,   869,   142,
     133,   482,  1258,   874,    91,   133,    90,    91,   133,   490,
     491,   492,   493,   494,   495,   142,   133,   104,   144,    68,
     125,   134,   134,   134,   144,   112,   113,  1283,   134,   116,
     144,    80,   142,   124,   118,   144,   380,    10,    11,    10,
    1296,   144,   144,   126,   126,   526,   126,   144,   132,   142,
     142,   100,   125,   137,   144,   144,   142,   142,   142,    10,
     126,   110,   134,   544,   145,   546,   547,   548,   549,   550,
     144,   134,   142,   134,   418,  1064,  1065,  1066,  1067,  1068,
     144,  1070,   134,    56,   144,  1079,   145,   431,   142,   142,
     701,   140,   142,   142,   143,    19,    20,    21,    22,   144,
      73,   144,   249,   536,  1015,  1117,  1018,   978,    32,  1075,
    1186,   268,   637,  1015,   638,   521,   811,   842,    91,   600,
     802,   978,  1033,    -1,   468,    -1,   607,   327,    -1,    -1,
     179,   104,    -1,    -1,    -1,   479,    -1,    -1,    -1,   112,
     113,    -1,    -1,   116,  1015,   220,   221,   222,   223,   224,
      -1,    -1,  1023,  1024,   635,    -1,    -1,    -1,    -1,  1036,
      -1,  1038,  1033,  1040,    -1,    -1,  1043,  1044,  1045,    -1,
      10,    11,  1069,    -1,    -1,    -1,  1165,  1166,  1167,  1168,
    1169,  1170,  1171,  1172,  1173,  1174,  1175,  1176,  1177,  1178,
    1179,  1180,  1181,  1182,  1183,    -1,    -1,    -1,    -1,    -1,
      -1,   250,    -1,   252,   253,   254,   687,  1118,  1079,   133,
     134,   135,   136,   137,   138,   139,    56,   141,   142,   143,
      -1,   270,   566,    -1,    -1,   274,    -1,  1069,    -1,    -1,
      -1,    -1,   281,    73,   283,    -1,  1225,    -1,    -1,    -1,
      -1,    -1,   291,   292,    -1,    -1,    -1,  1118,    -1,    -1,
    1121,    91,    -1,    -1,    -1,    -1,  1127,    -1,    -1,    -1,
      11,    -1,    -1,    -1,   104,  1136,  1137,  1138,    -1,    -1,
     614,   615,   112,   113,    -1,    -1,   620,    -1,   327,   354,
      -1,   356,   357,   358,   359,   360,  1275,  1184,    10,    11,
      12,  1202,    -1,    -1,    16,   370,    -1,    -1,   373,   374,
      51,    -1,    53,    54,    55,    -1,    -1,    -1,    -1,  1151,
    1152,  1153,  1154,  1155,  1156,    -1,    -1,    -1,    -1,    -1,
      -1,   665,   666,   667,   668,    -1,   670,    -1,    -1,    80,
      81,  1202,   381,    -1,  1205,    57,    -1,    -1,  1209,    -1,
    1211,  1212,  1213,  1214,    -1,  1256,    -1,    98,    99,    -1,
     694,    -1,    -1,  1250,  1251,    -1,  1253,  1254,    -1,    -1,
      -1,    -1,    -1,   114,    -1,   709,    -1,    -1,   119,    91,
      16,    17,    18,    19,    20,    21,    22,   426,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1256,    32,  1258,    -1,    -1,
    1287,  1288,  1289,  1290,    -1,    -1,   118,    -1,   473,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     132,    -1,  1283,    -1,    -1,   137,    -1,    -1,    -1,    -1,
     142,   765,    -1,   767,    -1,  1296,  1297,  1064,  1065,  1066,
    1067,  1068,  1303,  1070,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,   520,    -1,   522,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    -1,   130,   131,   132,   536,   832,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   843,
     844,   845,   846,   847,   848,   849,   850,   851,   852,   853,
     854,   855,   856,   857,   858,   859,   860,   861,   862,   863,
      -1,   865,    -1,    -1,    -1,    -1,    -1,    -1,  1165,  1166,
    1167,  1168,  1169,  1170,  1171,  1172,  1173,  1174,  1175,  1176,
    1177,  1178,  1179,  1180,  1181,  1182,  1183,    -1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    10,    11,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,   125,    -1,   146,    -1,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,  1225,   141,
     142,   143,   144,    47,    48,    -1,    -1,    51,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    -1,    -1,    63,
      64,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    80,    81,    -1,    -1,
      -1,    -1,    -1,    87,    -1,    89,    -1,    91,  1275,    -1,
      -1,    -1,    96,    -1,    98,    99,   100,    -1,    -1,   103,
     104,    -1,   701,    -1,   108,    -1,    -1,   111,   112,   113,
     114,    -1,    -1,   117,  1008,   119,     3,     4,     5,     6,
      -1,     8,     9,    10,    11,    -1,    -1,    14,   132,    -1,
      -1,   135,   136,   137,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,   147,    -1,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
      47,    48,    -1,    -1,    51,    32,    53,    54,    55,    56,
      57,    -1,    59,    60,    -1,    -1,    63,    64,    -1,   778,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,  1085,    -1,    80,    81,    -1,   795,    -1,    -1,   798,
      87,    -1,    89,    -1,    91,    -1,    -1,    -1,    95,    96,
      -1,    98,    99,   100,    -1,    -1,   103,   104,    -1,    -1,
      -1,   108,    -1,    -1,   111,   112,   113,   114,    -1,    -1,
     117,    -1,   119,  1127,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   132,    -1,    -1,   135,   136,
      -1,    -1,    -1,   140,    -1,   142,    -1,    -1,    -1,    -1,
     147,    -1,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,    -1,   146,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,  1185,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    -1,  1198,    -1,    -1,    -1,    -1,    -1,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    -1,    67,    -1,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    -1,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      67,    -1,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,    -1,   146,
     147,     3,     4,     5,     6,    -1,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    -1,    47,    48,    -1,    -1,    51,
      32,    53,    54,    55,    56,    57,    -1,    59,    60,    -1,
      -1,    63,    64,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    80,    81,
      -1,    -1,    -1,    -1,    -1,    87,    -1,    89,    -1,    91,
      -1,    -1,    -1,    95,    96,    -1,    98,    99,   100,    -1,
      -1,   103,   104,    -1,    -1,    -1,   108,    -1,    -1,   111,
     112,   113,   114,    -1,    -1,   117,    -1,   119,     3,     4,
       5,     6,    -1,     8,     9,    10,    11,    -1,    -1,    -1,
     132,    -1,    -1,   135,   136,    -1,    -1,    -1,   140,    -1,
     142,    -1,    -1,    -1,    -1,   147,    -1,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    47,    -1,   146,    -1,    51,    -1,    53,    54,
      55,    -1,    -1,    -1,    59,    -1,    61,    62,    63,    64,
      51,    -1,    53,    54,    55,    -1,    -1,    72,    73,    74,
      -1,    -1,    63,    -1,    -1,    80,    81,    -1,    -1,    -1,
      -1,    -1,    87,    -1,    89,    -1,    91,    -1,    -1,    80,
      81,    96,    -1,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,    -1,    -1,   108,    10,    11,   111,    98,    99,   114,
       3,     4,     5,     6,   119,     8,     9,    10,    11,   124,
      -1,    -1,    -1,   114,    -1,    -1,    -1,   132,   119,    -1,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,    51,    -1,    53,    54,    55,
      -1,   142,    -1,    -1,    47,    -1,    -1,    63,    51,    -1,
      53,    54,    55,    -1,    -1,    -1,    59,    -1,    74,    -1,
      63,    64,    -1,    -1,    80,    81,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    80,    81,    -1,
      -1,    -1,    98,    99,    87,    -1,    89,    -1,    91,    -1,
      -1,    -1,    -1,    96,    -1,    98,    99,   100,   114,    -1,
     103,   117,    -1,   119,    -1,   108,    -1,    -1,   111,    -1,
      -1,   114,     3,     4,     5,     6,   119,     8,     9,    10,
      11,    -1,    -1,    51,    -1,    53,    54,    55,    -1,   132,
      -1,    -1,   135,   136,   137,    -1,    -1,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    81,    -1,    -1,    47,    -1,    -1,    -1,
      51,    -1,    53,    54,    55,    -1,    -1,    -1,    59,    -1,
      98,    99,    63,    64,    -1,    -1,    10,    11,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,   114,    -1,    -1,    80,
      81,   119,    -1,    -1,    -1,    -1,    87,    -1,    89,    -1,
      91,    -1,    -1,    -1,    -1,    96,    -1,    98,    99,   100,
      -1,    -1,   103,    -1,   142,    -1,    -1,   108,    -1,    -1,
     111,    -1,    56,   114,     3,     4,     5,     6,   119,     8,
       9,    10,    11,   124,    -1,    -1,    -1,    -1,    -1,    73,
      -1,   132,    -1,    -1,   135,   136,   137,    -1,    -1,   140,
      -1,   142,   143,    -1,    -1,    -1,   147,    91,    92,    93,
      94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,
     104,    -1,    51,    -1,    53,    54,    55,    -1,   112,   113,
      59,    -1,   116,    -1,    63,    64,    51,    -1,    53,    54,
      55,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,    -1,
      89,    -1,    91,    -1,    -1,    80,    81,    96,    -1,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,    -1,    -1,   108,
      -1,    -1,   111,    98,    99,   114,     3,     4,     5,     6,
     119,     8,     9,    10,    11,    -1,    -1,    -1,    -1,   114,
      -1,    -1,    -1,   132,   119,    -1,   135,   136,   137,    -1,
      -1,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
      -1,    51,    -1,    53,    54,    55,    -1,   142,    -1,    -1,
      47,    -1,    -1,    -1,    51,    -1,    53,    54,    55,    -1,
      -1,    -1,    59,    -1,    -1,    -1,    63,    64,    -1,    -1,
      80,    81,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    80,    81,    -1,    -1,    -1,    98,    99,
      87,    -1,    89,    -1,    91,    -1,    -1,    -1,    -1,    96,
      -1,    98,    99,   100,   114,    -1,   103,    -1,    -1,   119,
      -1,   108,    -1,    -1,   111,    -1,    -1,   114,     3,     4,
       5,     6,   119,     8,     9,    10,    11,   124,    -1,    -1,
      -1,    -1,   142,    -1,    -1,   132,    -1,    -1,   135,   136,
     137,    -1,    -1,   140,    -1,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,    51,    -1,    53,    54,    55,    -1,    -1,
      -1,    -1,    47,    -1,    -1,    63,    51,    -1,    53,    54,
      55,    -1,    -1,    -1,    59,    -1,    -1,    -1,    63,    64,
      -1,    -1,    80,    81,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    80,    81,    -1,    -1,    -1,
      98,    99,    87,    -1,    89,    -1,    91,    -1,    -1,    -1,
      -1,    96,    -1,    98,    99,   100,   114,    -1,   103,    -1,
      -1,   119,    -1,   108,    -1,    -1,   111,    -1,    -1,   114,
       3,     4,     5,     6,   119,     8,     9,    10,    11,    -1,
      -1,    51,    -1,    53,    54,    55,    -1,   132,    -1,    -1,
     135,   136,   137,    -1,    -1,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    81,    -1,    -1,    47,    -1,    -1,    -1,    51,    -1,
      53,    54,    55,    -1,    -1,    -1,    59,    -1,    98,    99,
      63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,   114,    -1,    -1,    80,    81,   119,
      -1,    -1,    -1,    -1,    87,    -1,    89,    -1,    91,    -1,
      -1,    -1,    -1,    96,    -1,    98,    99,   100,    -1,    -1,
     103,    -1,    -1,    -1,    -1,   108,    10,    11,   111,    21,
      22,   114,     3,     4,     5,     6,   119,     8,     9,    10,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,
      -1,    -1,   135,   136,   137,    -1,    -1,   140,    -1,   142,
     143,    -1,    -1,    -1,   147,    -1,    -1,    51,    -1,    53,
      54,    55,    56,    57,    -1,    -1,    47,    -1,    -1,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
      74,    -1,    -1,    64,    -1,    -1,    80,    81,    -1,    -1,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,     0,
      -1,    -1,    -1,    -1,    98,    99,    -1,    -1,    89,    -1,
      91,    -1,    -1,    -1,    -1,    96,    -1,    -1,   112,   100,
     114,    -1,   103,   117,    -1,   119,    -1,   108,    -1,    -1,
      -1,    -1,    -1,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    49,    50,
      -1,   132,    -1,    -1,   135,   136,   137,    58,    -1,   140,
      -1,   142,   143,    -1,    -1,    66,   147,    68,    69,    70,
      71,    -1,    -1,    -1,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    84,    85,    86,    -1,    -1,    -1,    -1,
      -1,    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,
     101,   102,    -1,    -1,   105,   106,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,   118,     6,    -1,
      -1,    -1,    -1,    10,    11,   126,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   143,    -1,    32,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
      -1,    48,    -1,    -1,    51,    -1,    53,    54,    55,    56,
      57,    -1,    -1,    60,    62,    -1,    63,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,
      -1,    -1,    -1,    80,    81,    -1,    -1,    -1,    -1,    87,
      -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,    -1,    -1,    -1,    -1,   104,    -1,    10,
      11,    -1,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,
     117,    -1,   119,    -1,    -1,    -1,    -1,   125,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   140,   142,   143,    -1,    48,    -1,   147,
      51,    -1,    53,    54,    55,    56,    57,    -1,    -1,    60,
      -1,    -1,    63,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    80,
      81,    10,    11,    19,    20,    21,    22,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    32,    98,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,    -1,    -1,   117,    -1,   119,    48,
      -1,    -1,    51,   124,    53,    54,    55,    56,    57,    -1,
      -1,    60,    -1,    -1,    63,    -1,    -1,    -1,    67,   140,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,
      -1,    80,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,
     119,    15,    16,    17,    18,    19,    20,    21,    22,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    32,    -1,
      -1,   140,    15,    16,    17,    18,    19,    20,    21,    22,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,
      15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    15,    16,
      17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    32,    15,    16,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    15,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    -1,    -1,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
     144,    -1,    -1,    -1,    -1,    -1,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,   144,    -1,    -1,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,   144,
      -1,    -1,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,   144,    -1,    -1,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,   144,   127,    -1,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    15,    16,    17,    18,    19,    20,    21,    22,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,
      15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    15,    16,
      17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    32,    15,    16,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    15,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    -1,   126,    -1,    -1,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,   125,    -1,    -1,    -1,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   127,    -1,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
      -1,    -1,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,    -1,    -1,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
      -1,    -1,    17,    18,    19,    20,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    32,    -1,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    -1,    -1,   129,   130,   131,
     132,    32,    -1,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,    -1,    -1,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    11,
      -1,    -1,    14,    -1,    16,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
      -1,    -1,   131,   132,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,    48,    -1,    -1,    51,
      -1,    53,    54,    55,    56,    57,    -1,    -1,    60,    -1,
      -1,    63,   130,   131,   132,    67,    -1,   135,   136,   137,
     138,   139,    74,   141,   142,   143,    -1,    -1,    80,    81,
      -1,   132,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    95,    -1,    -1,    98,    99,    -1,    -1,
      -1,    -1,   104,    17,    18,    19,    20,    21,    22,    -1,
     112,   113,   114,    -1,    -1,   117,    -1,   119,    32,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,
     132,    -1,    -1,    -1,    32,   137,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    17,    18,    19,    20,    21,
      22,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,    -1,    -1,   131,   132,    10,    11,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,    -1,    -1,    -1,
      -1,   132,    -1,    -1,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,    48,    -1,    -1,    51,    -1,    53,    54,
      55,    56,    -1,    -1,    -1,    60,    -1,    -1,    63,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      -1,    -1,    -1,    -1,    -1,    80,    81,    -1,    11,    -1,
      -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,    -1,    -1,    -1,    -1,   104,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
      -1,    -1,   117,    -1,   119,    48,    -1,    -1,    51,    -1,
      53,    54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,
      63,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    -1,    -1,    -1,    -1,    -1,    80,    81,    -1,
      11,    -1,    -1,    14,    -1,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    95,    -1,    58,    98,    99,    -1,    -1,    -1,
      -1,   104,    -1,    -1,    68,    69,    70,    -1,    -1,   112,
     113,   114,    -1,    -1,   117,    79,   119,    48,    -1,    -1,
      51,    85,    53,    54,    55,    56,    57,    -1,    -1,    60,
      -1,    95,    63,    -1,    -1,    -1,    67,   101,    -1,    -1,
      -1,   105,   106,    74,    -1,    -1,    -1,    11,    -1,    80,
      81,    -1,   116,    -1,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    95,    -1,    -1,    98,    99,    11,
      -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,   143,
      -1,   112,   113,   114,    48,    -1,   117,    51,   119,    53,
      54,    55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,
      -1,    -1,    -1,    67,    -1,    -1,    48,    -1,    -1,    51,
      74,    53,    54,    55,    56,    57,    80,    81,    60,    -1,
      -1,    63,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      -1,    95,    74,    -1,    98,    99,    11,    -1,    80,    81,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,    -1,    -1,   117,    -1,   119,    98,    99,    -1,    -1,
      -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,    48,    -1,   117,    51,   119,    53,    54,
      55,    56,    57,    -1,    -1,    60,    -1,    -1,    63,    -1,
      -1,    11,    67,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      -1,    -1,    -1,    -1,    -1,    80,    81,    -1,    -1,    -1,
      -1,    -1,    -1,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,    -1,    -1,    -1,    48,   104,
      -1,    51,    -1,    53,    54,    55,    56,   112,   113,   114,
      60,    -1,   117,    63,   119,    -1,    -1,    67,    -1,    -1,
      48,    -1,    -1,    51,    74,    53,    54,    55,    56,    57,
      80,    81,    60,    -1,    -1,    63,    -1,    -1,    11,    67,
      -1,    -1,    -1,    -1,    -1,    95,    74,    -1,    98,    99,
      -1,    -1,    80,    81,   104,    -1,    -1,    -1,    -1,    -1,
      11,    -1,   112,   113,   114,    -1,    -1,   117,    -1,   119,
      98,    99,    -1,    -1,    -1,    48,   104,    -1,    51,    -1,
      53,    54,    55,    56,   112,   113,   114,    60,    -1,   117,
      63,   119,    -1,    -1,    67,    -1,    -1,    48,    -1,    -1,
      51,    74,    53,    54,    55,    56,    -1,    80,    81,    60,
      -1,    -1,    63,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    98,    99,    -1,    -1,    80,
      81,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,    -1,    -1,   117,    -1,   119,    98,    99,    -1,
      49,    50,    -1,   104,    -1,    -1,    -1,    -1,    -1,    58,
      -1,   112,   113,   114,    -1,    -1,   117,    66,   119,    68,
      69,    70,    71,    -1,    -1,    -1,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    84,    85,    86,    -1,    -1,
      -1,    -1,    -1,    92,    93,    94,    95,    -1,    -1,    -1,
      -1,    -1,   101,   102,    49,    50,   105,   106,    -1,    -1,
      -1,   110,    -1,    58,    -1,    -1,   115,   116,    -1,   118,
      -1,    66,    -1,    68,    69,    70,    71,   126,    -1,    -1,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,
      85,    86,    -1,    -1,   143,    -1,   145,    92,    93,    94,
      95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,
     105,   106,    -1,    -1,    -1,   110,    -1,    58,    -1,    -1,
     115,   116,    -1,   118,    -1,    66,    -1,    68,    69,    70,
      71,   126,    -1,    -1,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    84,    85,    86,    -1,    -1,   143,    -1,
     145,    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,
     101,   102,    49,    50,   105,   106,    -1,    -1,    -1,   110,
      -1,    58,    -1,    -1,   115,   116,    -1,   118,    -1,    66,
      -1,    68,    69,    70,    71,   126,    -1,    -1,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,    86,
      -1,    -1,   143,    -1,   145,    92,    93,    94,    95,    -1,
      -1,    -1,    -1,    -1,   101,   102,    49,    50,   105,   106,
      -1,    -1,    -1,   110,    -1,    58,    -1,    -1,   115,   116,
      -1,   118,    -1,    66,    -1,    68,    69,    70,    71,   126,
      -1,    -1,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    84,    85,    86,    -1,    -1,   143,    -1,   145,    92,
      93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,
      49,    50,   105,   106,    -1,    -1,    -1,   110,    -1,    58,
      -1,    -1,   115,   116,    -1,   118,    -1,    66,    -1,    68,
      69,    70,    71,   126,    -1,    -1,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    84,    85,    86,    -1,    -1,
     143,    -1,   145,    92,    93,    94,    95,    -1,    -1,    -1,
      -1,    -1,   101,   102,    49,    50,   105,   106,    -1,    -1,
      -1,   110,    -1,    58,    -1,    -1,   115,   116,    -1,   118,
      -1,    66,    -1,    68,    69,    70,    71,   126,    -1,    -1,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,
      85,    86,    -1,    -1,   143,    -1,   145,    92,    93,    94,
      95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,
     105,   106,    -1,    -1,    -1,   110,    -1,    58,    -1,    -1,
     115,   116,    -1,   118,    -1,    66,    -1,    68,    69,    70,
      71,   126,    -1,    -1,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    84,    85,    86,    -1,    -1,   143,    -1,
     145,    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,
     101,   102,    50,    -1,   105,   106,    -1,    -1,    -1,   110,
      58,    -1,    -1,    -1,   115,   116,    50,   118,    -1,    -1,
      68,    69,    70,    -1,    58,    -1,    -1,    -1,    -1,    -1,
      -1,    79,    -1,    -1,    68,    69,    70,    85,    86,    -1,
      -1,    -1,   143,    -1,    -1,    79,    50,    95,    -1,    -1,
      -1,    85,    -1,   101,    58,    -1,    -1,    -1,   106,    -1,
      -1,    95,    -1,    -1,    68,    69,    70,   101,   116,    -1,
     118,    -1,   106,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,   116,    -1,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    95,    -1,    -1,    -1,   143,    -1,   101,    -1,   133,
      -1,    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,   143,
      -1,    -1,   116,    -1,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   143
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   121,   122,   123,   149,   150,   256,     3,     4,     5,
       6,     8,     9,    10,    11,    47,    51,    53,    54,    55,
      59,    63,    64,    72,    73,    74,    80,    81,    87,    89,
      91,    96,    98,    99,   100,   103,   108,   111,   114,   119,
     132,   135,   136,   137,   140,   142,   143,   147,   246,   247,
     255,    11,    48,    51,    53,    54,    55,    56,    57,    60,
      63,    67,    74,    80,    81,    98,    99,   104,   112,   113,
     114,   117,   119,   210,   214,   215,   217,   223,   224,   228,
     229,   234,   235,   236,   237,     0,    49,    50,    58,    66,
      68,    69,    70,    71,    75,    79,    82,    83,    84,    85,
      86,    92,    93,    94,    95,   101,   102,   105,   106,   110,
     115,   116,   118,   126,   143,   153,   155,   156,   158,   161,
     162,   184,   230,   233,   256,   142,   142,   142,   142,   142,
     142,   133,   142,   133,   142,   142,   142,    11,    48,    60,
     112,   212,   228,   229,   234,   133,   142,   142,   142,   133,
     142,   142,   142,   246,   246,   246,   246,   246,    11,    51,
      53,    54,    55,    63,    74,    80,    81,    98,    99,   114,
     119,   214,   244,   246,    10,    11,    73,    91,   128,   132,
     250,   251,   253,   256,   246,    15,    16,    17,    18,    19,
      20,    21,    22,    32,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   141,   142,   143,     6,     8,
     210,   142,    63,    81,   235,   235,   235,   253,   235,    12,
      16,    57,   118,   132,   137,   142,   208,   209,   256,   124,
      10,    11,    91,   127,   254,    10,    11,    91,   124,   253,
     254,    79,   158,   158,   158,     6,   158,   158,   127,   157,
      86,   158,   142,   142,   142,   158,   124,   253,   127,   127,
     127,   158,   158,   142,   158,   161,   185,   158,   158,   167,
      86,   253,   158,   158,   143,    10,    11,    48,    57,    60,
      90,   112,   124,   140,   172,   175,   211,   213,   215,   217,
     223,   228,   229,   234,   243,   244,   256,   214,   243,   243,
     243,   243,   214,   243,   214,   243,   243,   243,   142,   253,
     142,   253,   253,   214,   243,   243,   214,   214,   214,   246,
     243,   243,   144,   125,   144,   253,   146,   125,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   144,
     244,   246,   209,   246,   137,    12,    16,    57,   118,   132,
     137,   208,   256,   208,   209,   208,   209,   208,   208,    14,
      16,    57,    95,   132,   137,   194,   195,   204,   210,   256,
     143,   226,   227,   256,    11,   225,   235,   127,   216,   218,
     158,   155,   124,   253,   253,   253,   253,   150,   124,   246,
     133,    10,    11,    57,   175,   211,   213,   253,   126,   128,
     159,   160,   253,   142,   142,    10,    11,   213,   142,    57,
     210,   253,   154,   253,   124,   126,   127,   128,   200,   124,
     126,   128,   201,   126,   163,   253,   254,   253,   144,   144,
     144,   144,   144,   144,   134,   144,   134,   144,   144,   144,
     246,   243,   134,   144,   144,   144,   134,   144,   144,   144,
     144,   246,   246,    57,   142,   181,   256,   250,   127,   144,
     146,   144,   208,   137,   208,   208,   208,   208,   208,   143,
     208,    95,   210,   204,   208,   208,   144,    14,   125,    12,
      16,    57,   118,   132,   137,   142,   207,   254,   256,   242,
     246,   256,   253,   145,   225,   150,    73,   219,   256,   150,
     124,   125,   125,   125,   145,   231,   125,   144,    10,    11,
      56,    57,   112,   186,   187,   188,   189,   234,   256,   142,
     213,   201,   168,   126,   214,   146,   125,   142,   173,    12,
     137,   174,   164,   246,   210,    12,    16,    57,   118,   132,
     137,   206,   254,   256,   150,   142,   238,   239,   151,   152,
     253,    61,    62,   238,    61,    62,   124,   246,    12,    16,
      57,    90,   118,   132,   137,   142,   165,   190,   192,   254,
     127,   142,   142,   144,   144,   142,   142,   194,    32,    73,
      85,    88,    91,   107,   193,   256,   246,   208,   242,   144,
     210,   207,   144,   144,   181,    14,   204,   137,   207,   207,
     207,   207,   207,   207,   128,   143,   199,   256,   146,   125,
     128,   145,   127,   220,   221,   256,   145,   232,    10,    10,
      10,   150,   255,   126,   253,   189,   253,   134,   125,   207,
     169,   170,   192,   126,   146,   159,     3,     4,     5,     9,
      10,    14,    47,    59,    64,    72,    73,    87,    89,    91,
      96,   100,   103,   108,   111,   132,   135,   136,   140,   142,
     147,   196,   197,   204,   205,   248,   249,   255,   256,   194,
     137,   190,   194,   166,   192,   144,   206,   137,   206,   206,
     206,   206,   206,   142,   143,   145,   176,   145,   240,   256,
     124,   125,   124,   142,   126,   126,   145,   126,   126,   124,
     202,   203,   246,   256,   126,   137,   190,   190,     6,    15,
      16,    17,    18,    19,    20,    21,    22,    32,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      62,    87,   125,   128,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   142,   143,   147,   182,   190,
     190,   190,   190,   127,   142,   143,   193,   128,   199,   201,
     225,   244,   244,   244,   244,   144,    57,   212,   142,   124,
     146,   142,   207,   199,   142,   142,   193,   207,   144,   246,
     242,   246,    92,    93,    94,   112,   116,   222,   229,   252,
     253,   124,   125,   150,   125,   144,   125,   125,   145,   144,
     128,   207,   128,   161,   183,   184,   188,   128,   198,   256,
     171,   192,   199,   201,   158,   142,   133,   133,   212,   133,
     142,   133,   142,   246,   246,   246,   246,   214,   244,   246,
     144,    14,   125,    15,    16,    17,    18,    19,    20,    21,
      22,    32,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   141,   142,   143,   144,   190,   144,   144,
     199,   201,   142,   206,   179,   242,   194,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      67,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    85,    86,    87,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   146,
     147,   241,   238,   152,   243,   243,   202,   145,   125,   190,
      10,   144,   146,   144,     4,   191,   242,   246,   125,   144,
     144,   144,   144,   181,   212,   209,   144,   253,   238,   194,
     199,   194,   194,   142,   146,   125,   116,   252,   116,   252,
     116,   252,   253,    92,    93,    94,   253,   150,   222,   145,
      10,   126,    10,    10,   126,   214,   198,   214,    47,    59,
      64,    96,   100,   103,   132,   135,   136,   137,   140,   142,
     147,   245,   247,   199,   201,   125,   214,   214,   214,   142,
     214,   214,   214,   214,   246,   144,   144,    14,   205,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     144,   244,   246,   181,   144,   142,   181,   125,   180,   194,
     146,   144,   240,   145,   145,   144,   145,   124,   246,   196,
     146,   165,   193,   209,   144,   145,   144,   144,   144,   194,
     252,   252,   252,   252,   252,   252,   145,   144,   125,   144,
     144,   142,   133,   133,   133,   142,   133,   245,   245,   245,
     245,   245,   214,   244,   245,    15,    16,    17,    18,    19,
      20,    21,    22,    32,   129,   130,   131,   132,   135,   136,
     137,   138,   139,   141,   142,   143,   125,   170,   144,   134,
     134,   243,   134,   144,   134,   144,   144,   246,   127,   144,
     146,   142,   177,   166,   194,   144,   181,   145,   202,   144,
     124,   181,   181,   181,   144,   126,    10,   126,   126,   214,
     214,   214,   214,   214,   214,   144,   144,   245,   245,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     245,   245,   245,   245,   245,   245,   144,   244,   246,   171,
     142,   142,   144,   142,   142,   246,   178,   194,   144,   181,
     145,   181,   238,   193,   193,   193,   181,   125,   144,   134,
     134,   134,   144,   134,   245,   127,   144,   146,   244,   244,
     244,   244,   194,   144,   181,   145,    10,   142,   142,   142,
     142,   245,   144,   144,   144,   144,   144,   181,   144,   244,
     244,   244,   244,   181,   193,   126,   144,   144,   144,   144,
     193
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
        break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}




/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;


#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc = yyloc_default;


    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
/* Line 1792 of yacc.c  */
#line 423 "dtool/src/cppparser/cppBison.yxx"
    {
  current_expr = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 4:
/* Line 1792 of yacc.c  */
#line 427 "dtool/src/cppparser/cppBison.yxx"
    {
  current_type = (yyvsp[(2) - (2)].u.type);
}
    break;

  case 10:
/* Line 1792 of yacc.c  */
#line 445 "dtool/src/cppparser/cppBison.yxx"
    {
  delete (yyvsp[(3) - (4)].u.expr);
}
    break;

  case 11:
/* Line 1792 of yacc.c  */
#line 449 "dtool/src/cppparser/cppBison.yxx"
    {
  delete (yyvsp[(3) - (4)].u.expr);
}
    break;

  case 12:
/* Line 1792 of yacc.c  */
#line 461 "dtool/src/cppparser/cppBison.yxx"
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[(1) - (2)].u.integer) & CPPInstance::SC_c_binding));
}
    break;

  case 13:
/* Line 1792 of yacc.c  */
#line 466 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 21:
/* Line 1792 of yacc.c  */
#line 480 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[(1) - (1)]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
    break;

  case 22:
/* Line 1792 of yacc.c  */
#line 493 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[(1) - (1)]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
    break;

  case 23:
/* Line 1792 of yacc.c  */
#line 502 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_published);
}
    break;

  case 24:
/* Line 1792 of yacc.c  */
#line 506 "dtool/src/cppparser/cppBison.yxx"
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
    break;

  case 25:
/* Line 1792 of yacc.c  */
#line 514 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_protected);
}
    break;

  case 26:
/* Line 1792 of yacc.c  */
#line 518 "dtool/src/cppparser/cppBison.yxx"
    {
  current_scope->set_current_vis(V_private);
}
    break;

  case 27:
/* Line 1792 of yacc.c  */
#line 522 "dtool/src/cppparser/cppBison.yxx"
    {

  CPPDeclaration *getter = (yyvsp[(5) - (7)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(5) - (7)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (7)]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (7)].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[(1) - (7)]).file);
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (7)]));
}
    break;

  case 28:
/* Line 1792 of yacc.c  */
#line 533 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *getter = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));

  } else {
    CPPDeclaration *setter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (9)]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[(3) - (9)].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[(1) - (9)]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (9)]));
  }
}
    break;

  case 29:
/* Line 1792 of yacc.c  */
#line 554 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *hasser = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));
  }

  CPPDeclaration *getter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (9)]));
  }

  if (hasser && getter) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[(3) - (9)].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        NULL, NULL,
                                        current_scope, (yylsp[(1) - (9)]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (9)]));
  }
}
    break;

  case 30:
/* Line 1792 of yacc.c  */
#line 576 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *hasser = (yyvsp[(5) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[(5) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (13)]));
  }

  CPPDeclaration *getter = (yyvsp[(7) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[(7) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(7) - (13)]));
  }

  CPPDeclaration *setter = (yyvsp[(9) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid setter: " + (yyvsp[(9) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(9) - (13)]));
  }

  CPPDeclaration *clearer = (yyvsp[(11) - (13)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (clearer == (CPPDeclaration *)NULL || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid clear-function: " + (yyvsp[(11) - (13)].u.identifier)->get_fully_scoped_name(), (yylsp[(11) - (13)]));
  }

  if (hasser && getter && setter && clearer) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[(3) - (13)].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        setter->as_function_group(),
                                        clearer->as_function_group(),
                                        current_scope, (yylsp[(1) - (13)]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[(1) - (13)]));
  }
}
    break;

  case 31:
/* Line 1792 of yacc.c  */
#line 609 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *length_getter = (yyvsp[(5) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[(5) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));
    length_getter = NULL;
  }

  CPPDeclaration *element_getter = (yyvsp[(7) - (9)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == (CPPDeclaration *)NULL || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[(7) - (9)].u.identifier)->get_fully_scoped_name(), (yylsp[(5) - (9)]));
    element_getter = NULL;
  }

  if (length_getter != (CPPDeclaration *)NULL && element_getter != (CPPDeclaration *)NULL) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[(3) - (9)].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[(1) - (9)]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[(1) - (9)]));
  }
}
    break;

  case 32:
/* Line 1792 of yacc.c  */
#line 631 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPExpression::Result result = (yyvsp[(3) - (7)].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[(3) - (7)]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[(5) - (7)].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[(3) - (7)]));
  }
}
    break;

  case 33:
/* Line 1792 of yacc.c  */
#line 642 "dtool/src/cppparser/cppBison.yxx"
    {
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[(3) - (5)].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[(3) - (5)]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[(3) - (5)]));
  }
}
    break;

  case 34:
/* Line 1792 of yacc.c  */
#line 655 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
    break;

  case 35:
/* Line 1792 of yacc.c  */
#line 661 "dtool/src/cppparser/cppBison.yxx"
    {
  delete current_scope;
  pop_scope();
}
    break;

  case 36:
/* Line 1792 of yacc.c  */
#line 670 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 37:
/* Line 1792 of yacc.c  */
#line 674 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_extern;
}
    break;

  case 38:
/* Line 1792 of yacc.c  */
#line 678 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(3) - (3)].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[(2) - (3)].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[(2) - (3)].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[(2) - (3)].str) + "\"", (yylsp[(2) - (3)]));
  }
}
    break;

  case 39:
/* Line 1792 of yacc.c  */
#line 689 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_static;
}
    break;

  case 40:
/* Line 1792 of yacc.c  */
#line 693 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_inline;
}
    break;

  case 41:
/* Line 1792 of yacc.c  */
#line 697 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_virtual;
}
    break;

  case 42:
/* Line 1792 of yacc.c  */
#line 701 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_explicit;
}
    break;

  case 43:
/* Line 1792 of yacc.c  */
#line 705 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_register;
}
    break;

  case 44:
/* Line 1792 of yacc.c  */
#line 709 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_volatile;
}
    break;

  case 45:
/* Line 1792 of yacc.c  */
#line 713 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_mutable;
}
    break;

  case 46:
/* Line 1792 of yacc.c  */
#line 717 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_constexpr;
}
    break;

  case 47:
/* Line 1792 of yacc.c  */
#line 721 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_blocking;
}
    break;

  case 48:
/* Line 1792 of yacc.c  */
#line 725 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_extension;
}
    break;

  case 49:
/* Line 1792 of yacc.c  */
#line 729 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(2) - (2)].u.integer) | (int)CPPInstance::SC_thread_local;
}
    break;

  case 50:
/* Line 1792 of yacc.c  */
#line 733 "dtool/src/cppparser/cppBison.yxx"
    {
  // Ignore attribute specifiers for now.
  (yyval.u.integer) = (yyvsp[(6) - (6)].u.integer);
}
    break;

  case 55:
/* Line 1792 of yacc.c  */
#line 751 "dtool/src/cppparser/cppBison.yxx"
    {
  /* multiple_var_declaration adds itself to the scope. */
}
    break;

  case 56:
/* Line 1792 of yacc.c  */
#line 755 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[(2) - (3)].u.decl), global_scope, current_lexer, (yylsp[(2) - (3)]));
}
    break;

  case 57:
/* Line 1792 of yacc.c  */
#line 764 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[(2) - (3)].u.instance)->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
    current_scope->add_declaration((yyvsp[(2) - (3)].u.instance), global_scope, current_lexer, (yylsp[(2) - (3)]));
    (yyvsp[(2) - (3)].u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
  }
}
    break;

  case 58:
/* Line 1792 of yacc.c  */
#line 772 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[(2) - (3)].u.instance)->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
    current_scope->add_declaration((yyvsp[(2) - (3)].u.instance), global_scope, current_lexer, (yylsp[(2) - (3)]));
    (yyvsp[(2) - (3)].u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
  }
}
    break;

  case 59:
/* Line 1792 of yacc.c  */
#line 783 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(2) - (2)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (2)].u.integer));
}
    break;

  case 60:
/* Line 1792 of yacc.c  */
#line 794 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 61:
/* Line 1792 of yacc.c  */
#line 798 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(3) - (3)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(3) - (3)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(3) - (3)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (3)].u.integer));
}
    break;

  case 62:
/* Line 1792 of yacc.c  */
#line 809 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 63:
/* Line 1792 of yacc.c  */
#line 820 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (2)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (2)]).file);
  inst->set_initializer((yyvsp[(2) - (2)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 64:
/* Line 1792 of yacc.c  */
#line 828 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (4)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (4)]).file);
  inst->set_initializer((yyvsp[(2) - (4)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 65:
/* Line 1792 of yacc.c  */
#line 839 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (2)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (2)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (2)]).file);
  inst->set_initializer((yyvsp[(2) - (2)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 66:
/* Line 1792 of yacc.c  */
#line 848 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[(1) - (4)].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[(1) - (4)]).file);
  inst->set_initializer((yyvsp[(2) - (4)].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 67:
/* Line 1792 of yacc.c  */
#line 861 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(2) - (2)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(2) - (2)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (2)].u.integer));
}
    break;

  case 68:
/* Line 1792 of yacc.c  */
#line 872 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 69:
/* Line 1792 of yacc.c  */
#line 876 "dtool/src/cppparser/cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[(3) - (3)].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[(3) - (3)].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[(3) - (3)].u.decl)->as_type();
  }
  push_storage_class((yyvsp[(1) - (3)].u.integer));
}
    break;

  case 70:
/* Line 1792 of yacc.c  */
#line 887 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 71:
/* Line 1792 of yacc.c  */
#line 891 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(2) - (3)].u.instance) != (CPPDeclaration *)NULL) {
    CPPInstance *inst = (yyvsp[(2) - (3)].u.instance)->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | (yyvsp[(1) - (3)].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[(2) - (3)]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(2) - (3)]));
    }
  }
}
    break;

  case 72:
/* Line 1792 of yacc.c  */
#line 906 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (2)].u.inst_ident), current_scope, (yylsp[(1) - (2)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 73:
/* Line 1792 of yacc.c  */
#line 912 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (4)].u.inst_ident), current_scope, (yylsp[(1) - (4)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 74:
/* Line 1792 of yacc.c  */
#line 921 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (2)].u.inst_ident)->add_modifier(IIT_const);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (2)].u.inst_ident), current_scope, (yylsp[(1) - (2)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (2)]));
}
    break;

  case 75:
/* Line 1792 of yacc.c  */
#line 928 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(1) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[(1) - (4)].u.inst_ident), current_scope, (yylsp[(1) - (4)]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (4)]));
}
    break;

  case 76:
/* Line 1792 of yacc.c  */
#line 940 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 77:
/* Line 1792 of yacc.c  */
#line 944 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type;
  if ((yyvsp[(1) - (6)].u.identifier)->get_simple_name() == current_scope->get_simple_name() ||
      (yyvsp[(1) - (6)].u.identifier)->get_simple_name() == string("~") + current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[(1) - (6)]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[(1) - (6)].u.identifier));
  ii->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (6)]).file);
}
    break;

  case 78:
/* Line 1792 of yacc.c  */
#line 964 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 79:
/* Line 1792 of yacc.c  */
#line 968 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[(1) - (6)].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[(1) - (6)].u.identifier));
  ii->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (6)]).file);
}
    break;

  case 80:
/* Line 1792 of yacc.c  */
#line 991 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(2) - (3)].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 81:
/* Line 1792 of yacc.c  */
#line 995 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  if ((yyvsp[(2) - (7)].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[(2) - (7)].u.identifier)->get_fully_scoped_name(), (yylsp[(2) - (7)]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[(2) - (7)].u.identifier)->get_simple_name(), (yylsp[(2) - (7)]));
    delete (yyvsp[(2) - (7)].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(2) - (7)]).file);
  }
}
    break;

  case 82:
/* Line 1792 of yacc.c  */
#line 1021 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(4) - (6)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 83:
/* Line 1792 of yacc.c  */
#line 1025 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[(1) - (11)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (11)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (11)]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[(4) - (11)].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[(8) - (11)].u.param_list), (yyvsp[(10) - (11)].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (11)]).file);
}
    break;

  case 84:
/* Line 1792 of yacc.c  */
#line 1039 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(5) - (7)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 85:
/* Line 1792 of yacc.c  */
#line 1043 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[(1) - (12)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (12)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (12)]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[(5) - (12)].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[(3) - (12)].u.identifier));
  ii->add_func_modifier((yyvsp[(9) - (12)].u.param_list), (yyvsp[(11) - (12)].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[(1) - (12)]).file);
}
    break;

  case 86:
/* Line 1792 of yacc.c  */
#line 1059 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (4)].u.identifier) != NULL) {
    push_scope((yyvsp[(1) - (4)].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 87:
/* Line 1792 of yacc.c  */
#line 1065 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (8)].u.identifier) != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[(2) - (8)].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[(1) - (8)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier(name, (yylsp[(2) - (8)]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[(2) - (8)].u.type), (yyvsp[(3) - (8)].u.inst_ident), 0, (yylsp[(3) - (8)]).file), ident, (yyvsp[(6) - (8)].u.param_list), (yyvsp[(8) - (8)].u.integer));
}
    break;

  case 88:
/* Line 1792 of yacc.c  */
#line 1090 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (5)].u.identifier) != NULL) {
    push_scope((yyvsp[(1) - (5)].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 89:
/* Line 1792 of yacc.c  */
#line 1096 "dtool/src/cppparser/cppBison.yxx"
    {
  if ((yyvsp[(1) - (9)].u.identifier) != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[(1) - (9)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", (yylsp[(4) - (9)]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[(4) - (9)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[(3) - (9)].u.type), (yyvsp[(4) - (9)].u.inst_ident), 0, (yylsp[(4) - (9)]).file), ident, (yyvsp[(7) - (9)].u.param_list), (yyvsp[(9) - (9)].u.integer));
}
    break;

  case 90:
/* Line 1792 of yacc.c  */
#line 1116 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPDeclaration *decl =
    (yyvsp[(1) - (1)].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = (CPPInstance *)NULL;
  }
}
    break;

  case 91:
/* Line 1792 of yacc.c  */
#line 1129 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 92:
/* Line 1792 of yacc.c  */
#line 1133 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_const_method;
}
    break;

  case 93:
/* Line 1792 of yacc.c  */
#line 1137 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_noexcept;
}
    break;

  case 94:
/* Line 1792 of yacc.c  */
#line 1141 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_final;
}
    break;

  case 95:
/* Line 1792 of yacc.c  */
#line 1145 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_override;
}
    break;

  case 96:
/* Line 1792 of yacc.c  */
#line 1149 "dtool/src/cppparser/cppBison.yxx"
    {
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = 0;
}
    break;

  case 97:
/* Line 1792 of yacc.c  */
#line 1154 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (4)].u.integer);
}
    break;

  case 98:
/* Line 1792 of yacc.c  */
#line 1158 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[(1) - (5)].u.integer);
}
    break;

  case 99:
/* Line 1792 of yacc.c  */
#line 1169 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "!";
}
    break;

  case 100:
/* Line 1792 of yacc.c  */
#line 1173 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "~";
}
    break;

  case 101:
/* Line 1792 of yacc.c  */
#line 1177 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "*";
}
    break;

  case 102:
/* Line 1792 of yacc.c  */
#line 1181 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "/";
}
    break;

  case 103:
/* Line 1792 of yacc.c  */
#line 1185 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "%";
}
    break;

  case 104:
/* Line 1792 of yacc.c  */
#line 1189 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "+";
}
    break;

  case 105:
/* Line 1792 of yacc.c  */
#line 1193 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "-";
}
    break;

  case 106:
/* Line 1792 of yacc.c  */
#line 1197 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "|";
}
    break;

  case 107:
/* Line 1792 of yacc.c  */
#line 1201 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&";
}
    break;

  case 108:
/* Line 1792 of yacc.c  */
#line 1205 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "^";
}
    break;

  case 109:
/* Line 1792 of yacc.c  */
#line 1209 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "||";
}
    break;

  case 110:
/* Line 1792 of yacc.c  */
#line 1213 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&&";
}
    break;

  case 111:
/* Line 1792 of yacc.c  */
#line 1217 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "==";
}
    break;

  case 112:
/* Line 1792 of yacc.c  */
#line 1221 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "!=";
}
    break;

  case 113:
/* Line 1792 of yacc.c  */
#line 1225 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<=";
}
    break;

  case 114:
/* Line 1792 of yacc.c  */
#line 1229 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">=";
}
    break;

  case 115:
/* Line 1792 of yacc.c  */
#line 1233 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<";
}
    break;

  case 116:
/* Line 1792 of yacc.c  */
#line 1237 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">";
}
    break;

  case 117:
/* Line 1792 of yacc.c  */
#line 1241 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<<";
}
    break;

  case 118:
/* Line 1792 of yacc.c  */
#line 1245 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">>";
}
    break;

  case 119:
/* Line 1792 of yacc.c  */
#line 1249 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "=";
}
    break;

  case 120:
/* Line 1792 of yacc.c  */
#line 1253 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ",";
}
    break;

  case 121:
/* Line 1792 of yacc.c  */
#line 1257 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "++";
}
    break;

  case 122:
/* Line 1792 of yacc.c  */
#line 1261 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "--";
}
    break;

  case 123:
/* Line 1792 of yacc.c  */
#line 1265 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "*=";
}
    break;

  case 124:
/* Line 1792 of yacc.c  */
#line 1269 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "/=";
}
    break;

  case 125:
/* Line 1792 of yacc.c  */
#line 1273 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "%=";
}
    break;

  case 126:
/* Line 1792 of yacc.c  */
#line 1277 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "+=";
}
    break;

  case 127:
/* Line 1792 of yacc.c  */
#line 1281 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "-=";
}
    break;

  case 128:
/* Line 1792 of yacc.c  */
#line 1285 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "|=";
}
    break;

  case 129:
/* Line 1792 of yacc.c  */
#line 1289 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "&=";
}
    break;

  case 130:
/* Line 1792 of yacc.c  */
#line 1293 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "^=";
}
    break;

  case 131:
/* Line 1792 of yacc.c  */
#line 1297 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "<<=";
}
    break;

  case 132:
/* Line 1792 of yacc.c  */
#line 1301 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = ">>=";
}
    break;

  case 133:
/* Line 1792 of yacc.c  */
#line 1305 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "->";
}
    break;

  case 134:
/* Line 1792 of yacc.c  */
#line 1309 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "[]";
}
    break;

  case 135:
/* Line 1792 of yacc.c  */
#line 1313 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "()";
}
    break;

  case 136:
/* Line 1792 of yacc.c  */
#line 1317 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "new";
}
    break;

  case 137:
/* Line 1792 of yacc.c  */
#line 1321 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.str) = "delete";
}
    break;

  case 140:
/* Line 1792 of yacc.c  */
#line 1333 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope(new CPPTemplateScope(current_scope));
}
    break;

  case 141:
/* Line 1792 of yacc.c  */
#line 1337 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 145:
/* Line 1792 of yacc.c  */
#line 1350 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[(1) - (1)].u.decl));
}
    break;

  case 146:
/* Line 1792 of yacc.c  */
#line 1356 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[(3) - (3)].u.decl));
}
    break;

  case 147:
/* Line 1792 of yacc.c  */
#line 1365 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 148:
/* Line 1792 of yacc.c  */
#line 1369 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type)));
}
    break;

  case 149:
/* Line 1792 of yacc.c  */
#line 1373 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 150:
/* Line 1792 of yacc.c  */
#line 1377 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type)));
}
    break;

  case 151:
/* Line 1792 of yacc.c  */
#line 1381 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance((yyvsp[(1) - (3)].u.type), (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  inst->set_initializer((yyvsp[(3) - (3)].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 152:
/* Line 1792 of yacc.c  */
#line 1387 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (4)].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[(2) - (4)].u.type), (yyvsp[(3) - (4)].u.inst_ident), 0, (yylsp[(3) - (4)]).file);
  inst->set_initializer((yyvsp[(4) - (4)].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 153:
/* Line 1792 of yacc.c  */
#line 1397 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 154:
/* Line 1792 of yacc.c  */
#line 1401 "dtool/src/cppparser/cppBison.yxx"
    {
  yywarning("Not a type: " + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;

  case 155:
/* Line 1792 of yacc.c  */
#line 1406 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 156:
/* Line 1792 of yacc.c  */
#line 1418 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 157:
/* Line 1792 of yacc.c  */
#line 1422 "dtool/src/cppparser/cppBison.yxx"
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[(1) - (2)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+(yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[(2) - (2)].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
    break;

  case 158:
/* Line 1792 of yacc.c  */
#line 1436 "dtool/src/cppparser/cppBison.yxx"
    {
  // A C++11 literal operator.
  if (!(yyvsp[(2) - (3)].str).empty()) {
    yyerror("expected empty string", (yylsp[(2) - (3)]));
  }
  CPPIdentifier *ident = (yyvsp[(1) - (3)].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[(3) - (3)].u.identifier)->get_simple_name(), (yylsp[(3) - (3)]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[(3) - (3)].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
    break;

  case 159:
/* Line 1792 of yacc.c  */
#line 1451 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 160:
/* Line 1792 of yacc.c  */
#line 1456 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 161:
/* Line 1792 of yacc.c  */
#line 1461 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 162:
/* Line 1792 of yacc.c  */
#line 1466 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 163:
/* Line 1792 of yacc.c  */
#line 1471 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 164:
/* Line 1792 of yacc.c  */
#line 1476 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 165:
/* Line 1792 of yacc.c  */
#line 1481 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 166:
/* Line 1792 of yacc.c  */
#line 1486 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 167:
/* Line 1792 of yacc.c  */
#line 1491 "dtool/src/cppparser/cppBison.yxx"
    {
  push_scope((yyvsp[(1) - (2)].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 168:
/* Line 1792 of yacc.c  */
#line 1495 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[(1) - (6)].u.inst_ident);
  if ((yyvsp[(4) - (6)].u.param_list)->is_parameter_expr() && (yyvsp[(6) - (6)].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[(4) - (6)].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[(4) - (6)].u.param_list), (yyvsp[(6) - (6)].u.integer));
  }
}
    break;

  case 169:
/* Line 1792 of yacc.c  */
#line 1513 "dtool/src/cppparser/cppBison.yxx"
    {
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[(2) - (2)].u.type) != NULL) {
    (yyvsp[(1) - (2)].u.inst_ident)->add_trailing_return_type((yyvsp[(2) - (2)].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[(1) - (2)].u.inst_ident);
}
    break;

  case 170:
/* Line 1792 of yacc.c  */
#line 1523 "dtool/src/cppparser/cppBison.yxx"
    {
  // Bitfield definition.
  (yyvsp[(1) - (3)].u.inst_ident)->_bit_width = (yyvsp[(3) - (3)].u.integer);
  (yyval.u.inst_ident) = (yyvsp[(1) - (3)].u.inst_ident);
}
    break;

  case 171:
/* Line 1792 of yacc.c  */
#line 1533 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = NULL;
}
    break;

  case 172:
/* Line 1792 of yacc.c  */
#line 1537 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(3) - (3)].u.inst_ident)->unroll_type((yyvsp[(2) - (3)].u.type));
}
    break;

  case 173:
/* Line 1792 of yacc.c  */
#line 1541 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(4) - (4)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[(4) - (4)].u.inst_ident)->unroll_type((yyvsp[(3) - (4)].u.type));
}
    break;

  case 174:
/* Line 1792 of yacc.c  */
#line 1550 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
}
    break;

  case 175:
/* Line 1792 of yacc.c  */
#line 1554 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 176:
/* Line 1792 of yacc.c  */
#line 1559 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (1)].u.param_list);
}
    break;

  case 177:
/* Line 1792 of yacc.c  */
#line 1563 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 178:
/* Line 1792 of yacc.c  */
#line 1568 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (2)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 179:
/* Line 1792 of yacc.c  */
#line 1576 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(1) - (1)].u.instance));
}
    break;

  case 180:
/* Line 1792 of yacc.c  */
#line 1581 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(3) - (3)].u.instance));
}
    break;

  case 181:
/* Line 1792 of yacc.c  */
#line 1589 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
}
    break;

  case 182:
/* Line 1792 of yacc.c  */
#line 1593 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 183:
/* Line 1792 of yacc.c  */
#line 1598 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (1)].u.param_list);
}
    break;

  case 184:
/* Line 1792 of yacc.c  */
#line 1602 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 185:
/* Line 1792 of yacc.c  */
#line 1607 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (2)].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 186:
/* Line 1792 of yacc.c  */
#line 1615 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(1) - (1)].u.instance));
}
    break;

  case 187:
/* Line 1792 of yacc.c  */
#line 1620 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[(1) - (3)].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[(3) - (3)].u.instance));
}
    break;

  case 188:
/* Line 1792 of yacc.c  */
#line 1628 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 189:
/* Line 1792 of yacc.c  */
#line 1632 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 190:
/* Line 1792 of yacc.c  */
#line 1639 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 191:
/* Line 1792 of yacc.c  */
#line 1643 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (2)].u.expr);
}
    break;

  case 192:
/* Line 1792 of yacc.c  */
#line 1650 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 193:
/* Line 1792 of yacc.c  */
#line 1654 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 194:
/* Line 1792 of yacc.c  */
#line 1658 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 195:
/* Line 1792 of yacc.c  */
#line 1662 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
    break;

  case 196:
/* Line 1792 of yacc.c  */
#line 1666 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
    break;

  case 197:
/* Line 1792 of yacc.c  */
#line 1673 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 198:
/* Line 1792 of yacc.c  */
#line 1677 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 199:
/* Line 1792 of yacc.c  */
#line 1681 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 200:
/* Line 1792 of yacc.c  */
#line 1685 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
    break;

  case 201:
/* Line 1792 of yacc.c  */
#line 1689 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
    break;

  case 202:
/* Line 1792 of yacc.c  */
#line 1693 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 206:
/* Line 1792 of yacc.c  */
#line 1706 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 210:
/* Line 1792 of yacc.c  */
#line 1715 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[(1) - (3)].u.type), (yyvsp[(2) - (3)].u.inst_ident), 0, (yylsp[(2) - (3)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(3) - (3)].u.expr));
}
    break;

  case 211:
/* Line 1792 of yacc.c  */
#line 1720 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (4)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[(2) - (4)].u.type), (yyvsp[(3) - (4)].u.inst_ident), 0, (yylsp[(3) - (4)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(4) - (4)].u.expr));
}
    break;

  case 212:
/* Line 1792 of yacc.c  */
#line 1726 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(4) - (5)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[(3) - (5)].u.type), (yyvsp[(4) - (5)].u.inst_ident), 0, (yylsp[(3) - (5)]).file);
  (yyval.u.instance)->set_initializer((yyvsp[(5) - (5)].u.expr));
}
    break;

  case 213:
/* Line 1792 of yacc.c  */
#line 1732 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = (yyvsp[(2) - (2)].u.instance);
}
    break;

  case 214:
/* Line 1792 of yacc.c  */
#line 1743 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.instance) = (yyvsp[(1) - (1)].u.instance);
}
    break;

  case 215:
/* Line 1792 of yacc.c  */
#line 1747 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[(1) - (1)].u.expr));
}
    break;

  case 216:
/* Line 1792 of yacc.c  */
#line 1757 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 217:
/* Line 1792 of yacc.c  */
#line 1761 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 218:
/* Line 1792 of yacc.c  */
#line 1765 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 219:
/* Line 1792 of yacc.c  */
#line 1770 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 220:
/* Line 1792 of yacc.c  */
#line 1775 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 221:
/* Line 1792 of yacc.c  */
#line 1780 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 222:
/* Line 1792 of yacc.c  */
#line 1785 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 223:
/* Line 1792 of yacc.c  */
#line 1790 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 224:
/* Line 1792 of yacc.c  */
#line 1795 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 225:
/* Line 1792 of yacc.c  */
#line 1803 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 226:
/* Line 1792 of yacc.c  */
#line 1807 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[(1) - (1)].u.identifier));
}
    break;

  case 227:
/* Line 1792 of yacc.c  */
#line 1811 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 228:
/* Line 1792 of yacc.c  */
#line 1816 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 229:
/* Line 1792 of yacc.c  */
#line 1821 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 230:
/* Line 1792 of yacc.c  */
#line 1826 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 231:
/* Line 1792 of yacc.c  */
#line 1831 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 232:
/* Line 1792 of yacc.c  */
#line 1836 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 233:
/* Line 1792 of yacc.c  */
#line 1841 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 234:
/* Line 1792 of yacc.c  */
#line 1846 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (7)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(5) - (7)].u.param_list), (yyvsp[(7) - (7)].u.integer));
}
    break;

  case 235:
/* Line 1792 of yacc.c  */
#line 1852 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 236:
/* Line 1792 of yacc.c  */
#line 1860 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 237:
/* Line 1792 of yacc.c  */
#line 1864 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 238:
/* Line 1792 of yacc.c  */
#line 1869 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 239:
/* Line 1792 of yacc.c  */
#line 1874 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 240:
/* Line 1792 of yacc.c  */
#line 1879 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 241:
/* Line 1792 of yacc.c  */
#line 1884 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 242:
/* Line 1792 of yacc.c  */
#line 1889 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 243:
/* Line 1792 of yacc.c  */
#line 1894 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 244:
/* Line 1792 of yacc.c  */
#line 1902 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 245:
/* Line 1792 of yacc.c  */
#line 1906 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 246:
/* Line 1792 of yacc.c  */
#line 1911 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
    break;

  case 247:
/* Line 1792 of yacc.c  */
#line 1916 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 248:
/* Line 1792 of yacc.c  */
#line 1921 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 249:
/* Line 1792 of yacc.c  */
#line 1926 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(2) - (2)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
    break;

  case 250:
/* Line 1792 of yacc.c  */
#line 1931 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (3)].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[(1) - (3)].u.identifier));
}
    break;

  case 251:
/* Line 1792 of yacc.c  */
#line 1936 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(1) - (4)].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[(3) - (4)].u.expr));
}
    break;

  case 252:
/* Line 1792 of yacc.c  */
#line 1941 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(2) - (5)].u.param_list), (yyvsp[(4) - (5)].u.integer), (yyvsp[(5) - (5)].u.type));
}
    break;

  case 253:
/* Line 1792 of yacc.c  */
#line 1947 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (9)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(6) - (9)].u.param_list), (yyvsp[(8) - (9)].u.integer), (yyvsp[(9) - (9)].u.type));
}
    break;

  case 254:
/* Line 1792 of yacc.c  */
#line 1954 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (9)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(6) - (9)].u.param_list), (yyvsp[(8) - (9)].u.integer), (yyvsp[(9) - (9)].u.type));
}
    break;

  case 255:
/* Line 1792 of yacc.c  */
#line 1961 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[(3) - (9)].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[(6) - (9)].u.param_list), (yyvsp[(8) - (9)].u.integer), (yyvsp[(9) - (9)].u.type));
}
    break;

  case 256:
/* Line 1792 of yacc.c  */
#line 1971 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 257:
/* Line 1792 of yacc.c  */
#line 1975 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 258:
/* Line 1792 of yacc.c  */
#line 1983 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 259:
/* Line 1792 of yacc.c  */
#line 1987 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 260:
/* Line 1792 of yacc.c  */
#line 1991 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 261:
/* Line 1792 of yacc.c  */
#line 1995 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.enum_type));
}
    break;

  case 262:
/* Line 1792 of yacc.c  */
#line 1999 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 263:
/* Line 1792 of yacc.c  */
#line 2015 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (4)].u.extension_enum), (yyvsp[(2) - (4)].u.identifier), current_scope, (yylsp[(1) - (4)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (4)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 264:
/* Line 1792 of yacc.c  */
#line 2031 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(3) - (4)].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[(3) - (4)].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[(3) - (4)]));
  }
}
    break;

  case 265:
/* Line 1792 of yacc.c  */
#line 2040 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
    break;

  case 266:
/* Line 1792 of yacc.c  */
#line 2047 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 267:
/* Line 1792 of yacc.c  */
#line 2051 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.decl) != NULL);
}
    break;

  case 268:
/* Line 1792 of yacc.c  */
#line 2059 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 269:
/* Line 1792 of yacc.c  */
#line 2063 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[(1) - (1)].u.struct_type));
}
    break;

  case 270:
/* Line 1792 of yacc.c  */
#line 2067 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[(1) - (1)].u.struct_type)));
}
    break;

  case 271:
/* Line 1792 of yacc.c  */
#line 2071 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[(1) - (1)].u.enum_type)));
}
    break;

  case 272:
/* Line 1792 of yacc.c  */
#line 2075 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 273:
/* Line 1792 of yacc.c  */
#line 2091 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (4)].u.extension_enum), (yyvsp[(2) - (4)].u.identifier), current_scope, (yylsp[(1) - (4)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (4)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 274:
/* Line 1792 of yacc.c  */
#line 2107 "dtool/src/cppparser/cppBison.yxx"
    {
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[(2) - (2)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (2)]));

  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 275:
/* Line 1792 of yacc.c  */
#line 2125 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(3) - (4)].u.expr)->determine_type();
  if ((yyval.u.decl) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[(3) - (4)].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[(3) - (4)]));
  }
}
    break;

  case 276:
/* Line 1792 of yacc.c  */
#line 2134 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
    break;

  case 277:
/* Line 1792 of yacc.c  */
#line 2141 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 278:
/* Line 1792 of yacc.c  */
#line 2145 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (1)]));
  }
  assert((yyval.u.type) != NULL);
}
    break;

  case 279:
/* Line 1792 of yacc.c  */
#line 2153 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 280:
/* Line 1792 of yacc.c  */
#line 2157 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 281:
/* Line 1792 of yacc.c  */
#line 2173 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 282:
/* Line 1792 of yacc.c  */
#line 2189 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(3) - (4)].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[(3) - (4)].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[(3) - (4)]));
  }
}
    break;

  case 283:
/* Line 1792 of yacc.c  */
#line 2198 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
    break;

  case 284:
/* Line 1792 of yacc.c  */
#line 2205 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[(1) - (1)].u.decl);
}
    break;

  case 285:
/* Line 1792 of yacc.c  */
#line 2209 "dtool/src/cppparser/cppBison.yxx"
    {
  yyerror(string("unknown type '") + (yyvsp[(1) - (1)].u.identifier)->get_fully_scoped_name() + "'", (yylsp[(1) - (1)]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;

  case 286:
/* Line 1792 of yacc.c  */
#line 2217 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(2) - (2)].u.inst_ident)->unroll_type((yyvsp[(1) - (2)].u.type));
}
    break;

  case 287:
/* Line 1792 of yacc.c  */
#line 2221 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyvsp[(3) - (3)].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[(3) - (3)].u.inst_ident)->unroll_type((yyvsp[(2) - (3)].u.type));
}
    break;

  case 288:
/* Line 1792 of yacc.c  */
#line 2229 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPVisibility starting_vis =
  ((yyvsp[(1) - (2)].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[(1) - (2)].u.extension_enum), NULL, current_scope,
                                        new_scope, (yylsp[(1) - (2)]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 289:
/* Line 1792 of yacc.c  */
#line 2243 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 290:
/* Line 1792 of yacc.c  */
#line 2253 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPVisibility starting_vis =
  ((yyvsp[(1) - (2)].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[(2) - (2)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[(2) - (2)].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[(1) - (2)].u.extension_enum), (yyvsp[(2) - (2)].u.identifier), current_scope,
                                        new_scope, (yylsp[(1) - (2)]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 291:
/* Line 1792 of yacc.c  */
#line 2273 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 293:
/* Line 1792 of yacc.c  */
#line 2284 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->_final = true;
}
    break;

  case 298:
/* Line 1792 of yacc.c  */
#line 2301 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(1) - (1)].u.type), V_unknown, false);
}
    break;

  case 299:
/* Line 1792 of yacc.c  */
#line 2305 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_public, false);
}
    break;

  case 300:
/* Line 1792 of yacc.c  */
#line 2309 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_protected, false);
}
    break;

  case 301:
/* Line 1792 of yacc.c  */
#line 2313 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(2) - (2)].u.type), V_private, false);
}
    break;

  case 302:
/* Line 1792 of yacc.c  */
#line 2317 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_public, true);
}
    break;

  case 303:
/* Line 1792 of yacc.c  */
#line 2321 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_protected, true);
}
    break;

  case 304:
/* Line 1792 of yacc.c  */
#line 2325 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_private, true);
}
    break;

  case 305:
/* Line 1792 of yacc.c  */
#line 2329 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_public, true);
}
    break;

  case 306:
/* Line 1792 of yacc.c  */
#line 2333 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_protected, true);
}
    break;

  case 307:
/* Line 1792 of yacc.c  */
#line 2337 "dtool/src/cppparser/cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[(3) - (3)].u.type), V_private, true);
}
    break;

  case 308:
/* Line 1792 of yacc.c  */
#line 2344 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
    break;

  case 309:
/* Line 1792 of yacc.c  */
#line 2352 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType((yyvsp[(2) - (4)].u.identifier), (yyvsp[(4) - (4)].u.type), current_scope, (yylsp[(1) - (4)]).file);
}
    break;

  case 310:
/* Line 1792 of yacc.c  */
#line 2356 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType((yyvsp[(2) - (2)].u.identifier), current_scope, (yylsp[(1) - (2)]).file);
}
    break;

  case 311:
/* Line 1792 of yacc.c  */
#line 2360 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType(NULL, (yyvsp[(3) - (3)].u.type), current_scope, (yylsp[(1) - (3)]).file);
}
    break;

  case 312:
/* Line 1792 of yacc.c  */
#line 2364 "dtool/src/cppparser/cppBison.yxx"
    {
  current_enum = new CPPEnumType(NULL, current_scope, (yylsp[(1) - (1)]).file);
}
    break;

  case 313:
/* Line 1792 of yacc.c  */
#line 2371 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[(1) - (1)].u.simple_type));
}
    break;

  case 314:
/* Line 1792 of yacc.c  */
#line 2375 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
    break;

  case 316:
/* Line 1792 of yacc.c  */
#line 2383 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (3)].u.identifier)->get_simple_name());
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (3)]));
}
    break;

  case 317:
/* Line 1792 of yacc.c  */
#line 2389 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (5)].u.identifier)->get_simple_name(), (yyvsp[(4) - (5)].u.expr));
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (5)]));
}
    break;

  case 319:
/* Line 1792 of yacc.c  */
#line 2398 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (2)].u.identifier)->get_simple_name());
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (2)]));
}
    break;

  case 320:
/* Line 1792 of yacc.c  */
#line 2404 "dtool/src/cppparser/cppBison.yxx"
    {
  assert(current_enum != NULL);
  CPPInstance *inst = current_enum->add_element((yyvsp[(2) - (4)].u.identifier)->get_simple_name(), (yyvsp[(4) - (4)].u.expr));
  current_scope->add_enum_value(inst, current_lexer, (yylsp[(2) - (4)]));
}
    break;

  case 321:
/* Line 1792 of yacc.c  */
#line 2413 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
    break;

  case 322:
/* Line 1792 of yacc.c  */
#line 2420 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
    break;

  case 323:
/* Line 1792 of yacc.c  */
#line 2424 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
    break;

  case 324:
/* Line 1792 of yacc.c  */
#line 2428 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
    break;

  case 325:
/* Line 1792 of yacc.c  */
#line 2435 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *scope = (yyvsp[(2) - (3)].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[(2) - (3)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[(2) - (3)].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[(2) - (3)].u.identifier), scope, (yylsp[(1) - (3)]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[(1) - (3)]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;

  case 326:
/* Line 1792 of yacc.c  */
#line 2453 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 327:
/* Line 1792 of yacc.c  */
#line 2457 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPScope *scope = (yyvsp[(3) - (4)].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[(3) - (4)].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[(3) - (4)].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[(3) - (4)].u.identifier), scope, (yylsp[(2) - (4)]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[(2) - (4)]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;

  case 328:
/* Line 1792 of yacc.c  */
#line 2476 "dtool/src/cppparser/cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 331:
/* Line 1792 of yacc.c  */
#line 2485 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[(2) - (3)].u.identifier), false, (yylsp[(1) - (3)]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[(1) - (3)]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 332:
/* Line 1792 of yacc.c  */
#line 2491 "dtool/src/cppparser/cppBison.yxx"
    {
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[(4) - (5)].u.type), (yyvsp[(2) - (5)].u.identifier), current_scope);
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[(1) - (5)]));
}
    break;

  case 333:
/* Line 1792 of yacc.c  */
#line 2498 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[(3) - (4)].u.identifier), true, (yylsp[(1) - (4)]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[(1) - (4)]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 337:
/* Line 1792 of yacc.c  */
#line 2513 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
    break;

  case 338:
/* Line 1792 of yacc.c  */
#line 2517 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
    break;

  case 339:
/* Line 1792 of yacc.c  */
#line 2521 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
    break;

  case 340:
/* Line 1792 of yacc.c  */
#line 2525 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
    break;

  case 341:
/* Line 1792 of yacc.c  */
#line 2529 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
    break;

  case 342:
/* Line 1792 of yacc.c  */
#line 2533 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
    break;

  case 343:
/* Line 1792 of yacc.c  */
#line 2538 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
    break;

  case 344:
/* Line 1792 of yacc.c  */
#line 2543 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
    break;

  case 345:
/* Line 1792 of yacc.c  */
#line 2548 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
    break;

  case 346:
/* Line 1792 of yacc.c  */
#line 2553 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
    break;

  case 347:
/* Line 1792 of yacc.c  */
#line 2557 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
    break;

  case 348:
/* Line 1792 of yacc.c  */
#line 2562 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
    break;

  case 349:
/* Line 1792 of yacc.c  */
#line 2571 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
    break;

  case 350:
/* Line 1792 of yacc.c  */
#line 2576 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[(2) - (2)].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
    break;

  case 351:
/* Line 1792 of yacc.c  */
#line 2584 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
    break;

  case 352:
/* Line 1792 of yacc.c  */
#line 2588 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
    break;

  case 353:
/* Line 1792 of yacc.c  */
#line 2592 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
    break;

  case 354:
/* Line 1792 of yacc.c  */
#line 2600 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
    break;

  case 355:
/* Line 1792 of yacc.c  */
#line 2609 "dtool/src/cppparser/cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = false;
}
    break;

  case 356:
/* Line 1792 of yacc.c  */
#line 2613 "dtool/src/cppparser/cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = true;
}
    break;

  case 459:
/* Line 1792 of yacc.c  */
#line 2654 "dtool/src/cppparser/cppBison.yxx"
    {
}
    break;

  case 483:
/* Line 1792 of yacc.c  */
#line 2663 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 484:
/* Line 1792 of yacc.c  */
#line 2667 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 485:
/* Line 1792 of yacc.c  */
#line 2674 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 486:
/* Line 1792 of yacc.c  */
#line 2678 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 487:
/* Line 1792 of yacc.c  */
#line 2685 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 488:
/* Line 1792 of yacc.c  */
#line 2689 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 489:
/* Line 1792 of yacc.c  */
#line 2696 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 490:
/* Line 1792 of yacc.c  */
#line 2700 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 491:
/* Line 1792 of yacc.c  */
#line 2704 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_static_cast));
}
    break;

  case 492:
/* Line 1792 of yacc.c  */
#line 2708 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_dynamic_cast));
}
    break;

  case 493:
/* Line 1792 of yacc.c  */
#line 2712 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_const_cast));
}
    break;

  case 494:
/* Line 1792 of yacc.c  */
#line 2716 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_reinterpret_cast));
}
    break;

  case 495:
/* Line 1792 of yacc.c  */
#line 2720 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 496:
/* Line 1792 of yacc.c  */
#line 2724 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 497:
/* Line 1792 of yacc.c  */
#line 2728 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 498:
/* Line 1792 of yacc.c  */
#line 2732 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 499:
/* Line 1792 of yacc.c  */
#line 2736 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 500:
/* Line 1792 of yacc.c  */
#line 2740 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 501:
/* Line 1792 of yacc.c  */
#line 2744 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 502:
/* Line 1792 of yacc.c  */
#line 2748 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 503:
/* Line 1792 of yacc.c  */
#line 2752 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 504:
/* Line 1792 of yacc.c  */
#line 2756 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 505:
/* Line 1792 of yacc.c  */
#line 2760 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 506:
/* Line 1792 of yacc.c  */
#line 2764 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 507:
/* Line 1792 of yacc.c  */
#line 2768 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 508:
/* Line 1792 of yacc.c  */
#line 2772 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 509:
/* Line 1792 of yacc.c  */
#line 2776 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 510:
/* Line 1792 of yacc.c  */
#line 2780 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 511:
/* Line 1792 of yacc.c  */
#line 2784 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 512:
/* Line 1792 of yacc.c  */
#line 2788 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 513:
/* Line 1792 of yacc.c  */
#line 2792 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 514:
/* Line 1792 of yacc.c  */
#line 2796 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 515:
/* Line 1792 of yacc.c  */
#line 2800 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 516:
/* Line 1792 of yacc.c  */
#line 2804 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 517:
/* Line 1792 of yacc.c  */
#line 2808 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 518:
/* Line 1792 of yacc.c  */
#line 2812 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 519:
/* Line 1792 of yacc.c  */
#line 2816 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 520:
/* Line 1792 of yacc.c  */
#line 2820 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 521:
/* Line 1792 of yacc.c  */
#line 2824 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 522:
/* Line 1792 of yacc.c  */
#line 2828 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 523:
/* Line 1792 of yacc.c  */
#line 2832 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 524:
/* Line 1792 of yacc.c  */
#line 2836 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 525:
/* Line 1792 of yacc.c  */
#line 2840 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 526:
/* Line 1792 of yacc.c  */
#line 2848 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 527:
/* Line 1792 of yacc.c  */
#line 2852 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 528:
/* Line 1792 of yacc.c  */
#line 2856 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_static_cast));
}
    break;

  case 529:
/* Line 1792 of yacc.c  */
#line 2860 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_dynamic_cast));
}
    break;

  case 530:
/* Line 1792 of yacc.c  */
#line 2864 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_const_cast));
}
    break;

  case 531:
/* Line 1792 of yacc.c  */
#line 2868 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_reinterpret_cast));
}
    break;

  case 532:
/* Line 1792 of yacc.c  */
#line 2872 "dtool/src/cppparser/cppBison.yxx"
    {
  // A constructor call.
  CPPType *type = (yyvsp[(1) - (4)].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[(1) - (4)].u.identifier)->get_fully_scoped_name(), (yylsp[(1) - (4)]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 533:
/* Line 1792 of yacc.c  */
#line 2882 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 534:
/* Line 1792 of yacc.c  */
#line 2888 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 535:
/* Line 1792 of yacc.c  */
#line 2894 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 536:
/* Line 1792 of yacc.c  */
#line 2900 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 537:
/* Line 1792 of yacc.c  */
#line 2906 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 538:
/* Line 1792 of yacc.c  */
#line 2912 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 539:
/* Line 1792 of yacc.c  */
#line 2918 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 540:
/* Line 1792 of yacc.c  */
#line 2925 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 541:
/* Line 1792 of yacc.c  */
#line 2932 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 542:
/* Line 1792 of yacc.c  */
#line 2939 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 543:
/* Line 1792 of yacc.c  */
#line 2946 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 544:
/* Line 1792 of yacc.c  */
#line 2952 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[(3) - (4)].u.expr)));
}
    break;

  case 545:
/* Line 1792 of yacc.c  */
#line 2958 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 546:
/* Line 1792 of yacc.c  */
#line 2962 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 547:
/* Line 1792 of yacc.c  */
#line 2966 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (2)].u.type)));
}
    break;

  case 548:
/* Line 1792 of yacc.c  */
#line 2970 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (5)].u.type), (yyvsp[(4) - (5)].u.expr)));
}
    break;

  case 549:
/* Line 1792 of yacc.c  */
#line 2974 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[(1) - (4)]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[(3) - (4)].u.type), std_type_info));
}
    break;

  case 550:
/* Line 1792 of yacc.c  */
#line 2985 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[(1) - (4)]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[(3) - (4)].u.expr), std_type_info));
}
    break;

  case 551:
/* Line 1792 of yacc.c  */
#line 2996 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 552:
/* Line 1792 of yacc.c  */
#line 3000 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 553:
/* Line 1792 of yacc.c  */
#line 3004 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 554:
/* Line 1792 of yacc.c  */
#line 3008 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 555:
/* Line 1792 of yacc.c  */
#line 3012 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 556:
/* Line 1792 of yacc.c  */
#line 3016 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 557:
/* Line 1792 of yacc.c  */
#line 3020 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 558:
/* Line 1792 of yacc.c  */
#line 3024 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 559:
/* Line 1792 of yacc.c  */
#line 3028 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 560:
/* Line 1792 of yacc.c  */
#line 3032 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 561:
/* Line 1792 of yacc.c  */
#line 3036 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 562:
/* Line 1792 of yacc.c  */
#line 3040 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 563:
/* Line 1792 of yacc.c  */
#line 3044 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 564:
/* Line 1792 of yacc.c  */
#line 3048 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 565:
/* Line 1792 of yacc.c  */
#line 3052 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 566:
/* Line 1792 of yacc.c  */
#line 3056 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 567:
/* Line 1792 of yacc.c  */
#line 3060 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 568:
/* Line 1792 of yacc.c  */
#line 3064 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 569:
/* Line 1792 of yacc.c  */
#line 3068 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 570:
/* Line 1792 of yacc.c  */
#line 3072 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 571:
/* Line 1792 of yacc.c  */
#line 3076 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 572:
/* Line 1792 of yacc.c  */
#line 3080 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 573:
/* Line 1792 of yacc.c  */
#line 3084 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 574:
/* Line 1792 of yacc.c  */
#line 3088 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 575:
/* Line 1792 of yacc.c  */
#line 3092 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 576:
/* Line 1792 of yacc.c  */
#line 3096 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 577:
/* Line 1792 of yacc.c  */
#line 3100 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 578:
/* Line 1792 of yacc.c  */
#line 3104 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 579:
/* Line 1792 of yacc.c  */
#line 3108 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 580:
/* Line 1792 of yacc.c  */
#line 3112 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 581:
/* Line 1792 of yacc.c  */
#line 3116 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 582:
/* Line 1792 of yacc.c  */
#line 3123 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 583:
/* Line 1792 of yacc.c  */
#line 3127 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 584:
/* Line 1792 of yacc.c  */
#line 3131 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 585:
/* Line 1792 of yacc.c  */
#line 3135 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 586:
/* Line 1792 of yacc.c  */
#line 3139 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.real));
}
    break;

  case 587:
/* Line 1792 of yacc.c  */
#line 3143 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 588:
/* Line 1792 of yacc.c  */
#line 3147 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 589:
/* Line 1792 of yacc.c  */
#line 3151 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.identifier), current_scope, global_scope, current_lexer);
}
    break;

  case 590:
/* Line 1792 of yacc.c  */
#line 3155 "dtool/src/cppparser/cppBison.yxx"
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[(1) - (1)]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
    break;

  case 591:
/* Line 1792 of yacc.c  */
#line 3161 "dtool/src/cppparser/cppBison.yxx"
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[(1) - (1)]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
    break;

  case 592:
/* Line 1792 of yacc.c  */
#line 3167 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
    break;

  case 593:
/* Line 1792 of yacc.c  */
#line 3171 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = NULL;
}
    break;

  case 594:
/* Line 1792 of yacc.c  */
#line 3175 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = NULL;
}
    break;

  case 595:
/* Line 1792 of yacc.c  */
#line 3189 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 596:
/* Line 1792 of yacc.c  */
#line 3193 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(2) - (4)].u.type), (yyvsp[(4) - (4)].u.expr)));
}
    break;

  case 597:
/* Line 1792 of yacc.c  */
#line 3197 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_static_cast));
}
    break;

  case 598:
/* Line 1792 of yacc.c  */
#line 3201 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_dynamic_cast));
}
    break;

  case 599:
/* Line 1792 of yacc.c  */
#line 3205 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_const_cast));
}
    break;

  case 600:
/* Line 1792 of yacc.c  */
#line 3209 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[(3) - (7)].u.type), (yyvsp[(6) - (7)].u.expr), CPPExpression::T_reinterpret_cast));
}
    break;

  case 601:
/* Line 1792 of yacc.c  */
#line 3213 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 602:
/* Line 1792 of yacc.c  */
#line 3217 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[(3) - (4)].u.type)));
}
    break;

  case 603:
/* Line 1792 of yacc.c  */
#line 3221 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (2)].u.type)));
}
    break;

  case 604:
/* Line 1792 of yacc.c  */
#line 3225 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[(2) - (5)].u.type), (yyvsp[(4) - (5)].u.expr)));
}
    break;

  case 605:
/* Line 1792 of yacc.c  */
#line 3229 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[(1) - (4)]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[(3) - (4)].u.type), std_type_info));
}
    break;

  case 606:
/* Line 1792 of yacc.c  */
#line 3240 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[(1) - (4)]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[(3) - (4)].u.expr), std_type_info));
}
    break;

  case 607:
/* Line 1792 of yacc.c  */
#line 3251 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 608:
/* Line 1792 of yacc.c  */
#line 3255 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 609:
/* Line 1792 of yacc.c  */
#line 3259 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 610:
/* Line 1792 of yacc.c  */
#line 3263 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 611:
/* Line 1792 of yacc.c  */
#line 3267 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[(2) - (2)].u.expr));
}
    break;

  case 612:
/* Line 1792 of yacc.c  */
#line 3271 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 613:
/* Line 1792 of yacc.c  */
#line 3275 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 614:
/* Line 1792 of yacc.c  */
#line 3279 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 615:
/* Line 1792 of yacc.c  */
#line 3283 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 616:
/* Line 1792 of yacc.c  */
#line 3287 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 617:
/* Line 1792 of yacc.c  */
#line 3291 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 618:
/* Line 1792 of yacc.c  */
#line 3295 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 619:
/* Line 1792 of yacc.c  */
#line 3299 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 620:
/* Line 1792 of yacc.c  */
#line 3303 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 621:
/* Line 1792 of yacc.c  */
#line 3307 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 622:
/* Line 1792 of yacc.c  */
#line 3311 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 623:
/* Line 1792 of yacc.c  */
#line 3315 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 624:
/* Line 1792 of yacc.c  */
#line 3319 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 625:
/* Line 1792 of yacc.c  */
#line 3323 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 626:
/* Line 1792 of yacc.c  */
#line 3327 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 627:
/* Line 1792 of yacc.c  */
#line 3331 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 628:
/* Line 1792 of yacc.c  */
#line 3335 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 629:
/* Line 1792 of yacc.c  */
#line 3339 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 630:
/* Line 1792 of yacc.c  */
#line 3343 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[(1) - (5)].u.expr), (yyvsp[(3) - (5)].u.expr), (yyvsp[(5) - (5)].u.expr));
}
    break;

  case 631:
/* Line 1792 of yacc.c  */
#line 3347 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 632:
/* Line 1792 of yacc.c  */
#line 3351 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (4)].u.expr), (yyvsp[(3) - (4)].u.expr));
}
    break;

  case 633:
/* Line 1792 of yacc.c  */
#line 3355 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[(1) - (3)].u.expr));
}
    break;

  case 634:
/* Line 1792 of yacc.c  */
#line 3359 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 635:
/* Line 1792 of yacc.c  */
#line 3363 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[(1) - (3)].u.expr), (yyvsp[(3) - (3)].u.expr));
}
    break;

  case 636:
/* Line 1792 of yacc.c  */
#line 3367 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(2) - (3)].u.expr);
}
    break;

  case 637:
/* Line 1792 of yacc.c  */
#line 3374 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 638:
/* Line 1792 of yacc.c  */
#line 3378 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 639:
/* Line 1792 of yacc.c  */
#line 3382 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 640:
/* Line 1792 of yacc.c  */
#line 3386 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.integer));
}
    break;

  case 641:
/* Line 1792 of yacc.c  */
#line 3390 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.real));
}
    break;

  case 642:
/* Line 1792 of yacc.c  */
#line 3394 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 643:
/* Line 1792 of yacc.c  */
#line 3398 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 644:
/* Line 1792 of yacc.c  */
#line 3402 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].u.identifier), current_scope, global_scope, current_lexer);
}
    break;

  case 645:
/* Line 1792 of yacc.c  */
#line 3406 "dtool/src/cppparser/cppBison.yxx"
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[(1) - (1)]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
    break;

  case 646:
/* Line 1792 of yacc.c  */
#line 3412 "dtool/src/cppparser/cppBison.yxx"
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[(1) - (1)]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
    break;

  case 647:
/* Line 1792 of yacc.c  */
#line 3418 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
    break;

  case 655:
/* Line 1792 of yacc.c  */
#line 3439 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(1) - (1)].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[(1) - (1)].u.identifier)));
  }
  (yyval.u.type) = type;
}
    break;

  case 656:
/* Line 1792 of yacc.c  */
#line 3447 "dtool/src/cppparser/cppBison.yxx"
    {
  CPPType *type = (yyvsp[(2) - (2)].u.identifier)->find_type(current_scope, global_scope, true, current_lexer);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
  }
  (yyval.u.type) = type;
}
    break;

  case 657:
/* Line 1792 of yacc.c  */
#line 3455 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[(2) - (2)].u.identifier)));
}
    break;

  case 658:
/* Line 1792 of yacc.c  */
#line 3483 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 659:
/* Line 1792 of yacc.c  */
#line 3487 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 660:
/* Line 1792 of yacc.c  */
#line 3491 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[(1) - (1)]));
}
    break;

  case 661:
/* Line 1792 of yacc.c  */
#line 3495 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[(1) - (1)]));
}
    break;

  case 662:
/* Line 1792 of yacc.c  */
#line 3506 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 663:
/* Line 1792 of yacc.c  */
#line 3510 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[(1) - (1)].u.identifier);
}
    break;

  case 664:
/* Line 1792 of yacc.c  */
#line 3514 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[(1) - (1)]));
}
    break;

  case 665:
/* Line 1792 of yacc.c  */
#line 3522 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[(1) - (1)].str));
}
    break;

  case 666:
/* Line 1792 of yacc.c  */
#line 3526 "dtool/src/cppparser/cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[(1) - (1)].u.expr);
}
    break;

  case 667:
/* Line 1792 of yacc.c  */
#line 3530 "dtool/src/cppparser/cppBison.yxx"
    {
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[(1) - (2)].u.expr);
  (yyval.u.expr)->_str += (yyvsp[(2) - (2)].str);
}
    break;

  case 668:
/* Line 1792 of yacc.c  */
#line 3536 "dtool/src/cppparser/cppBison.yxx"
    {
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[(1) - (2)].u.expr);
  if ((yyvsp[(2) - (2)].u.expr)->_type != CPPExpression::T_string && (yyvsp[(2) - (2)].u.expr)->_type != (yyvsp[(1) - (2)].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[(2) - (2)].u.expr)->_str;
}
    break;


/* Line 1792 of yacc.c  */
#line 8616 "built/tmp/cppBison.yxx.c"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


