/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs

/* First part of user prologue.  */
#line 7 "dtool/src/cppparser/cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppClosureType.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

using std::stringstream;
using std::string;

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = nullptr;
CPPScope *global_scope = nullptr;
CPPPreprocessor *current_lexer = nullptr;

static CPPStructType *current_struct = nullptr;
static CPPEnumType *current_enum = nullptr;
static int current_storage_class = 0;
static CPPType *current_type = nullptr;
static CPPExpression *current_expr = nullptr;
static CPPAttributeList current_attributes;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static std::vector<CPPScope *> last_scopes;
static std::vector<int> last_storage_classes;
static std::vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = nullptr;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = nullptr;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != nullptr) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#line 275 "built/tmp/cppBison.yxx.c"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "cppBison.yxx.h"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_REAL = 3,                       /* REAL  */
  YYSYMBOL_INTEGER = 4,                    /* INTEGER  */
  YYSYMBOL_CHAR_TOK = 5,                   /* CHAR_TOK  */
  YYSYMBOL_SIMPLE_STRING = 6,              /* SIMPLE_STRING  */
  YYSYMBOL_SIMPLE_IDENTIFIER = 7,          /* SIMPLE_IDENTIFIER  */
  YYSYMBOL_STRING_LITERAL = 8,             /* STRING_LITERAL  */
  YYSYMBOL_CUSTOM_LITERAL = 9,             /* CUSTOM_LITERAL  */
  YYSYMBOL_IDENTIFIER = 10,                /* IDENTIFIER  */
  YYSYMBOL_TYPENAME_IDENTIFIER = 11,       /* TYPENAME_IDENTIFIER  */
  YYSYMBOL_TYPEPACK_IDENTIFIER = 12,       /* TYPEPACK_IDENTIFIER  */
  YYSYMBOL_SCOPING = 13,                   /* SCOPING  */
  YYSYMBOL_TYPEDEFNAME = 14,               /* TYPEDEFNAME  */
  YYSYMBOL_ELLIPSIS = 15,                  /* ELLIPSIS  */
  YYSYMBOL_OROR = 16,                      /* OROR  */
  YYSYMBOL_ANDAND = 17,                    /* ANDAND  */
  YYSYMBOL_EQCOMPARE = 18,                 /* EQCOMPARE  */
  YYSYMBOL_NECOMPARE = 19,                 /* NECOMPARE  */
  YYSYMBOL_LECOMPARE = 20,                 /* LECOMPARE  */
  YYSYMBOL_GECOMPARE = 21,                 /* GECOMPARE  */
  YYSYMBOL_SPACESHIP = 22,                 /* SPACESHIP  */
  YYSYMBOL_LSHIFT = 23,                    /* LSHIFT  */
  YYSYMBOL_RSHIFT = 24,                    /* RSHIFT  */
  YYSYMBOL_POINTSAT_STAR = 25,             /* POINTSAT_STAR  */
  YYSYMBOL_DOT_STAR = 26,                  /* DOT_STAR  */
  YYSYMBOL_UNARY = 27,                     /* UNARY  */
  YYSYMBOL_UNARY_NOT = 28,                 /* UNARY_NOT  */
  YYSYMBOL_UNARY_NEGATE = 29,              /* UNARY_NEGATE  */
  YYSYMBOL_UNARY_MINUS = 30,               /* UNARY_MINUS  */
  YYSYMBOL_UNARY_PLUS = 31,                /* UNARY_PLUS  */
  YYSYMBOL_UNARY_STAR = 32,                /* UNARY_STAR  */
  YYSYMBOL_UNARY_REF = 33,                 /* UNARY_REF  */
  YYSYMBOL_POINTSAT = 34,                  /* POINTSAT  */
  YYSYMBOL_SCOPE = 35,                     /* SCOPE  */
  YYSYMBOL_PLUSPLUS = 36,                  /* PLUSPLUS  */
  YYSYMBOL_MINUSMINUS = 37,                /* MINUSMINUS  */
  YYSYMBOL_TIMESEQUAL = 38,                /* TIMESEQUAL  */
  YYSYMBOL_DIVIDEEQUAL = 39,               /* DIVIDEEQUAL  */
  YYSYMBOL_MODEQUAL = 40,                  /* MODEQUAL  */
  YYSYMBOL_PLUSEQUAL = 41,                 /* PLUSEQUAL  */
  YYSYMBOL_MINUSEQUAL = 42,                /* MINUSEQUAL  */
  YYSYMBOL_OREQUAL = 43,                   /* OREQUAL  */
  YYSYMBOL_ANDEQUAL = 44,                  /* ANDEQUAL  */
  YYSYMBOL_XOREQUAL = 45,                  /* XOREQUAL  */
  YYSYMBOL_LSHIFTEQUAL = 46,               /* LSHIFTEQUAL  */
  YYSYMBOL_RSHIFTEQUAL = 47,               /* RSHIFTEQUAL  */
  YYSYMBOL_ATTR_LEFT = 48,                 /* ATTR_LEFT  */
  YYSYMBOL_ATTR_RIGHT = 49,                /* ATTR_RIGHT  */
  YYSYMBOL_KW_ALIGNAS = 50,                /* KW_ALIGNAS  */
  YYSYMBOL_KW_ALIGNOF = 51,                /* KW_ALIGNOF  */
  YYSYMBOL_KW_AUTO = 52,                   /* KW_AUTO  */
  YYSYMBOL_KW_BEGIN_PUBLISH = 53,          /* KW_BEGIN_PUBLISH  */
  YYSYMBOL_KW_BLOCKING = 54,               /* KW_BLOCKING  */
  YYSYMBOL_KW_BOOL = 55,                   /* KW_BOOL  */
  YYSYMBOL_KW_CATCH = 56,                  /* KW_CATCH  */
  YYSYMBOL_KW_CHAR = 57,                   /* KW_CHAR  */
  YYSYMBOL_KW_CHAR8_T = 58,                /* KW_CHAR8_T  */
  YYSYMBOL_KW_CHAR16_T = 59,               /* KW_CHAR16_T  */
  YYSYMBOL_KW_CHAR32_T = 60,               /* KW_CHAR32_T  */
  YYSYMBOL_KW_CLASS = 61,                  /* KW_CLASS  */
  YYSYMBOL_KW_CONST = 62,                  /* KW_CONST  */
  YYSYMBOL_KW_CONSTEVAL = 63,              /* KW_CONSTEVAL  */
  YYSYMBOL_KW_CONSTEXPR = 64,              /* KW_CONSTEXPR  */
  YYSYMBOL_KW_CONSTINIT = 65,              /* KW_CONSTINIT  */
  YYSYMBOL_KW_CONST_CAST = 66,             /* KW_CONST_CAST  */
  YYSYMBOL_KW_DECLTYPE = 67,               /* KW_DECLTYPE  */
  YYSYMBOL_KW_DEFAULT = 68,                /* KW_DEFAULT  */
  YYSYMBOL_KW_DELETE = 69,                 /* KW_DELETE  */
  YYSYMBOL_KW_DOUBLE = 70,                 /* KW_DOUBLE  */
  YYSYMBOL_KW_DYNAMIC_CAST = 71,           /* KW_DYNAMIC_CAST  */
  YYSYMBOL_KW_ELSE = 72,                   /* KW_ELSE  */
  YYSYMBOL_KW_END_PUBLISH = 73,            /* KW_END_PUBLISH  */
  YYSYMBOL_KW_ENUM = 74,                   /* KW_ENUM  */
  YYSYMBOL_KW_EXTENSION = 75,              /* KW_EXTENSION  */
  YYSYMBOL_KW_EXTERN = 76,                 /* KW_EXTERN  */
  YYSYMBOL_KW_EXPLICIT = 77,               /* KW_EXPLICIT  */
  YYSYMBOL_KW_EXPLICIT_LPAREN = 78,        /* KW_EXPLICIT_LPAREN  */
  YYSYMBOL_KW_PUBLISHED = 79,              /* KW_PUBLISHED  */
  YYSYMBOL_KW_FALSE = 80,                  /* KW_FALSE  */
  YYSYMBOL_KW_FINAL = 81,                  /* KW_FINAL  */
  YYSYMBOL_KW_FLOAT = 82,                  /* KW_FLOAT  */
  YYSYMBOL_KW_FRIEND = 83,                 /* KW_FRIEND  */
  YYSYMBOL_KW_FOR = 84,                    /* KW_FOR  */
  YYSYMBOL_KW_GOTO = 85,                   /* KW_GOTO  */
  YYSYMBOL_KW_HAS_VIRTUAL_DESTRUCTOR = 86, /* KW_HAS_VIRTUAL_DESTRUCTOR  */
  YYSYMBOL_KW_IF = 87,                     /* KW_IF  */
  YYSYMBOL_KW_INLINE = 88,                 /* KW_INLINE  */
  YYSYMBOL_KW_INT = 89,                    /* KW_INT  */
  YYSYMBOL_KW_IS_ABSTRACT = 90,            /* KW_IS_ABSTRACT  */
  YYSYMBOL_KW_IS_BASE_OF = 91,             /* KW_IS_BASE_OF  */
  YYSYMBOL_KW_IS_CLASS = 92,               /* KW_IS_CLASS  */
  YYSYMBOL_KW_IS_CONSTRUCTIBLE = 93,       /* KW_IS_CONSTRUCTIBLE  */
  YYSYMBOL_KW_IS_CONVERTIBLE_TO = 94,      /* KW_IS_CONVERTIBLE_TO  */
  YYSYMBOL_KW_IS_DESTRUCTIBLE = 95,        /* KW_IS_DESTRUCTIBLE  */
  YYSYMBOL_KW_IS_EMPTY = 96,               /* KW_IS_EMPTY  */
  YYSYMBOL_KW_IS_ENUM = 97,                /* KW_IS_ENUM  */
  YYSYMBOL_KW_IS_FINAL = 98,               /* KW_IS_FINAL  */
  YYSYMBOL_KW_IS_FUNDAMENTAL = 99,         /* KW_IS_FUNDAMENTAL  */
  YYSYMBOL_KW_IS_POD = 100,                /* KW_IS_POD  */
  YYSYMBOL_KW_IS_POLYMORPHIC = 101,        /* KW_IS_POLYMORPHIC  */
  YYSYMBOL_KW_IS_STANDARD_LAYOUT = 102,    /* KW_IS_STANDARD_LAYOUT  */
  YYSYMBOL_KW_IS_TRIVIAL = 103,            /* KW_IS_TRIVIAL  */
  YYSYMBOL_KW_IS_TRIVIALLY_COPYABLE = 104, /* KW_IS_TRIVIALLY_COPYABLE  */
  YYSYMBOL_KW_IS_UNION = 105,              /* KW_IS_UNION  */
  YYSYMBOL_KW_LONG = 106,                  /* KW_LONG  */
  YYSYMBOL_KW_MAKE_MAP_KEYS_SEQ = 107,     /* KW_MAKE_MAP_KEYS_SEQ  */
  YYSYMBOL_KW_MAKE_MAP_PROPERTY = 108,     /* KW_MAKE_MAP_PROPERTY  */
  YYSYMBOL_KW_MAKE_PROPERTY = 109,         /* KW_MAKE_PROPERTY  */
  YYSYMBOL_KW_MAKE_PROPERTY2 = 110,        /* KW_MAKE_PROPERTY2  */
  YYSYMBOL_KW_MAKE_SEQ = 111,              /* KW_MAKE_SEQ  */
  YYSYMBOL_KW_MAKE_SEQ_PROPERTY = 112,     /* KW_MAKE_SEQ_PROPERTY  */
  YYSYMBOL_KW_MUTABLE = 113,               /* KW_MUTABLE  */
  YYSYMBOL_KW_NAMESPACE = 114,             /* KW_NAMESPACE  */
  YYSYMBOL_KW_NEW = 115,                   /* KW_NEW  */
  YYSYMBOL_KW_NOEXCEPT = 116,              /* KW_NOEXCEPT  */
  YYSYMBOL_KW_NOEXCEPT_LPAREN = 117,       /* KW_NOEXCEPT_LPAREN  */
  YYSYMBOL_KW_NULLPTR = 118,               /* KW_NULLPTR  */
  YYSYMBOL_KW_OPERATOR = 119,              /* KW_OPERATOR  */
  YYSYMBOL_KW_OVERRIDE = 120,              /* KW_OVERRIDE  */
  YYSYMBOL_KW_PRIVATE = 121,               /* KW_PRIVATE  */
  YYSYMBOL_KW_PROTECTED = 122,             /* KW_PROTECTED  */
  YYSYMBOL_KW_PUBLIC = 123,                /* KW_PUBLIC  */
  YYSYMBOL_KW_REGISTER = 124,              /* KW_REGISTER  */
  YYSYMBOL_KW_REINTERPRET_CAST = 125,      /* KW_REINTERPRET_CAST  */
  YYSYMBOL_KW_RETURN = 126,                /* KW_RETURN  */
  YYSYMBOL_KW_SHORT = 127,                 /* KW_SHORT  */
  YYSYMBOL_KW_SIGNED = 128,                /* KW_SIGNED  */
  YYSYMBOL_KW_SIZEOF = 129,                /* KW_SIZEOF  */
  YYSYMBOL_KW_STATIC = 130,                /* KW_STATIC  */
  YYSYMBOL_KW_STATIC_ASSERT = 131,         /* KW_STATIC_ASSERT  */
  YYSYMBOL_KW_STATIC_CAST = 132,           /* KW_STATIC_CAST  */
  YYSYMBOL_KW_STRUCT = 133,                /* KW_STRUCT  */
  YYSYMBOL_KW_TEMPLATE = 134,              /* KW_TEMPLATE  */
  YYSYMBOL_KW_THREAD_LOCAL = 135,          /* KW_THREAD_LOCAL  */
  YYSYMBOL_KW_THROW = 136,                 /* KW_THROW  */
  YYSYMBOL_KW_TRUE = 137,                  /* KW_TRUE  */
  YYSYMBOL_KW_TRY = 138,                   /* KW_TRY  */
  YYSYMBOL_KW_TYPEDEF = 139,               /* KW_TYPEDEF  */
  YYSYMBOL_KW_TYPEID = 140,                /* KW_TYPEID  */
  YYSYMBOL_KW_TYPENAME = 141,              /* KW_TYPENAME  */
  YYSYMBOL_KW_UNDERLYING_TYPE = 142,       /* KW_UNDERLYING_TYPE  */
  YYSYMBOL_KW_UNION = 143,                 /* KW_UNION  */
  YYSYMBOL_KW_UNSIGNED = 144,              /* KW_UNSIGNED  */
  YYSYMBOL_KW_USING = 145,                 /* KW_USING  */
  YYSYMBOL_KW_VIRTUAL = 146,               /* KW_VIRTUAL  */
  YYSYMBOL_KW_VOID = 147,                  /* KW_VOID  */
  YYSYMBOL_KW_VOLATILE = 148,              /* KW_VOLATILE  */
  YYSYMBOL_KW_WCHAR_T = 149,               /* KW_WCHAR_T  */
  YYSYMBOL_KW_WHILE = 150,                 /* KW_WHILE  */
  YYSYMBOL_START_CPP = 151,                /* START_CPP  */
  YYSYMBOL_START_CONST_EXPR = 152,         /* START_CONST_EXPR  */
  YYSYMBOL_START_TYPE = 153,               /* START_TYPE  */
  YYSYMBOL_154_ = 154,                     /* '{'  */
  YYSYMBOL_155_ = 155,                     /* ','  */
  YYSYMBOL_156_ = 156,                     /* ';'  */
  YYSYMBOL_157_ = 157,                     /* ':'  */
  YYSYMBOL_158_ = 158,                     /* '='  */
  YYSYMBOL_159_ = 159,                     /* '?'  */
  YYSYMBOL_160_ = 160,                     /* '|'  */
  YYSYMBOL_161_ = 161,                     /* '^'  */
  YYSYMBOL_162_ = 162,                     /* '&'  */
  YYSYMBOL_163_ = 163,                     /* '<'  */
  YYSYMBOL_164_ = 164,                     /* '>'  */
  YYSYMBOL_165_ = 165,                     /* '+'  */
  YYSYMBOL_166_ = 166,                     /* '-'  */
  YYSYMBOL_167_ = 167,                     /* '*'  */
  YYSYMBOL_168_ = 168,                     /* '/'  */
  YYSYMBOL_169_ = 169,                     /* '%'  */
  YYSYMBOL_170_ = 170,                     /* '~'  */
  YYSYMBOL_171_ = 171,                     /* '.'  */
  YYSYMBOL_172_ = 172,                     /* '('  */
  YYSYMBOL_173_ = 173,                     /* '['  */
  YYSYMBOL_174_ = 174,                     /* ')'  */
  YYSYMBOL_175_ = 175,                     /* '}'  */
  YYSYMBOL_176_ = 176,                     /* '!'  */
  YYSYMBOL_177_ = 177,                     /* ']'  */
  YYSYMBOL_YYACCEPT = 178,                 /* $accept  */
  YYSYMBOL_grammar = 179,                  /* grammar  */
  YYSYMBOL_cpp = 180,                      /* cpp  */
  YYSYMBOL_181_1 = 181,                    /* $@1  */
  YYSYMBOL_constructor_inits = 182,        /* constructor_inits  */
  YYSYMBOL_constructor_init = 183,         /* constructor_init  */
  YYSYMBOL_extern_c = 184,                 /* extern_c  */
  YYSYMBOL_185_2 = 185,                    /* $@2  */
  YYSYMBOL_declaration = 186,              /* declaration  */
  YYSYMBOL_friend_declaration = 187,       /* friend_declaration  */
  YYSYMBOL_188_3 = 188,                    /* $@3  */
  YYSYMBOL_storage_class = 189,            /* storage_class  */
  YYSYMBOL_optional_attributes = 190,      /* optional_attributes  */
  YYSYMBOL_attribute_specifiers = 191,     /* attribute_specifiers  */
  YYSYMBOL_attribute_specifier = 192,      /* attribute_specifier  */
  YYSYMBOL_type_like_declaration = 193,    /* type_like_declaration  */
  YYSYMBOL_194_4 = 194,                    /* $@4  */
  YYSYMBOL_195_5 = 195,                    /* $@5  */
  YYSYMBOL_multiple_instance_identifiers = 196, /* multiple_instance_identifiers  */
  YYSYMBOL_typedef_declaration = 197,      /* typedef_declaration  */
  YYSYMBOL_198_6 = 198,                    /* $@6  */
  YYSYMBOL_typedef_instance_identifiers = 199, /* typedef_instance_identifiers  */
  YYSYMBOL_constructor_prototype = 200,    /* constructor_prototype  */
  YYSYMBOL_201_7 = 201,                    /* $@7  */
  YYSYMBOL_202_8 = 202,                    /* $@8  */
  YYSYMBOL_203_9 = 203,                    /* $@9  */
  YYSYMBOL_function_prototype = 204,       /* function_prototype  */
  YYSYMBOL_205_10 = 205,                   /* $@10  */
  YYSYMBOL_206_11 = 206,                   /* $@11  */
  YYSYMBOL_207_12 = 207,                   /* $@12  */
  YYSYMBOL_208_13 = 208,                   /* $@13  */
  YYSYMBOL_209_14 = 209,                   /* $@14  */
  YYSYMBOL_function_post = 210,            /* function_post  */
  YYSYMBOL_function_operator = 211,        /* function_operator  */
  YYSYMBOL_more_template_declaration = 212, /* more_template_declaration  */
  YYSYMBOL_template_declaration = 213,     /* template_declaration  */
  YYSYMBOL_214_15 = 214,                   /* $@15  */
  YYSYMBOL_template_formal_parameters = 215, /* template_formal_parameters  */
  YYSYMBOL_template_nonempty_formal_parameters = 216, /* template_nonempty_formal_parameters  */
  YYSYMBOL_typename_keyword = 217,         /* typename_keyword  */
  YYSYMBOL_template_formal_parameter = 218, /* template_formal_parameter  */
  YYSYMBOL_template_formal_parameter_type = 219, /* template_formal_parameter_type  */
  YYSYMBOL_instance_identifier = 220,      /* instance_identifier  */
  YYSYMBOL_221_16 = 221,                   /* $@16  */
  YYSYMBOL_instance_identifier_and_maybe_trailing_return_type = 222, /* instance_identifier_and_maybe_trailing_return_type  */
  YYSYMBOL_maybe_trailing_return_type = 223, /* maybe_trailing_return_type  */
  YYSYMBOL_maybe_comma_identifier = 224,   /* maybe_comma_identifier  */
  YYSYMBOL_function_parameter_list = 225,  /* function_parameter_list  */
  YYSYMBOL_function_parameters = 226,      /* function_parameters  */
  YYSYMBOL_formal_parameter_list = 227,    /* formal_parameter_list  */
  YYSYMBOL_formal_parameters = 228,        /* formal_parameters  */
  YYSYMBOL_template_parameter_maybe_initialize = 229, /* template_parameter_maybe_initialize  */
  YYSYMBOL_maybe_initialize = 230,         /* maybe_initialize  */
  YYSYMBOL_maybe_initialize_or_constructor_body = 231, /* maybe_initialize_or_constructor_body  */
  YYSYMBOL_maybe_initialize_or_function_body = 232, /* maybe_initialize_or_function_body  */
  YYSYMBOL_structure_init = 233,           /* structure_init  */
  YYSYMBOL_structure_init_body = 234,      /* structure_init_body  */
  YYSYMBOL_function_parameter = 235,       /* function_parameter  */
  YYSYMBOL_formal_parameter = 236,         /* formal_parameter  */
  YYSYMBOL_not_paren_formal_parameter_identifier = 237, /* not_paren_formal_parameter_identifier  */
  YYSYMBOL_formal_parameter_identifier = 238, /* formal_parameter_identifier  */
  YYSYMBOL_parameter_pack_identifier = 239, /* parameter_pack_identifier  */
  YYSYMBOL_not_paren_empty_instance_identifier = 240, /* not_paren_empty_instance_identifier  */
  YYSYMBOL_empty_instance_identifier = 241, /* empty_instance_identifier  */
  YYSYMBOL_type = 242,                     /* type  */
  YYSYMBOL_type_pack = 243,                /* type_pack  */
  YYSYMBOL_type_decl = 244,                /* type_decl  */
  YYSYMBOL_predefined_type = 245,          /* predefined_type  */
  YYSYMBOL_var_type_decl = 246,            /* var_type_decl  */
  YYSYMBOL_full_type = 247,                /* full_type  */
  YYSYMBOL_anonymous_struct = 248,         /* anonymous_struct  */
  YYSYMBOL_249_17 = 249,                   /* $@17  */
  YYSYMBOL_named_struct = 250,             /* named_struct  */
  YYSYMBOL_251_18 = 251,                   /* $@18  */
  YYSYMBOL_maybe_final = 252,              /* maybe_final  */
  YYSYMBOL_maybe_class_derivation = 253,   /* maybe_class_derivation  */
  YYSYMBOL_class_derivation = 254,         /* class_derivation  */
  YYSYMBOL_base_specification = 255,       /* base_specification  */
  YYSYMBOL_enum = 256,                     /* enum  */
  YYSYMBOL_257_19 = 257,                   /* $@19  */
  YYSYMBOL_enum_decl = 258,                /* enum_decl  */
  YYSYMBOL_enum_element_type = 259,        /* enum_element_type  */
  YYSYMBOL_enum_body_trailing_comma = 260, /* enum_body_trailing_comma  */
  YYSYMBOL_enum_body = 261,                /* enum_body  */
  YYSYMBOL_enum_keyword = 262,             /* enum_keyword  */
  YYSYMBOL_struct_keyword = 263,           /* struct_keyword  */
  YYSYMBOL_namespace_declaration = 264,    /* namespace_declaration  */
  YYSYMBOL_265_20 = 265,                   /* $@20  */
  YYSYMBOL_266_21 = 266,                   /* $@21  */
  YYSYMBOL_using_declaration = 267,        /* using_declaration  */
  YYSYMBOL_simple_type = 268,              /* simple_type  */
  YYSYMBOL_simple_int_type = 269,          /* simple_int_type  */
  YYSYMBOL_simple_float_type = 270,        /* simple_float_type  */
  YYSYMBOL_simple_void_type = 271,         /* simple_void_type  */
  YYSYMBOL_code = 272,                     /* code  */
  YYSYMBOL_273_22 = 273,                   /* $@22  */
  YYSYMBOL_code_block = 274,               /* code_block  */
  YYSYMBOL_element = 275,                  /* element  */
  YYSYMBOL_optional_const_expr = 276,      /* optional_const_expr  */
  YYSYMBOL_optional_const_expr_comma = 277, /* optional_const_expr_comma  */
  YYSYMBOL_const_expr_comma = 278,         /* const_expr_comma  */
  YYSYMBOL_no_angle_bracket_const_expr = 279, /* no_angle_bracket_const_expr  */
  YYSYMBOL_const_expr = 280,               /* const_expr  */
  YYSYMBOL_const_operand = 281,            /* const_operand  */
  YYSYMBOL_formal_const_expr = 282,        /* formal_const_expr  */
  YYSYMBOL_formal_const_operand = 283,     /* formal_const_operand  */
  YYSYMBOL_capture_list = 284,             /* capture_list  */
  YYSYMBOL_capture = 285,                  /* capture  */
  YYSYMBOL_class_derivation_name = 286,    /* class_derivation_name  */
  YYSYMBOL_name = 287,                     /* name  */
  YYSYMBOL_name_no_final = 288,            /* name_no_final  */
  YYSYMBOL_string_literal = 289,           /* string_literal  */
  YYSYMBOL_empty = 290                     /* empty  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  108
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   7071

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  178
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  113
/* YYNRULES -- Number of rules.  */
#define YYNRULES  782
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1671

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   408


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   176,     2,     2,     2,   169,   162,     2,
     172,   174,   167,   165,   155,   166,   171,   168,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   157,   156,
     163,   158,   164,   159,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   173,     2,   177,   161,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   154,   160,   175,   170,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   464,   464,   465,   469,   476,   477,   484,   483,   494,
     495,   499,   503,   507,   520,   519,   531,   532,   533,   534,
     535,   536,   537,   550,   559,   563,   571,   575,   579,   600,
     627,   648,   677,   713,   756,   768,   789,   825,   859,   881,
     917,   939,   950,   964,   963,   978,   982,   987,   991,  1002,
    1006,  1010,  1014,  1018,  1027,  1031,  1035,  1039,  1043,  1047,
    1051,  1055,  1059,  1066,  1070,  1075,  1083,  1088,  1096,  1100,
    1108,  1113,  1122,  1121,  1137,  1147,  1146,  1163,  1171,  1179,
    1191,  1208,  1207,  1222,  1237,  1247,  1263,  1262,  1305,  1304,
    1333,  1332,  1370,  1369,  1401,  1400,  1420,  1419,  1441,  1440,
    1473,  1472,  1499,  1512,  1516,  1520,  1524,  1528,  1537,  1541,
    1545,  1549,  1553,  1558,  1563,  1567,  1571,  1578,  1582,  1586,
    1590,  1594,  1598,  1602,  1606,  1610,  1614,  1618,  1622,  1626,
    1630,  1634,  1638,  1642,  1646,  1650,  1654,  1658,  1662,  1666,
    1670,  1674,  1678,  1682,  1686,  1690,  1694,  1698,  1702,  1706,
    1710,  1714,  1718,  1722,  1726,  1730,  1734,  1741,  1742,  1743,
    1747,  1749,  1748,  1756,  1757,  1761,  1762,  1766,  1772,  1781,
    1782,  1786,  1790,  1794,  1798,  1804,  1810,  1816,  1823,  1828,
    1837,  1841,  1846,  1854,  1866,  1870,  1884,  1899,  1904,  1909,
    1914,  1919,  1924,  1929,  1934,  1940,  1939,  1970,  1980,  1990,
    1994,  1998,  2007,  2011,  2019,  2023,  2028,  2032,  2037,  2045,
    2050,  2058,  2062,  2067,  2071,  2076,  2084,  2089,  2097,  2101,
    2108,  2112,  2119,  2123,  2127,  2131,  2135,  2142,  2146,  2150,
    2154,  2158,  2162,  2169,  2170,  2171,  2175,  2178,  2179,  2180,
    2184,  2190,  2197,  2204,  2210,  2217,  2224,  2236,  2240,  2250,
    2254,  2258,  2263,  2268,  2273,  2278,  2283,  2288,  2296,  2300,
    2304,  2309,  2314,  2319,  2324,  2329,  2334,  2339,  2345,  2353,
    2358,  2363,  2368,  2373,  2378,  2383,  2388,  2393,  2398,  2404,
    2412,  2416,  2421,  2426,  2431,  2436,  2441,  2446,  2451,  2456,
    2464,  2468,  2473,  2478,  2483,  2488,  2493,  2498,  2503,  2508,
    2513,  2519,  2526,  2533,  2543,  2547,  2555,  2559,  2563,  2567,
    2571,  2587,  2603,  2612,  2616,  2626,  2633,  2644,  2648,  2656,
    2660,  2664,  2668,  2672,  2688,  2704,  2722,  2731,  2735,  2745,
    2752,  2756,  2764,  2768,  2784,  2800,  2809,  2819,  2826,  2830,
    2838,  2842,  2847,  2851,  2860,  2859,  2884,  2883,  2913,  2914,
    2921,  2922,  2926,  2927,  2931,  2935,  2939,  2943,  2947,  2951,
    2955,  2959,  2963,  2967,  2975,  2974,  2991,  2995,  2999,  3004,
    3012,  3016,  3023,  3024,  3029,  3036,  3037,  3042,  3050,  3054,
    3058,  3065,  3069,  3073,  3081,  3080,  3103,  3102,  3125,  3126,
    3130,  3136,  3143,  3149,  3158,  3159,  3160,  3164,  3168,  3172,
    3176,  3180,  3184,  3188,  3193,  3198,  3203,  3208,  3212,  3217,
    3226,  3231,  3239,  3243,  3247,  3255,  3265,  3265,  3275,  3276,
    3280,  3281,  3282,  3283,  3284,  3285,  3286,  3287,  3288,  3289,
    3290,  3291,  3291,  3291,  3292,  3292,  3292,  3292,  3292,  3293,
    3293,  3293,  3293,  3293,  3294,  3294,  3294,  3295,  3295,  3295,
    3295,  3295,  3296,  3296,  3296,  3296,  3296,  3297,  3297,  3298,
    3298,  3298,  3298,  3298,  3299,  3299,  3299,  3299,  3299,  3300,
    3300,  3300,  3300,  3300,  3301,  3301,  3301,  3301,  3301,  3302,
    3302,  3302,  3302,  3302,  3303,  3303,  3303,  3303,  3303,  3304,
    3304,  3304,  3304,  3304,  3304,  3305,  3305,  3305,  3305,  3305,
    3306,  3306,  3306,  3306,  3307,  3307,  3307,  3307,  3308,  3308,
    3308,  3308,  3308,  3309,  3309,  3309,  3309,  3310,  3310,  3310,
    3310,  3310,  3311,  3311,  3311,  3311,  3312,  3312,  3312,  3312,
    3312,  3313,  3313,  3316,  3316,  3316,  3316,  3316,  3316,  3316,
    3316,  3316,  3316,  3316,  3317,  3317,  3317,  3317,  3317,  3317,
    3317,  3317,  3317,  3317,  3318,  3318,  3322,  3326,  3333,  3337,
    3344,  3348,  3355,  3359,  3363,  3367,  3371,  3375,  3379,  3383,
    3387,  3391,  3395,  3399,  3403,  3407,  3411,  3415,  3419,  3423,
    3427,  3431,  3435,  3439,  3443,  3447,  3451,  3455,  3459,  3463,
    3467,  3471,  3475,  3479,  3483,  3487,  3491,  3495,  3499,  3503,
    3507,  3511,  3519,  3523,  3527,  3531,  3535,  3539,  3543,  3553,
    3563,  3569,  3575,  3581,  3587,  3593,  3599,  3605,  3612,  3619,
    3626,  3633,  3639,  3645,  3649,  3653,  3657,  3661,  3665,  3669,
    3680,  3691,  3695,  3699,  3703,  3707,  3711,  3715,  3719,  3723,
    3727,  3731,  3735,  3739,  3743,  3747,  3751,  3755,  3759,  3763,
    3767,  3771,  3775,  3779,  3783,  3787,  3791,  3795,  3799,  3803,
    3807,  3811,  3815,  3819,  3826,  3830,  3834,  3838,  3842,  3846,
    3850,  3854,  3858,  3864,  3870,  3874,  3881,  3889,  3893,  3897,
    3901,  3905,  3909,  3913,  3917,  3921,  3925,  3929,  3933,  3937,
    3941,  3945,  3949,  3953,  3957,  3971,  3975,  3979,  3983,  3987,
    3991,  3995,  3999,  4003,  4007,  4011,  4015,  4019,  4030,  4041,
    4045,  4049,  4053,  4057,  4061,  4065,  4069,  4073,  4077,  4081,
    4085,  4089,  4093,  4097,  4101,  4105,  4109,  4113,  4117,  4121,
    4125,  4129,  4133,  4137,  4141,  4145,  4149,  4153,  4157,  4161,
    4168,  4172,  4176,  4180,  4184,  4188,  4192,  4196,  4200,  4206,
    4212,  4220,  4224,  4228,  4232,  4239,  4249,  4255,  4261,  4271,
    4283,  4291,  4295,  4325,  4329,  4333,  4337,  4341,  4345,  4351,
    4355,  4359,  4363,  4367,  4378,  4382,  4386,  4390,  4398,  4402,
    4406,  4412,  4423
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "REAL", "INTEGER",
  "CHAR_TOK", "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL",
  "CUSTOM_LITERAL", "IDENTIFIER", "TYPENAME_IDENTIFIER",
  "TYPEPACK_IDENTIFIER", "SCOPING", "TYPEDEFNAME", "ELLIPSIS", "OROR",
  "ANDAND", "EQCOMPARE", "NECOMPARE", "LECOMPARE", "GECOMPARE",
  "SPACESHIP", "LSHIFT", "RSHIFT", "POINTSAT_STAR", "DOT_STAR", "UNARY",
  "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS", "UNARY_PLUS", "UNARY_STAR",
  "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS", "TIMESEQUAL",
  "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL", "OREQUAL",
  "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL", "ATTR_LEFT",
  "ATTR_RIGHT", "KW_ALIGNAS", "KW_ALIGNOF", "KW_AUTO", "KW_BEGIN_PUBLISH",
  "KW_BLOCKING", "KW_BOOL", "KW_CATCH", "KW_CHAR", "KW_CHAR8_T",
  "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS", "KW_CONST", "KW_CONSTEVAL",
  "KW_CONSTEXPR", "KW_CONSTINIT", "KW_CONST_CAST", "KW_DECLTYPE",
  "KW_DEFAULT", "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE",
  "KW_END_PUBLISH", "KW_ENUM", "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT",
  "KW_EXPLICIT_LPAREN", "KW_PUBLISHED", "KW_FALSE", "KW_FINAL", "KW_FLOAT",
  "KW_FRIEND", "KW_FOR", "KW_GOTO", "KW_HAS_VIRTUAL_DESTRUCTOR", "KW_IF",
  "KW_INLINE", "KW_INT", "KW_IS_ABSTRACT", "KW_IS_BASE_OF", "KW_IS_CLASS",
  "KW_IS_CONSTRUCTIBLE", "KW_IS_CONVERTIBLE_TO", "KW_IS_DESTRUCTIBLE",
  "KW_IS_EMPTY", "KW_IS_ENUM", "KW_IS_FINAL", "KW_IS_FUNDAMENTAL",
  "KW_IS_POD", "KW_IS_POLYMORPHIC", "KW_IS_STANDARD_LAYOUT",
  "KW_IS_TRIVIAL", "KW_IS_TRIVIALLY_COPYABLE", "KW_IS_UNION", "KW_LONG",
  "KW_MAKE_MAP_KEYS_SEQ", "KW_MAKE_MAP_PROPERTY", "KW_MAKE_PROPERTY",
  "KW_MAKE_PROPERTY2", "KW_MAKE_SEQ", "KW_MAKE_SEQ_PROPERTY", "KW_MUTABLE",
  "KW_NAMESPACE", "KW_NEW", "KW_NOEXCEPT", "KW_NOEXCEPT_LPAREN",
  "KW_NULLPTR", "KW_OPERATOR", "KW_OVERRIDE", "KW_PRIVATE", "KW_PROTECTED",
  "KW_PUBLIC", "KW_REGISTER", "KW_REINTERPRET_CAST", "KW_RETURN",
  "KW_SHORT", "KW_SIGNED", "KW_SIZEOF", "KW_STATIC", "KW_STATIC_ASSERT",
  "KW_STATIC_CAST", "KW_STRUCT", "KW_TEMPLATE", "KW_THREAD_LOCAL",
  "KW_THROW", "KW_TRUE", "KW_TRY", "KW_TYPEDEF", "KW_TYPEID",
  "KW_TYPENAME", "KW_UNDERLYING_TYPE", "KW_UNION", "KW_UNSIGNED",
  "KW_USING", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WCHAR_T",
  "KW_WHILE", "START_CPP", "START_CONST_EXPR", "START_TYPE", "'{'", "','",
  "';'", "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'",
  "'!'", "']'", "$accept", "grammar", "cpp", "$@1", "constructor_inits",
  "constructor_init", "extern_c", "$@2", "declaration",
  "friend_declaration", "$@3", "storage_class", "optional_attributes",
  "attribute_specifiers", "attribute_specifier", "type_like_declaration",
  "$@4", "$@5", "multiple_instance_identifiers", "typedef_declaration",
  "$@6", "typedef_instance_identifiers", "constructor_prototype", "$@7",
  "$@8", "$@9", "function_prototype", "$@10", "$@11", "$@12", "$@13",
  "$@14", "function_post", "function_operator",
  "more_template_declaration", "template_declaration", "$@15",
  "template_formal_parameters", "template_nonempty_formal_parameters",
  "typename_keyword", "template_formal_parameter",
  "template_formal_parameter_type", "instance_identifier", "$@16",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "maybe_comma_identifier",
  "function_parameter_list", "function_parameters",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "parameter_pack_identifier", "not_paren_empty_instance_identifier",
  "empty_instance_identifier", "type", "type_pack", "type_decl",
  "predefined_type", "var_type_decl", "full_type", "anonymous_struct",
  "$@17", "named_struct", "$@18", "maybe_final", "maybe_class_derivation",
  "class_derivation", "base_specification", "enum", "$@19", "enum_decl",
  "enum_element_type", "enum_body_trailing_comma", "enum_body",
  "enum_keyword", "struct_keyword", "namespace_declaration", "$@20",
  "$@21", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@22", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-1070)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-778)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     383, -1070,  4549,  6313,    82,    61, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070,   -76,   -68,   -58,   -52,   -36,    11,
      32,    76,    80,    85, -1070, -1070,    96,   100,   104,   108,
     126,   137,   148,   159,   165,   168,   171,   179,   182,   194,
     205,   215,   230,   255,   264,   268,  6577,  4549, -1070, -1070,
     303,   279,   302,  3413,   318, -1070,   325,   337,   339,  4549,
    4549,  4549,  4549,  4549,  2336,  1461,  4549,  4426, -1070,   319,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,  6432,
     341, -1070,     7, -1070, -1070,  6922,  6200,  6200, -1070,  1698,
     346, -1070,  6200, -1070, -1070,   180,   180, -1070, -1070, -1070,
   -1070, -1070,   446,   446, -1070, -1070, -1070, -1070, -1070,  2236,
     354,   -67, -1070,  4549,  4549,  6313,  4549,  4549,  4549,  4549,
    4549,  6313,  4549,  6313,  4549,  6313,  4549,  6313,  6313,  6313,
    6313,  6313,  6313,  6313,  6313,  6313,  6313,  6313,  6313,  6313,
    6313,  6313,  6313,  4549, -1070, -1070,   365,  1698,   368,   370,
     446,   446, -1070,  5314,  6313,  4549,  4549,   378,  2336,    63,
    6313,  2336,  4549,  4549,    63,    63,    63,    63,    63,   -76,
     -58,   -52,   -36,    11,    32,    80,    96,   104,  2791,  3893,
    5236,  5873,   339,    89,   -90,  4426, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,  1698,  1698,
     -74,   235, -1070, -1070,    63,  4549,  4549,  4549,  4549,  4549,
    4549,  4549,  4549,  4549,  4549,  4549,  4549,  4549,  4549,  4549,
    4549,  4549,  4549,  4549,  4549,  4549,  1698,  3555,  4549, -1070,
   -1070,   180,   180,  3697, -1070, -1070, -1070,  6200, -1070, -1070,
   -1070, -1070,  6313, -1070,   393,   772,   446,   180,   180,   446,
     446,   223,   398, -1070,   407, -1070,   427,    27,  1243,  1698,
     544,   440,   426,  3124, -1070,  6781,   430,   451, -1070,   434,
     435,   436,   439,   441,   445,   447,   437,   449,   450,   453,
     457,   458,   463,   470,   464,   -72,   471,   465,   467,   468,
     473,   476,   483,   484,   485,   492,   493,   495,   498,  4549,
   -1070,  6313,  4549,  1698,  1698, -1070,   480,   502,   503,  1698,
     504,   515,   507,  5335,   508,   510,  4549,  4549, -1070,   634,
   -1070,  1631,   516,  4549, -1070, -1070,  1957,  4686,  4990,  4990,
    1977,  1977,  1054,   853,   853, -1070,  5629,  5804,  5821,  5883,
    1977,  1977,   277,   277,    63,    63,    63, -1070, -1070,   -50,
    2563, -1070, -1070,   513,  5354,   517,   446,   446,   151,   398,
   -1070,   398, -1070,   151,   151, -1070,   446,   446,   446,  6214,
     520,    33, -1070,   522,  4549, -1070, -1070, -1070, -1070, -1070,
    2052,   541,    -9,    -8,    -4,    20, -1070, -1070, -1070,   542,
     446,  1698,  1329,   -76, -1070,   534,  1698,   538,   543, -1070,
   -1070, -1070,   446,   446, -1070,  5373, -1070,  6890,  6890,  6890,
    6890,  6890, -1070,  6890,  2485,  6890,  4549,   559, -1070,  6886,
     546,   547,   551,   553,   555,   556,  6890,    83,   576,   578,
     579,  6890,  6890,   557,  6703,  6890,  6890,  6701,  6890,  6890,
   -1070, -1070, -1070,  2773, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070,   565, -1070,   567,
   -1070, -1070, -1070, -1070,  6313, -1070,  6313, -1070,  6313, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070,  5413,   568,   569, -1070, -1070,   573, -1070, -1070,   574,
    4691,   575, -1070, -1070, -1070, -1070,    63,  4426, -1070,  1698,
     235,    43,  6053, -1070,  4426,  4549, -1070, -1070, -1070, -1070,
   -1070,   151,   580,   584,  1698,   446,   151,   151,   446,   446,
     581, -1070,   581,   581,   151,   151,   151,  6339,   446,   795,
     355, -1070, -1070,    84,   564,  4426, -1070,  1698,   577, -1070,
   -1070, -1070, -1070,  2052, -1070,   674,  1698, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070,   585,   593,   595, -1070, -1070,
    6577, -1070, -1070,   597,  2161,   601, -1070,   594,  4549,  4549,
    4549,  4549,  2336,  4549,   591,    56, -1070, -1070,  4710, -1070,
     319,   598,  3839, -1070,  6313,   446,  2436,  1243,   446,  6074,
    6890, -1070, -1070, -1070, -1070, -1070, -1070,  6890, -1070, -1070,
   -1070,  5432, -1070,  6781,  1796, -1070,  1698,  1698,  1698,  1698,
    1698,  1698, -1070, -1070,  1698, -1070, -1070, -1070, -1070, -1070,
    4549, -1070,  5059, -1070,   605, -1070,  5180, -1070,  1698,  1698,
      58, -1070, -1070,   307,   602,  6458, -1070,  1698, -1070,   213,
     617, -1070,  4549,  4549,   603,   604,   607, -1070, -1070, -1070,
    4549, -1070,  4549, -1070,   611, -1070, -1070, -1070, -1070, -1070,
   -1070,  4549, -1070,   614, -1070, -1070,   741,  4426,   581,   446,
     446,   151,   581,   581,   151,   151,  4549,   -15,   246,   283,
    6432,   795,   355, -1070,   620,   446,   795,   795,   446,   446,
     795,   -83,   446, -1070,   621,  1698,   446,   355,   355,   446,
     446,   355,     9,  6053, -1070, -1070,   446,   446, -1070,   635,
       3, -1070,   633, -1070,   742,  6313,  6313,  6313,   626,  6313,
     628,  2336,    88,  6313,  2336,    63,    63,    63,    63,   627,
     -48,    63, -1070, -1070,  1877,  4549,  4549,  4549,  4549,  4549,
    4549,  4549,  4549,  4549,  4549,  4549,  4549,  4549,  4549,  4549,
    4549,  4549,  4549,  4549,  4549,  4549,  1698,  3981,  4549,   629,
    5532,   630, -1070, -1070,   645, -1070, -1070, -1070,  6890, -1070,
   -1070,   655,   656,   659,   660,   662,   664,   665,    50,   667,
    5254,  6121,   399,   650,   213, -1070, -1070,   668,   670, -1070,
     671, -1070,    49,  6670,   216, -1070,   663,   391, -1070, -1070,
    3271, -1070, -1070,   651,   -11,    -3, -1070, -1070, -1070,     5,
     150, -1070,  5591,   572,  6551,   683, -1070,   151, -1070,   581,
     581,   581,   661,   669,   672,   673,   795,   355,   -83,     9,
     446,   795,   666,   666,   795,   795,   317,  4549, -1070, -1070,
     446,   446,   355,   678,   678,   355,   355,   328,  4549, -1070,
     741,   679,   161, -1070,  2448,   688,   691, -1070,   446,   681,
     692,   694,  4549,   695,  1698,   686,   698,   689,  5610,  4549,
   -1070, -1070, -1070,  1957,  4686,  4990,  4990,  1977,  1977,  1054,
     853,   853, -1070,  5648,  5804,  5821,  5883,  1977,  1977,   277,
     277,    63,    63,    63, -1070, -1070,   206,  3143, -1070, -1070,
   -1070,  2052, -1070,    87, -1070,   833,   854,   855,   856,   857,
     862, -1070, -1070,   397,   718, -1070, -1070, -1070, -1070,  6174,
   -1070,   717,   736,  5128, -1070,   997, -1070, -1070,    54, -1070,
     651, -1070, -1070,  6313,    43,   722,   731,   651,    43,   216,
     732,   446,   216,   216,   446,   446,    51,   446, -1070,    91,
   -1070, -1070, -1070,  1698,   101, -1070,   728, -1070,   748,   749,
    4123,  3716,   745,   446,   651,  5058,   651,   446,   446,   651,
   -1070,   176,   400,   446, -1070, -1070, -1070, -1070,  6053, -1070,
   -1070,    25,  6577,   180, -1070,   581,   446,    43,    43,    43,
     -83,     9, -1070, -1070,   795,   666,   666,   666,   744,   740,
     355, -1070,   678,   678,   678,   750,   746, -1070, -1070,  4549,
    2803,  6664,  6679,  1698,   452, -1070, -1070,   906, -1070,  2448,
   -1070, -1070,   753,   754,   755,   756,   757,  4691,   758, -1070,
   -1070,    63,  4549, -1070, -1070,   635, -1070, -1070,   777,   220,
     779,   780,   781,   785, -1070,    48, -1070,   997,  6859,  6121,
    1698,   769,   783,   446,   997,   997,   446,   446,   997,    17,
     678, -1070,   400,   788,   773,   774,   651,   404,   778,   348,
     446,   216,   775,   775,   216,   216, -1070,  4549, -1070, -1070,
      43,   776,   409, -1070,   -62,   797,   798, -1070,  2949, -1070,
   -1070, -1070,  4123,   786,   800,  4426, -1070, -1070,   446,   651,
     395,   948, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,   790,
     789, -1070,   446,   395,   651,   651,   413,  4549, -1070,  4549,
   -1070,  3271,   814, -1070, -1070,   741,   799, -1070,   180, -1070,
     802, -1070,   806,   807,   809, -1070, -1070,   666,    43,   446,
     678,    43,   446,  4142,  2809, -1070,  2809, -1070,  2809, -1070,
   -1070,  2809,  2809,  2809, -1070,   217, -1070,  4549,  4549, -1070,
    4549, -1070,  4549,  4426,   284,   962,   964,   828,   975,   817,
   -1070,   982,   986,   988,   305,   843,    17,   678, -1070, -1070,
   -1070, -1070, -1070, -1070,  6313,   446,   997,   997,   997,  4833,
   -1070, -1070,   845, -1070, -1070, -1070, -1070,   418,   830, -1070,
   -1070,   216,   775,   775,   775,    43,   826,   832, -1070, -1070,
    1698,  4549,  4549, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,
   -1070, -1070,   840, -1070,  4265,   651,   395,   446, -1070, -1070,
   -1070,   395,   395, -1070,  4426,  1329,   846,  3716,   651,   874,
   -1070, -1070, -1070, -1070, -1070, -1070,   858, -1070,   859, -1070,
   -1070, -1070, -1070, -1070, -1070, -1070, -1070, -1070,   221,   224,
     226,   227, -1070,   860,   242, -1070,   875,   873,   249,   861,
     273, -1070, -1070, -1070, -1070,   997,   865,   868,   877,   878,
    1932,   879,  4833,  4833,  4833,  4833,  4833,  2336,  4833,  5710,
   -1070,   651,  6053,    43,   866, -1070,  6053,    43,   775,   870,
     446, -1070,   876, -1070,   881,   871,  2632, -1070,  4123,  4426,
     395, -1070,   886,   446, -1070, -1070,  6053,  6053,  6053, -1070,
   -1070, -1070, -1070, -1070, -1070,   892,  1039,   894,  1042, -1070,
    1052,   910,   911,  1058,   913,  6313,  6313,  6313,  6313,   899,
    2336,   131,  6313,   131,   131,   131,   131,   131,   901,   286,
     131,  4833,  4833,  4833,  4833,  4833,  4833,  4833,  4833,  4833,
    4833,  4833,  4833,  4833,  4833,  4833,  4833,  4833,  4833,  4833,
    1698,  4407,  4549, -1070, -1070,   908, -1070,    43, -1070,   915,
   -1070, -1070,  6053, -1070, -1070,  1065, -1070,   909, -1070, -1070,
     917,   741,   741,   741,  6053,  6053, -1070,   935, -1070,   919,
     939, -1070, -1070,   288, -1070,   924,   940,   944,   945,  1698,
     936,   947,  4833, -1070,  1180,  5866,  5975,  5975,  2202,  2202,
    1127,   934,   934, -1070,  5691,  5900,  5917,  5926,   536,   536,
     131,   131,   131, -1070, -1070,   297,  3432, -1070,    43,   942,
   -1070,   535, -1070, -1070, -1070,  6053, -1070, -1070, -1070, -1070,
   -1070, -1070,  1103,   946,   958,  1108,  1111,   966, -1070,   951,
     952,   953,   956,  4936,   954,   131,  4833, -1070, -1070,  6053,
     959, -1070,   535, -1070, -1070,   971, -1070,   960,   298, -1070,
    4549,  4549,  4549, -1070,  4549,  5710, -1070, -1070,  6053, -1070,
     979,  1126,   981,   299,   314,   331,   332,  6053,   741, -1070,
     965, -1070, -1070, -1070, -1070, -1070,   741, -1070,   985, -1070,
   -1070
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       0,   782,     0,     0,     0,   782,     5,   668,   664,   667,
     778,   779,   670,   671,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   666,   672,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   674,   673,
       0,     0,     0,     0,     0,   665,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   782,     0,     3,   602,   669,
     305,   316,   315,   397,   398,   400,   401,   402,   381,     0,
       0,   413,   378,   412,   407,   404,   403,   406,   382,     0,
       0,   383,   405,   415,   399,   782,   782,     4,   307,   308,
     309,   364,   782,   782,   304,   394,   395,   396,     1,     0,
       0,     7,    63,   782,   782,     0,   782,   782,   782,   782,
     782,     0,   782,     0,   782,     0,   782,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   782,   331,   337,     0,     0,     0,   627,
     782,   782,   330,     0,     0,   782,   782,     0,     0,   624,
       0,     0,   782,   782,   636,   634,   633,   635,   632,   305,
     397,   398,   400,   401,   402,   413,   412,   407,   404,   403,
     406,   405,   399,     0,     0,   560,   763,   764,   765,   773,
     766,   769,   767,   771,   770,   768,   772,   752,   753,     0,
       0,   782,   758,   751,   631,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   780,
     781,   782,   782,     0,   379,   380,   414,   404,   409,   408,
     411,   306,     0,   410,     0,   291,   782,   782,   782,   782,
     782,   782,     0,   340,   290,   342,     0,   367,     0,     0,
       0,    68,    70,     0,     6,   782,     0,   559,   558,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     332,     0,   782,     0,     0,   660,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   663,   756,
     759,     0,   782,     0,   754,   220,   645,   646,   647,   648,
     649,   650,   651,   654,   655,   662,     0,   642,   643,   644,
     652,   653,   640,   641,   637,   638,   639,   661,   659,     0,
       0,   341,   343,     0,     0,     0,   782,   782,   782,     0,
     293,     0,   294,   782,   782,   205,   782,   782,   782,     0,
       0,   206,   209,    63,   782,   782,   774,   775,   776,   777,
       0,   369,   763,   764,   765,   767,   344,   310,   346,     0,
     782,     0,   782,   318,   329,     0,     0,     0,     0,   320,
     321,   322,   782,   782,   317,     0,    22,   782,   782,   782,
     782,   782,    23,   782,   782,   782,     0,     0,    43,   782,
       0,     0,     0,     0,     0,     0,   782,   782,     0,     0,
       0,   782,   782,     0,   782,   782,   782,     0,   782,   782,
      18,     8,    20,     0,    16,    17,    19,    78,    45,   609,
     608,   626,   616,   611,   613,   614,   615,     0,   622,     0,
     621,   677,   610,   678,     0,   680,     0,   681,     0,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     618,     0,     0,     0,   334,   333,     0,   617,   620,     0,
     623,     0,   629,   630,   619,   612,   603,   561,   757,     0,
     782,   782,   782,   103,   221,     0,   658,   657,   313,   312,
     314,   782,   292,     0,   281,   782,   782,   782,   782,   782,
     297,   280,   296,   295,   782,   782,   782,     0,   782,   782,
       0,   782,   208,   782,     0,   557,   556,   375,     0,   372,
     371,   366,   370,     0,   782,   782,     0,    64,    69,   744,
     740,   743,   746,   747,   212,     0,     0,     0,   742,   748,
       0,   750,   749,     0,     0,     0,   741,     0,     0,     0,
       0,     0,     0,     0,     0,   213,   247,   216,   248,   695,
     745,    63,     0,   319,     0,   782,   367,     0,   782,   782,
     782,    60,    46,    57,    58,    59,    61,   782,    47,   160,
      52,     0,    24,   782,     0,    50,     0,     0,     0,     0,
       0,     0,    56,   782,     0,    27,    26,    25,    54,    49,
       0,   164,     0,   163,     0,    62,     0,    21,     0,     0,
     782,    51,    55,   339,   318,     0,    14,     0,    75,     0,
     338,    72,     0,     0,     0,     0,     0,   335,   336,   628,
       0,   625,     0,   755,     0,   111,   104,   113,   108,   112,
     106,     0,   109,     0,   105,   110,   782,   656,   298,   782,
     782,   782,   283,   284,   782,   782,   782,     0,     0,     0,
       0,   782,     0,   246,     0,   782,   782,   782,   782,   782,
     782,   782,   782,   258,     0,   269,   782,     0,     0,   782,
     782,     0,   782,   782,   207,   210,   782,   782,   365,   311,
     782,   349,   782,   348,     0,     0,     0,     0,   705,     0,
       0,     0,   702,     0,     0,   713,   712,   711,   710,     0,
       0,   709,    71,   215,   782,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    67,   325,   369,   323,    66,    48,   782,    44,
     782,     0,     0,     0,     0,     0,     0,     0,   782,     0,
       0,   782,   339,   318,     0,   338,    81,     0,     0,   390,
       0,    86,    90,     0,   782,   782,     0,     0,   416,   227,
       0,    77,    74,     0,     0,     0,   679,   682,   683,     0,
       0,   782,     0,     0,     0,     0,   199,   782,   282,   287,
     286,   285,     0,     0,     0,     0,   782,     0,   782,   782,
     782,   782,   260,   261,   782,   782,     0,   782,   240,   259,
     782,   782,     0,   271,   272,     0,     0,     0,   782,   243,
     782,   299,   376,   345,     0,     0,   351,   350,   782,     0,
       0,     0,   782,     0,     0,     0,     0,     0,     0,     0,
     739,   214,   217,   722,   723,   724,   725,   726,   727,   728,
     731,   732,   738,     0,   719,   720,   721,   729,   730,   717,
     718,   714,   715,   716,   737,   736,     0,     0,   327,   326,
     328,     0,    53,   782,   386,     0,     0,     0,     0,     0,
       0,   388,   384,     0,     0,   181,   182,   183,   169,     0,
     170,     0,   166,   171,   167,   782,   180,   165,     0,    83,
       0,   393,   392,     0,   782,     0,     0,     0,   782,   782,
       0,   782,   782,   782,   782,   782,     0,   782,   249,   782,
      92,   416,   222,     0,     0,    76,     0,   782,     0,     0,
     782,     0,     0,   782,     0,     0,     0,   782,   782,     0,
      73,   782,   782,   782,   606,   605,   607,   604,   782,   107,
     114,     0,     0,   782,   416,   288,   782,   782,   782,   782,
     782,   782,   241,   244,   782,   264,   263,   262,   268,     0,
       0,   270,   275,   274,   273,   279,     0,   300,   373,     0,
     771,     0,   770,     0,     0,   352,   354,   760,   782,     0,
      65,   704,     0,     0,     0,     0,     0,   701,     0,   707,
     708,   696,     0,   735,   734,   324,   389,   782,     0,     0,
     782,     0,     0,     0,   782,     0,    42,   782,   782,     0,
     174,   172,     0,   782,   782,   782,   782,   782,   782,   782,
     178,    82,   782,     0,     0,     0,     0,     0,     0,     0,
     782,   782,   251,   252,   782,   782,    98,   782,   250,    15,
     782,     0,     0,     9,     0,     0,     0,   228,   417,   418,
     230,   231,   782,     0,   234,   236,   233,   229,   782,     0,
     187,     0,   127,   128,   129,   130,   131,   132,   135,   136,
     137,   152,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   156,   155,   139,   138,   124,   126,
     125,   133,   134,   122,   123,   119,   120,   121,   118,     0,
       0,   117,   782,   188,     0,     0,     0,     0,   195,   782,
     197,     0,     0,    79,   184,   782,     0,   115,   782,   200,
       0,   289,     0,     0,     0,   242,   245,   265,   782,   782,
     276,   782,   782,   377,     0,   357,     0,   356,     0,   355,
     761,     0,     0,     0,   762,   782,   353,     0,     0,   706,
       0,   703,     0,   733,   782,     0,     0,     0,     0,     0,
     202,     0,     0,     0,   782,     0,   782,   179,   159,   157,
     162,   158,   168,   175,     0,   782,   782,   782,   782,     0,
     176,   218,     0,    84,   391,   782,    88,     0,     0,   782,
     100,   782,   255,   254,   253,   782,     0,     0,   223,   416,
       0,   782,   782,   225,   226,   420,   421,   425,   422,   430,
     423,   424,   426,   427,   428,   429,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   505,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   782,   549,
     550,   551,   542,   554,   538,   539,   537,   544,   545,   533,
     534,   535,   536,   543,   541,   548,   546,   552,   547,   540,
     553,   419,     0,   232,   235,     0,   191,   782,   154,   153,
     185,   190,   189,   194,   198,   782,     0,   221,     0,     0,
     116,   201,   675,   782,   782,   782,     0,   266,     0,   277,
     374,   363,   362,   361,   360,   359,   358,   347,     0,     0,
       0,     0,   387,     0,     0,    34,   203,     0,     0,     0,
       0,   385,    41,   177,   173,   782,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   219,
     562,     0,   782,   782,     0,    94,   782,   782,   256,     0,
     782,   782,     0,    10,     0,     0,     0,   237,   782,   238,
     192,   186,     0,   782,    80,   416,   782,   782,   782,   782,
     782,   699,   698,   700,   697,     0,     0,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   569,     0,   577,   575,   574,   576,   573,     0,     0,
     572,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    85,    87,     0,    96,   782,    91,     0,
     782,   257,   782,   224,    13,    11,   555,     0,   782,   193,
       0,   782,   782,   782,   782,   782,    37,   782,    35,     0,
       0,    38,    40,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,   601,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   600,     0,   583,   584,   585,   581,   582,
     578,   579,   580,   599,   598,     0,     0,   782,   782,     0,
     782,    99,    93,    12,   239,   782,   676,   303,   302,   301,
     267,   278,     0,     0,     0,     0,     0,     0,   571,     0,
       0,     0,     0,   568,     0,   563,     0,   597,   596,   782,
       0,   782,   101,   196,   203,     0,    29,     0,     0,    31,
       0,     0,     0,   570,     0,   595,    89,   782,   782,    36,
       0,     0,     0,     0,     0,     0,     0,   782,   782,    39,
       0,    32,   566,   565,   567,   564,   782,    95,     0,    97,
      33
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1070, -1070,  -525, -1070, -1070,  -102, -1070, -1070,   540,  -420,
   -1070,   475,   729,  -359, -1070,  -419, -1070, -1070,  -243, -1070,
   -1070,  -307, -1070, -1070, -1070, -1070,   532, -1070, -1070, -1070,
   -1070, -1070,  -485, -1070, -1070,  -402, -1070, -1070, -1070, -1070,
     111,   244,  -890, -1070,  -912,  -790,  -392,  -456, -1070,  -229,
   -1070,   -38,  -483, -1070,  -755, -1069, -1070,  -390,   438,  -873,
    -496,  -486,   -41,   -75,   -69,   -63,  -237,  -540,   545,   154,
    -238, -1070,  -211, -1070, -1070, -1070, -1070,   156,  -200, -1070,
   -1070,  -515, -1070, -1070,   -19,    34, -1070, -1070, -1070, -1070,
     -22,   -51, -1070, -1070,  -929, -1070,  -185, -1070,  -645,  -113,
      -7,   327,  1514,  -254,   613, -1070, -1070,   863,  -925,  1359,
     210,  -384,    -1
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,     4,     5,   265,  1082,  1083,   440,   795,   441,   442,
     603,   443,   369,   260,   261,   444,   803,   797,   970,   627,
     930,  1061,   638,   934,  1453,   938,   639,  1080,  1537,  1598,
    1235,  1457,   502,  1142,  1210,   445,   624,   921,   922,   923,
     924,   925,   971,  1395,   972,   815,  1199,   370,   371,   574,
     575,  1220,   324,   955,   801,  1093,  1094,   372,   577,   946,
     832,   843,   252,   253,    95,    96,   640,   149,   641,    97,
      98,   544,    99,   545,   712,   855,   856,  1015,   100,   256,
     101,   541,   537,   538,   102,   103,   446,  1044,  1037,   447,
     104,   105,   106,   107,   956,   957,  1088,  1381,   534,   266,
     267,  1625,   185,    68,   578,   579,   200,   201,  1016,  1017,
     692,    69,   112
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       6,   269,   576,   271,   272,   273,   274,   275,   580,   277,
     231,   279,   599,   281,   621,   623,   232,   653,  1062,   710,
     718,   255,  1081,  1382,   152,   399,   398,   150,   709,   929,
     298,   822,   548,   691,   238,   239,   240,   376,   377,   378,
    1156,   243,   307,   308,   702,   654,   703,  1067,   532,   314,
     315,   109,   400,   110,   229,  1160,   230,   184,   365,   935,
    1007,    -2,   936,   401,   203,   317,  1069,   936,   234,  1072,
    1073,   733,  -774,  -775,  1100,   323,  1143,  -776,   113,  1146,
     151,   321,   108,   466,   318,  1175,  1177,  1179,   778,   264,
     837,   109,  1241,   110,   254,   254,   114,   214,   109,   704,
     110,  -777,   467,   322,   115,   317,   109,   317,   110,   109,
    1242,   110,   268,   268,   116,   268,   268,   268,   268,   268,
     117,   268,   744,   268,   506,   268,   870,   238,   239,   240,
     243,   109,   109,   110,   110,   109,   118,   110,   683,   109,
     235,   110,   268,   705,   317,  -774,  -775,   379,  -774,  -775,
    -776,   184,   317,  -776,   268,   268,   351,   352,   676,   823,
     317,   268,   268,   974,   513,  1520,   514,   323,   515,  1085,
    1086,   975,   360,   362,  -777,  1219,  1227,  -777,   853,   976,
     580,  1150,   848,   119,   380,   828,   238,   714,   533,   483,
     837,   833,   999,   244,   836,   245,   829,   246,  1232,  1157,
     325,  1233,  1234,  1006,   120,   399,   359,   361,   838,  1386,
     814,   734,   844,   516,   789,   847,   937,  1153,   183,   849,
     349,   937,  1205,  1076,  1077,   911,   376,   377,   378,   940,
     254,   254,   400,   941,   226,   227,   228,   613,   365,   121,
     366,   404,   247,   401,   402,   903,   254,   254,   123,  1411,
     373,  1412,   122,  1413,  1391,  1392,  1414,  1415,  1416,   756,
     757,   758,  1036,   316,   448,   109,  1079,   110,   124,   270,
     949,   109,   125,   110,   983,   276,   126,   278,   942,   280,
     127,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   403,   128,   517,
     529,   268,  1530,  1531,  1532,   317,   530,  1223,   306,   129,
    1462,   214,   310,   518,   311,   312,  1008,   520,   519,  1009,
     130,   503,   522,   523,   977,   229,   978,   230,   248,   542,
     990,   131,   109,  1147,   110,   995,   379,   132,   996,   997,
     133,   991,   249,   134,   576,   992,   993,   250,  1148,  1149,
     580,   135,   251,   109,   136,   110,  1002,   521,  1458,  1003,
    1004,   317,   521,   521,   943,  1399,   137,   798,   694,   799,
     695,   800,   696,   536,   539,  1196,   317,   138,   944,   317,
    1033,   317,   317,   945,   399,   367,  1035,   139,   399,   785,
     368,   581,  1417,   323,  1197,  1481,   355,  1486,  1482,  1547,
    1483,  1484,   140,    10,  1490,    11,   448,   448,   448,   448,
     448,   400,   448,   448,   448,   400,  1487,   697,   448,   676,
     824,   404,   401,  1491,   402,   448,   401,   141,  1493,  1059,
     448,   448,  1236,   448,   448,   448,   142,   448,   448,  1060,
     143,   317,  1158,  1616,   223,   224,   225,  1494,   226,   227,
     228,   155,   317,  1651,   317,   482,   676,   825,   681,  1422,
    1573,  -102,  1617,  -102,   682,  -102,   154,   381,   388,   317,
     668,  1627,  1652,  1662,   156,   672,   673,   403,  1064,   791,
    1431,   160,  1068,   677,   678,   679,   317,   317,  1663,  1152,
     837,   998,   542,  1185,   109,  1470,   110,   161,  1167,   325,
     373,   848,  1005,   698,  1396,  1664,  1665,  1165,  1166,   162,
     521,   163,  1194,   233,  1170,   521,   521,   699,   242,  1204,
    1230,  1077,   700,   521,   521,   521,   263,   701,   693,  1045,
     503,  1162,  1163,  1164,     1,     2,     3,   299,   152,  1062,
     301,   150,   302,     6,   713,   951,  1550,   952,   953,   954,
     309,  1206,   655,  -102,   798,  -102,   799,  -102,  1151,   833,
     356,  1207,   836,  1239,  1240,   730,   794,  1148,  1149,   844,
    1520,   374,   847,  1181,  1182,  1183,  1148,  1149,  1228,  1222,
    -280,   375,   186,   187,   188,  1148,  1149,  1393,   448,   448,
    1148,  1149,  1454,   390,   151,   391,   448,   656,   392,   657,
     404,   457,   448,   402,   404,   449,   317,   402,   450,   451,
     452,   826,     6,   453,   459,   454,   658,   827,   644,   455,
     645,   456,   646,   458,  1237,   464,   468,   460,  1208,  1209,
     819,   461,   462,   820,   821,   804,   805,   463,   465,   469,
     189,   470,   471,   809,   486,   810,  1211,   472,   659,   498,
     473,   660,   661,   190,   191,   662,   403,   474,   475,   476,
     403,   376,   377,   378,   962,   816,   477,   478,   963,   479,
     521,   663,   480,   521,   521,   536,   487,   488,   490,   491,
     693,   492,   494,   664,   495,   693,   693,   508,   501,   693,
     325,   510,   192,   193,   531,   194,  -204,   665,   543,   546,
     195,   325,   196,  1527,  1528,  1529,   582,  1530,  1531,  1532,
     584,   857,  1406,   964,   730,  1408,   602,   585,   606,   607,
     995,   996,   997,   608,   939,   609,   729,   610,   611,   620,
    1002,  1003,  1004,   615,   111,   616,   617,   642,   761,   643,
    1452,   706,   648,   649,  1456,   650,   980,   652,   651,  1024,
     896,   669,   708,  -282,   676,   711,   716,   715,   717,   926,
     719,  1607,  1608,  1609,   723,   732,   724,   448,   781,     6,
     965,   379,  -211,   802,   792,   814,   985,   806,   807,  1459,
     927,   808,   186,   187,   188,   811,   813,   830,   840,  -368,
     854,   858,   152,   948,     6,   150,   764,   388,   862,   966,
     864,   869,   901,   898,   900,   376,   377,   378,   684,   904,
     503,   905,   685,   967,   906,   907,   521,   908,   968,   909,
     910,   912,   928,   969,   931,   693,   932,   325,   325,   933,
     693,   257,   258,   693,   693,   950,   536,   984,   986,   837,
     189,   987,  1018,  1038,   988,   989,  1019,   536,   151,   816,
     542,   848,  -289,   190,   191,  1021,  1022,   686,  1023,  1025,
    1027,   268,  1028,  1029,  1039,  1040,  1041,  1042,  1667,   859,
     860,   861,  1043,   863,  1046,   865,  1669,   866,   867,   303,
     304,  1048,   591,   592,   593,   594,   595,   214,   596,   598,
     600,  1049,   192,   193,   605,   194,  1065,   926,  1066,  1070,
     195,   612,   196,  1087,  1090,  1091,   618,   619,  1159,   622,
     625,   626,  1098,   631,   632,   379,  1168,  1169,  1476,  1477,
    1478,  1184,  1171,  1172,   693,  1187,  1188,  1214,  1190,  1189,
    1192,  1191,  1195,   373,  1198,  1201,  1202,   373,   948,  1167,
    1203,   948,   948,   687,  1224,  -281,  1226,  1225,  1077,  1170,
    1215,  1238,  1229,  1243,  1244,  1384,  1089,   688,  1387,  1096,
     152,  1383,   689,   150,  1388,  1450,  1389,   690,  1520,  1398,
     816,   325,  1423,  1400,  1424,   358,  1542,  1402,   363,   364,
    1403,  1404,   254,  1405,  1425,  1426,   373,   373,   373,   325,
     325,  1427,  1428,   693,  1554,  1555,  1429,  1535,  1430,  1432,
    1451,  1539,  1455,  1460,   947,   576,  1461,   376,   377,   378,
    1052,   580,   695,   973,  1053,  1467,   151,     6,   221,   222,
     223,   224,   225,  1473,   226,   227,   228,   926,  1475,  1489,
    1488,  1496,  1479,  1480,  1485,  1492,     6,  1495,  1536,  1200,
    1497,  1498,  1502,     6,  1540,  1545,   693,   448,  1556,  1557,
    1558,  1543,  1559,   693,   693,  1601,  1544,   693,  1221,  1054,
    1548,   325,  1560,  1605,   598,   605,  1561,  1562,  1563,  1564,
     948,  1569,   767,   948,   948,  1572,   536,   212,   213,   373,
    1603,  1599,  1597,  1401,  1604,   511,   512,  1063,   214,  1600,
    1612,  1096,  1606,  1614,  1615,   524,   525,   526,  1618,  1525,
    1526,  1527,  1528,  1529,  1619,  1530,  1531,  1532,  1620,  1621,
    1623,  1624,  1629,  1634,  1636,  1632,  1631,   379,  1637,   547,
    1635,  1638,  1639,  1640,  1641,  1642,  1644,  1649,  1464,  1465,
    1643,   586,   587,  1647,  1650,  1659,  1660,  1661,  1463,  1668,
     973,  1670,  1630,   769,  1533,  1055,  1648,   973,   536,   947,
    1518,  1519,   947,   947,   816,  1474,   614,   254,   784,  1056,
    1212,  1520,  1657,  1047,  1057,  1613,  1472,   373,  1433,  1058,
     373,   786,   872,  1466,   973,  1186,   973,   722,     0,   973,
    1418,  1419,     0,  1420,   500,  1421,  1450,     0,  1450,  1450,
    1450,  1450,  1450,     0,  1450,     0,     0,  1512,  1513,  1514,
    1515,  1516,  1517,  1518,  1519,  1221,     0,     0,     0,     0,
       0,     0,     0,     0,  1520,   693,   693,   693,     0,   221,
     222,   223,   224,   225,   503,   226,   227,   228,   503,     0,
     948,   666,     0,     0,   373,     0,     0,     0,     0,     0,
     268,   268,     0,   902,   671,     0,     0,   674,   675,     0,
       0,     0,     0,   382,   383,   384,     0,  1450,  1450,  1450,
    1450,  1450,  1450,  1450,  1450,  1450,  1450,  1450,  1450,  1450,
    1450,  1450,  1450,  1450,  1450,  1450,   973,     0,     0,     0,
       0,   947,     0,     0,   947,   947,     0,     0,     0,     0,
       0,     0,  1525,  1526,  1527,  1528,  1529,     0,  1530,  1531,
    1532,     0,     0,     0,     0,     0,     0,     0,     0,   973,
       0,   189,     0,     0,   762,     0,     0,   766,  1450,     0,
       0,     0,     0,     0,   190,   191,     0,     0,     0,     0,
       0,     0,   549,   550,   551,    10,     0,    11,   552,   553,
    1522,  1523,  1524,     0,   554,  1525,  1526,  1527,  1528,  1529,
       0,  1530,  1531,  1532,   973,   973,     0,  1089,     0,   790,
       0,     0,     0,   385,   193,     0,   194,     0,  1434,  1450,
       0,   195,  1450,   196,     0,     0,     0,   109,     0,   110,
     555,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   581,   556,     0,   386,   817,   818,
     557,     0,   503,   503,   503,     0,     0,     0,     0,   558,
     559,     0,     0,     0,   831,     0,     0,   834,   835,     0,
       0,   839,     0,     0,   202,   842,     0,     0,   845,   846,
       0,     0,   850,     0,   693,   851,   852,     0,     0,   111,
    1509,   947,     0,     0,   560,     0,     0,   561,   241,   562,
       0,     0,   373,     0,   563,     0,   373,     0,   564,     0,
     503,   565,     0,     0,     0,     0,   566,  1096,   262,   567,
       0,   186,   187,   188,     0,     0,     0,     0,   503,   503,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   568,     0,  1509,   569,   570,     0,     0,     0,   571,
       0,   572,     0,     0,     0,   573,   300,   111,     0,     0,
       0,     0,     0,     0,     0,     0,    67,     0,     0,     0,
       0,     0,     0,   622,  1595,     0,     0,     0,     0,   189,
       0,     0,     0,     0,     0,     0,   373,     0,     0,   503,
       0,     0,   190,   191,     0,     0,  1449,   503,     0,     0,
     816,   816,   816,     0,     0,     0,  1200,   319,   320,   994,
       0,   153,     0,     0,     0,     0,     0,   159,     0,  1000,
    1001,     0,     0,   164,   165,   166,   167,   168,     0,     0,
     204,   192,   193,     0,   194,   347,     0,  1020,     0,   195,
       0,   196,     0,     0,     0,   973,   503,   373,     0,   503,
       0,  1508,     0,     0,   357,     0,     0,     0,   973,     0,
       0,     0,     0,     0,     0,     0,     0,   387,   389,   197,
       0,     0,     0,   198,     0,     0,     0,     0,   199,     0,
     503,     0,   111,  1653,  1654,  1655,     0,  1656,     0,     0,
       0,   186,   187,   188,     0,     0,   503,     0,     0,  1565,
    1566,  1567,  1568,     0,  1570,     0,  1571,   816,     0,     0,
       0,   973,   484,   485,     0,   816,     0,     0,   489,     0,
    1071,     0,     0,  1074,  1075,   313,  1078,     0,   111,     0,
     202,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1099,     0,     0,     0,  1144,  1145,     0,   189,
       0,     0,  1154,     0,     0,     0,     0,  1155,   186,   187,
     188,     0,   190,   191,     0,  1161,     0,     0,     0,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   350,     0,     0,     0,     0,   354,     0,     0,
     262,   192,   193,     0,   194,   583,     0,     0,     0,   195,
       0,   196,     0,     0,     0,     0,   189,  1501,     0,  1503,
    1504,  1505,  1506,  1507,     0,  1510,     0,   405,     0,   190,
     191,     0,  1216,     0,     0,  1217,  1218,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   630,     0,   199,  1231,
       0,     0,     0,     0,     0,     0,   186,   187,   188,     0,
       0,     0,     0,   481,     0,     0,     0,     0,   192,   193,
       0,   194,     0,     0,     0,     0,   195,  1385,   196,     0,
     496,   497,     0,     0,     0,     0,     0,   504,  1574,  1575,
    1576,  1577,  1578,  1579,  1580,  1581,  1582,  1583,  1584,  1585,
    1586,  1587,  1588,  1589,  1590,  1591,  1592,     0,   319,     0,
       0,     0,     0,     0,   189,     0,     0,     0,     0,     0,
       0,  1390,     0,   670,     0,     0,     0,   190,   191,     0,
     549,   550,   551,    10,     0,    11,   552,   553,   535,     0,
       0,     0,   871,     0,     0,     0,   707,     0,  1407,     0,
       0,  1409,     0,     0,     0,   262,     0,     0,     0,     0,
       0,     0,     0,     0,   111,     0,   192,   193,     0,   194,
       0,     0,     0,   111,   195,   109,   196,   110,   555,     0,
     601,     0,     0,   111,     0,     7,     8,     9,    10,     0,
      11,    12,    13,   556,  1435,   763,   765,  1499,   557,     0,
     770,     0,     0,  1645,     0,     0,     0,   558,   559,     0,
       0,     0,     0,   771,     0,   772,   773,   774,   775,   776,
     777,     0,     0,   779,   206,   207,   208,   209,   210,   211,
     212,   213,     0,  1436,     0,     0,     0,   787,   788,     0,
       0,   214,   560,     0,     0,   561,   796,   562,  1437,   211,
     212,   213,   563,  1438,   496,     0,   564,     0,     0,   565,
       0,   214,    24,    25,   566,     0,     0,   567,    27,   667,
       0,     0,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,     0,   568,
       0,     0,   569,   570,     0,     0,     0,   571,     0,   572,
      48,     0,    49,   573,   841,     0,     0,  1439,     0,     0,
       0,  1440,     0,   540,  1441,     0,     0,     0,     0,    55,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   725,   726,   727,   728,     0,   731,     0,     0,
       0,     0,     0,     0,  1442,     0,   760,  1443,  1444,  1445,
       0,     0,  1446,     0,  1500,    65,     0,    73,  1448,    74,
      75,    76,    77,     0,     0,   894,  1471,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,     0,   226,   227,
     228,     0,     0,     0,   780,     0,     0,     0,     0,     0,
       0,    84,   221,   222,   223,   224,   225,     0,   226,   227,
     228,     0,     0,     0,     0,     0,     0,     0,   237,     0,
       0,     0,     0,     0,   549,   550,   551,    10,     0,    11,
     552,   553,   981,     0,     0,   812,   720,     0,     0,    86,
      87,  1534,     0,     0,     0,  1538,     0,     0,     0,  1541,
     535,     0,     0,     0,     0,     0,    92,     0,     0,     0,
       0,    94,  1549,     0,     0,  1551,  1552,  1553,     0,     0,
       0,     0,   555,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1026,  1517,  1518,  1519,   556,     0,     0,
       0,     0,   557,     0,     0,     0,  1520,     0,   868,     0,
       0,   558,   559,     0,     0,     0,   186,   187,   188,   873,
     874,   875,   876,   877,   878,   879,   880,   881,   882,   883,
     884,   885,   886,   887,   888,   889,   890,   891,   892,   893,
       0,  1602,   897,     0,     0,     0,   560,     0,     0,   561,
       0,   562,  1051,  1610,  1611,     0,   563,     0,     0,     0,
     564,     0,     0,   565,     0,     0,     0,     0,   566,     0,
       0,   567,     0,     0,   189,     0,     0,     0,     0,     0,
       0,     0,  1084,     0,   961,     0,     0,   190,   191,     0,
       0,     0,     0,   568,     0,     0,   569,   570,     0,     0,
       0,   571,     0,   721,  1633,     0,     0,   573,     0,     7,
       8,     9,    10,     0,    11,    12,    13,   169,    71,     0,
       0,   535,     0,     0,     0,     0,   192,   193,  1646,   194,
       0,     0,   535,     0,   195,     0,   196,  1525,  1526,  1527,
    1528,  1529,  1180,  1530,  1531,  1532,     0,  1658,     0,     0,
       0,   259,     0,  1031,     0,     0,  1666,    15,    72,     0,
       0,   170,     0,   171,   172,   173,   174,    78,    79,     0,
       0,     0,    21,    80,     0,     0,   175,    23,     0,  1213,
      82,     0,     0,     0,     0,     0,    24,    25,   176,     0,
       0,     0,    27,     0,     0,   177,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,   178,     0,     0,     0,   382,   383,   384,     0,
       0,    46,     0,    47,    48,     0,    49,     0,   186,   187,
     188,    50,     0,   179,   180,    53,     0,     0,    54,    88,
       0,     0,     0,    55,  1095,     0,    56,    89,    90,    91,
     181,     0,     0,    93,     0,   182,     0,     0,     0,     0,
       0,   597,     0,     0,     0,     0,     0,     0,    59,     0,
       0,    60,    61,    62,   189,     0,    63,     0,    64,    65,
       0,     0,    66,     0,     0,     0,   189,   190,   191,     0,
       0,     0,     0,  1173,     0,     0,     0,     0,     0,   190,
     191,     0,     0,     0,     0,     0,     0,     0,     0,   407,
       0,  1031,     0,     0,     0,     0,  1193,   408,   409,   410,
     411,     0,     0,     0,     0,     0,   385,   193,     0,   194,
     413,   414,   415,   416,   195,     0,   196,     0,   192,  1010,
    1011,  1012,     0,   590,     0,     0,   195,     0,   196,   205,
     206,   207,   208,   209,   210,   211,   212,   213,     0,  1013,
       0,   535,     0,   380,  1014,     0,     0,   214,   426,  1084,
       0,     0,     0,     0,     0,     0,  1095,     0,     0,   431,
       0,     0,     0,     0,     0,   432,     0,     0,     0,   434,
     435,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   438,     0,   439,     0,  1245,  1246,  1247,  1248,  1249,
    1250,  1251,  1252,  1253,  1254,  1255,     0,  1256,  1257,  1258,
    1259,  1260,  1261,  1262,  1263,  1264,  1265,  1266,  1267,     0,
       0,  1394,     0,   535,     0,  1397,  1268,  1269,  1270,  1271,
    1272,  1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,  1281,
    1282,  1283,  1284,  1285,  1286,     0,     0,  1287,  1288,  1289,
    1290,  1291,  1292,  1293,  1294,  1295,  1296,  1297,  1298,  1299,
    1300,  1301,  1302,  1303,  1304,     0,  1305,     0,  1306,  1307,
    1308,  1309,  1310,  1311,  1312,  1313,  1314,  1315,     0,  1316,
    1317,  1318,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,     0,   226,   227,   228,     0,  1319,     0,
     507,     0,     0,     0,     0,  1320,  1321,  1322,  1323,  1324,
    1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,  1334,
    1335,  1336,  1337,  1338,  1339,  1340,  1341,  1342,  1343,  1344,
    1345,  1346,  1347,  1348,  1349,  1350,  1351,  1352,  1353,  1354,
    1355,  1356,  1357,   633,   634,     0,  1358,  1359,  1360,  1361,
    1362,  1363,  1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,
    1372,  1373,  1374,  1375,  1376,  1377,  1378,  1546,  1379,  1380,
       0,     0,     0,   186,   187,   188,     0,     0,     0,   186,
     187,   188,     0,     0,     0,   394,     0,     0,    73,     0,
      74,    75,    76,    77,    78,     0,     0,     0,     0,     0,
     395,     0,     0,    81,     0,     0,    73,    82,    74,    75,
      76,    77,     0,     0,     0,    83,     0,     0,     0,     0,
       0,   236,    84,     0,     0,     0,     0,     0,     0,     0,
       0,   189,     0,     0,     0,     0,     0,   189,     0,    85,
      84,     0,     0,     0,   190,   191,     0,     0,     0,  1593,
     190,   191,   635,     0,     0,     0,     0,   237,  1469,     0,
      86,    87,     0,     0,     0,     0,    88,     0,     0,     0,
       0,     0,     0,     0,   396,   397,    91,    92,    86,    87,
      93,     0,    94,   192,   193,     0,   194,   636,  1622,   192,
     193,   195,   194,   196,     0,    92,     0,   195,     0,   196,
      94,     0,     0,   637,  1013,     0,     0,     0,     0,  1174,
    1013,     0,  1245,  1246,  1247,  1248,  1249,  1250,  1251,  1252,
    1253,  1254,  1255,   143,  1256,  1257,  1258,  1259,  1260,  1261,
    1262,  1263,  1264,  1265,  1266,  1267,     0,     0,     0,     0,
       0,     0,  1095,  1268,  1269,  1270,  1271,  1272,  1273,  1274,
    1275,  1276,  1277,  1278,  1279,  1280,  1281,  1282,  1283,  1284,
    1285,  1286,     0,     0,  1287,  1288,  1289,  1290,  1291,  1292,
    1293,  1294,  1295,  1296,  1297,  1298,  1299,  1300,  1301,  1302,
    1303,  1304,     0,  1305,     0,  1306,  1307,  1308,  1309,  1310,
    1311,  1312,  1313,  1314,  1315,     0,  1316,  1317,  1318,     0,
       0,     0,     0,     0,     0,     0,  1596,     0,     0,     0,
       0,     0,     0,     0,     0,  1319,     0,     0,     0,     0,
       0,     0,  1320,  1321,  1322,  1323,  1324,  1325,  1326,  1327,
    1328,  1329,  1330,  1331,  1332,  1333,  1334,  1335,  1336,  1337,
    1338,  1339,  1340,  1341,  1342,  1343,  1344,  1345,  1346,  1347,
    1348,  1349,  1350,  1351,  1352,  1353,  1354,  1355,  1356,  1357,
       0,     0,     0,  1358,  1359,  1360,  1361,  1362,  1363,  1364,
    1365,  1366,  1367,  1368,  1369,  1370,  1371,  1372,  1373,  1374,
    1375,  1376,  1377,  1378,     0,  1379,  1380,     7,     8,     9,
      10,     0,    11,    12,    13,   393,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   205,
     206,   207,   208,   209,   210,   211,   212,   213,     0,     0,
       0,     0,     0,     0,     0,    15,   394,   214,     0,   170,
       0,   171,   172,   173,   174,    78,     0,     0,     0,     0,
      21,   395,     0,     0,   175,    23,     0,     0,    82,     0,
       0,     0,     0,     0,    24,    25,   176,     0,     0,     0,
      27,     0,     0,   177,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
     178,     0,     0,     0,     0,     0,     0,     0,     0,    46,
       0,    47,    48,     0,    49,     0,     0,     0,     0,    50,
       0,   179,   180,    53,     0,     0,    54,    88,     0,     0,
       0,    55,     0,     0,    56,   396,   397,    91,   181,     0,
       0,    93,     0,   182,     7,     8,     9,    10,     0,    11,
      12,    13,    14,     0,     0,     0,    59,     0,     0,    60,
      61,    62,     0,     0,    63,     0,    64,    65,     0,     0,
      66,     0,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,     0,   226,   227,   228,     0,     0,     0,
    1034,     0,    15,     0,     0,     0,    16,     0,    17,    18,
      19,    20,     0,     0,     0,     0,     0,    21,     0,   958,
     959,    22,    23,     0,     0,     0,     0,     0,     0,     0,
       0,    24,    25,    26,     0,     0,     0,    27,     0,     0,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,     0,    47,    48,
       0,    49,     0,     0,     0,     0,    50,     0,    51,    52,
      53,     0,     0,    54,     0,     0,     0,     0,    55,     0,
       0,    56,     0,     0,     0,    57,     7,     8,     9,    10,
      58,    11,    12,    13,    14,   960,     0,     0,   157,     0,
       0,     0,     0,    59,     0,     0,    60,    61,    62,     0,
       0,    63,     0,    64,    65,     0,     0,    66,   205,   206,
     207,   208,   209,   210,   211,   212,   213,     0,     0,     0,
       0,     0,     0,     0,    15,     0,   214,     0,    16,     0,
      17,    18,    19,    20,     0,     0,     0,     0,     0,    21,
       0,     0,     0,    22,    23,     0,     0,     0,     0,     0,
       0,     0,     0,    24,    25,    26,     0,     0,     0,    27,
       0,     0,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
       0,     0,     0,     0,     0,     0,     0,     0,    46,     0,
      47,    48,     0,    49,     0,     0,     0,     0,    50,     0,
      51,    52,    53,     0,     0,    54,     0,     0,     0,     0,
      55,     0,     0,    56,     0,     0,     0,    57,     7,     8,
       9,    10,    58,    11,    12,    13,    14,     0,     0,     0,
       0,     0,     0,     0,     0,    59,     0,     0,    60,    61,
      62,     0,     0,    63,     0,   158,    65,     0,     0,    66,
       0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,    15,     0,     0,  1628,
      16,     0,    17,    18,    19,    20,     0,     0,     0,     0,
       0,    21,     0,     0,     0,    22,    23,     0,     0,     0,
       0,     0,     0,     0,     0,    24,    25,    26,     0,     0,
       0,    27,     0,     0,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,     0,     0,     0,     0,     0,     0,     0,     0,
      46,     0,    47,    48,     0,    49,     0,     0,     0,     0,
      50,     0,    51,    52,    53,     0,     0,    54,     0,     0,
       0,     0,    55,     0,     0,    56,     0,     0,     0,    57,
       7,     8,     9,    10,    58,    11,    12,    13,    14,     0,
       0,     0,     0,     0,     0,     0,     0,    59,     0,     0,
      60,    61,    62,     0,     0,    63,     0,    64,    65,   348,
       0,    66,   205,   206,   207,   208,   209,   210,   211,   212,
     213,     0,     0,     0,     0,     0,     0,     0,    15,   353,
     214,     0,    16,     0,    17,    18,    19,    20,     0,     0,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
       0,     0,     0,     0,     0,     0,     0,    24,    25,    26,
       0,     0,     0,    27,     0,     0,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,     0,     0,     0,     0,     0,     0,
       0,     0,    46,     0,    47,    48,     0,    49,     0,     0,
       0,     0,    50,     0,    51,    52,    53,     0,     0,    54,
       0,     0,     0,     0,    55,     0,     0,    56,     0,     0,
       0,    57,     7,     8,     9,    10,    58,    11,    12,    13,
      14,     0,     0,     0,     0,     0,     0,     0,     0,    59,
       0,     0,    60,    61,    62,     0,     0,    63,     0,    64,
      65,     0,  1097,    66,     0,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
      15,   759,     0,     0,    16,     0,    17,    18,    19,    20,
       0,     0,     0,     0,     0,    21,     0,     0,     0,    22,
      23,     0,     0,     0,     0,     0,     0,     0,     0,    24,
      25,    26,     0,     0,     0,    27,     0,     0,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,     0,     0,    73,     0,
      74,    75,    76,    77,    46,     0,    47,    48,     0,    49,
       0,     0,     0,     0,    50,     0,    51,    52,    53,     0,
       0,    54,     0,     0,     0,     0,    55,     0,     0,    56,
       0,     0,    84,    57,     7,     8,     9,    10,    58,    11,
      12,    13,    14,     0,     0,     0,     0,     0,     0,   237,
       0,    59,     0,     0,    60,    61,    62,     0,     0,    63,
       0,    64,    65,     0,     0,    66,     0,     0,     0,     0,
      86,    87,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    15,     0,     0,     0,    16,    92,    17,    18,
      19,    20,    94,     0,     0,     0,     0,    21,     0,     0,
       0,    22,    23,     0,     0,     0,     0,     0,     0,     0,
       0,    24,    25,    26,     0,   155,     0,    27,     0,     0,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,     0,    47,    48,
       0,    49,     0,     0,     0,     0,    50,     0,    51,    52,
      53,     0,     0,    54,     0,     0,     0,     0,    55,     0,
       0,    56,     0,     0,     0,    57,     7,     8,     9,    10,
      58,    11,    12,    13,    14,     0,     0,     0,     0,     0,
       0,     0,     0,    59,     0,     0,    60,    61,    62,     0,
       0,    63,     0,    64,    65,   895,     0,    66,   205,   206,
     207,   208,   209,   210,   211,   212,   213,     0,     0,     0,
       0,     0,     0,     0,    15,     0,   214,     0,    16,     0,
      17,    18,    19,    20,     0,     0,     0,     0,     0,    21,
       0,     0,     0,    22,    23,     0,     0,     0,     0,     0,
       0,     0,     0,    24,    25,    26,     0,     0,     0,    27,
       0,     0,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
       0,     0,     0,     0,     0,     0,     0,     0,    46,     0,
      47,    48,     0,    49,     0,     0,     0,     0,    50,     0,
      51,    52,    53,     0,     0,    54,     0,     0,     0,     0,
      55,     0,     0,    56,     0,     0,     0,    57,     7,     8,
       9,    10,    58,    11,    12,    13,    14,  1092,     0,     0,
       0,     0,     0,     0,     0,    59,     0,     0,    60,    61,
      62,     0,     0,    63,     0,    64,    65,  1410,     0,    66,
       0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,    15,     0,     0,     0,
      16,     0,    17,    18,    19,    20,     0,     0,     0,     0,
       0,    21,     0,     0,     0,    22,    23,     0,     0,     0,
       0,     0,     0,     0,     0,    24,    25,    26,     0,     0,
       0,    27,     0,     0,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,     0,     0,     0,     0,     0,     0,     0,     0,
      46,     0,    47,    48,     0,    49,     0,     0,     0,     0,
      50,     0,    51,    52,    53,     0,     0,    54,     0,     0,
       0,     0,    55,     0,     0,    56,     0,     0,     0,    57,
       7,     8,     9,    10,    58,    11,    12,    13,    14,  1468,
       0,     0,     0,     0,     0,     0,     0,    59,     0,     0,
      60,    61,    62,     0,     0,    63,     0,    64,    65,     0,
       0,    66,   205,   206,   207,   208,   209,   210,   211,   212,
     213,     0,     0,     0,     0,     0,     0,     0,    15,     0,
     214,     0,    16,     0,    17,    18,    19,    20,     0,     0,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
       0,     0,     0,     0,     0,     0,     0,    24,    25,    26,
       0,     0,     0,    27,     0,     0,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,     0,     0,     0,     0,     0,     0,
       0,     0,    46,     0,    47,    48,     0,    49,     0,     0,
       0,     0,    50,     0,    51,    52,    53,     0,     0,    54,
       0,     0,     0,     0,    55,     0,     0,    56,     0,     0,
       0,    57,     7,     8,     9,    10,    58,    11,    12,    13,
      14,     0,     0,     0,     0,     0,     0,     0,     0,    59,
       0,     0,    60,    61,    62,     0,     0,    63,     0,    64,
      65,  1594,     0,    66,     0,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
      15,     0,     0,     0,    16,     0,    17,    18,    19,    20,
       0,     0,     0,     0,     0,    21,     0,     0,     0,    22,
      23,     0,     0,     0,     0,     0,     0,     0,     0,    24,
      25,    26,     0,     0,     0,    27,     0,     0,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,     0,     0,     0,     0,
       0,     0,     0,     0,    46,     0,    47,    48,     0,    49,
       0,     0,     0,     0,    50,     0,    51,    52,    53,     0,
       0,    54,     0,     0,     0,     0,    55,     0,     0,    56,
       0,     0,     0,    57,     7,     8,     9,    10,    58,    11,
      12,    13,    14,     0,   207,   208,   209,   210,   211,   212,
     213,    59,     0,     0,    60,    61,    62,     0,     0,    63,
     214,    64,    65,     0,     0,    66,   735,   736,   737,   738,
     739,   740,   741,   742,   743,     0,     0,     0,     0,     0,
       0,     0,    15,     0,   744,     0,    16,     0,    17,    18,
      19,    20,     0,     0,     0,     0,     0,    21,     0,     0,
       0,    22,    23,     0,     0,     0,     0,     0,     0,     0,
       0,    24,    25,    26,     0,     0,     0,    27,     0,     0,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,     0,    47,    48,
       0,    49,     0,     0,     0,     0,    50,     0,    51,    52,
      53,     0,     0,    54,     0,     0,     0,     0,    55,     0,
       0,    56,     0,     0,     0,    57,     7,     8,     9,    10,
      58,    11,    12,    13,     0,     0,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
       0,    63,     0,    64,    65,     0,     0,    66,     0,   745,
     746,   747,   748,   749,   750,   751,   752,   753,   754,   755,
       0,   756,   757,   758,  1436,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1437,
       0,     0,     0,     0,  1438,     0,     0,     0,     0,     0,
       0,     0,     0,    24,    25,     0,     0,     0,     0,    27,
       0,     0,     0,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,     7,
       8,     9,    10,     0,    11,    12,    13,     0,     0,     0,
       0,    48,     0,    49,     0,     0,     0,     0,  1439,     0,
       0,     0,  1440,     0,     0,  1441,     0,     0,     0,     0,
      55,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1436,     0,     0,
       0,     0,     0,     0,     0,  1442,     0,     0,  1443,  1444,
    1445,     0,  1437,  1446,     0,  1447,    65,  1438,     0,  1448,
     209,   210,   211,   212,   213,     0,    24,    25,     0,     0,
       0,     0,    27,     0,   214,     0,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    48,     0,    49,     0,     0,     0,
       0,  1439,     0,     0,  1101,  1440,     0,     0,  1441,   633,
     634,     0,     0,    55,  1102,  1103,  1104,  1105,  1106,  1107,
    1108,  1109,  1110,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1111,     0,  1112,  1113,  1114,  1115,  1116,  1117,
    1118,  1119,  1120,  1121,  1122,  1123,  1446,     0,  1447,    65,
       0,   394,  1448,     0,    73,     0,    74,    75,    76,    77,
      78,     0,     0,     0,     0,     0,   395,  1124,     0,    81,
       0,     0,     0,    82,     0,     0,     0,     0,   186,   187,
     188,    83,     0,  1050,     0,     0,     0,     0,    84,     0,
       0,     0,     0,   219,   220,   221,   222,   223,   224,   225,
       0,   226,   227,   228,     0,    85,     0,     0,     0,     0,
       0,     0,     0,  1125,     0,     0,     0,     0,   635,     0,
       0,     0,     0,     0,     0,     0,    86,    87,     0,     0,
     782,   783,    88,     0,     0,     0,   189,     0,     0,     0,
     396,   397,    91,    92,     0,     0,    93,     0,    94,   190,
     191,     0,     0,  1126,     0,     0,  1127,     0,  1128,  1129,
    1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,  1138,   637,
    1139,  1140,   394,     0,  1141,    73,     0,    74,    75,    76,
      77,    78,     0,     0,     0,     0,     0,   395,   192,   193,
      81,   194,     0,     0,    82,     0,   195,     0,   196,     0,
       0,     0,    83,     0,     0,     0,     0,     0,     0,    84,
     205,   206,   207,   208,   209,   210,   211,   212,   213,     0,
       0,     0,     0,     0,     0,     0,    85,     0,   214,     0,
       0,    73,     0,    74,    75,    76,    77,     0,     0,   635,
       0,     0,     0,     0,     0,     0,     0,    86,    87,     0,
       0,     0,     0,    88,     0,     0,     0,     0,     0,     0,
       0,   396,   397,    91,    92,    84,     0,    93,     0,    94,
     205,   206,   207,   208,   209,   210,   211,   212,   213,     0,
       0,     0,   237,     0,     0,     0,     0,     0,   214,     0,
     637,   205,   206,   207,   208,   209,   210,   211,   212,   213,
       0,     0,     0,    86,    87,     0,     0,     0,     0,   214,
     205,   206,   207,   208,   209,   210,   211,   212,   213,     0,
      92,     0,     0,     0,     0,    94,     0,     0,   214,   205,
     206,   207,   208,   209,   210,   211,   212,   213,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   214,   156,   913,
       0,     0,     0,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,   914,   205,
     206,   207,   208,   209,   210,   211,   212,   213,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   214,   205,   206,
     207,   208,   209,   210,   211,   212,   213,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   214,     0,     0,     0,
       0,     0,     0,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,   305,     0,
       0,     0,     0,     0,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,     0,   226,   227,   228,   493,
       0,     0,     0,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,   509,     0,
       0,     0,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,     0,   226,   227,   228,   588,   205,   206,
     207,   208,   209,   210,   211,   212,   213,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   214,     0,     0,     0,
       0,     0,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,     0,   226,   227,   228,   647,     0,     0,
       0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   768,   205,   206,   207,
     208,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   214,   205,   206,   207,   208,
     209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   214,   205,   206,   207,   208,   209,
     210,   211,   212,   213,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   214,   205,   206,   207,   208,   209,   210,
     211,   212,   213,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   214,     0,     0,     0,     0,     0,     0,     0,
       0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   899,  1511,  1512,  1513,
    1514,  1515,  1516,  1517,  1518,  1519,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1520,  1511,  1512,  1513,  1514,
    1515,  1516,  1517,  1518,  1519,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1520,     0,     0,     0,     0,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,   227,   228,   979,     0,     0,     0,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
       0,   226,   227,   228,  1030,     0,   505,     0,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,     0,     0,  1032,     0,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,     0,   226,
     227,   228,   207,   208,   209,   210,   211,   212,   213,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   214,   207,
     208,   209,   210,   211,   212,   213,     0,     0,  1626,     0,
    1521,  1522,  1523,  1524,     0,   214,  1525,  1526,  1527,  1528,
    1529,     0,  1530,  1531,  1532,     0,     0,     0,     0,  1521,
    1522,  1523,  1524,     0,     0,  1525,  1526,  1527,  1528,  1529,
       0,  1530,  1531,  1532,  1513,  1514,  1515,  1516,  1517,  1518,
    1519,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1520,   207,   208,   209,   210,   211,   212,   213,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   214,  1513,  1514,
    1515,  1516,  1517,  1518,  1519,     0,     0,     0,    73,     0,
      74,    75,    76,    77,  1520,  1513,  1514,  1515,  1516,  1517,
    1518,  1519,     0,     0,  1513,  1514,  1515,  1516,  1517,  1518,
    1519,  1520,     0,     0,     0,     0,     0,     0,     0,     0,
    1520,     0,    84,     0,     0,   217,   218,   219,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,     0,   237,
       0,     0,     0,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,   227,   228,  1515,  1516,  1517,  1518,  1519,
      86,    87,     0,     0,     0,     0,     0,     0,     0,  1520,
       0,     0,     0,     0,     0,     0,     0,    92,     0,     0,
       0,     0,    94,     0,     0,     0,  1522,  1523,  1524,     0,
       0,  1525,  1526,  1527,  1528,  1529,     0,  1530,  1531,  1532,
       0,     0,     0,     0,     0,   162,   219,   220,   221,   222,
     223,   224,   225,     0,   226,   227,   228,     0,     0,     0,
       0,  1523,  1524,     0,     0,  1525,  1526,  1527,  1528,  1529,
     655,  1530,  1531,  1532,     0,     0,     0,     0,     0,  1524,
     597,     0,  1525,  1526,  1527,  1528,  1529,     0,  1530,  1531,
    1532,  1525,  1526,  1527,  1528,  1529,     0,  1530,  1531,  1532,
       0,   109,     0,   110,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   656,     0,   657,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   407,     0,
       0,   915,   916,   917,   658,     0,   408,   409,   410,   411,
    1525,  1526,  1527,  1528,  1529,     0,  1530,  1531,  1532,   413,
     589,   415,   416,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   590,     0,     0,     0,   659,     0,     0,   660,
     661,     0,     0,   662,     0,     0,    73,     0,    74,    75,
      76,    77,   918,   919,   915,   916,   917,   426,     0,   663,
       0,    81,     0,     0,     0,     0,     0,     0,   431,     0,
       0,   664,     0,    83,   432,     0,     0,     0,     0,   435,
      84,     0,     0,     0,     0,   665,     0,     0,     0,     0,
     438,     0,   439,     0,     0,    70,    71,    85,     0,    73,
       0,    74,    75,    76,    77,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    81,     0,     0,     0,    86,    87,
       0,     0,     0,     0,     0,    73,    83,    74,    75,    76,
      77,     0,   920,    84,     0,    92,    72,     0,    93,    73,
      94,    74,    75,    76,    77,    78,   527,     0,     0,     0,
      85,    80,     0,     0,    81,     0,     0,     0,    82,    84,
       0,     0,     0,     0,     0,     0,    83,     0,     0,     0,
       0,    86,    87,    84,     0,     0,   237,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,     0,
      85,    93,     0,    94,    70,    71,     0,    86,    87,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   528,     0,
       0,    86,    87,     0,    92,     0,     0,    88,     0,    94,
      70,    71,     0,     0,     0,    89,    90,    91,    92,     0,
       0,    93,     0,    94,     0,    72,     0,     0,    73,     0,
      74,    75,    76,    77,    78,    79,     0,     0,     0,     0,
      80,     0,     0,    81,     0,     0,     0,    82,     0,     0,
       0,    72,     0,     0,    73,    83,    74,    75,    76,    77,
      78,     0,    84,     0,     0,     0,    80,     0,     0,    81,
       0,     0,     0,    82,     0,     0,     0,     0,     0,    85,
       0,    83,     0,     0,     0,     0,     0,     0,    84,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      86,    87,     0,    70,    71,    85,    88,     0,     0,     0,
       0,     0,     0,     0,    89,    90,    91,    92,     0,     0,
      93,     0,    94,   680,     0,     0,    86,    87,     0,    70,
       0,     0,    88,     0,     0,     0,     0,     0,     0,     0,
      89,    90,    91,    92,    72,     0,    93,    73,    94,    74,
      75,    76,    77,    78,     0,     0,     0,     0,     0,    80,
       0,     0,    81,     0,     0,     0,    82,     0,     0,     0,
      72,     0,     0,    73,    83,    74,    75,    76,    77,    78,
     793,    84,     0,     0,     0,    80,     0,     0,    81,     0,
       0,     0,    82,     0,     0,     0,     0,     0,    85,     0,
      83,     0,     0,     0,     0,     0,     0,    84,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
      87,     0,   144,     0,    85,    88,     0,     0,     0,     0,
       0,     0,     0,    89,    90,    91,    92,     0,     0,    93,
       0,    94,     0,     0,     0,    86,    87,     0,   144,     0,
       0,    88,     0,     0,     0,     0,     0,     0,     0,    89,
      90,    91,    92,   145,     0,    93,    73,    94,    74,    75,
      76,    77,    78,   982,     0,     0,     0,     0,   146,     0,
       0,    81,     0,     0,     0,    82,     0,     0,     0,   145,
       0,     0,    73,    83,    74,    75,    76,    77,    78,     0,
      84,     0,     0,     0,   146,     0,     0,    81,     0,     0,
       0,    82,     0,     0,     0,     0,     0,    85,     0,    83,
       0,     0,     0,     0,     0,     0,    84,     0,     0,     0,
       0,     0,     0,     0,   186,   187,   188,     0,    86,    87,
       0,    70,     0,    85,    88,     0,     0,     0,     0,   186,
     187,   188,   147,   148,    91,    92,     0,     0,    93,     0,
      94,     0,     0,     0,    86,    87,     0,     0,     0,     0,
      88,   186,   187,   188,     0,     0,     0,     0,   147,   148,
      91,    92,    72,     0,    93,    73,    94,    74,    75,    76,
      77,    78,   189,     0,     0,     0,     0,    80,     0,     0,
      81,     0,     0,     0,    82,   190,   191,   189,     0,     0,
       0,     0,    83,     0,     0,     0,     0,   407,     0,    84,
     190,   191,     0,     0,     0,   408,   409,   410,   411,   189,
       0,     0,     0,     0,     0,   628,    85,     0,   413,   589,
     415,   416,   190,   191,   192,   193,   418,   194,     0,     0,
       0,   590,   195,     0,   196,     0,     0,    86,    87,   192,
     193,     0,   194,    88,     0,  1013,     0,   195,     0,   196,
    1176,    89,    90,    91,    92,   629,   426,    93,     0,    94,
    1013,   192,   193,     0,   194,  1178,     0,   431,     0,   195,
       0,   196,     0,   432,   406,   407,     0,     0,   435,     0,
       0,     0,     0,   408,   409,   410,   411,     0,   437,   438,
       0,   439,     0,     0,   412,     0,   413,   414,   415,   416,
     417,     0,     0,     0,   418,     0,  -161,     0,     0,   419,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   420,   421,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,   430,   431,     0,     0,     0,     0,
       0,   432,   433,   407,     0,   434,   435,     0,     0,     0,
     436,   408,   409,   410,   411,     0,   437,   438,     0,   439,
       0,     0,     0,     0,   413,   414,   415,   416,     0,     0,
     407,     0,   418,     0,   407,     0,     0,   590,   408,   409,
     410,   411,   408,   409,   410,   411,     0,     0,     0,     0,
       0,   413,   589,   415,   416,   413,   589,   415,   416,     0,
       0,     0,   426,     0,   590,     0,     0,    73,   590,    74,
      75,    76,    77,   431,     0,     0,     0,     0,     0,   432,
       0,     0,   236,   434,   435,     0,     0,     0,     0,   426,
     604,     0,     0,   426,   437,   438,     0,   439,     0,     0,
     431,    84,     0,     0,   431,     0,   432,     0,     0,     0,
     432,   435,     0,     0,     0,   435,     0,     0,   237,     0,
       0,     0,   438,     0,   439,     0,   438,     0,   439,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
      87,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,     0,     0,     0,
       0,    94
};

static const yytype_int16 yycheck[] =
{
       1,   114,   392,   116,   117,   118,   119,   120,   392,   122,
      79,   124,   414,   126,   434,   434,    79,   500,   930,   544,
     560,    96,   951,  1092,    46,   263,   263,    46,   543,   784,
     143,   676,   391,   529,    85,    86,    87,    10,    11,    12,
      15,    92,   155,   156,   530,   501,   531,   937,    15,   162,
     163,    48,   263,    50,     6,   984,     8,    64,    15,    10,
     850,     0,    13,   263,    65,   155,   939,    13,    61,   942,
     943,    15,    81,    81,   964,   158,   966,    81,   154,   969,
      46,   155,     0,   155,   174,  1010,  1011,  1012,   613,   156,
     173,    48,   154,    50,    95,    96,   172,    34,    48,    15,
      50,    81,   174,   177,   172,   155,    48,   155,    50,    48,
     172,    50,   113,   114,   172,   116,   117,   118,   119,   120,
     172,   122,    34,   124,   174,   126,   174,   178,   179,   180,
     181,    48,    48,    50,    50,    48,   172,    50,   528,    48,
     133,    50,   143,   533,   155,   154,   154,   120,   157,   157,
     154,   158,   155,   157,   155,   156,   231,   232,   173,   174,
     155,   162,   163,   174,    13,    34,    15,   158,    17,    68,
      69,   174,   247,   248,   154,   158,  1066,   157,   175,   174,
     564,   971,   173,   172,   157,   681,   237,   546,   155,   302,
     173,   687,   837,    13,   690,    15,   682,    17,  1071,   174,
     201,  1074,  1075,   848,   172,   443,   247,   248,   691,  1099,
      34,   155,   698,    62,   156,   701,   167,   972,    64,   702,
     227,   167,   174,   172,   173,   175,    10,    11,    12,    13,
     231,   232,   443,    17,   171,   172,   173,   154,    15,   163,
      17,   263,    62,   443,   263,   770,   247,   248,   163,  1174,
     251,  1176,   172,  1178,  1144,  1145,  1181,  1182,  1183,   171,
     172,   173,   175,   174,   265,    48,   175,    50,   172,   115,
     795,    48,   172,    50,   814,   121,   172,   123,    62,   125,
     172,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   263,   172,   148,
     369,   302,   171,   172,   173,   155,   369,  1062,   154,   172,
    1239,    34,   158,   162,   160,   161,   155,   358,   167,   158,
     172,   322,   363,   364,   174,     6,   811,     8,   148,   380,
     826,   172,    48,   157,    50,   831,   120,   172,   834,   835,
     172,   827,   162,   172,   734,   828,   829,   167,   172,   173,
     734,   172,   172,    48,   172,    50,   842,   358,  1231,   845,
     846,   155,   363,   364,   148,  1155,   172,   154,    13,   156,
      15,   158,    17,   374,   375,   155,   155,   172,   162,   155,
     174,   155,   155,   167,   622,   162,   901,   172,   626,   626,
     167,   392,   175,   158,   174,   174,   242,   155,   174,  1468,
     174,   174,   172,     6,   155,     8,   407,   408,   409,   410,
     411,   622,   413,   414,   415,   626,   174,    62,   419,   173,
     174,   443,   622,   174,   443,   426,   626,   172,   155,   925,
     431,   432,  1077,   434,   435,   436,   172,   438,   439,   925,
     172,   155,   982,   155,   167,   168,   169,   174,   171,   172,
     173,   172,   155,   155,   155,   301,   173,   174,   527,   175,
     174,   154,   174,   156,   527,   158,   163,   257,   258,   155,
     511,   174,   174,   174,   172,   516,   517,   443,   934,   172,
     175,   163,   938,   524,   525,   526,   155,   155,   174,   972,
     173,   174,   543,  1018,    48,  1385,    50,   172,   994,   500,
     501,   173,   174,   148,  1149,   174,   174,   990,   991,   172,
     511,   172,  1037,   172,  1000,   516,   517,   162,   172,  1044,
     172,   173,   167,   524,   525,   526,   172,   172,   529,   913,
     531,   987,   988,   989,   151,   152,   153,   172,   560,  1451,
     172,   560,   172,   544,   545,   154,  1475,   156,   157,   158,
     172,  1047,    17,   154,   154,   156,   156,   158,   158,  1055,
     167,  1047,  1058,   154,   155,   572,   635,   172,   173,  1055,
      34,   173,  1058,   121,   122,   123,   172,   173,   174,  1062,
     173,   154,    10,    11,    12,   172,   173,   174,   589,   590,
     172,   173,   174,    49,   560,   155,   597,    62,   172,    64,
     622,   164,   603,   622,   626,   175,   155,   626,   174,   174,
     174,   680,   613,   174,   164,   174,    81,   680,   464,   174,
     466,   174,   468,   174,  1080,   155,   155,   174,  1048,  1048,
     671,   174,   174,   674,   675,   642,   643,   174,   174,   174,
      68,   174,   174,   650,   164,   652,  1048,   174,   113,    15,
     174,   116,   117,    81,    82,   120,   622,   174,   174,   174,
     626,    10,    11,    12,    13,   666,   174,   174,    17,   174,
     671,   136,   174,   674,   675,   676,   174,   174,   174,   164,
     681,   174,   174,   148,   174,   686,   687,   174,   172,   690,
     691,   174,   120,   121,   174,   123,   174,   162,   157,   157,
     128,   702,   130,   167,   168,   169,   172,   171,   172,   173,
     172,   712,  1168,    62,   721,  1171,   157,   174,   172,   172,
    1216,  1217,  1218,   172,   793,   172,   572,   172,   172,   172,
    1216,  1217,  1218,   157,     5,   157,   157,   172,   584,   172,
    1225,   177,   174,   174,  1229,   172,   174,   172,   174,   862,
     757,   167,   175,   173,   173,    81,   163,   172,   163,   781,
     163,  1551,  1552,  1553,   163,   174,   172,   768,   163,   770,
     119,   120,   174,   156,   172,    34,   817,   174,   174,  1235,
     781,   174,    10,    11,    12,   174,   172,   167,   167,   154,
     157,    49,   814,   794,   795,   814,   586,   587,   172,   148,
     172,   174,   157,   174,   174,    10,    11,    12,    13,   154,
     811,   155,    17,   162,   155,   155,   817,   155,   167,   155,
     155,   154,   172,   172,   156,   826,   156,   828,   829,   158,
     831,   102,   103,   834,   835,   172,   837,   154,   177,   173,
      68,   172,   154,    10,   172,   172,   155,   848,   814,   850,
     901,   173,   173,    81,    82,   174,   164,    62,   164,   164,
     174,   862,   164,   174,    10,    10,    10,    10,  1658,   715,
     716,   717,    10,   719,   156,   721,  1666,   723,   724,   150,
     151,   164,   407,   408,   409,   410,   411,    34,   413,   414,
     415,   155,   120,   121,   419,   123,   174,   919,   167,   167,
     128,   426,   130,   175,   156,   156,   431,   432,   983,   434,
     435,   436,   167,   438,   439,   120,   172,   177,  1403,  1404,
    1405,    15,   172,   177,   925,   172,   172,   158,   172,   174,
     172,   174,   155,   934,   155,   155,   155,   938,   939,  1435,
     155,   942,   943,   148,   156,   173,   172,   174,   173,  1435,
     167,   175,   174,   156,   156,   155,   957,   162,    10,   960,
     982,   175,   167,   982,   174,  1219,   177,   172,    34,   155,
     971,   972,    10,   174,    10,   246,  1461,   175,   249,   250,
     174,   174,   983,   174,   156,    10,   987,   988,   989,   990,
     991,   174,    10,   994,  1479,  1480,    10,  1453,    10,   156,
     155,  1457,   172,   177,   794,  1395,   174,    10,    11,    12,
      13,  1395,    15,   803,    17,   175,   982,  1018,   165,   166,
     167,   168,   169,   177,   171,   172,   173,  1049,   154,   156,
     155,   163,   174,   174,   174,   174,  1037,   172,   172,  1040,
     163,   163,   163,  1044,   174,   174,  1047,  1048,   156,    10,
     156,   175,    10,  1054,  1055,  1540,   175,  1058,  1059,    62,
     174,  1062,    10,  1548,   589,   590,   156,   156,    10,   156,
    1071,   172,   597,  1074,  1075,   174,  1077,    23,    24,  1080,
      15,  1537,   174,  1158,   175,   356,   357,   933,    34,   174,
     155,  1092,   175,   174,   155,   366,   367,   368,   174,   165,
     166,   167,   168,   169,   164,   171,   172,   173,   164,   164,
     174,   164,  1597,    10,   156,  1600,   174,   120,    10,   390,
     174,    10,   156,   172,   172,   172,   172,   156,  1241,  1242,
     174,   402,   403,   174,   174,   156,    10,   156,  1240,   174,
     930,   156,  1598,   603,  1451,   148,  1631,   937,  1149,   939,
      23,    24,   942,   943,  1155,  1398,   427,  1158,   626,   162,
    1049,    34,  1647,   919,   167,  1557,  1395,  1168,  1206,   172,
    1171,   626,   734,  1358,   964,  1019,   966,   564,    -1,   969,
    1187,  1188,    -1,  1190,   321,  1192,  1440,    -1,  1442,  1443,
    1444,  1445,  1446,    -1,  1448,    -1,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,  1206,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,  1216,  1217,  1218,    -1,   165,
     166,   167,   168,   169,  1225,   171,   172,   173,  1229,    -1,
    1231,   502,    -1,    -1,  1235,    -1,    -1,    -1,    -1,    -1,
    1241,  1242,    -1,   768,   515,    -1,    -1,   518,   519,    -1,
      -1,    -1,    -1,    10,    11,    12,    -1,  1511,  1512,  1513,
    1514,  1515,  1516,  1517,  1518,  1519,  1520,  1521,  1522,  1523,
    1524,  1525,  1526,  1527,  1528,  1529,  1066,    -1,    -1,    -1,
      -1,  1071,    -1,    -1,  1074,  1075,    -1,    -1,    -1,    -1,
      -1,    -1,   165,   166,   167,   168,   169,    -1,   171,   172,
     173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1099,
      -1,    68,    -1,    -1,   585,    -1,    -1,   588,  1572,    -1,
      -1,    -1,    -1,    -1,    81,    82,    -1,    -1,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,    -1,     8,     9,    10,
     160,   161,   162,    -1,    15,   165,   166,   167,   168,   169,
      -1,   171,   172,   173,  1144,  1145,    -1,  1358,    -1,   630,
      -1,    -1,    -1,   120,   121,    -1,   123,    -1,  1214,  1623,
      -1,   128,  1626,   130,    -1,    -1,    -1,    48,    -1,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1395,    66,    -1,   154,   669,   670,
      71,    -1,  1403,  1404,  1405,    -1,    -1,    -1,    -1,    80,
      81,    -1,    -1,    -1,   685,    -1,    -1,   688,   689,    -1,
      -1,   692,    -1,    -1,    65,   696,    -1,    -1,   699,   700,
      -1,    -1,   703,    -1,  1435,   706,   707,    -1,    -1,   710,
    1447,  1231,    -1,    -1,   115,    -1,    -1,   118,    89,   120,
      -1,    -1,  1453,    -1,   125,    -1,  1457,    -1,   129,    -1,
    1461,   132,    -1,    -1,    -1,    -1,   137,  1468,   109,   140,
      -1,    10,    11,    12,    -1,    -1,    -1,    -1,  1479,  1480,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   162,    -1,  1500,   165,   166,    -1,    -1,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,   147,   778,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     2,    -1,    -1,    -1,
      -1,    -1,    -1,  1048,  1531,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,  1537,    -1,    -1,  1540,
      -1,    -1,    81,    82,    -1,    -1,  1219,  1548,    -1,    -1,
    1551,  1552,  1553,    -1,    -1,    -1,  1557,   198,   199,   830,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    -1,   840,
     841,    -1,    -1,    59,    60,    61,    62,    63,    -1,    -1,
      66,   120,   121,    -1,   123,   226,    -1,   858,    -1,   128,
      -1,   130,    -1,    -1,    -1,  1385,  1597,  1598,    -1,  1600,
      -1,  1447,    -1,    -1,   245,    -1,    -1,    -1,  1398,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   258,   259,   158,
      -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,   167,    -1,
    1631,    -1,   903,  1640,  1641,  1642,    -1,  1644,    -1,    -1,
      -1,    10,    11,    12,    -1,    -1,  1647,    -1,    -1,  1495,
    1496,  1497,  1498,    -1,  1500,    -1,  1502,  1658,    -1,    -1,
      -1,  1451,   303,   304,    -1,  1666,    -1,    -1,   309,    -1,
     941,    -1,    -1,   944,   945,   161,   947,    -1,   949,    -1,
     321,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   963,    -1,    -1,    -1,   967,   968,    -1,    68,
      -1,    -1,   973,    -1,    -1,    -1,    -1,   978,    10,    11,
      12,    -1,    81,    82,    -1,   986,    -1,    -1,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   233,    -1,    -1,
     391,   120,   121,    -1,   123,   396,    -1,    -1,    -1,   128,
      -1,   130,    -1,    -1,    -1,    -1,    68,  1440,    -1,  1442,
    1443,  1444,  1445,  1446,    -1,  1448,    -1,   263,    -1,    81,
      82,    -1,  1053,    -1,    -1,  1056,  1057,    -1,    -1,    -1,
      -1,    -1,    -1,   162,    -1,    -1,   437,    -1,   167,  1070,
      -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,    -1,
      -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,   120,   121,
      -1,   123,    -1,    -1,    -1,    -1,   128,  1098,   130,    -1,
     316,   317,    -1,    -1,    -1,    -1,    -1,   323,  1511,  1512,
    1513,  1514,  1515,  1516,  1517,  1518,  1519,  1520,  1521,  1522,
    1523,  1524,  1525,  1526,  1527,  1528,  1529,    -1,   499,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,  1142,    -1,   514,    -1,    -1,    -1,    81,    82,    -1,
       3,     4,     5,     6,    -1,     8,     9,    10,   374,    -1,
      -1,    -1,    15,    -1,    -1,    -1,   537,    -1,  1169,    -1,
      -1,  1172,    -1,    -1,    -1,   546,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1185,    -1,   120,   121,    -1,   123,
      -1,    -1,    -1,  1194,   128,    48,   130,    50,    51,    -1,
     416,    -1,    -1,  1204,    -1,     3,     4,     5,     6,    -1,
       8,     9,    10,    66,  1215,   586,   587,    15,    71,    -1,
     154,    -1,    -1,  1626,    -1,    -1,    -1,    80,    81,    -1,
      -1,    -1,    -1,   604,    -1,   606,   607,   608,   609,   610,
     611,    -1,    -1,   614,    17,    18,    19,    20,    21,    22,
      23,    24,    -1,    51,    -1,    -1,    -1,   628,   629,    -1,
      -1,    34,   115,    -1,    -1,   118,   637,   120,    66,    22,
      23,    24,   125,    71,   490,    -1,   129,    -1,    -1,   132,
      -1,    34,    80,    81,   137,    -1,    -1,   140,    86,   505,
      -1,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,   162,
      -1,    -1,   165,   166,    -1,    -1,    -1,   170,    -1,   172,
     118,    -1,   120,   176,   695,    -1,    -1,   125,    -1,    -1,
      -1,   129,    -1,    11,   132,    -1,    -1,    -1,    -1,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   568,   569,   570,   571,    -1,   573,    -1,    -1,
      -1,    -1,    -1,    -1,   162,    -1,   582,   165,   166,   167,
      -1,    -1,   170,    -1,   172,   173,    -1,    55,   176,    57,
      58,    59,    60,    -1,    -1,   756,  1387,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,    -1,   171,   172,
     173,    -1,    -1,    -1,   620,    -1,    -1,    -1,    -1,    -1,
      -1,    89,   165,   166,   167,   168,   169,    -1,   171,   172,
     173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    10,   813,    -1,    -1,   661,    15,    -1,    -1,   127,
     128,  1452,    -1,    -1,    -1,  1456,    -1,    -1,    -1,  1460,
     676,    -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,    -1,
      -1,   149,  1473,    -1,    -1,  1476,  1477,  1478,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   864,    22,    23,    24,    66,    -1,    -1,
      -1,    -1,    71,    -1,    -1,    -1,    34,    -1,   724,    -1,
      -1,    80,    81,    -1,    -1,    -1,    10,    11,    12,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,   745,
     746,   747,   748,   749,   750,   751,   752,   753,   754,   755,
      -1,  1542,   758,    -1,    -1,    -1,   115,    -1,    -1,   118,
      -1,   120,   923,  1554,  1555,    -1,   125,    -1,    -1,    -1,
     129,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,
      -1,   140,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   953,    -1,   800,    -1,    -1,    81,    82,    -1,
      -1,    -1,    -1,   162,    -1,    -1,   165,   166,    -1,    -1,
      -1,   170,    -1,   172,  1605,    -1,    -1,   176,    -1,     3,
       4,     5,     6,    -1,     8,     9,    10,    11,    12,    -1,
      -1,   837,    -1,    -1,    -1,    -1,   120,   121,  1629,   123,
      -1,    -1,   848,    -1,   128,    -1,   130,   165,   166,   167,
     168,   169,  1013,   171,   172,   173,    -1,  1648,    -1,    -1,
      -1,   145,    -1,   869,    -1,    -1,  1657,    51,    52,    -1,
      -1,    55,    -1,    57,    58,    59,    60,    61,    62,    -1,
      -1,    -1,    66,    67,    -1,    -1,    70,    71,    -1,  1050,
      74,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,    -1,
      -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,    -1,    -1,    -1,    10,    11,    12,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,    -1,    10,    11,
      12,   125,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,    -1,    -1,   137,   960,    -1,   140,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,    -1,    -1,    -1,    -1,
      -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,
      -1,   165,   166,   167,    68,    -1,   170,    -1,   172,   173,
      -1,    -1,   176,    -1,    -1,    -1,    68,    81,    82,    -1,
      -1,    -1,    -1,  1009,    -1,    -1,    -1,    -1,    -1,    81,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,  1027,    -1,    -1,    -1,    -1,  1032,    62,    63,    64,
      65,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,   123,
      75,    76,    77,    78,   128,    -1,   130,    -1,   120,   121,
     122,   123,    -1,    88,    -1,    -1,   128,    -1,   130,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,   141,
      -1,  1077,    -1,   157,   146,    -1,    -1,    34,   113,  1240,
      -1,    -1,    -1,    -1,    -1,    -1,  1092,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   146,    -1,   148,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      -1,  1147,    -1,  1149,    -1,  1151,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,    -1,   171,   172,   173,    -1,   106,    -1,
     177,    -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,    10,    11,    -1,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
      -1,    -1,    -1,    10,    11,    12,    -1,    -1,    -1,    10,
      11,    12,    -1,    -1,    -1,    52,    -1,    -1,    55,    -1,
      57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    70,    -1,    -1,    55,    74,    57,    58,
      59,    60,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    70,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    68,    -1,   106,
      89,    -1,    -1,    -1,    81,    82,    -1,    -1,    -1,  1530,
      81,    82,   119,    -1,    -1,    -1,    -1,   106,  1384,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   141,   142,   143,   144,   127,   128,
     147,    -1,   149,   120,   121,    -1,   123,   154,  1569,   120,
     121,   128,   123,   130,    -1,   144,    -1,   128,    -1,   130,
     149,    -1,    -1,   170,   141,    -1,    -1,    -1,    -1,   146,
     141,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,   172,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    -1,    -1,    -1,
      -1,    -1,  1468,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1532,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,    -1,
      -1,    -1,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
      -1,    -1,    -1,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,    -1,   176,   177,     3,     4,     5,
       6,    -1,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    52,    34,    -1,    55,
      -1,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
      66,    67,    -1,    -1,    70,    71,    -1,    -1,    74,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,
      86,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,    -1,
      -1,   137,    -1,    -1,   140,   141,   142,   143,   144,    -1,
      -1,   147,    -1,   149,     3,     4,     5,     6,    -1,     8,
       9,    10,    11,    -1,    -1,    -1,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,   172,   173,    -1,    -1,
     176,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,    -1,   171,   172,   173,    -1,    -1,    -1,
     177,    -1,    51,    -1,    -1,    -1,    55,    -1,    57,    58,
      59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,    68,
      69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,   128,
     129,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,
      -1,   140,    -1,    -1,    -1,   144,     3,     4,     5,     6,
     149,     8,     9,    10,    11,   154,    -1,    -1,    15,    -1,
      -1,    -1,    -1,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,   172,   173,    -1,    -1,   176,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    34,    -1,    55,    -1,
      57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,
      -1,    -1,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,    -1,
     127,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
     137,    -1,    -1,   140,    -1,    -1,    -1,   144,     3,     4,
       5,     6,   149,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,   172,   173,    -1,    -1,   176,
      -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,    -1,   171,   172,   173,    51,    -1,    -1,   177,
      55,    -1,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    81,    82,    -1,    -1,
      -1,    86,    -1,    -1,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,    -1,    -1,    -1,    -1,
     125,    -1,   127,   128,   129,    -1,    -1,   132,    -1,    -1,
      -1,    -1,   137,    -1,    -1,   140,    -1,    -1,    -1,   144,
       3,     4,     5,     6,   149,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,   172,   173,   174,
      -1,   176,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
      34,    -1,    55,    -1,    57,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
      -1,    -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,    -1,    -1,
      -1,    -1,   125,    -1,   127,   128,   129,    -1,    -1,   132,
      -1,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,    -1,
      -1,   144,     3,     4,     5,     6,   149,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,    -1,   172,
     173,    -1,   156,   176,    -1,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,    -1,   171,   172,   173,
      51,    52,    -1,    -1,    55,    -1,    57,    58,    59,    60,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      81,    82,    -1,    -1,    -1,    86,    -1,    -1,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,    -1,    -1,    55,    -1,
      57,    58,    59,    60,   115,    -1,   117,   118,    -1,   120,
      -1,    -1,    -1,    -1,   125,    -1,   127,   128,   129,    -1,
      -1,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,   140,
      -1,    -1,    89,   144,     3,     4,     5,     6,   149,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,   106,
      -1,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,   172,   173,    -1,    -1,   176,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    55,   144,    57,    58,
      59,    60,   149,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    81,    82,    -1,   172,    -1,    86,    -1,    -1,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,   128,
     129,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,
      -1,   140,    -1,    -1,    -1,   144,     3,     4,     5,     6,
     149,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,    -1,   172,   173,   174,    -1,   176,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    34,    -1,    55,    -1,
      57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,
      -1,    -1,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,    -1,
     127,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
     137,    -1,    -1,   140,    -1,    -1,    -1,   144,     3,     4,
       5,     6,   149,     8,     9,    10,    11,   154,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,    -1,   172,   173,   155,    -1,   176,
      -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,    -1,   171,   172,   173,    51,    -1,    -1,    -1,
      55,    -1,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    81,    82,    -1,    -1,
      -1,    86,    -1,    -1,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,    -1,    -1,    -1,    -1,
     125,    -1,   127,   128,   129,    -1,    -1,   132,    -1,    -1,
      -1,    -1,   137,    -1,    -1,   140,    -1,    -1,    -1,   144,
       3,     4,     5,     6,   149,     8,     9,    10,    11,   154,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,    -1,   172,   173,    -1,
      -1,   176,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,
      34,    -1,    55,    -1,    57,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
      -1,    -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,    -1,    -1,
      -1,    -1,   125,    -1,   127,   128,   129,    -1,    -1,   132,
      -1,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,    -1,
      -1,   144,     3,     4,     5,     6,   149,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,    -1,   172,
     173,   174,    -1,   176,    -1,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,    -1,   171,   172,   173,
      51,    -1,    -1,    -1,    55,    -1,    57,    58,    59,    60,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      81,    82,    -1,    -1,    -1,    86,    -1,    -1,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
      -1,    -1,    -1,    -1,   125,    -1,   127,   128,   129,    -1,
      -1,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,   140,
      -1,    -1,    -1,   144,     3,     4,     5,     6,   149,     8,
       9,    10,    11,    -1,    18,    19,    20,    21,    22,    23,
      24,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
      34,   172,   173,    -1,    -1,   176,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    34,    -1,    55,    -1,    57,    58,
      59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,   128,
     129,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,
      -1,   140,    -1,    -1,    -1,   144,     3,     4,     5,     6,
     149,     8,     9,    10,    -1,    -1,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,    -1,   171,   172,   173,
      -1,   170,    -1,   172,   173,    -1,    -1,   176,    -1,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
      -1,   171,   172,   173,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    81,    -1,    -1,    -1,    -1,    86,
      -1,    -1,    -1,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,     3,
       4,     5,     6,    -1,     8,     9,    10,    -1,    -1,    -1,
      -1,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,    -1,
      -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,   165,   166,
     167,    -1,    66,   170,    -1,   172,   173,    71,    -1,   176,
      20,    21,    22,    23,    24,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    34,    -1,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,   120,    -1,    -1,    -1,
      -1,   125,    -1,    -1,     6,   129,    -1,    -1,   132,    10,
      11,    -1,    -1,   137,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,   170,    -1,   172,   173,
      -1,    52,   176,    -1,    55,    -1,    57,    58,    59,    60,
      61,    -1,    -1,    -1,    -1,    -1,    67,    69,    -1,    70,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    10,    11,
      12,    82,    -1,    15,    -1,    -1,    -1,    -1,    89,    -1,
      -1,    -1,    -1,   163,   164,   165,   166,   167,   168,   169,
      -1,   171,   172,   173,    -1,   106,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,   119,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      10,    11,   133,    -1,    -1,    -1,    68,    -1,    -1,    -1,
     141,   142,   143,   144,    -1,    -1,   147,    -1,   149,    81,
      82,    -1,    -1,   155,    -1,    -1,   158,    -1,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   170,
     172,   173,    52,    -1,   176,    55,    -1,    57,    58,    59,
      60,    61,    -1,    -1,    -1,    -1,    -1,    67,   120,   121,
      70,   123,    -1,    -1,    74,    -1,   128,    -1,   130,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,    34,    -1,
      -1,    55,    -1,    57,    58,    59,    60,    -1,    -1,   119,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   141,   142,   143,   144,    89,    -1,   147,    -1,   149,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,   106,    -1,    -1,    -1,    -1,    -1,    34,    -1,
     170,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,    34,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
     144,    -1,    -1,    -1,    -1,   149,    -1,    -1,    34,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,   172,   155,
      -1,    -1,    -1,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,    -1,   171,   172,   173,   174,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    -1,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,    -1,   171,   172,   173,   174,    -1,
      -1,    -1,    -1,    -1,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,    -1,   171,   172,   173,   174,
      -1,    -1,    -1,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,    -1,   171,   172,   173,   174,    -1,
      -1,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,    -1,   171,   172,   173,   174,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      -1,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,    -1,   171,   172,   173,   174,    -1,    -1,
      -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,    -1,   171,   172,   173,   174,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,    -1,   171,   172,   173,   174,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,    -1,   171,   172,   173,   174,    -1,    -1,    -1,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
      -1,   171,   172,   173,   174,    -1,   157,    -1,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
     171,   172,   173,    -1,    -1,   157,    -1,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,    -1,   171,
     172,   173,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,   157,    -1,
     159,   160,   161,   162,    -1,    34,   165,   166,   167,   168,
     169,    -1,   171,   172,   173,    -1,    -1,    -1,    -1,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,   168,   169,
      -1,   171,   172,   173,    18,    19,    20,    21,    22,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    18,    19,
      20,    21,    22,    23,    24,    -1,    -1,    -1,    55,    -1,
      57,    58,    59,    60,    34,    18,    19,    20,    21,    22,
      23,    24,    -1,    -1,    18,    19,    20,    21,    22,    23,
      24,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    89,    -1,    -1,   161,   162,   163,   164,   165,
     166,   167,   168,   169,    -1,   171,   172,   173,    -1,   106,
      -1,    -1,    -1,   162,   163,   164,   165,   166,   167,   168,
     169,    -1,   171,   172,   173,    20,    21,    22,    23,    24,
     127,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,
      -1,    -1,   149,    -1,    -1,    -1,   160,   161,   162,    -1,
      -1,   165,   166,   167,   168,   169,    -1,   171,   172,   173,
      -1,    -1,    -1,    -1,    -1,   172,   163,   164,   165,   166,
     167,   168,   169,    -1,   171,   172,   173,    -1,    -1,    -1,
      -1,   161,   162,    -1,    -1,   165,   166,   167,   168,   169,
      17,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,   162,
       6,    -1,   165,   166,   167,   168,   169,    -1,   171,   172,
     173,   165,   166,   167,   168,   169,    -1,   171,   172,   173,
      -1,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    -1,    64,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,
      -1,    10,    11,    12,    81,    -1,    62,    63,    64,    65,
     165,   166,   167,   168,   169,    -1,   171,   172,   173,    75,
      76,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    -1,   113,    -1,    -1,   116,
     117,    -1,    -1,   120,    -1,    -1,    55,    -1,    57,    58,
      59,    60,    61,    62,    10,    11,    12,   113,    -1,   136,
      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,
      -1,   148,    -1,    82,   130,    -1,    -1,    -1,    -1,   135,
      89,    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,
     146,    -1,   148,    -1,    -1,    11,    12,   106,    -1,    55,
      -1,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,    -1,    55,    82,    57,    58,    59,
      60,    -1,   141,    89,    -1,   144,    52,    -1,   147,    55,
     149,    57,    58,    59,    60,    61,    62,    -1,    -1,    -1,
     106,    67,    -1,    -1,    70,    -1,    -1,    -1,    74,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,   127,   128,    89,    -1,    -1,   106,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,
     106,   147,    -1,   149,    11,    12,    -1,   127,   128,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,
      -1,   127,   128,    -1,   144,    -1,    -1,   133,    -1,   149,
      11,    12,    -1,    -1,    -1,   141,   142,   143,   144,    -1,
      -1,   147,    -1,   149,    -1,    52,    -1,    -1,    55,    -1,
      57,    58,    59,    60,    61,    62,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    70,    -1,    -1,    -1,    74,    -1,    -1,
      -1,    52,    -1,    -1,    55,    82,    57,    58,    59,    60,
      61,    -1,    89,    -1,    -1,    -1,    67,    -1,    -1,    70,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,   106,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     127,   128,    -1,    11,    12,   106,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   141,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   124,    -1,    -1,   127,   128,    -1,    11,
      -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     141,   142,   143,   144,    52,    -1,   147,    55,   149,    57,
      58,    59,    60,    61,    -1,    -1,    -1,    -1,    -1,    67,
      -1,    -1,    70,    -1,    -1,    -1,    74,    -1,    -1,    -1,
      52,    -1,    -1,    55,    82,    57,    58,    59,    60,    61,
      62,    89,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,
      -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,   106,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,
     128,    -1,    11,    -1,   106,   133,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,
      -1,   149,    -1,    -1,    -1,   127,   128,    -1,    11,    -1,
      -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,
     142,   143,   144,    52,    -1,   147,    55,   149,    57,    58,
      59,    60,    61,    62,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    70,    -1,    -1,    -1,    74,    -1,    -1,    -1,    52,
      -1,    -1,    55,    82,    57,    58,    59,    60,    61,    -1,
      89,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
      -1,    74,    -1,    -1,    -1,    -1,    -1,   106,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    10,    11,    12,    -1,   127,   128,
      -1,    11,    -1,   106,   133,    -1,    -1,    -1,    -1,    10,
      11,    12,   141,   142,   143,   144,    -1,    -1,   147,    -1,
     149,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    10,    11,    12,    -1,    -1,    -1,    -1,   141,   142,
     143,   144,    52,    -1,   147,    55,   149,    57,    58,    59,
      60,    61,    68,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      70,    -1,    -1,    -1,    74,    81,    82,    68,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    54,    -1,    89,
      81,    82,    -1,    -1,    -1,    62,    63,    64,    65,    68,
      -1,    -1,    -1,    -1,    -1,    74,   106,    -1,    75,    76,
      77,    78,    81,    82,   120,   121,    83,   123,    -1,    -1,
      -1,    88,   128,    -1,   130,    -1,    -1,   127,   128,   120,
     121,    -1,   123,   133,    -1,   141,    -1,   128,    -1,   130,
     146,   141,   142,   143,   144,   114,   113,   147,    -1,   149,
     141,   120,   121,    -1,   123,   146,    -1,   124,    -1,   128,
      -1,   130,    -1,   130,    53,    54,    -1,    -1,   135,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    -1,   145,   146,
      -1,   148,    -1,    -1,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    -1,   163,    -1,    -1,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,    -1,    -1,    -1,
      -1,    -1,   121,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,   130,   131,    54,    -1,   134,   135,    -1,    -1,    -1,
     139,    62,    63,    64,    65,    -1,   145,   146,    -1,   148,
      -1,    -1,    -1,    -1,    75,    76,    77,    78,    -1,    -1,
      54,    -1,    83,    -1,    54,    -1,    -1,    88,    62,    63,
      64,    65,    62,    63,    64,    65,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    78,    75,    76,    77,    78,    -1,
      -1,    -1,   113,    -1,    88,    -1,    -1,    55,    88,    57,
      58,    59,    60,   124,    -1,    -1,    -1,    -1,    -1,   130,
      -1,    -1,    70,   134,   135,    -1,    -1,    -1,    -1,   113,
     114,    -1,    -1,   113,   145,   146,    -1,   148,    -1,    -1,
     124,    89,    -1,    -1,   124,    -1,   130,    -1,    -1,    -1,
     130,   135,    -1,    -1,    -1,   135,    -1,    -1,   106,    -1,
      -1,    -1,   146,    -1,   148,    -1,   146,    -1,   148,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,    -1,
      -1,   149
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,   151,   152,   153,   179,   180,   290,     3,     4,     5,
       6,     8,     9,    10,    11,    51,    55,    57,    58,    59,
      60,    66,    70,    71,    80,    81,    82,    86,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   115,   117,   118,   120,
     125,   127,   128,   129,   132,   137,   140,   144,   149,   162,
     165,   166,   167,   170,   172,   173,   176,   280,   281,   289,
      11,    12,    52,    55,    57,    58,    59,    60,    61,    62,
      67,    70,    74,    82,    89,   106,   127,   128,   133,   141,
     142,   143,   144,   147,   149,   242,   243,   247,   248,   250,
     256,   258,   262,   263,   268,   269,   270,   271,     0,    48,
      50,   190,   290,   154,   172,   172,   172,   172,   172,   172,
     172,   163,   172,   163,   172,   172,   172,   172,   172,   172,
     172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
     172,   172,   172,   172,    11,    52,    67,   141,   142,   245,
     262,   263,   268,   280,   163,   172,   172,    15,   172,   280,
     163,   172,   172,   172,   280,   280,   280,   280,   280,    11,
      55,    57,    58,    59,    60,    70,    82,    89,   106,   127,
     128,   144,   149,   247,   278,   280,    10,    11,    12,    68,
      81,    82,   120,   121,   123,   128,   130,   158,   162,   167,
     284,   285,   287,   290,   280,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    34,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   171,   172,   173,     6,
       8,   242,   243,   172,    61,   133,    70,   106,   269,   269,
     269,   287,   172,   269,    13,    15,    17,    62,   148,   162,
     167,   172,   240,   241,   290,   241,   257,   190,   190,   145,
     191,   192,   287,   172,   156,   181,   277,   278,   290,   277,
     247,   277,   277,   277,   277,   277,   247,   277,   247,   277,
     247,   277,   247,   247,   247,   247,   247,   247,   247,   247,
     247,   247,   247,   247,   247,   247,   247,   247,   277,   172,
     287,   172,   172,   190,   190,   174,   247,   277,   277,   172,
     247,   247,   247,   280,   277,   277,   174,   155,   174,   287,
     287,   155,   177,   158,   230,   290,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   287,   174,   278,
     280,   241,   241,    52,   280,   247,   167,   287,   190,   240,
     241,   240,   241,   190,   190,    15,    17,   162,   167,   190,
     225,   226,   235,   290,   173,   154,    10,    11,    12,   120,
     157,   288,    10,    11,    12,   120,   154,   287,   288,   287,
      49,   155,   172,    11,    52,    67,   141,   142,   244,   248,
     250,   256,   262,   263,   268,   280,    53,    54,    62,    63,
      64,    65,    73,    75,    76,    77,    78,    79,    83,    88,
     107,   108,   109,   110,   111,   112,   113,   114,   121,   122,
     123,   124,   130,   131,   134,   135,   139,   145,   146,   148,
     184,   186,   187,   189,   193,   213,   264,   267,   290,   175,
     174,   174,   174,   174,   174,   174,   174,   164,   174,   164,
     174,   174,   174,   174,   155,   174,   155,   174,   155,   174,
     174,   174,   174,   174,   174,   174,   174,   174,   174,   174,
     174,   280,   247,   277,   287,   287,   164,   174,   174,   287,
     174,   164,   174,   174,   174,   174,   280,   280,    15,   162,
     285,   172,   210,   290,   280,   157,   174,   177,   174,   174,
     174,   190,   190,    13,    15,    17,    62,   148,   162,   167,
     240,   290,   240,   240,   190,   190,   190,    62,   124,   242,
     243,   174,    15,   155,   276,   280,   290,   260,   261,   290,
      11,   259,   269,   157,   249,   251,   157,   190,   191,     3,
       4,     5,     9,    10,    15,    51,    66,    71,    80,    81,
     115,   118,   120,   125,   129,   132,   137,   140,   162,   165,
     166,   170,   172,   176,   227,   228,   235,   236,   282,   283,
     289,   290,   172,   287,   172,   174,   190,   190,   174,    76,
      88,   189,   189,   189,   189,   189,   189,     6,   189,   213,
     189,   280,   157,   188,   114,   189,   172,   172,   172,   172,
     172,   172,   189,   154,   190,   157,   157,   157,   189,   189,
     172,   187,   189,   193,   214,   189,   189,   197,    74,   114,
     287,   189,   189,    10,    11,   119,   154,   170,   200,   204,
     244,   246,   172,   172,   247,   247,   247,   174,   174,   174,
     172,   174,   172,   230,   225,    17,    62,    64,    81,   113,
     116,   117,   120,   136,   148,   162,   190,   280,   240,   167,
     287,   190,   240,   240,   190,   190,   173,   240,   240,   240,
     124,   242,   243,   235,    13,    17,    62,   148,   162,   167,
     172,   238,   288,   290,    13,    15,    17,    62,   148,   162,
     167,   172,   239,   210,    15,   235,   177,   287,   175,   259,
     180,    81,   252,   290,   191,   172,   163,   163,   245,   163,
      15,   172,   282,   163,   172,   280,   280,   280,   280,   247,
     278,   280,   174,    15,   155,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    34,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   171,   172,   173,    52,
     280,   247,   190,   287,   288,   287,   190,   189,   174,   186,
     154,   287,   287,   287,   287,   287,   287,   287,   180,   287,
     280,   163,    10,    11,   204,   244,   246,   287,   287,   156,
     190,   172,   172,    62,   242,   185,   287,   195,   154,   156,
     158,   232,   156,   194,   278,   278,   174,   174,   174,   278,
     278,   174,   280,   172,    34,   223,   290,   190,   190,   240,
     240,   240,   276,   174,   174,   174,   242,   243,   238,   239,
     167,   190,   238,   238,   190,   190,   238,   173,   230,   190,
     167,   287,   190,   239,   239,   190,   190,   239,   173,   230,
     190,   190,   190,   175,   157,   253,   254,   290,    49,   247,
     247,   247,   172,   247,   172,   247,   247,   247,   280,   174,
     174,    15,   236,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   287,   174,   278,   280,   174,   174,
     174,   157,   189,   180,   154,   155,   155,   155,   155,   155,
     155,   175,   154,   155,   174,    10,    11,    12,    61,    62,
     141,   215,   216,   217,   218,   219,   268,   290,   172,   232,
     198,   156,   156,   158,   201,    10,    13,   167,   203,   242,
      13,    17,    62,   148,   162,   167,   237,   288,   290,   180,
     172,   154,   156,   157,   158,   231,   272,   273,    68,    69,
     154,   280,    13,    17,    62,   119,   148,   162,   167,   172,
     196,   220,   222,   288,   174,   174,   174,   174,   210,   174,
     174,   287,    62,   245,   154,   240,   177,   172,   172,   172,
     238,   239,   230,   230,   190,   238,   238,   238,   174,   276,
     190,   190,   239,   239,   239,   174,   276,   223,   155,   158,
     121,   122,   123,   141,   146,   255,   286,   287,   154,   155,
     190,   174,   164,   164,   277,   164,   287,   174,   164,   174,
     174,   280,   157,   174,   177,   259,   175,   266,    10,    10,
      10,    10,    10,    10,   265,   289,   156,   219,   164,   155,
      15,   287,    13,    17,    62,   148,   162,   167,   172,   238,
     239,   199,   222,   247,   225,   174,   167,   220,   225,   237,
     167,   190,   237,   237,   190,   190,   172,   173,   190,   175,
     205,   272,   182,   183,   287,    68,    69,   175,   274,   290,
     156,   156,   154,   233,   234,   280,   290,   156,   167,   190,
     220,     6,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    34,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    69,   115,   155,   158,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   172,
     173,   176,   211,   220,   190,   190,   220,   157,   172,   173,
     223,   158,   230,   232,   190,   190,    15,   174,   245,   241,
     272,   190,   225,   225,   225,   230,   230,   238,   172,   177,
     239,   172,   177,   280,   146,   286,   146,   286,   146,   286,
     287,   121,   122,   123,    15,   180,   255,   172,   172,   174,
     172,   174,   172,   280,   180,   155,   155,   174,   155,   224,
     290,   155,   155,   155,   180,   174,   238,   239,   187,   193,
     212,   213,   218,   287,   158,   167,   190,   190,   190,   158,
     229,   290,   230,   232,   156,   174,   172,   220,   174,   174,
     172,   190,   237,   237,   237,   208,   276,   225,   175,   154,
     155,   154,   172,   156,   156,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    74,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    87,    88,    89,   106,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   176,
     177,   275,   233,   175,   155,   190,   220,    10,   174,   177,
     190,   220,   220,   174,   280,   221,   276,   280,   155,   223,
     174,   241,   175,   174,   174,   174,   225,   190,   225,   190,
     155,   286,   286,   286,   286,   286,   286,   175,   278,   278,
     278,   278,   175,    10,    10,   156,    10,   174,    10,    10,
      10,   175,   156,   229,   247,   190,    51,    66,    71,   125,
     129,   132,   162,   165,   166,   167,   170,   172,   176,   279,
     281,   155,   210,   202,   174,   172,   210,   209,   237,   225,
     177,   174,   272,   183,   277,   277,   274,   175,   154,   280,
     220,   190,   227,   177,   196,   154,   210,   210,   210,   174,
     174,   174,   174,   174,   174,   174,   155,   174,   155,   156,
     155,   174,   174,   155,   174,   172,   163,   163,   163,    15,
     172,   279,   163,   279,   279,   279,   279,   279,   247,   278,
     279,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      34,   159,   160,   161,   162,   165,   166,   167,   168,   169,
     171,   172,   173,   199,   190,   225,   172,   206,   190,   225,
     174,   190,   210,   175,   175,   174,   175,   233,   174,   190,
     272,   190,   190,   190,   210,   210,   156,    10,   156,    10,
      10,   156,   156,    10,   156,   247,   247,   247,   247,   172,
     247,   247,   174,   174,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   287,   174,   278,   280,   174,   207,   225,
     174,   210,   190,    15,   175,   210,   175,   223,   223,   223,
     190,   190,   155,   224,   174,   155,   155,   174,   174,   164,
     164,   164,   287,   174,   164,   279,   157,   174,   177,   210,
     225,   174,   210,   190,    10,   174,   156,    10,    10,   156,
     172,   172,   172,   174,   172,   279,   190,   174,   210,   156,
     174,   155,   174,   278,   278,   278,   278,   210,   190,   156,
      10,   156,   174,   174,   174,   174,   190,   223,   174,   223,
     156
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   178,   179,   179,   179,   180,   180,   181,   180,   182,
     182,   183,   183,   183,   185,   184,   186,   186,   186,   186,
     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
     186,   186,   186,   188,   187,   189,   189,   189,   189,   189,
     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   190,   190,   190,   190,   190,   191,   191,
     192,   192,   194,   193,   193,   195,   193,   193,   193,   196,
     196,   198,   197,   197,   199,   199,   201,   200,   202,   200,
     203,   200,   205,   204,   206,   204,   207,   204,   208,   204,
     209,   204,   204,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   212,   212,   212,
     213,   214,   213,   213,   213,   215,   215,   216,   216,   217,
     217,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     219,   219,   219,   219,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   221,   220,   222,   222,   223,
     223,   223,   224,   224,   225,   225,   225,   225,   225,   226,
     226,   227,   227,   227,   227,   227,   228,   228,   229,   229,
     230,   230,   231,   231,   231,   231,   231,   232,   232,   232,
     232,   232,   232,   233,   233,   233,   234,   234,   234,   234,
     235,   235,   235,   235,   235,   235,   235,   236,   236,   237,
     237,   237,   237,   237,   237,   237,   237,   237,   238,   238,
     238,   238,   238,   238,   238,   238,   238,   238,   238,   239,
     239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
     240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   242,   242,   242,   242,   242,   242,
     242,   242,   242,   242,   242,   242,   243,   244,   244,   244,
     244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
     245,   245,   245,   245,   245,   245,   245,   245,   246,   246,
     247,   247,   247,   247,   249,   248,   251,   250,   252,   252,
     253,   253,   254,   254,   255,   255,   255,   255,   255,   255,
     255,   255,   255,   255,   257,   256,   258,   258,   258,   258,
     259,   259,   260,   260,   260,   261,   261,   261,   262,   262,
     262,   263,   263,   263,   265,   264,   266,   264,   264,   264,
     267,   267,   267,   267,   268,   268,   268,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   270,   270,   270,   271,   273,   272,   274,   274,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   276,   276,   277,   277,
     278,   278,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   281,   281,   281,   281,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   281,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   281,   281,   281,
     281,   281,   281,   281,   281,   282,   282,   282,   282,   282,
     282,   282,   282,   282,   282,   282,   282,   282,   282,   282,
     282,   282,   282,   282,   282,   282,   282,   282,   282,   282,
     282,   282,   282,   282,   282,   282,   282,   282,   282,   282,
     282,   282,   282,   282,   282,   282,   282,   282,   282,   282,
     283,   283,   283,   283,   283,   283,   283,   283,   283,   283,
     283,   284,   284,   284,   284,   284,   285,   285,   285,   285,
     286,   286,   286,   287,   287,   287,   287,   287,   287,   287,
     287,   287,   287,   287,   288,   288,   288,   288,   289,   289,
     289,   289,   290
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     3,     0,     4,     1,
       3,     4,     5,     4,     0,     5,     1,     1,     1,     1,
       1,     2,     1,     1,     2,     2,     2,     2,     8,    11,
       9,    11,    13,    15,     7,     9,    12,     9,     9,    13,
       9,     7,     5,     0,     3,     1,     2,     2,     3,     2,
       2,     2,     2,     4,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     4,     7,     5,     5,     1,     3,
       1,     4,     0,     4,     3,     0,     4,     3,     1,     2,
       4,     0,     4,     3,     2,     4,     0,     7,     0,    10,
       0,     7,     0,     8,     0,    12,     0,    13,     0,     8,
       0,     9,     1,     1,     2,     2,     2,     4,     2,     2,
       2,     2,     2,     2,     4,     5,     6,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       2,     0,     6,     2,     2,     1,     1,     1,     3,     1,
       1,     1,     2,     4,     2,     3,     3,     4,     2,     3,
       1,     1,     1,     1,     2,     3,     4,     2,     2,     3,
       3,     3,     4,     5,     3,     0,     7,     2,     3,     1,
       3,     4,     1,     2,     1,     1,     1,     3,     2,     1,
       3,     1,     1,     1,     3,     2,     1,     3,     1,     2,
       1,     2,     1,     3,     5,     3,     3,     1,     3,     3,
       3,     3,     4,     1,     1,     2,     1,     3,     3,     5,
       4,     5,     6,     4,     5,     6,     3,     1,     1,     1,
       2,     2,     2,     3,     3,     3,     4,     5,     1,     2,
       2,     2,     3,     3,     3,     4,     5,     8,     3,     1,
       3,     2,     2,     3,     3,     3,     4,     5,     8,     3,
       1,     1,     3,     2,     2,     3,     3,     3,     4,     5,
       1,     1,     3,     2,     2,     3,     3,     3,     4,     5,
       6,    11,    11,    11,     1,     1,     2,     1,     1,     1,
       3,     5,     4,     4,     4,     1,     1,     1,     1,     2,
       1,     1,     1,     3,     5,     3,     4,     4,     4,     1,
       1,     1,     2,     3,     3,     4,     4,     1,     1,     1,
       2,     3,     2,     3,     0,     6,     0,     9,     1,     1,
       1,     1,     2,     3,     1,     2,     2,     2,     3,     3,
       3,     3,     3,     3,     0,     5,     4,     2,     5,     3,
       1,     1,     1,     4,     6,     1,     3,     5,     1,     2,
       2,     1,     1,     1,     0,     7,     0,     7,     4,     5,
       3,     6,     4,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     1,     1,     2,     1,     0,     2,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       1,     3,     1,     4,     7,     7,     7,     7,     4,     2,
       5,     4,     2,     2,     2,     2,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     4,     4,     3,     3,
       3,     3,     1,     4,     7,     7,     7,     7,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     2,     5,     4,     2,     5,     4,
       4,     2,     2,     2,     2,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     5,     4,     4,     3,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     9,    12,     4,     4,     6,
       4,     4,     6,     6,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     1,     4,     7,     7,     7,
       7,     4,     2,     5,     4,     2,     5,     4,     4,     2,
       2,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     5,     4,     4,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     4,     2,     3,     1,     2,
       1,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     0
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]));
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 3: /* grammar: START_CONST_EXPR const_expr  */
#line 466 "dtool/src/cppparser/cppBison.yxx"
{
  current_expr = (yyvsp[0].u.expr);
}
#line 3919 "built/tmp/cppBison.yxx.c"
    break;

  case 4: /* grammar: START_TYPE full_type  */
#line 470 "dtool/src/cppparser/cppBison.yxx"
{
  current_type = (yyvsp[0].u.type);
}
#line 3927 "built/tmp/cppBison.yxx.c"
    break;

  case 6: /* cpp: cpp optional_attributes ';'  */
#line 478 "dtool/src/cppparser/cppBison.yxx"
{
  if (!(yyvsp[-1].attr_list).is_empty()) {
    current_scope->add_declaration(new CPPDeclaration((yylsp[-1]).file, (yyvsp[-1].attr_list)), global_scope, current_lexer, (yylsp[-1]));
  }
}
#line 3937 "built/tmp/cppBison.yxx.c"
    break;

  case 7: /* $@1: %empty  */
#line 484 "dtool/src/cppparser/cppBison.yxx"
{
  current_attributes = (yyvsp[0].attr_list);
}
#line 3945 "built/tmp/cppBison.yxx.c"
    break;

  case 8: /* cpp: cpp optional_attributes $@1 declaration  */
#line 488 "dtool/src/cppparser/cppBison.yxx"
{
  current_attributes = CPPAttributeList();
}
#line 3953 "built/tmp/cppBison.yxx.c"
    break;

  case 11: /* constructor_init: name '(' optional_const_expr_comma ')'  */
#line 500 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-1].u.expr);
}
#line 3961 "built/tmp/cppBison.yxx.c"
    break;

  case 12: /* constructor_init: name '(' optional_const_expr_comma ')' ELLIPSIS  */
#line 504 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-2].u.expr);
}
#line 3969 "built/tmp/cppBison.yxx.c"
    break;

  case 13: /* constructor_init: name '{' optional_const_expr_comma '}'  */
#line 508 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-1].u.expr);
}
#line 3977 "built/tmp/cppBison.yxx.c"
    break;

  case 14: /* $@2: %empty  */
#line 520 "dtool/src/cppparser/cppBison.yxx"
{
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
#line 3986 "built/tmp/cppBison.yxx.c"
    break;

  case 15: /* extern_c: storage_class '{' $@2 cpp '}'  */
#line 525 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 3994 "built/tmp/cppBison.yxx.c"
    break;

  case 22: /* declaration: KW_BEGIN_PUBLISH  */
#line 538 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
#line 4011 "built/tmp/cppBison.yxx.c"
    break;

  case 23: /* declaration: KW_END_PUBLISH  */
#line 551 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
#line 4024 "built/tmp/cppBison.yxx.c"
    break;

  case 24: /* declaration: KW_PUBLISHED ':'  */
#line 560 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_published);
}
#line 4032 "built/tmp/cppBison.yxx.c"
    break;

  case 25: /* declaration: KW_PUBLIC ':'  */
#line 564 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
#line 4044 "built/tmp/cppBison.yxx.c"
    break;

  case 26: /* declaration: KW_PROTECTED ':'  */
#line 572 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_protected);
}
#line 4052 "built/tmp/cppBison.yxx.c"
    break;

  case 27: /* declaration: KW_PRIVATE ':'  */
#line 576 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_private);
}
#line 4060 "built/tmp/cppBison.yxx.c"
    break;

  case 28: /* declaration: KW_MAKE_PROPERTY '(' name ',' IDENTIFIER maybe_comma_identifier ')' ';'  */
#line 580 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-5].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-7]).file);
    make_property->_get_function = getter->as_function_group();

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_set_function = setter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-7]));
  }
}
#line 4085 "built/tmp/cppBison.yxx.c"
    break;

  case 29: /* declaration: KW_MAKE_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 601 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4116 "built/tmp/cppBison.yxx.c"
    break;

  case 30: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 628 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4141 "built/tmp/cppBison.yxx.c"
    break;

  case 31: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 649 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4174 "built/tmp/cppBison.yxx.c"
    break;

  case 32: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 678 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4214 "built/tmp/cppBison.yxx.c"
    break;

  case 33: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 714 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-10].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-12].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-14]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    CPPDeclaration *inserter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (inserter == nullptr || inserter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid append method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_insert_function = inserter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-14]));
  }
}
#line 4261 "built/tmp/cppBison.yxx.c"
    break;

  case 34: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ')' ';'  */
#line 757 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid item getter method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-4].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-6]).file);
    make_property->_get_function = getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-6]));
  }
}
#line 4277 "built/tmp/cppBison.yxx.c"
    break;

  case 35: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 769 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4302 "built/tmp/cppBison.yxx.c"
    break;

  case 36: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER maybe_comma_identifier ')' ';'  */
#line 790 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-5].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-9].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-11]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-7].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-7].u.identifier)->get_fully_scoped_name(), (yylsp[-7]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_del_function = deleter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-11]));
  }
}
#line 4342 "built/tmp/cppBison.yxx.c"
    break;

  case 37: /* declaration: KW_MAKE_MAP_KEYS_SEQ '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 826 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = nullptr;
    for (size_t i = 0; i < current_scope->_declarations.size(); ++i) {
      make_property = current_scope->_declarations[i]->as_make_property();
      if (make_property != nullptr) {
        if (make_property->get_fully_scoped_name() == (yyvsp[-6].u.identifier)->get_fully_scoped_name()) {
          break;
        } else {
          make_property = nullptr;
        }
      }
    }
    if (make_property != nullptr) {
      make_property->_get_key_function = getter->as_function_group();
      make_property->_length_function = length_getter->as_function_group();
    } else {
      yyerror("reference to non-existent MAKE_MAP_PROPERTY: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    }
  }
}
#line 4380 "built/tmp/cppBison.yxx.c"
    break;

  case 38: /* declaration: KW_MAKE_PROPERTY2 '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 860 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4406 "built/tmp/cppBison.yxx.c"
    break;

  case 39: /* declaration: KW_MAKE_PROPERTY2 '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 882 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *clearer = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (clearer == nullptr || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid clear method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_clear_function = clearer->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4446 "built/tmp/cppBison.yxx.c"
    break;

  case 40: /* declaration: KW_MAKE_SEQ '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 918 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *element_getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == nullptr || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    element_getter = nullptr;
  }

  if (length_getter != nullptr && element_getter != nullptr) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4472 "built/tmp/cppBison.yxx.c"
    break;

  case 41: /* declaration: KW_STATIC_ASSERT '(' const_expr ',' string_literal ')' ';'  */
#line 940 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-4].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-4]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[-2].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[-4]));
  }
}
#line 4487 "built/tmp/cppBison.yxx.c"
    break;

  case 42: /* declaration: KW_STATIC_ASSERT '(' const_expr ')' ';'  */
#line 951 "dtool/src/cppparser/cppBison.yxx"
{
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-2]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[-2]));
  }
}
#line 4501 "built/tmp/cppBison.yxx.c"
    break;

  case 43: /* $@3: %empty  */
#line 964 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
#line 4511 "built/tmp/cppBison.yxx.c"
    break;

  case 44: /* friend_declaration: KW_FRIEND $@3 declaration  */
#line 970 "dtool/src/cppparser/cppBison.yxx"
{
  delete current_scope;
  pop_scope();
}
#line 4520 "built/tmp/cppBison.yxx.c"
    break;

  case 45: /* storage_class: empty  */
#line 979 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = 0;
}
#line 4528 "built/tmp/cppBison.yxx.c"
    break;

  case 46: /* storage_class: KW_CONST storage_class  */
#line 983 "dtool/src/cppparser/cppBison.yxx"
{
  // This isn't really a storage class, but it helps with parsing.
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_const;
}
#line 4537 "built/tmp/cppBison.yxx.c"
    break;

  case 47: /* storage_class: KW_EXTERN storage_class  */
#line 988 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
}
#line 4545 "built/tmp/cppBison.yxx.c"
    break;

  case 48: /* storage_class: KW_EXTERN SIMPLE_STRING storage_class  */
#line 992 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[-1].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[-1].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[-1].str) + "\"", (yylsp[-1]));
  }
}
#line 4560 "built/tmp/cppBison.yxx.c"
    break;

  case 49: /* storage_class: KW_STATIC storage_class  */
#line 1003 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_static;
}
#line 4568 "built/tmp/cppBison.yxx.c"
    break;

  case 50: /* storage_class: KW_INLINE storage_class  */
#line 1007 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_inline;
}
#line 4576 "built/tmp/cppBison.yxx.c"
    break;

  case 51: /* storage_class: KW_VIRTUAL storage_class  */
#line 1011 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_virtual;
}
#line 4584 "built/tmp/cppBison.yxx.c"
    break;

  case 52: /* storage_class: KW_EXPLICIT storage_class  */
#line 1015 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
}
#line 4592 "built/tmp/cppBison.yxx.c"
    break;

  case 53: /* storage_class: KW_EXPLICIT_LPAREN const_expr ')' storage_class  */
#line 1019 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("explicit() requires a constant expression", (yylsp[-2]));
  } else if (result.as_boolean()) {
    (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
  }
}
#line 4605 "built/tmp/cppBison.yxx.c"
    break;

  case 54: /* storage_class: KW_REGISTER storage_class  */
#line 1028 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_register;
}
#line 4613 "built/tmp/cppBison.yxx.c"
    break;

  case 55: /* storage_class: KW_VOLATILE storage_class  */
#line 1032 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_volatile;
}
#line 4621 "built/tmp/cppBison.yxx.c"
    break;

  case 56: /* storage_class: KW_MUTABLE storage_class  */
#line 1036 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_mutable;
}
#line 4629 "built/tmp/cppBison.yxx.c"
    break;

  case 57: /* storage_class: KW_CONSTEVAL storage_class  */
#line 1040 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_consteval;
}
#line 4637 "built/tmp/cppBison.yxx.c"
    break;

  case 58: /* storage_class: KW_CONSTEXPR storage_class  */
#line 1044 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constexpr;
}
#line 4645 "built/tmp/cppBison.yxx.c"
    break;

  case 59: /* storage_class: KW_CONSTINIT storage_class  */
#line 1048 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constinit;
}
#line 4653 "built/tmp/cppBison.yxx.c"
    break;

  case 60: /* storage_class: KW_BLOCKING storage_class  */
#line 1052 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_blocking;
}
#line 4661 "built/tmp/cppBison.yxx.c"
    break;

  case 61: /* storage_class: KW_EXTENSION storage_class  */
#line 1056 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extension;
}
#line 4669 "built/tmp/cppBison.yxx.c"
    break;

  case 62: /* storage_class: KW_THREAD_LOCAL storage_class  */
#line 1060 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_thread_local;
}
#line 4677 "built/tmp/cppBison.yxx.c"
    break;

  case 63: /* optional_attributes: empty  */
#line 1067 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = CPPAttributeList();
}
#line 4685 "built/tmp/cppBison.yxx.c"
    break;

  case 64: /* optional_attributes: ATTR_LEFT attribute_specifiers ATTR_RIGHT optional_attributes  */
#line 1071 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[-2].attr_list);
  (yyval.attr_list).add_attributes_from((yyvsp[0].attr_list));
}
#line 4694 "built/tmp/cppBison.yxx.c"
    break;

  case 65: /* optional_attributes: ATTR_LEFT KW_USING name ':' attribute_specifiers ATTR_RIGHT optional_attributes  */
#line 1076 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[-2].attr_list);
  for (CPPAttributeList::Attribute &attr : (yyval.attr_list)._attributes) {
    attr._ident->prepend((yyvsp[-4].u.identifier));
  }
  (yyval.attr_list).add_attributes_from((yyvsp[0].attr_list));
}
#line 4706 "built/tmp/cppBison.yxx.c"
    break;

  case 66: /* optional_attributes: KW_ALIGNAS '(' const_expr ')' optional_attributes  */
#line 1084 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[0].attr_list);
  (yyval.attr_list).add_alignas((yyvsp[-2].u.expr)->as_expression());
}
#line 4715 "built/tmp/cppBison.yxx.c"
    break;

  case 67: /* optional_attributes: KW_ALIGNAS '(' type_decl ')' optional_attributes  */
#line 1089 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[0].attr_list);
  (yyval.attr_list).add_alignas((yyvsp[-2].u.decl)->as_type());
}
#line 4724 "built/tmp/cppBison.yxx.c"
    break;

  case 68: /* attribute_specifiers: attribute_specifier  */
#line 1097 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[0].attr_list);
}
#line 4732 "built/tmp/cppBison.yxx.c"
    break;

  case 69: /* attribute_specifiers: attribute_specifier ',' attribute_specifiers  */
#line 1101 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[-2].attr_list);
  (yyval.attr_list).add_attributes_from((yyvsp[0].attr_list));
}
#line 4741 "built/tmp/cppBison.yxx.c"
    break;

  case 70: /* attribute_specifier: name  */
#line 1109 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = CPPAttributeList();
  (yyval.attr_list).add_attribute((yyvsp[0].u.identifier));
}
#line 4750 "built/tmp/cppBison.yxx.c"
    break;

  case 71: /* attribute_specifier: name '(' formal_parameter_list ')'  */
#line 1114 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = CPPAttributeList();
  (yyval.attr_list).add_attribute((yyvsp[-3].u.identifier));
}
#line 4759 "built/tmp/cppBison.yxx.c"
    break;

  case 72: /* $@4: %empty  */
#line 1122 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // type_like_declaration.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4774 "built/tmp/cppBison.yxx.c"
    break;

  case 73: /* type_like_declaration: storage_class var_type_decl $@4 multiple_instance_identifiers  */
#line 1133 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4782 "built/tmp/cppBison.yxx.c"
    break;

  case 74: /* type_like_declaration: storage_class type_decl ';'  */
#line 1138 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
#line 4795 "built/tmp/cppBison.yxx.c"
    break;

  case 75: /* $@5: %empty  */
#line 1147 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[0].u.instance) != nullptr) {
    // Push the scope so that the initializers can make use of things defined
    // in the class body.
    push_scope((yyvsp[0].u.instance)->get_scope(current_scope, global_scope));
    (yyvsp[0].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-1].u.integer));
  }
}
#line 4808 "built/tmp/cppBison.yxx.c"
    break;

  case 76: /* type_like_declaration: storage_class constructor_prototype $@5 maybe_initialize_or_constructor_body  */
#line 1156 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-2].u.instance) != nullptr) {
    pop_scope();
    current_scope->add_declaration((yyvsp[-2].u.instance), global_scope, current_lexer, (yylsp[-2]));
    (yyvsp[-2].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4820 "built/tmp/cppBison.yxx.c"
    break;

  case 77: /* type_like_declaration: storage_class function_prototype maybe_initialize_or_function_body  */
#line 1164 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-1].u.instance) != nullptr) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4832 "built/tmp/cppBison.yxx.c"
    break;

  case 79: /* multiple_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize_or_function_body  */
#line 1180 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-1].u.inst_ident)->add_attributes(current_attributes);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 4848 "built/tmp/cppBison.yxx.c"
    break;

  case 80: /* multiple_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize ',' multiple_instance_identifiers  */
#line 1192 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-3].u.inst_ident)->add_attributes(current_attributes);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 4864 "built/tmp/cppBison.yxx.c"
    break;

  case 81: /* $@6: %empty  */
#line 1208 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4879 "built/tmp/cppBison.yxx.c"
    break;

  case 82: /* typedef_declaration: storage_class var_type_decl $@6 typedef_instance_identifiers  */
#line 1219 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4887 "built/tmp/cppBison.yxx.c"
    break;

  case 83: /* typedef_declaration: storage_class function_prototype maybe_initialize_or_function_body  */
#line 1223 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-1].u.instance) != nullptr) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != nullptr) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope, inst->_attributes);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
#line 4903 "built/tmp/cppBison.yxx.c"
    break;

  case 84: /* typedef_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize_or_function_body  */
#line 1238 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-1].u.inst_ident)->add_attributes(current_attributes);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
}
#line 4917 "built/tmp/cppBison.yxx.c"
    break;

  case 85: /* typedef_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize ',' typedef_instance_identifiers  */
#line 1248 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-3].u.inst_ident)->add_attributes(current_attributes);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-3]));
}
#line 4931 "built/tmp/cppBison.yxx.c"
    break;

  case 86: /* $@7: %empty  */
#line 1263 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 4948 "built/tmp/cppBison.yxx.c"
    break;

  case 87: /* constructor_prototype: IDENTIFIER '(' $@7 function_parameter_list ')' function_post optional_attributes  */
#line 1276 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-6].u.identifier)->get_scope(current_scope, global_scope);
  CPPType *type;
  std::string simple_name = (yyvsp[-6].u.identifier)->get_simple_name();
  if (!simple_name.empty() && simple_name[0] == '~') {
    // A destructor has no return type.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  }
  else if (scope != nullptr && simple_name == scope->get_simple_name()) {
    // Neither does a constructor.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  }
  else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[-6]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-6].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  ii->add_attributes(current_attributes);

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-6]).file);
}
#line 4979 "built/tmp/cppBison.yxx.c"
    break;

  case 88: /* $@8: %empty  */
#line 1305 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-2].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 4996 "built/tmp/cppBison.yxx.c"
    break;

  case 89: /* constructor_prototype: TYPENAME_IDENTIFIER '(' IDENTIFIER ')' '(' $@8 function_parameter_list ')' function_post optional_attributes  */
#line 1318 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-9].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-9].u.identifier)->get_fully_scoped_name(), (yylsp[-9]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-7].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  ii->add_attributes(current_attributes);

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-9]).file);
}
#line 5015 "built/tmp/cppBison.yxx.c"
    break;

  case 90: /* $@9: %empty  */
#line 1333 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5032 "built/tmp/cppBison.yxx.c"
    break;

  case 91: /* constructor_prototype: TYPENAME_IDENTIFIER '(' $@9 function_parameter_list ')' function_post optional_attributes  */
#line 1346 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type;
  if ((yyvsp[-6].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-6].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  ii->add_attributes(current_attributes);

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-6]).file);
}
#line 5055 "built/tmp/cppBison.yxx.c"
    break;

  case 92: /* $@10: %empty  */
#line 1370 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 5063 "built/tmp/cppBison.yxx.c"
    break;

  case 93: /* function_prototype: '~' name '(' $@10 function_parameter_list ')' function_post optional_attributes  */
#line 1374 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  if ((yyvsp[-6].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[-6].u.identifier)->get_simple_name(), (yylsp[-6]));
    delete (yyvsp[-6].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
    ii->add_attributes(current_attributes);

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-6]).file);
  }
}
#line 5087 "built/tmp/cppBison.yxx.c"
    break;

  case 94: /* $@11: %empty  */
#line 1401 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5095 "built/tmp/cppBison.yxx.c"
    break;

  case 95: /* function_prototype: TYPENAME_IDENTIFIER '(' '*' instance_identifier ')' '(' $@11 function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 1405 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-11].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-11].u.identifier)->get_fully_scoped_name(), (yylsp[-11]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-8].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), nullptr, (yyvsp[-1].attr_list));
  ii->add_attributes(current_attributes);
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-11]).file);
}
#line 5114 "built/tmp/cppBison.yxx.c"
    break;

  case 96: /* $@12: %empty  */
#line 1420 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5122 "built/tmp/cppBison.yxx.c"
    break;

  case 97: /* function_prototype: TYPENAME_IDENTIFIER '(' SCOPING '*' instance_identifier ')' '(' $@12 function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 1424 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-12].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-12].u.identifier)->get_fully_scoped_name(), (yylsp[-12]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-8].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-10].u.identifier));
  ii->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), nullptr, (yyvsp[-1].attr_list));
  ii->add_attributes(current_attributes);
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-12]).file);
}
#line 5141 "built/tmp/cppBison.yxx.c"
    break;

  case 98: /* $@13: %empty  */
#line 1441 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-3].u.identifier) != nullptr) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5151 "built/tmp/cppBison.yxx.c"
    break;

  case 99: /* function_prototype: KW_OPERATOR type not_paren_formal_parameter_identifier '(' $@13 function_parameter_list ')' function_post  */
#line 1447 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-7].u.identifier) != nullptr) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier(name, (yylsp[-6]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  (yyval.u.instance)->_attributes.add_attributes_from(current_attributes);
}
#line 5181 "built/tmp/cppBison.yxx.c"
    break;

  case 100: /* $@14: %empty  */
#line 1473 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-4].u.identifier) != nullptr) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5191 "built/tmp/cppBison.yxx.c"
    break;

  case 101: /* function_prototype: KW_OPERATOR KW_CONST type not_paren_formal_parameter_identifier '(' $@14 function_parameter_list ')' function_post  */
#line 1479 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-8].u.identifier) != nullptr) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-5]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyvsp[-5].u.inst_ident)->add_attributes(current_attributes);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5212 "built/tmp/cppBison.yxx.c"
    break;

  case 102: /* function_prototype: IDENTIFIER  */
#line 1500 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *decl =
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != nullptr) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = nullptr;
  }
}
#line 5226 "built/tmp/cppBison.yxx.c"
    break;

  case 103: /* function_post: empty  */
#line 1513 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = 0;
}
#line 5234 "built/tmp/cppBison.yxx.c"
    break;

  case 104: /* function_post: function_post KW_CONST  */
#line 1517 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_const_method;
}
#line 5242 "built/tmp/cppBison.yxx.c"
    break;

  case 105: /* function_post: function_post KW_VOLATILE  */
#line 1521 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_volatile_method;
}
#line 5250 "built/tmp/cppBison.yxx.c"
    break;

  case 106: /* function_post: function_post KW_NOEXCEPT  */
#line 1525 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_noexcept;
}
#line 5258 "built/tmp/cppBison.yxx.c"
    break;

  case 107: /* function_post: function_post KW_NOEXCEPT_LPAREN const_expr ')'  */
#line 1529 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-1].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("noexcept() requires a constant expression", (yylsp[-1]));
  } else if (result.as_boolean()) {
    (yyval.u.integer) = (yyvsp[-3].u.integer) | (int)CPPFunctionType::F_noexcept;
  }
}
#line 5271 "built/tmp/cppBison.yxx.c"
    break;

  case 108: /* function_post: function_post KW_FINAL  */
#line 1538 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_final;
}
#line 5279 "built/tmp/cppBison.yxx.c"
    break;

  case 109: /* function_post: function_post KW_OVERRIDE  */
#line 1542 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_override;
}
#line 5287 "built/tmp/cppBison.yxx.c"
    break;

  case 110: /* function_post: function_post '&'  */
#line 1546 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_lvalue_method;
}
#line 5295 "built/tmp/cppBison.yxx.c"
    break;

  case 111: /* function_post: function_post ANDAND  */
#line 1550 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_rvalue_method;
}
#line 5303 "built/tmp/cppBison.yxx.c"
    break;

  case 112: /* function_post: function_post KW_MUTABLE  */
#line 1554 "dtool/src/cppparser/cppBison.yxx"
{
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5312 "built/tmp/cppBison.yxx.c"
    break;

  case 113: /* function_post: function_post KW_CONSTEXPR  */
#line 1559 "dtool/src/cppparser/cppBison.yxx"
{
  // Used for lambdas in C++17, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5321 "built/tmp/cppBison.yxx.c"
    break;

  case 114: /* function_post: function_post KW_THROW '(' ')'  */
#line 1564 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5329 "built/tmp/cppBison.yxx.c"
    break;

  case 115: /* function_post: function_post KW_THROW '(' name ')'  */
#line 1568 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
#line 5337 "built/tmp/cppBison.yxx.c"
    break;

  case 116: /* function_post: function_post KW_THROW '(' name ELLIPSIS ')'  */
#line 1572 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-5].u.integer);
}
#line 5345 "built/tmp/cppBison.yxx.c"
    break;

  case 117: /* function_operator: '!'  */
#line 1579 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "!";
}
#line 5353 "built/tmp/cppBison.yxx.c"
    break;

  case 118: /* function_operator: '~'  */
#line 1583 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "~";
}
#line 5361 "built/tmp/cppBison.yxx.c"
    break;

  case 119: /* function_operator: '*'  */
#line 1587 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "*";
}
#line 5369 "built/tmp/cppBison.yxx.c"
    break;

  case 120: /* function_operator: '/'  */
#line 1591 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "/";
}
#line 5377 "built/tmp/cppBison.yxx.c"
    break;

  case 121: /* function_operator: '%'  */
#line 1595 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "%";
}
#line 5385 "built/tmp/cppBison.yxx.c"
    break;

  case 122: /* function_operator: '+'  */
#line 1599 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "+";
}
#line 5393 "built/tmp/cppBison.yxx.c"
    break;

  case 123: /* function_operator: '-'  */
#line 1603 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "-";
}
#line 5401 "built/tmp/cppBison.yxx.c"
    break;

  case 124: /* function_operator: '|'  */
#line 1607 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "|";
}
#line 5409 "built/tmp/cppBison.yxx.c"
    break;

  case 125: /* function_operator: '&'  */
#line 1611 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&";
}
#line 5417 "built/tmp/cppBison.yxx.c"
    break;

  case 126: /* function_operator: '^'  */
#line 1615 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "^";
}
#line 5425 "built/tmp/cppBison.yxx.c"
    break;

  case 127: /* function_operator: OROR  */
#line 1619 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "||";
}
#line 5433 "built/tmp/cppBison.yxx.c"
    break;

  case 128: /* function_operator: ANDAND  */
#line 1623 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&&";
}
#line 5441 "built/tmp/cppBison.yxx.c"
    break;

  case 129: /* function_operator: EQCOMPARE  */
#line 1627 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "==";
}
#line 5449 "built/tmp/cppBison.yxx.c"
    break;

  case 130: /* function_operator: NECOMPARE  */
#line 1631 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "!=";
}
#line 5457 "built/tmp/cppBison.yxx.c"
    break;

  case 131: /* function_operator: LECOMPARE  */
#line 1635 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<=";
}
#line 5465 "built/tmp/cppBison.yxx.c"
    break;

  case 132: /* function_operator: GECOMPARE  */
#line 1639 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">=";
}
#line 5473 "built/tmp/cppBison.yxx.c"
    break;

  case 133: /* function_operator: '<'  */
#line 1643 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<";
}
#line 5481 "built/tmp/cppBison.yxx.c"
    break;

  case 134: /* function_operator: '>'  */
#line 1647 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">";
}
#line 5489 "built/tmp/cppBison.yxx.c"
    break;

  case 135: /* function_operator: SPACESHIP  */
#line 1651 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<=>";
}
#line 5497 "built/tmp/cppBison.yxx.c"
    break;

  case 136: /* function_operator: LSHIFT  */
#line 1655 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<<";
}
#line 5505 "built/tmp/cppBison.yxx.c"
    break;

  case 137: /* function_operator: RSHIFT  */
#line 1659 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">>";
}
#line 5513 "built/tmp/cppBison.yxx.c"
    break;

  case 138: /* function_operator: '='  */
#line 1663 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "=";
}
#line 5521 "built/tmp/cppBison.yxx.c"
    break;

  case 139: /* function_operator: ','  */
#line 1667 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ",";
}
#line 5529 "built/tmp/cppBison.yxx.c"
    break;

  case 140: /* function_operator: PLUSPLUS  */
#line 1671 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "++";
}
#line 5537 "built/tmp/cppBison.yxx.c"
    break;

  case 141: /* function_operator: MINUSMINUS  */
#line 1675 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "--";
}
#line 5545 "built/tmp/cppBison.yxx.c"
    break;

  case 142: /* function_operator: TIMESEQUAL  */
#line 1679 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "*=";
}
#line 5553 "built/tmp/cppBison.yxx.c"
    break;

  case 143: /* function_operator: DIVIDEEQUAL  */
#line 1683 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "/=";
}
#line 5561 "built/tmp/cppBison.yxx.c"
    break;

  case 144: /* function_operator: MODEQUAL  */
#line 1687 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "%=";
}
#line 5569 "built/tmp/cppBison.yxx.c"
    break;

  case 145: /* function_operator: PLUSEQUAL  */
#line 1691 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "+=";
}
#line 5577 "built/tmp/cppBison.yxx.c"
    break;

  case 146: /* function_operator: MINUSEQUAL  */
#line 1695 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "-=";
}
#line 5585 "built/tmp/cppBison.yxx.c"
    break;

  case 147: /* function_operator: OREQUAL  */
#line 1699 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "|=";
}
#line 5593 "built/tmp/cppBison.yxx.c"
    break;

  case 148: /* function_operator: ANDEQUAL  */
#line 1703 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&=";
}
#line 5601 "built/tmp/cppBison.yxx.c"
    break;

  case 149: /* function_operator: XOREQUAL  */
#line 1707 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "^=";
}
#line 5609 "built/tmp/cppBison.yxx.c"
    break;

  case 150: /* function_operator: LSHIFTEQUAL  */
#line 1711 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<<=";
}
#line 5617 "built/tmp/cppBison.yxx.c"
    break;

  case 151: /* function_operator: RSHIFTEQUAL  */
#line 1715 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">>=";
}
#line 5625 "built/tmp/cppBison.yxx.c"
    break;

  case 152: /* function_operator: POINTSAT  */
#line 1719 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "->";
}
#line 5633 "built/tmp/cppBison.yxx.c"
    break;

  case 153: /* function_operator: '[' ']'  */
#line 1723 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "[]";
}
#line 5641 "built/tmp/cppBison.yxx.c"
    break;

  case 154: /* function_operator: '(' ')'  */
#line 1727 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "()";
}
#line 5649 "built/tmp/cppBison.yxx.c"
    break;

  case 155: /* function_operator: KW_NEW  */
#line 1731 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "new";
}
#line 5657 "built/tmp/cppBison.yxx.c"
    break;

  case 156: /* function_operator: KW_DELETE  */
#line 1735 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "delete";
}
#line 5665 "built/tmp/cppBison.yxx.c"
    break;

  case 161: /* $@15: %empty  */
#line 1749 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope(new CPPTemplateScope(current_scope));
}
#line 5673 "built/tmp/cppBison.yxx.c"
    break;

  case 162: /* template_declaration: KW_TEMPLATE $@15 '<' template_formal_parameters '>' more_template_declaration  */
#line 1753 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 5681 "built/tmp/cppBison.yxx.c"
    break;

  case 167: /* template_nonempty_formal_parameters: template_formal_parameter  */
#line 1767 "dtool/src/cppparser/cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5691 "built/tmp/cppBison.yxx.c"
    break;

  case 168: /* template_nonempty_formal_parameters: template_nonempty_formal_parameters ',' template_formal_parameter  */
#line 1773 "dtool/src/cppparser/cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5701 "built/tmp/cppBison.yxx.c"
    break;

  case 171: /* template_formal_parameter: typename_keyword  */
#line 1787 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter(nullptr));
}
#line 5709 "built/tmp/cppBison.yxx.c"
    break;

  case 172: /* template_formal_parameter: typename_keyword name  */
#line 1791 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 5717 "built/tmp/cppBison.yxx.c"
    break;

  case 173: /* template_formal_parameter: typename_keyword name '=' full_type  */
#line 1795 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 5725 "built/tmp/cppBison.yxx.c"
    break;

  case 174: /* template_formal_parameter: typename_keyword ELLIPSIS  */
#line 1799 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter(nullptr);
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5735 "built/tmp/cppBison.yxx.c"
    break;

  case 175: /* template_formal_parameter: typename_keyword ELLIPSIS name  */
#line 1805 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[0].u.identifier));
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5745 "built/tmp/cppBison.yxx.c"
    break;

  case 176: /* template_formal_parameter: template_formal_parameter_type formal_parameter_identifier template_parameter_maybe_initialize  */
#line 1811 "dtool/src/cppparser/cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5755 "built/tmp/cppBison.yxx.c"
    break;

  case 177: /* template_formal_parameter: KW_CONST template_formal_parameter_type formal_parameter_identifier template_parameter_maybe_initialize  */
#line 1817 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5766 "built/tmp/cppBison.yxx.c"
    break;

  case 178: /* template_formal_parameter: template_formal_parameter_type parameter_pack_identifier  */
#line 1824 "dtool/src/cppparser/cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5775 "built/tmp/cppBison.yxx.c"
    break;

  case 179: /* template_formal_parameter: KW_CONST template_formal_parameter_type parameter_pack_identifier  */
#line 1829 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5785 "built/tmp/cppBison.yxx.c"
    break;

  case 180: /* template_formal_parameter_type: simple_type  */
#line 1838 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5793 "built/tmp/cppBison.yxx.c"
    break;

  case 181: /* template_formal_parameter_type: IDENTIFIER  */
#line 1842 "dtool/src/cppparser/cppBison.yxx"
{
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 5802 "built/tmp/cppBison.yxx.c"
    break;

  case 182: /* template_formal_parameter_type: TYPENAME_IDENTIFIER  */
#line 1847 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5814 "built/tmp/cppBison.yxx.c"
    break;

  case 183: /* template_formal_parameter_type: TYPEPACK_IDENTIFIER  */
#line 1855 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5826 "built/tmp/cppBison.yxx.c"
    break;

  case 184: /* instance_identifier: name_no_final optional_attributes  */
#line 1867 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
}
#line 5834 "built/tmp/cppBison.yxx.c"
    break;

  case 185: /* instance_identifier: KW_OPERATOR function_operator optional_attributes  */
#line 1871 "dtool/src/cppparser/cppBison.yxx"
{
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-2].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator "+(yyvsp[-1].str), (yylsp[-1]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[-1].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident, (yyvsp[0].attr_list));
}
#line 5852 "built/tmp/cppBison.yxx.c"
    break;

  case 186: /* instance_identifier: KW_OPERATOR SIMPLE_STRING IDENTIFIER optional_attributes  */
#line 1885 "dtool/src/cppparser/cppBison.yxx"
{
  // A C++11 literal operator.
  if (!(yyvsp[-2].str).empty()) {
    yyerror("expected empty string", (yylsp[-2]));
  }
  CPPIdentifier *ident = (yyvsp[-3].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[-1].u.identifier)->get_simple_name(), (yylsp[-1]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[-1].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident, (yyvsp[0].attr_list));
}
#line 5871 "built/tmp/cppBison.yxx.c"
    break;

  case 187: /* instance_identifier: KW_CONST instance_identifier  */
#line 1900 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5880 "built/tmp/cppBison.yxx.c"
    break;

  case 188: /* instance_identifier: KW_VOLATILE instance_identifier  */
#line 1905 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5889 "built/tmp/cppBison.yxx.c"
    break;

  case 189: /* instance_identifier: '*' optional_attributes instance_identifier  */
#line 1910 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 5898 "built/tmp/cppBison.yxx.c"
    break;

  case 190: /* instance_identifier: '&' optional_attributes instance_identifier  */
#line 1915 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 5907 "built/tmp/cppBison.yxx.c"
    break;

  case 191: /* instance_identifier: ANDAND optional_attributes instance_identifier  */
#line 1920 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 5916 "built/tmp/cppBison.yxx.c"
    break;

  case 192: /* instance_identifier: SCOPING '*' optional_attributes instance_identifier  */
#line 1925 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 5925 "built/tmp/cppBison.yxx.c"
    break;

  case 193: /* instance_identifier: instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 1930 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 5934 "built/tmp/cppBison.yxx.c"
    break;

  case 194: /* instance_identifier: '(' instance_identifier ')'  */
#line 1935 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 5943 "built/tmp/cppBison.yxx.c"
    break;

  case 195: /* $@16: %empty  */
#line 1940 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function (in case it is a function)
  CPPScope *scope = new CPPScope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope),
                                 CPPNameComponent(""), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5960 "built/tmp/cppBison.yxx.c"
    break;

  case 196: /* instance_identifier: instance_identifier '(' $@16 formal_parameter_list ')' function_post optional_attributes  */
#line 1953 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  if ((yyvsp[-3].u.param_list)->is_parameter_expr() && (yyvsp[-1].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-3].u.param_list));
  }
  else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  }
}
#line 5978 "built/tmp/cppBison.yxx.c"
    break;

  case 197: /* instance_identifier_and_maybe_trailing_return_type: instance_identifier maybe_trailing_return_type  */
#line 1971 "dtool/src/cppparser/cppBison.yxx"
{
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[0].u.type) != nullptr) {
    (yyvsp[-1].u.inst_ident)->add_trailing_return_type((yyvsp[0].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
}
#line 5992 "built/tmp/cppBison.yxx.c"
    break;

  case 198: /* instance_identifier_and_maybe_trailing_return_type: instance_identifier ':' const_expr  */
#line 1981 "dtool/src/cppparser/cppBison.yxx"
{
  // Bitfield definition.
  (yyvsp[-2].u.inst_ident)->_bit_width = (yyvsp[0].u.expr);
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
#line 6002 "built/tmp/cppBison.yxx.c"
    break;

  case 199: /* maybe_trailing_return_type: empty  */
#line 1991 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = nullptr;
}
#line 6010 "built/tmp/cppBison.yxx.c"
    break;

  case 200: /* maybe_trailing_return_type: POINTSAT predefined_type empty_instance_identifier  */
#line 1995 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6018 "built/tmp/cppBison.yxx.c"
    break;

  case 201: /* maybe_trailing_return_type: POINTSAT KW_CONST predefined_type empty_instance_identifier  */
#line 1999 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6027 "built/tmp/cppBison.yxx.c"
    break;

  case 202: /* maybe_comma_identifier: empty  */
#line 2008 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = nullptr;
}
#line 6035 "built/tmp/cppBison.yxx.c"
    break;

  case 203: /* maybe_comma_identifier: ',' IDENTIFIER  */
#line 2012 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 6043 "built/tmp/cppBison.yxx.c"
    break;

  case 204: /* function_parameter_list: empty  */
#line 2020 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
}
#line 6051 "built/tmp/cppBison.yxx.c"
    break;

  case 205: /* function_parameter_list: ELLIPSIS  */
#line 2024 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6060 "built/tmp/cppBison.yxx.c"
    break;

  case 206: /* function_parameter_list: function_parameters  */
#line 2029 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6068 "built/tmp/cppBison.yxx.c"
    break;

  case 207: /* function_parameter_list: function_parameters ',' ELLIPSIS  */
#line 2033 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6077 "built/tmp/cppBison.yxx.c"
    break;

  case 208: /* function_parameter_list: function_parameters ELLIPSIS  */
#line 2038 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6086 "built/tmp/cppBison.yxx.c"
    break;

  case 209: /* function_parameters: function_parameter  */
#line 2046 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6095 "built/tmp/cppBison.yxx.c"
    break;

  case 210: /* function_parameters: function_parameters ',' function_parameter  */
#line 2051 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6104 "built/tmp/cppBison.yxx.c"
    break;

  case 211: /* formal_parameter_list: empty  */
#line 2059 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
}
#line 6112 "built/tmp/cppBison.yxx.c"
    break;

  case 212: /* formal_parameter_list: ELLIPSIS  */
#line 2063 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6121 "built/tmp/cppBison.yxx.c"
    break;

  case 213: /* formal_parameter_list: formal_parameters  */
#line 2068 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6129 "built/tmp/cppBison.yxx.c"
    break;

  case 214: /* formal_parameter_list: formal_parameters ',' ELLIPSIS  */
#line 2072 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6138 "built/tmp/cppBison.yxx.c"
    break;

  case 215: /* formal_parameter_list: formal_parameters ELLIPSIS  */
#line 2077 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6147 "built/tmp/cppBison.yxx.c"
    break;

  case 216: /* formal_parameters: formal_parameter  */
#line 2085 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6156 "built/tmp/cppBison.yxx.c"
    break;

  case 217: /* formal_parameters: formal_parameters ',' formal_parameter  */
#line 2090 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6165 "built/tmp/cppBison.yxx.c"
    break;

  case 218: /* template_parameter_maybe_initialize: empty  */
#line 2098 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6173 "built/tmp/cppBison.yxx.c"
    break;

  case 219: /* template_parameter_maybe_initialize: '=' no_angle_bracket_const_expr  */
#line 2102 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6181 "built/tmp/cppBison.yxx.c"
    break;

  case 220: /* maybe_initialize: empty  */
#line 2109 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6189 "built/tmp/cppBison.yxx.c"
    break;

  case 221: /* maybe_initialize: '=' const_expr  */
#line 2113 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6197 "built/tmp/cppBison.yxx.c"
    break;

  case 222: /* maybe_initialize_or_constructor_body: ';'  */
#line 2120 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6205 "built/tmp/cppBison.yxx.c"
    break;

  case 223: /* maybe_initialize_or_constructor_body: '{' code '}'  */
#line 2124 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6213 "built/tmp/cppBison.yxx.c"
    break;

  case 224: /* maybe_initialize_or_constructor_body: ':' constructor_inits '{' code '}'  */
#line 2128 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6221 "built/tmp/cppBison.yxx.c"
    break;

  case 225: /* maybe_initialize_or_constructor_body: '=' KW_DEFAULT ';'  */
#line 2132 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6229 "built/tmp/cppBison.yxx.c"
    break;

  case 226: /* maybe_initialize_or_constructor_body: '=' KW_DELETE ';'  */
#line 2136 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6237 "built/tmp/cppBison.yxx.c"
    break;

  case 227: /* maybe_initialize_or_function_body: ';'  */
#line 2143 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6245 "built/tmp/cppBison.yxx.c"
    break;

  case 228: /* maybe_initialize_or_function_body: '{' code '}'  */
#line 2147 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6253 "built/tmp/cppBison.yxx.c"
    break;

  case 229: /* maybe_initialize_or_function_body: '=' const_expr ';'  */
#line 2151 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 6261 "built/tmp/cppBison.yxx.c"
    break;

  case 230: /* maybe_initialize_or_function_body: '=' KW_DEFAULT ';'  */
#line 2155 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6269 "built/tmp/cppBison.yxx.c"
    break;

  case 231: /* maybe_initialize_or_function_body: '=' KW_DELETE ';'  */
#line 2159 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6277 "built/tmp/cppBison.yxx.c"
    break;

  case 232: /* maybe_initialize_or_function_body: '=' '{' structure_init '}'  */
#line 2163 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6285 "built/tmp/cppBison.yxx.c"
    break;

  case 236: /* structure_init_body: const_expr  */
#line 2176 "dtool/src/cppparser/cppBison.yxx"
{
}
#line 6292 "built/tmp/cppBison.yxx.c"
    break;

  case 240: /* function_parameter: optional_attributes type formal_parameter_identifier maybe_initialize  */
#line 2185 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-3].attr_list));
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6302 "built/tmp/cppBison.yxx.c"
    break;

  case 241: /* function_parameter: optional_attributes KW_CONST type formal_parameter_identifier maybe_initialize  */
#line 2191 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-4].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6313 "built/tmp/cppBison.yxx.c"
    break;

  case 242: /* function_parameter: optional_attributes KW_CONST KW_REGISTER type formal_parameter_identifier maybe_initialize  */
#line 2198 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-5].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6324 "built/tmp/cppBison.yxx.c"
    break;

  case 243: /* function_parameter: optional_attributes type_pack parameter_pack_identifier maybe_initialize  */
#line 2205 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-3].attr_list));
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6334 "built/tmp/cppBison.yxx.c"
    break;

  case 244: /* function_parameter: optional_attributes KW_CONST type_pack parameter_pack_identifier maybe_initialize  */
#line 2211 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-4].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6345 "built/tmp/cppBison.yxx.c"
    break;

  case 245: /* function_parameter: optional_attributes KW_CONST KW_REGISTER type_pack parameter_pack_identifier maybe_initialize  */
#line 2218 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-5].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6356 "built/tmp/cppBison.yxx.c"
    break;

  case 246: /* function_parameter: optional_attributes KW_REGISTER function_parameter  */
#line 2225 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
  (yyval.u.instance)->_attributes.add_attributes_from((yyvsp[-2].attr_list));
}
#line 6365 "built/tmp/cppBison.yxx.c"
    break;

  case 247: /* formal_parameter: function_parameter  */
#line 2237 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6373 "built/tmp/cppBison.yxx.c"
    break;

  case 248: /* formal_parameter: formal_const_expr  */
#line 2241 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6384 "built/tmp/cppBison.yxx.c"
    break;

  case 249: /* not_paren_formal_parameter_identifier: empty  */
#line 2251 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6392 "built/tmp/cppBison.yxx.c"
    break;

  case 250: /* not_paren_formal_parameter_identifier: name_no_final optional_attributes  */
#line 2255 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
}
#line 6400 "built/tmp/cppBison.yxx.c"
    break;

  case 251: /* not_paren_formal_parameter_identifier: KW_CONST not_paren_formal_parameter_identifier  */
#line 2259 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6409 "built/tmp/cppBison.yxx.c"
    break;

  case 252: /* not_paren_formal_parameter_identifier: KW_VOLATILE not_paren_formal_parameter_identifier  */
#line 2264 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6418 "built/tmp/cppBison.yxx.c"
    break;

  case 253: /* not_paren_formal_parameter_identifier: '*' optional_attributes not_paren_formal_parameter_identifier  */
#line 2269 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6427 "built/tmp/cppBison.yxx.c"
    break;

  case 254: /* not_paren_formal_parameter_identifier: '&' optional_attributes not_paren_formal_parameter_identifier  */
#line 2274 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6436 "built/tmp/cppBison.yxx.c"
    break;

  case 255: /* not_paren_formal_parameter_identifier: ANDAND optional_attributes not_paren_formal_parameter_identifier  */
#line 2279 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6445 "built/tmp/cppBison.yxx.c"
    break;

  case 256: /* not_paren_formal_parameter_identifier: SCOPING '*' optional_attributes not_paren_formal_parameter_identifier  */
#line 2284 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6454 "built/tmp/cppBison.yxx.c"
    break;

  case 257: /* not_paren_formal_parameter_identifier: not_paren_formal_parameter_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2289 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6463 "built/tmp/cppBison.yxx.c"
    break;

  case 258: /* formal_parameter_identifier: empty  */
#line 2297 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6471 "built/tmp/cppBison.yxx.c"
    break;

  case 259: /* formal_parameter_identifier: name_no_final optional_attributes  */
#line 2301 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
}
#line 6479 "built/tmp/cppBison.yxx.c"
    break;

  case 260: /* formal_parameter_identifier: KW_CONST formal_parameter_identifier  */
#line 2305 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6488 "built/tmp/cppBison.yxx.c"
    break;

  case 261: /* formal_parameter_identifier: KW_VOLATILE formal_parameter_identifier  */
#line 2310 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6497 "built/tmp/cppBison.yxx.c"
    break;

  case 262: /* formal_parameter_identifier: '*' optional_attributes formal_parameter_identifier  */
#line 2315 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6506 "built/tmp/cppBison.yxx.c"
    break;

  case 263: /* formal_parameter_identifier: '&' optional_attributes formal_parameter_identifier  */
#line 2320 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6515 "built/tmp/cppBison.yxx.c"
    break;

  case 264: /* formal_parameter_identifier: ANDAND optional_attributes formal_parameter_identifier  */
#line 2325 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6524 "built/tmp/cppBison.yxx.c"
    break;

  case 265: /* formal_parameter_identifier: SCOPING '*' optional_attributes formal_parameter_identifier  */
#line 2330 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6533 "built/tmp/cppBison.yxx.c"
    break;

  case 266: /* formal_parameter_identifier: formal_parameter_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2335 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6542 "built/tmp/cppBison.yxx.c"
    break;

  case 267: /* formal_parameter_identifier: '(' formal_parameter_identifier ')' '(' function_parameter_list ')' function_post optional_attributes  */
#line 2340 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
}
#line 6552 "built/tmp/cppBison.yxx.c"
    break;

  case 268: /* formal_parameter_identifier: '(' formal_parameter_identifier ')'  */
#line 2346 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6561 "built/tmp/cppBison.yxx.c"
    break;

  case 269: /* parameter_pack_identifier: ELLIPSIS  */
#line 2354 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6570 "built/tmp/cppBison.yxx.c"
    break;

  case 270: /* parameter_pack_identifier: ELLIPSIS name optional_attributes  */
#line 2359 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6579 "built/tmp/cppBison.yxx.c"
    break;

  case 271: /* parameter_pack_identifier: KW_CONST parameter_pack_identifier  */
#line 2364 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6588 "built/tmp/cppBison.yxx.c"
    break;

  case 272: /* parameter_pack_identifier: KW_VOLATILE parameter_pack_identifier  */
#line 2369 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6597 "built/tmp/cppBison.yxx.c"
    break;

  case 273: /* parameter_pack_identifier: '*' optional_attributes parameter_pack_identifier  */
#line 2374 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6606 "built/tmp/cppBison.yxx.c"
    break;

  case 274: /* parameter_pack_identifier: '&' optional_attributes parameter_pack_identifier  */
#line 2379 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6615 "built/tmp/cppBison.yxx.c"
    break;

  case 275: /* parameter_pack_identifier: ANDAND optional_attributes parameter_pack_identifier  */
#line 2384 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6624 "built/tmp/cppBison.yxx.c"
    break;

  case 276: /* parameter_pack_identifier: SCOPING '*' optional_attributes parameter_pack_identifier  */
#line 2389 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6633 "built/tmp/cppBison.yxx.c"
    break;

  case 277: /* parameter_pack_identifier: parameter_pack_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2394 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6642 "built/tmp/cppBison.yxx.c"
    break;

  case 278: /* parameter_pack_identifier: '(' parameter_pack_identifier ')' '(' function_parameter_list ')' function_post optional_attributes  */
#line 2399 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
}
#line 6652 "built/tmp/cppBison.yxx.c"
    break;

  case 279: /* parameter_pack_identifier: '(' parameter_pack_identifier ')'  */
#line 2405 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6661 "built/tmp/cppBison.yxx.c"
    break;

  case 280: /* not_paren_empty_instance_identifier: empty  */
#line 2413 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6669 "built/tmp/cppBison.yxx.c"
    break;

  case 281: /* not_paren_empty_instance_identifier: ELLIPSIS  */
#line 2417 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6678 "built/tmp/cppBison.yxx.c"
    break;

  case 282: /* not_paren_empty_instance_identifier: ELLIPSIS name optional_attributes  */
#line 2422 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6687 "built/tmp/cppBison.yxx.c"
    break;

  case 283: /* not_paren_empty_instance_identifier: KW_CONST not_paren_empty_instance_identifier  */
#line 2427 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6696 "built/tmp/cppBison.yxx.c"
    break;

  case 284: /* not_paren_empty_instance_identifier: KW_VOLATILE not_paren_empty_instance_identifier  */
#line 2432 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6705 "built/tmp/cppBison.yxx.c"
    break;

  case 285: /* not_paren_empty_instance_identifier: '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2437 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6714 "built/tmp/cppBison.yxx.c"
    break;

  case 286: /* not_paren_empty_instance_identifier: '&' optional_attributes not_paren_empty_instance_identifier  */
#line 2442 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6723 "built/tmp/cppBison.yxx.c"
    break;

  case 287: /* not_paren_empty_instance_identifier: ANDAND optional_attributes not_paren_empty_instance_identifier  */
#line 2447 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6732 "built/tmp/cppBison.yxx.c"
    break;

  case 288: /* not_paren_empty_instance_identifier: SCOPING '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2452 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6741 "built/tmp/cppBison.yxx.c"
    break;

  case 289: /* not_paren_empty_instance_identifier: not_paren_empty_instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2457 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6750 "built/tmp/cppBison.yxx.c"
    break;

  case 290: /* empty_instance_identifier: empty  */
#line 2465 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6758 "built/tmp/cppBison.yxx.c"
    break;

  case 291: /* empty_instance_identifier: ELLIPSIS  */
#line 2469 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6767 "built/tmp/cppBison.yxx.c"
    break;

  case 292: /* empty_instance_identifier: ELLIPSIS name optional_attributes  */
#line 2474 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6776 "built/tmp/cppBison.yxx.c"
    break;

  case 293: /* empty_instance_identifier: KW_CONST empty_instance_identifier  */
#line 2479 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6785 "built/tmp/cppBison.yxx.c"
    break;

  case 294: /* empty_instance_identifier: KW_VOLATILE empty_instance_identifier  */
#line 2484 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6794 "built/tmp/cppBison.yxx.c"
    break;

  case 295: /* empty_instance_identifier: '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2489 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6803 "built/tmp/cppBison.yxx.c"
    break;

  case 296: /* empty_instance_identifier: '&' optional_attributes not_paren_empty_instance_identifier  */
#line 2494 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6812 "built/tmp/cppBison.yxx.c"
    break;

  case 297: /* empty_instance_identifier: ANDAND optional_attributes not_paren_empty_instance_identifier  */
#line 2499 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6821 "built/tmp/cppBison.yxx.c"
    break;

  case 298: /* empty_instance_identifier: SCOPING '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2504 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6830 "built/tmp/cppBison.yxx.c"
    break;

  case 299: /* empty_instance_identifier: not_paren_empty_instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2509 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6839 "built/tmp/cppBison.yxx.c"
    break;

  case 300: /* empty_instance_identifier: '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2514 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6849 "built/tmp/cppBison.yxx.c"
    break;

  case 301: /* empty_instance_identifier: '(' '*' optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2520 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-7].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-8].attr_list));
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6860 "built/tmp/cppBison.yxx.c"
    break;

  case 302: /* empty_instance_identifier: '(' '&' optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2527 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-7].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-8].attr_list));
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6871 "built/tmp/cppBison.yxx.c"
    break;

  case 303: /* empty_instance_identifier: '(' ANDAND optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2534 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-7].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-8].attr_list));
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6882 "built/tmp/cppBison.yxx.c"
    break;

  case 304: /* type: simple_type  */
#line 2544 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6890 "built/tmp/cppBison.yxx.c"
    break;

  case 305: /* type: TYPENAME_IDENTIFIER  */
#line 2548 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 6902 "built/tmp/cppBison.yxx.c"
    break;

  case 306: /* type: KW_TYPENAME name  */
#line 2556 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6910 "built/tmp/cppBison.yxx.c"
    break;

  case 307: /* type: anonymous_struct  */
#line 2560 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6918 "built/tmp/cppBison.yxx.c"
    break;

  case 308: /* type: named_struct  */
#line 2564 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6926 "built/tmp/cppBison.yxx.c"
    break;

  case 309: /* type: enum  */
#line 2568 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
#line 6934 "built/tmp/cppBison.yxx.c"
    break;

  case 310: /* type: struct_keyword optional_attributes name  */
#line 2572 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6954 "built/tmp/cppBison.yxx.c"
    break;

  case 311: /* type: enum_keyword optional_attributes name_no_final ':' enum_element_type  */
#line 2588 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-4].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-4]).file, (yyvsp[-3].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6974 "built/tmp/cppBison.yxx.c"
    break;

  case 312: /* type: KW_DECLTYPE '(' const_expr ')'  */
#line 2604 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6987 "built/tmp/cppBison.yxx.c"
    break;

  case 313: /* type: KW_DECLTYPE '(' KW_AUTO ')'  */
#line 2613 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6995 "built/tmp/cppBison.yxx.c"
    break;

  case 314: /* type: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2617 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 7009 "built/tmp/cppBison.yxx.c"
    break;

  case 315: /* type: KW_AUTO  */
#line 2627 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7017 "built/tmp/cppBison.yxx.c"
    break;

  case 316: /* type_pack: TYPEPACK_IDENTIFIER  */
#line 2634 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 7029 "built/tmp/cppBison.yxx.c"
    break;

  case 317: /* type_decl: simple_type  */
#line 2645 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7037 "built/tmp/cppBison.yxx.c"
    break;

  case 318: /* type_decl: TYPENAME_IDENTIFIER  */
#line 2649 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.decl) != nullptr);
}
#line 7049 "built/tmp/cppBison.yxx.c"
    break;

  case 319: /* type_decl: KW_TYPENAME name  */
#line 2657 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7057 "built/tmp/cppBison.yxx.c"
    break;

  case 320: /* type_decl: anonymous_struct  */
#line 2661 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 7065 "built/tmp/cppBison.yxx.c"
    break;

  case 321: /* type_decl: named_struct  */
#line 2665 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
#line 7073 "built/tmp/cppBison.yxx.c"
    break;

  case 322: /* type_decl: enum  */
#line 2669 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
#line 7081 "built/tmp/cppBison.yxx.c"
    break;

  case 323: /* type_decl: struct_keyword optional_attributes name  */
#line 2673 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7101 "built/tmp/cppBison.yxx.c"
    break;

  case 324: /* type_decl: enum_keyword optional_attributes name_no_final ':' enum_element_type  */
#line 2689 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-4].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-4]).file, (yyvsp[-3].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7121 "built/tmp/cppBison.yxx.c"
    break;

  case 325: /* type_decl: enum_keyword optional_attributes name  */
#line 2705 "dtool/src/cppparser/cppBison.yxx"
{
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7143 "built/tmp/cppBison.yxx.c"
    break;

  case 326: /* type_decl: KW_DECLTYPE '(' const_expr ')'  */
#line 2723 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.decl) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7156 "built/tmp/cppBison.yxx.c"
    break;

  case 327: /* type_decl: KW_DECLTYPE '(' KW_AUTO ')'  */
#line 2732 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7164 "built/tmp/cppBison.yxx.c"
    break;

  case 328: /* type_decl: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2736 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.decl) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.decl) = enum_type->get_underlying_type();
  }
}
#line 7178 "built/tmp/cppBison.yxx.c"
    break;

  case 329: /* type_decl: KW_AUTO  */
#line 2746 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7186 "built/tmp/cppBison.yxx.c"
    break;

  case 330: /* predefined_type: simple_type  */
#line 2753 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7194 "built/tmp/cppBison.yxx.c"
    break;

  case 331: /* predefined_type: TYPENAME_IDENTIFIER  */
#line 2757 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 7206 "built/tmp/cppBison.yxx.c"
    break;

  case 332: /* predefined_type: KW_TYPENAME name  */
#line 2765 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7214 "built/tmp/cppBison.yxx.c"
    break;

  case 333: /* predefined_type: struct_keyword optional_attributes name  */
#line 2769 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7234 "built/tmp/cppBison.yxx.c"
    break;

  case 334: /* predefined_type: enum_keyword optional_attributes name  */
#line 2785 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7254 "built/tmp/cppBison.yxx.c"
    break;

  case 335: /* predefined_type: KW_DECLTYPE '(' const_expr ')'  */
#line 2801 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7267 "built/tmp/cppBison.yxx.c"
    break;

  case 336: /* predefined_type: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2810 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 7281 "built/tmp/cppBison.yxx.c"
    break;

  case 337: /* predefined_type: KW_AUTO  */
#line 2820 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7289 "built/tmp/cppBison.yxx.c"
    break;

  case 338: /* var_type_decl: type_decl  */
#line 2827 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[0].u.decl);
}
#line 7297 "built/tmp/cppBison.yxx.c"
    break;

  case 339: /* var_type_decl: IDENTIFIER  */
#line 2831 "dtool/src/cppparser/cppBison.yxx"
{
  yyerror(string("unknown type '") + (yyvsp[0].u.identifier)->get_fully_scoped_name() + "'", (yylsp[0]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 7307 "built/tmp/cppBison.yxx.c"
    break;

  case 340: /* full_type: type empty_instance_identifier  */
#line 2839 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7315 "built/tmp/cppBison.yxx.c"
    break;

  case 341: /* full_type: KW_CONST type empty_instance_identifier  */
#line 2843 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7324 "built/tmp/cppBison.yxx.c"
    break;

  case 342: /* full_type: type_pack empty_instance_identifier  */
#line 2848 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7332 "built/tmp/cppBison.yxx.c"
    break;

  case 343: /* full_type: KW_CONST type_pack empty_instance_identifier  */
#line 2852 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7341 "built/tmp/cppBison.yxx.c"
    break;

  case 344: /* $@17: %empty  */
#line 2860 "dtool/src/cppparser/cppBison.yxx"
{
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), nullptr, current_scope,
                                        new_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list));
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7359 "built/tmp/cppBison.yxx.c"
    break;

  case 345: /* anonymous_struct: struct_keyword optional_attributes '{' $@17 cpp '}'  */
#line 2874 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7370 "built/tmp/cppBison.yxx.c"
    break;

  case 346: /* $@18: %empty  */
#line 2884 "dtool/src/cppparser/cppBison.yxx"
{
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list));
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7394 "built/tmp/cppBison.yxx.c"
    break;

  case 347: /* named_struct: struct_keyword optional_attributes name_no_final $@18 maybe_final maybe_class_derivation '{' cpp '}'  */
#line 2904 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7405 "built/tmp/cppBison.yxx.c"
    break;

  case 349: /* maybe_final: KW_FINAL  */
#line 2915 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->_final = true;
}
#line 7413 "built/tmp/cppBison.yxx.c"
    break;

  case 354: /* base_specification: class_derivation_name  */
#line 2932 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_unknown, false);
}
#line 7421 "built/tmp/cppBison.yxx.c"
    break;

  case 355: /* base_specification: KW_PUBLIC class_derivation_name  */
#line 2936 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
#line 7429 "built/tmp/cppBison.yxx.c"
    break;

  case 356: /* base_specification: KW_PROTECTED class_derivation_name  */
#line 2940 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
#line 7437 "built/tmp/cppBison.yxx.c"
    break;

  case 357: /* base_specification: KW_PRIVATE class_derivation_name  */
#line 2944 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
#line 7445 "built/tmp/cppBison.yxx.c"
    break;

  case 358: /* base_specification: KW_VIRTUAL KW_PUBLIC class_derivation_name  */
#line 2948 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7453 "built/tmp/cppBison.yxx.c"
    break;

  case 359: /* base_specification: KW_VIRTUAL KW_PROTECTED class_derivation_name  */
#line 2952 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7461 "built/tmp/cppBison.yxx.c"
    break;

  case 360: /* base_specification: KW_VIRTUAL KW_PRIVATE class_derivation_name  */
#line 2956 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7469 "built/tmp/cppBison.yxx.c"
    break;

  case 361: /* base_specification: KW_PUBLIC KW_VIRTUAL class_derivation_name  */
#line 2960 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7477 "built/tmp/cppBison.yxx.c"
    break;

  case 362: /* base_specification: KW_PROTECTED KW_VIRTUAL class_derivation_name  */
#line 2964 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7485 "built/tmp/cppBison.yxx.c"
    break;

  case 363: /* base_specification: KW_PRIVATE KW_VIRTUAL class_derivation_name  */
#line 2968 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7493 "built/tmp/cppBison.yxx.c"
    break;

  case 364: /* $@19: %empty  */
#line 2975 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_enum->_scope != nullptr) {
    push_scope(current_enum->_scope);
  }
}
#line 7503 "built/tmp/cppBison.yxx.c"
    break;

  case 365: /* enum: enum_decl $@19 '{' enum_body '}'  */
#line 2981 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_enum->_scope != nullptr) {
    pop_scope();
  }
  (yyval.u.enum_type) = current_enum;
  current_enum = nullptr;
}
#line 7515 "built/tmp/cppBison.yxx.c"
    break;

  case 366: /* enum_decl: enum_keyword optional_attributes ':' enum_element_type  */
#line 2992 "dtool/src/cppparser/cppBison.yxx"
{
  current_enum = new CPPEnumType((yyvsp[-3].u.extension_enum), nullptr, (yyvsp[0].u.type), current_scope, nullptr, (yylsp[-3]).file, (yyvsp[-2].attr_list));
}
#line 7523 "built/tmp/cppBison.yxx.c"
    break;

  case 367: /* enum_decl: enum_keyword optional_attributes  */
#line 2996 "dtool/src/cppparser/cppBison.yxx"
{
  current_enum = new CPPEnumType((yyvsp[-1].u.extension_enum), nullptr, current_scope, nullptr, (yylsp[-1]).file, (yyvsp[0].attr_list));
}
#line 7531 "built/tmp/cppBison.yxx.c"
    break;

  case 368: /* enum_decl: enum_keyword optional_attributes name_no_final ':' enum_element_type  */
#line 3000 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[-2].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-4].u.extension_enum), (yyvsp[-2].u.identifier), (yyvsp[0].u.type), current_scope, new_scope, (yylsp[-4]).file, (yyvsp[-3].attr_list));
}
#line 7540 "built/tmp/cppBison.yxx.c"
    break;

  case 369: /* enum_decl: enum_keyword optional_attributes name_no_final  */
#line 3005 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[0].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, new_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list));
}
#line 7549 "built/tmp/cppBison.yxx.c"
    break;

  case 370: /* enum_element_type: simple_int_type  */
#line 3013 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7557 "built/tmp/cppBison.yxx.c"
    break;

  case 371: /* enum_element_type: TYPENAME_IDENTIFIER  */
#line 3017 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
#line 7565 "built/tmp/cppBison.yxx.c"
    break;

  case 373: /* enum_body_trailing_comma: enum_body_trailing_comma name optional_attributes ','  */
#line 3025 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[-2]), (yyvsp[-1].attr_list));
}
#line 7574 "built/tmp/cppBison.yxx.c"
    break;

  case 374: /* enum_body_trailing_comma: enum_body_trailing_comma name optional_attributes '=' const_expr ','  */
#line 3030 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-4].u.identifier)->get_simple_name(), (yyvsp[-1].u.expr), current_lexer, (yylsp[-4]), (yyvsp[-3].attr_list));
}
#line 7583 "built/tmp/cppBison.yxx.c"
    break;

  case 376: /* enum_body: enum_body_trailing_comma name optional_attributes  */
#line 3038 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-1].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[-1]), (yyvsp[0].attr_list));
}
#line 7592 "built/tmp/cppBison.yxx.c"
    break;

  case 377: /* enum_body: enum_body_trailing_comma name optional_attributes '=' const_expr  */
#line 3043 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-3].u.identifier)->get_simple_name(), (yyvsp[0].u.expr), current_lexer, (yylsp[-3]), (yyvsp[-2].attr_list));
}
#line 7601 "built/tmp/cppBison.yxx.c"
    break;

  case 378: /* enum_keyword: KW_ENUM  */
#line 3051 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
#line 7609 "built/tmp/cppBison.yxx.c"
    break;

  case 379: /* enum_keyword: KW_ENUM KW_CLASS  */
#line 3055 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_class;
}
#line 7617 "built/tmp/cppBison.yxx.c"
    break;

  case 380: /* enum_keyword: KW_ENUM KW_STRUCT  */
#line 3059 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_struct;
}
#line 7625 "built/tmp/cppBison.yxx.c"
    break;

  case 381: /* struct_keyword: KW_CLASS  */
#line 3066 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
#line 7633 "built/tmp/cppBison.yxx.c"
    break;

  case 382: /* struct_keyword: KW_STRUCT  */
#line 3070 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
#line 7641 "built/tmp/cppBison.yxx.c"
    break;

  case 383: /* struct_keyword: KW_UNION  */
#line 3074 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
#line 7649 "built/tmp/cppBison.yxx.c"
    break;

  case 384: /* $@20: %empty  */
#line 3081 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-3]).file, (yyvsp[-2].attr_list));
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-3]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7671 "built/tmp/cppBison.yxx.c"
    break;

  case 385: /* namespace_declaration: KW_NAMESPACE optional_attributes name '{' $@20 cpp '}'  */
#line 3099 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 7679 "built/tmp/cppBison.yxx.c"
    break;

  case 386: /* $@21: %empty  */
#line 3103 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7702 "built/tmp/cppBison.yxx.c"
    break;

  case 387: /* namespace_declaration: KW_INLINE KW_NAMESPACE name '{' $@21 cpp '}'  */
#line 3122 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 7710 "built/tmp/cppBison.yxx.c"
    break;

  case 390: /* using_declaration: KW_USING name ';'  */
#line 3131 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7720 "built/tmp/cppBison.yxx.c"
    break;

  case 391: /* using_declaration: KW_USING name optional_attributes '=' full_type ';'  */
#line 3137 "dtool/src/cppparser/cppBison.yxx"
{
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[-1].u.type), (yyvsp[-4].u.identifier), current_scope, (yyvsp[-3].attr_list));
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-5]));
}
#line 7731 "built/tmp/cppBison.yxx.c"
    break;

  case 392: /* using_declaration: KW_USING KW_NAMESPACE name ';'  */
#line 3144 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), true, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7741 "built/tmp/cppBison.yxx.c"
    break;

  case 393: /* using_declaration: KW_USING KW_ENUM name ';'  */
#line 3150 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7751 "built/tmp/cppBison.yxx.c"
    break;

  case 397: /* simple_int_type: KW_BOOL  */
#line 3165 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
#line 7759 "built/tmp/cppBison.yxx.c"
    break;

  case 398: /* simple_int_type: KW_CHAR  */
#line 3169 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
#line 7767 "built/tmp/cppBison.yxx.c"
    break;

  case 399: /* simple_int_type: KW_WCHAR_T  */
#line 3173 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
#line 7775 "built/tmp/cppBison.yxx.c"
    break;

  case 400: /* simple_int_type: KW_CHAR8_T  */
#line 3177 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char8_t);
}
#line 7783 "built/tmp/cppBison.yxx.c"
    break;

  case 401: /* simple_int_type: KW_CHAR16_T  */
#line 3181 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
#line 7791 "built/tmp/cppBison.yxx.c"
    break;

  case 402: /* simple_int_type: KW_CHAR32_T  */
#line 3185 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
#line 7799 "built/tmp/cppBison.yxx.c"
    break;

  case 403: /* simple_int_type: KW_SHORT  */
#line 3189 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
#line 7808 "built/tmp/cppBison.yxx.c"
    break;

  case 404: /* simple_int_type: KW_LONG  */
#line 3194 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
#line 7817 "built/tmp/cppBison.yxx.c"
    break;

  case 405: /* simple_int_type: KW_UNSIGNED  */
#line 3199 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
#line 7826 "built/tmp/cppBison.yxx.c"
    break;

  case 406: /* simple_int_type: KW_SIGNED  */
#line 3204 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
#line 7835 "built/tmp/cppBison.yxx.c"
    break;

  case 407: /* simple_int_type: KW_INT  */
#line 3209 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
#line 7843 "built/tmp/cppBison.yxx.c"
    break;

  case 408: /* simple_int_type: KW_SHORT simple_int_type  */
#line 3213 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
#line 7852 "built/tmp/cppBison.yxx.c"
    break;

  case 409: /* simple_int_type: KW_LONG simple_int_type  */
#line 3218 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
#line 7865 "built/tmp/cppBison.yxx.c"
    break;

  case 410: /* simple_int_type: KW_UNSIGNED simple_int_type  */
#line 3227 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
#line 7874 "built/tmp/cppBison.yxx.c"
    break;

  case 411: /* simple_int_type: KW_SIGNED simple_int_type  */
#line 3232 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
#line 7883 "built/tmp/cppBison.yxx.c"
    break;

  case 412: /* simple_float_type: KW_FLOAT  */
#line 3240 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
#line 7891 "built/tmp/cppBison.yxx.c"
    break;

  case 413: /* simple_float_type: KW_DOUBLE  */
#line 3244 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
#line 7899 "built/tmp/cppBison.yxx.c"
    break;

  case 414: /* simple_float_type: KW_LONG KW_DOUBLE  */
#line 3248 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
#line 7908 "built/tmp/cppBison.yxx.c"
    break;

  case 415: /* simple_void_type: KW_VOID  */
#line 3256 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
#line 7916 "built/tmp/cppBison.yxx.c"
    break;

  case 416: /* $@22: %empty  */
#line 3265 "dtool/src/cppparser/cppBison.yxx"
{
  current_lexer->_resolve_identifiers = false;
}
#line 7924 "built/tmp/cppBison.yxx.c"
    break;

  case 417: /* code: $@22 code_block  */
#line 3269 "dtool/src/cppparser/cppBison.yxx"
{
  current_lexer->_resolve_identifiers = true;
}
#line 7932 "built/tmp/cppBison.yxx.c"
    break;

  case 532: /* element: KW_WHILE  */
#line 3314 "dtool/src/cppparser/cppBison.yxx"
{
}
#line 7939 "built/tmp/cppBison.yxx.c"
    break;

  case 556: /* optional_const_expr: empty  */
#line 3323 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 7947 "built/tmp/cppBison.yxx.c"
    break;

  case 557: /* optional_const_expr: const_expr  */
#line 3327 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7955 "built/tmp/cppBison.yxx.c"
    break;

  case 558: /* optional_const_expr_comma: empty  */
#line 3334 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 7963 "built/tmp/cppBison.yxx.c"
    break;

  case 559: /* optional_const_expr_comma: const_expr_comma  */
#line 3338 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7971 "built/tmp/cppBison.yxx.c"
    break;

  case 560: /* const_expr_comma: const_expr  */
#line 3345 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7979 "built/tmp/cppBison.yxx.c"
    break;

  case 561: /* const_expr_comma: const_expr_comma ',' const_expr  */
#line 3349 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7987 "built/tmp/cppBison.yxx.c"
    break;

  case 562: /* no_angle_bracket_const_expr: const_operand  */
#line 3356 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7995 "built/tmp/cppBison.yxx.c"
    break;

  case 563: /* no_angle_bracket_const_expr: '(' full_type ')' no_angle_bracket_const_expr  */
#line 3360 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8003 "built/tmp/cppBison.yxx.c"
    break;

  case 564: /* no_angle_bracket_const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3364 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8011 "built/tmp/cppBison.yxx.c"
    break;

  case 565: /* no_angle_bracket_const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3368 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8019 "built/tmp/cppBison.yxx.c"
    break;

  case 566: /* no_angle_bracket_const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3372 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8027 "built/tmp/cppBison.yxx.c"
    break;

  case 567: /* no_angle_bracket_const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3376 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8035 "built/tmp/cppBison.yxx.c"
    break;

  case 568: /* no_angle_bracket_const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3380 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8043 "built/tmp/cppBison.yxx.c"
    break;

  case 569: /* no_angle_bracket_const_expr: KW_SIZEOF no_angle_bracket_const_expr  */
#line 3384 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 8051 "built/tmp/cppBison.yxx.c"
    break;

  case 570: /* no_angle_bracket_const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3388 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8059 "built/tmp/cppBison.yxx.c"
    break;

  case 571: /* no_angle_bracket_const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3392 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8067 "built/tmp/cppBison.yxx.c"
    break;

  case 572: /* no_angle_bracket_const_expr: '!' no_angle_bracket_const_expr  */
#line 3396 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8075 "built/tmp/cppBison.yxx.c"
    break;

  case 573: /* no_angle_bracket_const_expr: '~' no_angle_bracket_const_expr  */
#line 3400 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8083 "built/tmp/cppBison.yxx.c"
    break;

  case 574: /* no_angle_bracket_const_expr: '-' no_angle_bracket_const_expr  */
#line 3404 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8091 "built/tmp/cppBison.yxx.c"
    break;

  case 575: /* no_angle_bracket_const_expr: '+' no_angle_bracket_const_expr  */
#line 3408 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8099 "built/tmp/cppBison.yxx.c"
    break;

  case 576: /* no_angle_bracket_const_expr: '*' no_angle_bracket_const_expr  */
#line 3412 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8107 "built/tmp/cppBison.yxx.c"
    break;

  case 577: /* no_angle_bracket_const_expr: '&' no_angle_bracket_const_expr  */
#line 3416 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8115 "built/tmp/cppBison.yxx.c"
    break;

  case 578: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '*' no_angle_bracket_const_expr  */
#line 3420 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8123 "built/tmp/cppBison.yxx.c"
    break;

  case 579: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '/' no_angle_bracket_const_expr  */
#line 3424 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8131 "built/tmp/cppBison.yxx.c"
    break;

  case 580: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '%' no_angle_bracket_const_expr  */
#line 3428 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8139 "built/tmp/cppBison.yxx.c"
    break;

  case 581: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '+' no_angle_bracket_const_expr  */
#line 3432 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8147 "built/tmp/cppBison.yxx.c"
    break;

  case 582: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '-' no_angle_bracket_const_expr  */
#line 3436 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8155 "built/tmp/cppBison.yxx.c"
    break;

  case 583: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '|' no_angle_bracket_const_expr  */
#line 3440 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8163 "built/tmp/cppBison.yxx.c"
    break;

  case 584: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '^' no_angle_bracket_const_expr  */
#line 3444 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8171 "built/tmp/cppBison.yxx.c"
    break;

  case 585: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '&' no_angle_bracket_const_expr  */
#line 3448 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8179 "built/tmp/cppBison.yxx.c"
    break;

  case 586: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr OROR no_angle_bracket_const_expr  */
#line 3452 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8187 "built/tmp/cppBison.yxx.c"
    break;

  case 587: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr ANDAND no_angle_bracket_const_expr  */
#line 3456 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8195 "built/tmp/cppBison.yxx.c"
    break;

  case 588: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr EQCOMPARE no_angle_bracket_const_expr  */
#line 3460 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8203 "built/tmp/cppBison.yxx.c"
    break;

  case 589: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr NECOMPARE no_angle_bracket_const_expr  */
#line 3464 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8211 "built/tmp/cppBison.yxx.c"
    break;

  case 590: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr LECOMPARE no_angle_bracket_const_expr  */
#line 3468 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8219 "built/tmp/cppBison.yxx.c"
    break;

  case 591: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr GECOMPARE no_angle_bracket_const_expr  */
#line 3472 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8227 "built/tmp/cppBison.yxx.c"
    break;

  case 592: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr SPACESHIP no_angle_bracket_const_expr  */
#line 3476 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8235 "built/tmp/cppBison.yxx.c"
    break;

  case 593: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr LSHIFT no_angle_bracket_const_expr  */
#line 3480 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8243 "built/tmp/cppBison.yxx.c"
    break;

  case 594: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr RSHIFT no_angle_bracket_const_expr  */
#line 3484 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8251 "built/tmp/cppBison.yxx.c"
    break;

  case 595: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '?' no_angle_bracket_const_expr ':' no_angle_bracket_const_expr  */
#line 3488 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8259 "built/tmp/cppBison.yxx.c"
    break;

  case 596: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '[' const_expr ']'  */
#line 3492 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8267 "built/tmp/cppBison.yxx.c"
    break;

  case 597: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '(' const_expr_comma ')'  */
#line 3496 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8275 "built/tmp/cppBison.yxx.c"
    break;

  case 598: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '(' ')'  */
#line 3500 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8283 "built/tmp/cppBison.yxx.c"
    break;

  case 599: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '.' name  */
#line 3504 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 8291 "built/tmp/cppBison.yxx.c"
    break;

  case 600: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr POINTSAT no_angle_bracket_const_expr  */
#line 3508 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8299 "built/tmp/cppBison.yxx.c"
    break;

  case 601: /* no_angle_bracket_const_expr: '(' const_expr_comma ')'  */
#line 3512 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8307 "built/tmp/cppBison.yxx.c"
    break;

  case 602: /* const_expr: const_operand  */
#line 3520 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8315 "built/tmp/cppBison.yxx.c"
    break;

  case 603: /* const_expr: '(' full_type ')' const_expr  */
#line 3524 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8323 "built/tmp/cppBison.yxx.c"
    break;

  case 604: /* const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3528 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8331 "built/tmp/cppBison.yxx.c"
    break;

  case 605: /* const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3532 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8339 "built/tmp/cppBison.yxx.c"
    break;

  case 606: /* const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3536 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8347 "built/tmp/cppBison.yxx.c"
    break;

  case 607: /* const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3540 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8355 "built/tmp/cppBison.yxx.c"
    break;

  case 608: /* const_expr: TYPENAME_IDENTIFIER '(' optional_const_expr_comma ')'  */
#line 3544 "dtool/src/cppparser/cppBison.yxx"
{
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8369 "built/tmp/cppBison.yxx.c"
    break;

  case 609: /* const_expr: TYPENAME_IDENTIFIER '{' optional_const_expr_comma '}'  */
#line 3554 "dtool/src/cppparser/cppBison.yxx"
{
  // Aggregate initialization.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::aggregate_init_op(type, (yyvsp[-1].u.expr)));
}
#line 8383 "built/tmp/cppBison.yxx.c"
    break;

  case 610: /* const_expr: KW_INT '(' optional_const_expr_comma ')'  */
#line 3564 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8393 "built/tmp/cppBison.yxx.c"
    break;

  case 611: /* const_expr: KW_CHAR '(' optional_const_expr_comma ')'  */
#line 3570 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8403 "built/tmp/cppBison.yxx.c"
    break;

  case 612: /* const_expr: KW_WCHAR_T '(' optional_const_expr_comma ')'  */
#line 3576 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8413 "built/tmp/cppBison.yxx.c"
    break;

  case 613: /* const_expr: KW_CHAR8_T '(' optional_const_expr_comma ')'  */
#line 3582 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char8_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8423 "built/tmp/cppBison.yxx.c"
    break;

  case 614: /* const_expr: KW_CHAR16_T '(' optional_const_expr_comma ')'  */
#line 3588 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8433 "built/tmp/cppBison.yxx.c"
    break;

  case 615: /* const_expr: KW_CHAR32_T '(' optional_const_expr_comma ')'  */
#line 3594 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8443 "built/tmp/cppBison.yxx.c"
    break;

  case 616: /* const_expr: KW_BOOL '(' optional_const_expr_comma ')'  */
#line 3600 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8453 "built/tmp/cppBison.yxx.c"
    break;

  case 617: /* const_expr: KW_SHORT '(' optional_const_expr_comma ')'  */
#line 3606 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8464 "built/tmp/cppBison.yxx.c"
    break;

  case 618: /* const_expr: KW_LONG '(' optional_const_expr_comma ')'  */
#line 3613 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8475 "built/tmp/cppBison.yxx.c"
    break;

  case 619: /* const_expr: KW_UNSIGNED '(' optional_const_expr_comma ')'  */
#line 3620 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8486 "built/tmp/cppBison.yxx.c"
    break;

  case 620: /* const_expr: KW_SIGNED '(' optional_const_expr_comma ')'  */
#line 3627 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8497 "built/tmp/cppBison.yxx.c"
    break;

  case 621: /* const_expr: KW_FLOAT '(' optional_const_expr_comma ')'  */
#line 3634 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8507 "built/tmp/cppBison.yxx.c"
    break;

  case 622: /* const_expr: KW_DOUBLE '(' optional_const_expr_comma ')'  */
#line 3640 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8517 "built/tmp/cppBison.yxx.c"
    break;

  case 623: /* const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3646 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8525 "built/tmp/cppBison.yxx.c"
    break;

  case 624: /* const_expr: KW_SIZEOF const_expr  */
#line 3650 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 8533 "built/tmp/cppBison.yxx.c"
    break;

  case 625: /* const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3654 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8541 "built/tmp/cppBison.yxx.c"
    break;

  case 626: /* const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3658 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8549 "built/tmp/cppBison.yxx.c"
    break;

  case 627: /* const_expr: KW_NEW predefined_type  */
#line 3662 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8557 "built/tmp/cppBison.yxx.c"
    break;

  case 628: /* const_expr: KW_NEW predefined_type '(' optional_const_expr_comma ')'  */
#line 3666 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8565 "built/tmp/cppBison.yxx.c"
    break;

  case 629: /* const_expr: KW_TYPEID '(' full_type ')'  */
#line 3670 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 8580 "built/tmp/cppBison.yxx.c"
    break;

  case 630: /* const_expr: KW_TYPEID '(' const_expr ')'  */
#line 3681 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 8595 "built/tmp/cppBison.yxx.c"
    break;

  case 631: /* const_expr: '!' const_expr  */
#line 3692 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8603 "built/tmp/cppBison.yxx.c"
    break;

  case 632: /* const_expr: '~' const_expr  */
#line 3696 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8611 "built/tmp/cppBison.yxx.c"
    break;

  case 633: /* const_expr: '-' const_expr  */
#line 3700 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8619 "built/tmp/cppBison.yxx.c"
    break;

  case 634: /* const_expr: '+' const_expr  */
#line 3704 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8627 "built/tmp/cppBison.yxx.c"
    break;

  case 635: /* const_expr: '*' const_expr  */
#line 3708 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8635 "built/tmp/cppBison.yxx.c"
    break;

  case 636: /* const_expr: '&' const_expr  */
#line 3712 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8643 "built/tmp/cppBison.yxx.c"
    break;

  case 637: /* const_expr: const_expr '*' const_expr  */
#line 3716 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8651 "built/tmp/cppBison.yxx.c"
    break;

  case 638: /* const_expr: const_expr '/' const_expr  */
#line 3720 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8659 "built/tmp/cppBison.yxx.c"
    break;

  case 639: /* const_expr: const_expr '%' const_expr  */
#line 3724 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8667 "built/tmp/cppBison.yxx.c"
    break;

  case 640: /* const_expr: const_expr '+' const_expr  */
#line 3728 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8675 "built/tmp/cppBison.yxx.c"
    break;

  case 641: /* const_expr: const_expr '-' const_expr  */
#line 3732 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8683 "built/tmp/cppBison.yxx.c"
    break;

  case 642: /* const_expr: const_expr '|' const_expr  */
#line 3736 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8691 "built/tmp/cppBison.yxx.c"
    break;

  case 643: /* const_expr: const_expr '^' const_expr  */
#line 3740 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8699 "built/tmp/cppBison.yxx.c"
    break;

  case 644: /* const_expr: const_expr '&' const_expr  */
#line 3744 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8707 "built/tmp/cppBison.yxx.c"
    break;

  case 645: /* const_expr: const_expr OROR const_expr  */
#line 3748 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8715 "built/tmp/cppBison.yxx.c"
    break;

  case 646: /* const_expr: const_expr ANDAND const_expr  */
#line 3752 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8723 "built/tmp/cppBison.yxx.c"
    break;

  case 647: /* const_expr: const_expr EQCOMPARE const_expr  */
#line 3756 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8731 "built/tmp/cppBison.yxx.c"
    break;

  case 648: /* const_expr: const_expr NECOMPARE const_expr  */
#line 3760 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8739 "built/tmp/cppBison.yxx.c"
    break;

  case 649: /* const_expr: const_expr LECOMPARE const_expr  */
#line 3764 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8747 "built/tmp/cppBison.yxx.c"
    break;

  case 650: /* const_expr: const_expr GECOMPARE const_expr  */
#line 3768 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8755 "built/tmp/cppBison.yxx.c"
    break;

  case 651: /* const_expr: const_expr SPACESHIP const_expr  */
#line 3772 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8763 "built/tmp/cppBison.yxx.c"
    break;

  case 652: /* const_expr: const_expr '<' const_expr  */
#line 3776 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8771 "built/tmp/cppBison.yxx.c"
    break;

  case 653: /* const_expr: const_expr '>' const_expr  */
#line 3780 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8779 "built/tmp/cppBison.yxx.c"
    break;

  case 654: /* const_expr: const_expr LSHIFT const_expr  */
#line 3784 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8787 "built/tmp/cppBison.yxx.c"
    break;

  case 655: /* const_expr: const_expr RSHIFT const_expr  */
#line 3788 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8795 "built/tmp/cppBison.yxx.c"
    break;

  case 656: /* const_expr: const_expr '?' const_expr ':' const_expr  */
#line 3792 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8803 "built/tmp/cppBison.yxx.c"
    break;

  case 657: /* const_expr: const_expr '[' const_expr ']'  */
#line 3796 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8811 "built/tmp/cppBison.yxx.c"
    break;

  case 658: /* const_expr: const_expr '(' const_expr_comma ')'  */
#line 3800 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8819 "built/tmp/cppBison.yxx.c"
    break;

  case 659: /* const_expr: const_expr '(' ')'  */
#line 3804 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8827 "built/tmp/cppBison.yxx.c"
    break;

  case 660: /* const_expr: KW_NOEXCEPT_LPAREN const_expr ')'  */
#line 3808 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(KW_NOEXCEPT, (yyvsp[-1].u.expr));
}
#line 8835 "built/tmp/cppBison.yxx.c"
    break;

  case 661: /* const_expr: const_expr '.' name  */
#line 3812 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 8843 "built/tmp/cppBison.yxx.c"
    break;

  case 662: /* const_expr: const_expr POINTSAT const_expr  */
#line 3816 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8851 "built/tmp/cppBison.yxx.c"
    break;

  case 663: /* const_expr: '(' const_expr_comma ')'  */
#line 3820 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8859 "built/tmp/cppBison.yxx.c"
    break;

  case 664: /* const_operand: INTEGER  */
#line 3827 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8867 "built/tmp/cppBison.yxx.c"
    break;

  case 665: /* const_operand: KW_TRUE  */
#line 3831 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(true);
}
#line 8875 "built/tmp/cppBison.yxx.c"
    break;

  case 666: /* const_operand: KW_FALSE  */
#line 3835 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(false);
}
#line 8883 "built/tmp/cppBison.yxx.c"
    break;

  case 667: /* const_operand: CHAR_TOK  */
#line 3839 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8891 "built/tmp/cppBison.yxx.c"
    break;

  case 668: /* const_operand: REAL  */
#line 3843 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 8899 "built/tmp/cppBison.yxx.c"
    break;

  case 669: /* const_operand: string_literal  */
#line 3847 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8907 "built/tmp/cppBison.yxx.c"
    break;

  case 670: /* const_operand: CUSTOM_LITERAL  */
#line 3851 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8915 "built/tmp/cppBison.yxx.c"
    break;

  case 671: /* const_operand: IDENTIFIER  */
#line 3855 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 8923 "built/tmp/cppBison.yxx.c"
    break;

  case 672: /* const_operand: KW_FINAL  */
#line 3859 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8933 "built/tmp/cppBison.yxx.c"
    break;

  case 673: /* const_operand: KW_OVERRIDE  */
#line 3865 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8943 "built/tmp/cppBison.yxx.c"
    break;

  case 674: /* const_operand: KW_NULLPTR  */
#line 3871 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 8951 "built/tmp/cppBison.yxx.c"
    break;

  case 675: /* const_operand: '[' capture_list ']' function_post optional_attributes maybe_trailing_return_type '{' code '}'  */
#line 3875 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-7].u.closure_type)->_flags = (yyvsp[-5].u.integer);
  (yyvsp[-7].u.closure_type)->_attributes = (yyvsp[-4].attr_list);
  (yyvsp[-7].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-7].u.closure_type)));
}
#line 8962 "built/tmp/cppBison.yxx.c"
    break;

  case 676: /* const_operand: '[' capture_list ']' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type '{' code '}'  */
#line 3882 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-10].u.closure_type)->_parameters = (yyvsp[-7].u.param_list);
  (yyvsp[-10].u.closure_type)->_flags = (yyvsp[-5].u.integer);
  (yyvsp[-10].u.closure_type)->_attributes = (yyvsp[-4].attr_list);
  (yyvsp[-10].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-10].u.closure_type)));
}
#line 8974 "built/tmp/cppBison.yxx.c"
    break;

  case 677: /* const_operand: KW_HAS_VIRTUAL_DESTRUCTOR '(' full_type ')'  */
#line 3890 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_HAS_VIRTUAL_DESTRUCTOR, (yyvsp[-1].u.type)));
}
#line 8982 "built/tmp/cppBison.yxx.c"
    break;

  case 678: /* const_operand: KW_IS_ABSTRACT '(' full_type ')'  */
#line 3894 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ABSTRACT, (yyvsp[-1].u.type)));
}
#line 8990 "built/tmp/cppBison.yxx.c"
    break;

  case 679: /* const_operand: KW_IS_BASE_OF '(' full_type ',' full_type ')'  */
#line 3898 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8998 "built/tmp/cppBison.yxx.c"
    break;

  case 680: /* const_operand: KW_IS_CLASS '(' full_type ')'  */
#line 3902 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-1].u.type)));
}
#line 9006 "built/tmp/cppBison.yxx.c"
    break;

  case 681: /* const_operand: KW_IS_CONSTRUCTIBLE '(' full_type ')'  */
#line 3906 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 9014 "built/tmp/cppBison.yxx.c"
    break;

  case 682: /* const_operand: KW_IS_CONSTRUCTIBLE '(' full_type ',' full_type ')'  */
#line 3910 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 9022 "built/tmp/cppBison.yxx.c"
    break;

  case 683: /* const_operand: KW_IS_CONVERTIBLE_TO '(' full_type ',' full_type ')'  */
#line 3914 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONVERTIBLE_TO, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 9030 "built/tmp/cppBison.yxx.c"
    break;

  case 684: /* const_operand: KW_IS_DESTRUCTIBLE '(' full_type ')'  */
#line 3918 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_DESTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 9038 "built/tmp/cppBison.yxx.c"
    break;

  case 685: /* const_operand: KW_IS_EMPTY '(' full_type ')'  */
#line 3922 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_EMPTY, (yyvsp[-1].u.type)));
}
#line 9046 "built/tmp/cppBison.yxx.c"
    break;

  case 686: /* const_operand: KW_IS_ENUM '(' full_type ')'  */
#line 3926 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ENUM, (yyvsp[-1].u.type)));
}
#line 9054 "built/tmp/cppBison.yxx.c"
    break;

  case 687: /* const_operand: KW_IS_FINAL '(' full_type ')'  */
#line 3930 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FINAL, (yyvsp[-1].u.type)));
}
#line 9062 "built/tmp/cppBison.yxx.c"
    break;

  case 688: /* const_operand: KW_IS_FUNDAMENTAL '(' full_type ')'  */
#line 3934 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FUNDAMENTAL, (yyvsp[-1].u.type)));
}
#line 9070 "built/tmp/cppBison.yxx.c"
    break;

  case 689: /* const_operand: KW_IS_POD '(' full_type ')'  */
#line 3938 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POD, (yyvsp[-1].u.type)));
}
#line 9078 "built/tmp/cppBison.yxx.c"
    break;

  case 690: /* const_operand: KW_IS_POLYMORPHIC '(' full_type ')'  */
#line 3942 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POLYMORPHIC, (yyvsp[-1].u.type)));
}
#line 9086 "built/tmp/cppBison.yxx.c"
    break;

  case 691: /* const_operand: KW_IS_STANDARD_LAYOUT '(' full_type ')'  */
#line 3946 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_STANDARD_LAYOUT, (yyvsp[-1].u.type)));
}
#line 9094 "built/tmp/cppBison.yxx.c"
    break;

  case 692: /* const_operand: KW_IS_TRIVIAL '(' full_type ')'  */
#line 3950 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIAL, (yyvsp[-1].u.type)));
}
#line 9102 "built/tmp/cppBison.yxx.c"
    break;

  case 693: /* const_operand: KW_IS_TRIVIALLY_COPYABLE '(' full_type ')'  */
#line 3954 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIALLY_COPYABLE, (yyvsp[-1].u.type)));
}
#line 9110 "built/tmp/cppBison.yxx.c"
    break;

  case 694: /* const_operand: KW_IS_UNION '(' full_type ')'  */
#line 3958 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_UNION, (yyvsp[-1].u.type)));
}
#line 9118 "built/tmp/cppBison.yxx.c"
    break;

  case 695: /* formal_const_expr: formal_const_operand  */
#line 3972 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9126 "built/tmp/cppBison.yxx.c"
    break;

  case 696: /* formal_const_expr: '(' full_type ')' const_expr  */
#line 3976 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 9134 "built/tmp/cppBison.yxx.c"
    break;

  case 697: /* formal_const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3980 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 9142 "built/tmp/cppBison.yxx.c"
    break;

  case 698: /* formal_const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3984 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 9150 "built/tmp/cppBison.yxx.c"
    break;

  case 699: /* formal_const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3988 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 9158 "built/tmp/cppBison.yxx.c"
    break;

  case 700: /* formal_const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3992 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 9166 "built/tmp/cppBison.yxx.c"
    break;

  case 701: /* formal_const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3996 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 9174 "built/tmp/cppBison.yxx.c"
    break;

  case 702: /* formal_const_expr: KW_SIZEOF formal_const_expr  */
#line 4000 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 9182 "built/tmp/cppBison.yxx.c"
    break;

  case 703: /* formal_const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 4004 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 9190 "built/tmp/cppBison.yxx.c"
    break;

  case 704: /* formal_const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 4008 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 9198 "built/tmp/cppBison.yxx.c"
    break;

  case 705: /* formal_const_expr: KW_NEW predefined_type  */
#line 4012 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 9206 "built/tmp/cppBison.yxx.c"
    break;

  case 706: /* formal_const_expr: KW_NEW predefined_type '(' optional_const_expr_comma ')'  */
#line 4016 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 9214 "built/tmp/cppBison.yxx.c"
    break;

  case 707: /* formal_const_expr: KW_TYPEID '(' full_type ')'  */
#line 4020 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 9229 "built/tmp/cppBison.yxx.c"
    break;

  case 708: /* formal_const_expr: KW_TYPEID '(' const_expr ')'  */
#line 4031 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 9244 "built/tmp/cppBison.yxx.c"
    break;

  case 709: /* formal_const_expr: '!' const_expr  */
#line 4042 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 9252 "built/tmp/cppBison.yxx.c"
    break;

  case 710: /* formal_const_expr: '~' const_expr  */
#line 4046 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 9260 "built/tmp/cppBison.yxx.c"
    break;

  case 711: /* formal_const_expr: '-' const_expr  */
#line 4050 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 9268 "built/tmp/cppBison.yxx.c"
    break;

  case 712: /* formal_const_expr: '+' const_expr  */
#line 4054 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 9276 "built/tmp/cppBison.yxx.c"
    break;

  case 713: /* formal_const_expr: '&' const_expr  */
#line 4058 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 9284 "built/tmp/cppBison.yxx.c"
    break;

  case 714: /* formal_const_expr: formal_const_expr '*' const_expr  */
#line 4062 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9292 "built/tmp/cppBison.yxx.c"
    break;

  case 715: /* formal_const_expr: formal_const_expr '/' const_expr  */
#line 4066 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9300 "built/tmp/cppBison.yxx.c"
    break;

  case 716: /* formal_const_expr: formal_const_expr '%' const_expr  */
#line 4070 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9308 "built/tmp/cppBison.yxx.c"
    break;

  case 717: /* formal_const_expr: formal_const_expr '+' const_expr  */
#line 4074 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9316 "built/tmp/cppBison.yxx.c"
    break;

  case 718: /* formal_const_expr: formal_const_expr '-' const_expr  */
#line 4078 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9324 "built/tmp/cppBison.yxx.c"
    break;

  case 719: /* formal_const_expr: formal_const_expr '|' const_expr  */
#line 4082 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9332 "built/tmp/cppBison.yxx.c"
    break;

  case 720: /* formal_const_expr: formal_const_expr '^' const_expr  */
#line 4086 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9340 "built/tmp/cppBison.yxx.c"
    break;

  case 721: /* formal_const_expr: formal_const_expr '&' const_expr  */
#line 4090 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9348 "built/tmp/cppBison.yxx.c"
    break;

  case 722: /* formal_const_expr: formal_const_expr OROR const_expr  */
#line 4094 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9356 "built/tmp/cppBison.yxx.c"
    break;

  case 723: /* formal_const_expr: formal_const_expr ANDAND const_expr  */
#line 4098 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9364 "built/tmp/cppBison.yxx.c"
    break;

  case 724: /* formal_const_expr: formal_const_expr EQCOMPARE const_expr  */
#line 4102 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9372 "built/tmp/cppBison.yxx.c"
    break;

  case 725: /* formal_const_expr: formal_const_expr NECOMPARE const_expr  */
#line 4106 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9380 "built/tmp/cppBison.yxx.c"
    break;

  case 726: /* formal_const_expr: formal_const_expr LECOMPARE const_expr  */
#line 4110 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9388 "built/tmp/cppBison.yxx.c"
    break;

  case 727: /* formal_const_expr: formal_const_expr GECOMPARE const_expr  */
#line 4114 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9396 "built/tmp/cppBison.yxx.c"
    break;

  case 728: /* formal_const_expr: formal_const_expr SPACESHIP const_expr  */
#line 4118 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9404 "built/tmp/cppBison.yxx.c"
    break;

  case 729: /* formal_const_expr: formal_const_expr '<' const_expr  */
#line 4122 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9412 "built/tmp/cppBison.yxx.c"
    break;

  case 730: /* formal_const_expr: formal_const_expr '>' const_expr  */
#line 4126 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9420 "built/tmp/cppBison.yxx.c"
    break;

  case 731: /* formal_const_expr: formal_const_expr LSHIFT const_expr  */
#line 4130 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9428 "built/tmp/cppBison.yxx.c"
    break;

  case 732: /* formal_const_expr: formal_const_expr RSHIFT const_expr  */
#line 4134 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9436 "built/tmp/cppBison.yxx.c"
    break;

  case 733: /* formal_const_expr: formal_const_expr '?' const_expr ':' const_expr  */
#line 4138 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9444 "built/tmp/cppBison.yxx.c"
    break;

  case 734: /* formal_const_expr: formal_const_expr '[' const_expr ']'  */
#line 4142 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9452 "built/tmp/cppBison.yxx.c"
    break;

  case 735: /* formal_const_expr: formal_const_expr '(' const_expr_comma ')'  */
#line 4146 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9460 "built/tmp/cppBison.yxx.c"
    break;

  case 736: /* formal_const_expr: formal_const_expr '(' ')'  */
#line 4150 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 9468 "built/tmp/cppBison.yxx.c"
    break;

  case 737: /* formal_const_expr: formal_const_expr '.' name  */
#line 4154 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 9476 "built/tmp/cppBison.yxx.c"
    break;

  case 738: /* formal_const_expr: formal_const_expr POINTSAT const_expr  */
#line 4158 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9484 "built/tmp/cppBison.yxx.c"
    break;

  case 739: /* formal_const_expr: '(' const_expr_comma ')'  */
#line 4162 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 9492 "built/tmp/cppBison.yxx.c"
    break;

  case 740: /* formal_const_operand: INTEGER  */
#line 4169 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9500 "built/tmp/cppBison.yxx.c"
    break;

  case 741: /* formal_const_operand: KW_TRUE  */
#line 4173 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(true);
}
#line 9508 "built/tmp/cppBison.yxx.c"
    break;

  case 742: /* formal_const_operand: KW_FALSE  */
#line 4177 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(false);
}
#line 9516 "built/tmp/cppBison.yxx.c"
    break;

  case 743: /* formal_const_operand: CHAR_TOK  */
#line 4181 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9524 "built/tmp/cppBison.yxx.c"
    break;

  case 744: /* formal_const_operand: REAL  */
#line 4185 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 9532 "built/tmp/cppBison.yxx.c"
    break;

  case 745: /* formal_const_operand: string_literal  */
#line 4189 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9540 "built/tmp/cppBison.yxx.c"
    break;

  case 746: /* formal_const_operand: CUSTOM_LITERAL  */
#line 4193 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9548 "built/tmp/cppBison.yxx.c"
    break;

  case 747: /* formal_const_operand: IDENTIFIER  */
#line 4197 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 9556 "built/tmp/cppBison.yxx.c"
    break;

  case 748: /* formal_const_operand: KW_FINAL  */
#line 4201 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9566 "built/tmp/cppBison.yxx.c"
    break;

  case 749: /* formal_const_operand: KW_OVERRIDE  */
#line 4207 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9576 "built/tmp/cppBison.yxx.c"
    break;

  case 750: /* formal_const_operand: KW_NULLPTR  */
#line 4213 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 9584 "built/tmp/cppBison.yxx.c"
    break;

  case 751: /* capture_list: empty  */
#line 4221 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType();
}
#line 9592 "built/tmp/cppBison.yxx.c"
    break;

  case 752: /* capture_list: '='  */
#line 4225 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_value);
}
#line 9600 "built/tmp/cppBison.yxx.c"
    break;

  case 753: /* capture_list: '&'  */
#line 4229 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_reference);
}
#line 9608 "built/tmp/cppBison.yxx.c"
    break;

  case 754: /* capture_list: capture maybe_initialize  */
#line 4233 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType();
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9619 "built/tmp/cppBison.yxx.c"
    break;

  case 755: /* capture_list: capture_list ',' capture maybe_initialize  */
#line 4240 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = (yyvsp[-3].u.closure_type);
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9630 "built/tmp/cppBison.yxx.c"
    break;

  case 756: /* capture: '&' name  */
#line 4250 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9640 "built/tmp/cppBison.yxx.c"
    break;

  case 757: /* capture: '&' name ELLIPSIS  */
#line 4256 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[-1].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9650 "built/tmp/cppBison.yxx.c"
    break;

  case 758: /* capture: name  */
#line 4262 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  if ((yyval.u.capture)->_name == "this") {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
  } else {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  }
}
#line 9664 "built/tmp/cppBison.yxx.c"
    break;

  case 759: /* capture: '*' name  */
#line 4272 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  if ((yyval.u.capture)->_name != "this") {
    yywarning("only capture name 'this' may be preceded by an asterisk", (yylsp[0]));
  }
}
#line 9677 "built/tmp/cppBison.yxx.c"
    break;

  case 760: /* class_derivation_name: name  */
#line 4284 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == nullptr) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 9689 "built/tmp/cppBison.yxx.c"
    break;

  case 761: /* class_derivation_name: KW_TYPENAME name  */
#line 4292 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 9697 "built/tmp/cppBison.yxx.c"
    break;

  case 762: /* class_derivation_name: name ELLIPSIS  */
#line 4296 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[-1].u.identifier));
  ctp->_packed = true;
  (yyval.u.type) = CPPType::new_type(ctp);
}
#line 9707 "built/tmp/cppBison.yxx.c"
    break;

  case 763: /* name: IDENTIFIER  */
#line 4326 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9715 "built/tmp/cppBison.yxx.c"
    break;

  case 764: /* name: TYPENAME_IDENTIFIER  */
#line 4330 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9723 "built/tmp/cppBison.yxx.c"
    break;

  case 765: /* name: TYPEPACK_IDENTIFIER  */
#line 4334 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9731 "built/tmp/cppBison.yxx.c"
    break;

  case 766: /* name: KW_FINAL  */
#line 4338 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[0]));
}
#line 9739 "built/tmp/cppBison.yxx.c"
    break;

  case 767: /* name: KW_OVERRIDE  */
#line 4342 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9747 "built/tmp/cppBison.yxx.c"
    break;

  case 768: /* name: KW_SIGNED  */
#line 4346 "dtool/src/cppparser/cppBison.yxx"
{
  // This is not a keyword in Python, so it is useful to be able to use this
  // in MAKE_PROPERTY definitions, etc.
  (yyval.u.identifier) = new CPPIdentifier("signed", (yylsp[0]));
}
#line 9757 "built/tmp/cppBison.yxx.c"
    break;

  case 769: /* name: KW_FLOAT  */
#line 4352 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("float", (yylsp[0]));
}
#line 9765 "built/tmp/cppBison.yxx.c"
    break;

  case 770: /* name: KW_PUBLIC  */
#line 4356 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("public", (yylsp[0]));
}
#line 9773 "built/tmp/cppBison.yxx.c"
    break;

  case 771: /* name: KW_PRIVATE  */
#line 4360 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("private", (yylsp[0]));
}
#line 9781 "built/tmp/cppBison.yxx.c"
    break;

  case 772: /* name: KW_STATIC  */
#line 4364 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("static", (yylsp[0]));
}
#line 9789 "built/tmp/cppBison.yxx.c"
    break;

  case 773: /* name: KW_DEFAULT  */
#line 4368 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("default", (yylsp[0]));
}
#line 9797 "built/tmp/cppBison.yxx.c"
    break;

  case 774: /* name_no_final: IDENTIFIER  */
#line 4379 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9805 "built/tmp/cppBison.yxx.c"
    break;

  case 775: /* name_no_final: TYPENAME_IDENTIFIER  */
#line 4383 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9813 "built/tmp/cppBison.yxx.c"
    break;

  case 776: /* name_no_final: TYPEPACK_IDENTIFIER  */
#line 4387 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9821 "built/tmp/cppBison.yxx.c"
    break;

  case 777: /* name_no_final: KW_OVERRIDE  */
#line 4391 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9829 "built/tmp/cppBison.yxx.c"
    break;

  case 778: /* string_literal: SIMPLE_STRING  */
#line 4399 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 9837 "built/tmp/cppBison.yxx.c"
    break;

  case 779: /* string_literal: STRING_LITERAL  */
#line 4403 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9845 "built/tmp/cppBison.yxx.c"
    break;

  case 780: /* string_literal: string_literal SIMPLE_STRING  */
#line 4407 "dtool/src/cppparser/cppBison.yxx"
{
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  (yyval.u.expr)->_str += (yyvsp[0].str);
}
#line 9855 "built/tmp/cppBison.yxx.c"
    break;

  case 781: /* string_literal: string_literal STRING_LITERAL  */
#line 4413 "dtool/src/cppparser/cppBison.yxx"
{
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  if ((yyvsp[0].u.expr)->_type != CPPExpression::T_string && (yyvsp[0].u.expr)->_type != (yyvsp[-1].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[0].u.expr)->_str;
}
#line 9868 "built/tmp/cppBison.yxx.c"
    break;


#line 9872 "built/tmp/cppBison.yxx.c"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

