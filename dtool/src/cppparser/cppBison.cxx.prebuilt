/* A Bison parser, made by GNU Bison 3.7.3.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.7.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs

/* First part of user prologue.  */
#line 7 "dtool/src/cppparser/cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppClosureType.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

using std::stringstream;
using std::string;

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = nullptr;
CPPScope *global_scope = nullptr;
CPPPreprocessor *current_lexer = nullptr;

static CPPStructType *current_struct = nullptr;
static CPPEnumType *current_enum = nullptr;
static int current_storage_class = 0;
static CPPType *current_type = nullptr;
static CPPExpression *current_expr = nullptr;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static std::vector<CPPScope *> last_scopes;
static std::vector<int> last_storage_classes;
static std::vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = nullptr;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = nullptr;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != nullptr) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#line 274 "built/tmp/cppBison.yxx.c"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "cppBison.yxx.h"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_REAL = 3,                       /* REAL  */
  YYSYMBOL_INTEGER = 4,                    /* INTEGER  */
  YYSYMBOL_CHAR_TOK = 5,                   /* CHAR_TOK  */
  YYSYMBOL_SIMPLE_STRING = 6,              /* SIMPLE_STRING  */
  YYSYMBOL_SIMPLE_IDENTIFIER = 7,          /* SIMPLE_IDENTIFIER  */
  YYSYMBOL_STRING_LITERAL = 8,             /* STRING_LITERAL  */
  YYSYMBOL_CUSTOM_LITERAL = 9,             /* CUSTOM_LITERAL  */
  YYSYMBOL_IDENTIFIER = 10,                /* IDENTIFIER  */
  YYSYMBOL_TYPENAME_IDENTIFIER = 11,       /* TYPENAME_IDENTIFIER  */
  YYSYMBOL_TYPEPACK_IDENTIFIER = 12,       /* TYPEPACK_IDENTIFIER  */
  YYSYMBOL_SCOPING = 13,                   /* SCOPING  */
  YYSYMBOL_TYPEDEFNAME = 14,               /* TYPEDEFNAME  */
  YYSYMBOL_ELLIPSIS = 15,                  /* ELLIPSIS  */
  YYSYMBOL_OROR = 16,                      /* OROR  */
  YYSYMBOL_ANDAND = 17,                    /* ANDAND  */
  YYSYMBOL_EQCOMPARE = 18,                 /* EQCOMPARE  */
  YYSYMBOL_NECOMPARE = 19,                 /* NECOMPARE  */
  YYSYMBOL_LECOMPARE = 20,                 /* LECOMPARE  */
  YYSYMBOL_GECOMPARE = 21,                 /* GECOMPARE  */
  YYSYMBOL_SPACESHIP = 22,                 /* SPACESHIP  */
  YYSYMBOL_LSHIFT = 23,                    /* LSHIFT  */
  YYSYMBOL_RSHIFT = 24,                    /* RSHIFT  */
  YYSYMBOL_POINTSAT_STAR = 25,             /* POINTSAT_STAR  */
  YYSYMBOL_DOT_STAR = 26,                  /* DOT_STAR  */
  YYSYMBOL_UNARY = 27,                     /* UNARY  */
  YYSYMBOL_UNARY_NOT = 28,                 /* UNARY_NOT  */
  YYSYMBOL_UNARY_NEGATE = 29,              /* UNARY_NEGATE  */
  YYSYMBOL_UNARY_MINUS = 30,               /* UNARY_MINUS  */
  YYSYMBOL_UNARY_PLUS = 31,                /* UNARY_PLUS  */
  YYSYMBOL_UNARY_STAR = 32,                /* UNARY_STAR  */
  YYSYMBOL_UNARY_REF = 33,                 /* UNARY_REF  */
  YYSYMBOL_POINTSAT = 34,                  /* POINTSAT  */
  YYSYMBOL_SCOPE = 35,                     /* SCOPE  */
  YYSYMBOL_PLUSPLUS = 36,                  /* PLUSPLUS  */
  YYSYMBOL_MINUSMINUS = 37,                /* MINUSMINUS  */
  YYSYMBOL_TIMESEQUAL = 38,                /* TIMESEQUAL  */
  YYSYMBOL_DIVIDEEQUAL = 39,               /* DIVIDEEQUAL  */
  YYSYMBOL_MODEQUAL = 40,                  /* MODEQUAL  */
  YYSYMBOL_PLUSEQUAL = 41,                 /* PLUSEQUAL  */
  YYSYMBOL_MINUSEQUAL = 42,                /* MINUSEQUAL  */
  YYSYMBOL_OREQUAL = 43,                   /* OREQUAL  */
  YYSYMBOL_ANDEQUAL = 44,                  /* ANDEQUAL  */
  YYSYMBOL_XOREQUAL = 45,                  /* XOREQUAL  */
  YYSYMBOL_LSHIFTEQUAL = 46,               /* LSHIFTEQUAL  */
  YYSYMBOL_RSHIFTEQUAL = 47,               /* RSHIFTEQUAL  */
  YYSYMBOL_ATTR_LEFT = 48,                 /* ATTR_LEFT  */
  YYSYMBOL_ATTR_RIGHT = 49,                /* ATTR_RIGHT  */
  YYSYMBOL_KW_ALIGNAS = 50,                /* KW_ALIGNAS  */
  YYSYMBOL_KW_ALIGNOF = 51,                /* KW_ALIGNOF  */
  YYSYMBOL_KW_AUTO = 52,                   /* KW_AUTO  */
  YYSYMBOL_KW_BEGIN_PUBLISH = 53,          /* KW_BEGIN_PUBLISH  */
  YYSYMBOL_KW_BLOCKING = 54,               /* KW_BLOCKING  */
  YYSYMBOL_KW_BOOL = 55,                   /* KW_BOOL  */
  YYSYMBOL_KW_CATCH = 56,                  /* KW_CATCH  */
  YYSYMBOL_KW_CHAR = 57,                   /* KW_CHAR  */
  YYSYMBOL_KW_CHAR8_T = 58,                /* KW_CHAR8_T  */
  YYSYMBOL_KW_CHAR16_T = 59,               /* KW_CHAR16_T  */
  YYSYMBOL_KW_CHAR32_T = 60,               /* KW_CHAR32_T  */
  YYSYMBOL_KW_CLASS = 61,                  /* KW_CLASS  */
  YYSYMBOL_KW_CONST = 62,                  /* KW_CONST  */
  YYSYMBOL_KW_CONSTEVAL = 63,              /* KW_CONSTEVAL  */
  YYSYMBOL_KW_CONSTEXPR = 64,              /* KW_CONSTEXPR  */
  YYSYMBOL_KW_CONSTINIT = 65,              /* KW_CONSTINIT  */
  YYSYMBOL_KW_CONST_CAST = 66,             /* KW_CONST_CAST  */
  YYSYMBOL_KW_DECLTYPE = 67,               /* KW_DECLTYPE  */
  YYSYMBOL_KW_DEFAULT = 68,                /* KW_DEFAULT  */
  YYSYMBOL_KW_DELETE = 69,                 /* KW_DELETE  */
  YYSYMBOL_KW_DOUBLE = 70,                 /* KW_DOUBLE  */
  YYSYMBOL_KW_DYNAMIC_CAST = 71,           /* KW_DYNAMIC_CAST  */
  YYSYMBOL_KW_ELSE = 72,                   /* KW_ELSE  */
  YYSYMBOL_KW_END_PUBLISH = 73,            /* KW_END_PUBLISH  */
  YYSYMBOL_KW_ENUM = 74,                   /* KW_ENUM  */
  YYSYMBOL_KW_EXTENSION = 75,              /* KW_EXTENSION  */
  YYSYMBOL_KW_EXTERN = 76,                 /* KW_EXTERN  */
  YYSYMBOL_KW_EXPLICIT = 77,               /* KW_EXPLICIT  */
  YYSYMBOL_KW_EXPLICIT_LPAREN = 78,        /* KW_EXPLICIT_LPAREN  */
  YYSYMBOL_KW_PUBLISHED = 79,              /* KW_PUBLISHED  */
  YYSYMBOL_KW_FALSE = 80,                  /* KW_FALSE  */
  YYSYMBOL_KW_FINAL = 81,                  /* KW_FINAL  */
  YYSYMBOL_KW_FLOAT = 82,                  /* KW_FLOAT  */
  YYSYMBOL_KW_FRIEND = 83,                 /* KW_FRIEND  */
  YYSYMBOL_KW_FOR = 84,                    /* KW_FOR  */
  YYSYMBOL_KW_GOTO = 85,                   /* KW_GOTO  */
  YYSYMBOL_KW_HAS_VIRTUAL_DESTRUCTOR = 86, /* KW_HAS_VIRTUAL_DESTRUCTOR  */
  YYSYMBOL_KW_IF = 87,                     /* KW_IF  */
  YYSYMBOL_KW_INLINE = 88,                 /* KW_INLINE  */
  YYSYMBOL_KW_INT = 89,                    /* KW_INT  */
  YYSYMBOL_KW_IS_ABSTRACT = 90,            /* KW_IS_ABSTRACT  */
  YYSYMBOL_KW_IS_BASE_OF = 91,             /* KW_IS_BASE_OF  */
  YYSYMBOL_KW_IS_CLASS = 92,               /* KW_IS_CLASS  */
  YYSYMBOL_KW_IS_CONSTRUCTIBLE = 93,       /* KW_IS_CONSTRUCTIBLE  */
  YYSYMBOL_KW_IS_CONVERTIBLE_TO = 94,      /* KW_IS_CONVERTIBLE_TO  */
  YYSYMBOL_KW_IS_DESTRUCTIBLE = 95,        /* KW_IS_DESTRUCTIBLE  */
  YYSYMBOL_KW_IS_EMPTY = 96,               /* KW_IS_EMPTY  */
  YYSYMBOL_KW_IS_ENUM = 97,                /* KW_IS_ENUM  */
  YYSYMBOL_KW_IS_FINAL = 98,               /* KW_IS_FINAL  */
  YYSYMBOL_KW_IS_FUNDAMENTAL = 99,         /* KW_IS_FUNDAMENTAL  */
  YYSYMBOL_KW_IS_POD = 100,                /* KW_IS_POD  */
  YYSYMBOL_KW_IS_POLYMORPHIC = 101,        /* KW_IS_POLYMORPHIC  */
  YYSYMBOL_KW_IS_STANDARD_LAYOUT = 102,    /* KW_IS_STANDARD_LAYOUT  */
  YYSYMBOL_KW_IS_TRIVIAL = 103,            /* KW_IS_TRIVIAL  */
  YYSYMBOL_KW_IS_UNION = 104,              /* KW_IS_UNION  */
  YYSYMBOL_KW_LONG = 105,                  /* KW_LONG  */
  YYSYMBOL_KW_MAKE_MAP_KEYS_SEQ = 106,     /* KW_MAKE_MAP_KEYS_SEQ  */
  YYSYMBOL_KW_MAKE_MAP_PROPERTY = 107,     /* KW_MAKE_MAP_PROPERTY  */
  YYSYMBOL_KW_MAKE_PROPERTY = 108,         /* KW_MAKE_PROPERTY  */
  YYSYMBOL_KW_MAKE_PROPERTY2 = 109,        /* KW_MAKE_PROPERTY2  */
  YYSYMBOL_KW_MAKE_SEQ = 110,              /* KW_MAKE_SEQ  */
  YYSYMBOL_KW_MAKE_SEQ_PROPERTY = 111,     /* KW_MAKE_SEQ_PROPERTY  */
  YYSYMBOL_KW_MUTABLE = 112,               /* KW_MUTABLE  */
  YYSYMBOL_KW_NAMESPACE = 113,             /* KW_NAMESPACE  */
  YYSYMBOL_KW_NEW = 114,                   /* KW_NEW  */
  YYSYMBOL_KW_NOEXCEPT = 115,              /* KW_NOEXCEPT  */
  YYSYMBOL_KW_NOEXCEPT_LPAREN = 116,       /* KW_NOEXCEPT_LPAREN  */
  YYSYMBOL_KW_NULLPTR = 117,               /* KW_NULLPTR  */
  YYSYMBOL_KW_OPERATOR = 118,              /* KW_OPERATOR  */
  YYSYMBOL_KW_OVERRIDE = 119,              /* KW_OVERRIDE  */
  YYSYMBOL_KW_PRIVATE = 120,               /* KW_PRIVATE  */
  YYSYMBOL_KW_PROTECTED = 121,             /* KW_PROTECTED  */
  YYSYMBOL_KW_PUBLIC = 122,                /* KW_PUBLIC  */
  YYSYMBOL_KW_REGISTER = 123,              /* KW_REGISTER  */
  YYSYMBOL_KW_REINTERPRET_CAST = 124,      /* KW_REINTERPRET_CAST  */
  YYSYMBOL_KW_RETURN = 125,                /* KW_RETURN  */
  YYSYMBOL_KW_SHORT = 126,                 /* KW_SHORT  */
  YYSYMBOL_KW_SIGNED = 127,                /* KW_SIGNED  */
  YYSYMBOL_KW_SIZEOF = 128,                /* KW_SIZEOF  */
  YYSYMBOL_KW_STATIC = 129,                /* KW_STATIC  */
  YYSYMBOL_KW_STATIC_ASSERT = 130,         /* KW_STATIC_ASSERT  */
  YYSYMBOL_KW_STATIC_CAST = 131,           /* KW_STATIC_CAST  */
  YYSYMBOL_KW_STRUCT = 132,                /* KW_STRUCT  */
  YYSYMBOL_KW_TEMPLATE = 133,              /* KW_TEMPLATE  */
  YYSYMBOL_KW_THREAD_LOCAL = 134,          /* KW_THREAD_LOCAL  */
  YYSYMBOL_KW_THROW = 135,                 /* KW_THROW  */
  YYSYMBOL_KW_TRUE = 136,                  /* KW_TRUE  */
  YYSYMBOL_KW_TRY = 137,                   /* KW_TRY  */
  YYSYMBOL_KW_TYPEDEF = 138,               /* KW_TYPEDEF  */
  YYSYMBOL_KW_TYPEID = 139,                /* KW_TYPEID  */
  YYSYMBOL_KW_TYPENAME = 140,              /* KW_TYPENAME  */
  YYSYMBOL_KW_UNDERLYING_TYPE = 141,       /* KW_UNDERLYING_TYPE  */
  YYSYMBOL_KW_UNION = 142,                 /* KW_UNION  */
  YYSYMBOL_KW_UNSIGNED = 143,              /* KW_UNSIGNED  */
  YYSYMBOL_KW_USING = 144,                 /* KW_USING  */
  YYSYMBOL_KW_VIRTUAL = 145,               /* KW_VIRTUAL  */
  YYSYMBOL_KW_VOID = 146,                  /* KW_VOID  */
  YYSYMBOL_KW_VOLATILE = 147,              /* KW_VOLATILE  */
  YYSYMBOL_KW_WCHAR_T = 148,               /* KW_WCHAR_T  */
  YYSYMBOL_KW_WHILE = 149,                 /* KW_WHILE  */
  YYSYMBOL_START_CPP = 150,                /* START_CPP  */
  YYSYMBOL_START_CONST_EXPR = 151,         /* START_CONST_EXPR  */
  YYSYMBOL_START_TYPE = 152,               /* START_TYPE  */
  YYSYMBOL_153_ = 153,                     /* '{'  */
  YYSYMBOL_154_ = 154,                     /* ','  */
  YYSYMBOL_155_ = 155,                     /* ';'  */
  YYSYMBOL_156_ = 156,                     /* ':'  */
  YYSYMBOL_157_ = 157,                     /* '='  */
  YYSYMBOL_158_ = 158,                     /* '?'  */
  YYSYMBOL_159_ = 159,                     /* '|'  */
  YYSYMBOL_160_ = 160,                     /* '^'  */
  YYSYMBOL_161_ = 161,                     /* '&'  */
  YYSYMBOL_162_ = 162,                     /* '<'  */
  YYSYMBOL_163_ = 163,                     /* '>'  */
  YYSYMBOL_164_ = 164,                     /* '+'  */
  YYSYMBOL_165_ = 165,                     /* '-'  */
  YYSYMBOL_166_ = 166,                     /* '*'  */
  YYSYMBOL_167_ = 167,                     /* '/'  */
  YYSYMBOL_168_ = 168,                     /* '%'  */
  YYSYMBOL_169_ = 169,                     /* '~'  */
  YYSYMBOL_170_ = 170,                     /* '.'  */
  YYSYMBOL_171_ = 171,                     /* '('  */
  YYSYMBOL_172_ = 172,                     /* '['  */
  YYSYMBOL_173_ = 173,                     /* ')'  */
  YYSYMBOL_174_ = 174,                     /* '}'  */
  YYSYMBOL_175_ = 175,                     /* '!'  */
  YYSYMBOL_176_ = 176,                     /* ']'  */
  YYSYMBOL_YYACCEPT = 177,                 /* $accept  */
  YYSYMBOL_grammar = 178,                  /* grammar  */
  YYSYMBOL_cpp = 179,                      /* cpp  */
  YYSYMBOL_constructor_inits = 180,        /* constructor_inits  */
  YYSYMBOL_constructor_init = 181,         /* constructor_init  */
  YYSYMBOL_extern_c = 182,                 /* extern_c  */
  YYSYMBOL_183_1 = 183,                    /* $@1  */
  YYSYMBOL_declaration = 184,              /* declaration  */
  YYSYMBOL_friend_declaration = 185,       /* friend_declaration  */
  YYSYMBOL_186_2 = 186,                    /* $@2  */
  YYSYMBOL_storage_class = 187,            /* storage_class  */
  YYSYMBOL_attribute_specifiers = 188,     /* attribute_specifiers  */
  YYSYMBOL_attribute_specifier = 189,      /* attribute_specifier  */
  YYSYMBOL_type_like_declaration = 190,    /* type_like_declaration  */
  YYSYMBOL_191_3 = 191,                    /* $@3  */
  YYSYMBOL_192_4 = 192,                    /* $@4  */
  YYSYMBOL_multiple_instance_identifiers = 193, /* multiple_instance_identifiers  */
  YYSYMBOL_typedef_declaration = 194,      /* typedef_declaration  */
  YYSYMBOL_195_5 = 195,                    /* $@5  */
  YYSYMBOL_typedef_instance_identifiers = 196, /* typedef_instance_identifiers  */
  YYSYMBOL_constructor_prototype = 197,    /* constructor_prototype  */
  YYSYMBOL_198_6 = 198,                    /* $@6  */
  YYSYMBOL_199_7 = 199,                    /* $@7  */
  YYSYMBOL_200_8 = 200,                    /* $@8  */
  YYSYMBOL_function_prototype = 201,       /* function_prototype  */
  YYSYMBOL_202_9 = 202,                    /* $@9  */
  YYSYMBOL_203_10 = 203,                   /* $@10  */
  YYSYMBOL_204_11 = 204,                   /* $@11  */
  YYSYMBOL_205_12 = 205,                   /* $@12  */
  YYSYMBOL_206_13 = 206,                   /* $@13  */
  YYSYMBOL_function_post = 207,            /* function_post  */
  YYSYMBOL_function_operator = 208,        /* function_operator  */
  YYSYMBOL_more_template_declaration = 209, /* more_template_declaration  */
  YYSYMBOL_template_declaration = 210,     /* template_declaration  */
  YYSYMBOL_211_14 = 211,                   /* $@14  */
  YYSYMBOL_template_formal_parameters = 212, /* template_formal_parameters  */
  YYSYMBOL_template_nonempty_formal_parameters = 213, /* template_nonempty_formal_parameters  */
  YYSYMBOL_typename_keyword = 214,         /* typename_keyword  */
  YYSYMBOL_template_formal_parameter = 215, /* template_formal_parameter  */
  YYSYMBOL_template_formal_parameter_type = 216, /* template_formal_parameter_type  */
  YYSYMBOL_instance_identifier = 217,      /* instance_identifier  */
  YYSYMBOL_218_15 = 218,                   /* $@15  */
  YYSYMBOL_instance_identifier_and_maybe_trailing_return_type = 219, /* instance_identifier_and_maybe_trailing_return_type  */
  YYSYMBOL_maybe_trailing_return_type = 220, /* maybe_trailing_return_type  */
  YYSYMBOL_maybe_comma_identifier = 221,   /* maybe_comma_identifier  */
  YYSYMBOL_function_parameter_list = 222,  /* function_parameter_list  */
  YYSYMBOL_function_parameters = 223,      /* function_parameters  */
  YYSYMBOL_formal_parameter_list = 224,    /* formal_parameter_list  */
  YYSYMBOL_formal_parameters = 225,        /* formal_parameters  */
  YYSYMBOL_template_parameter_maybe_initialize = 226, /* template_parameter_maybe_initialize  */
  YYSYMBOL_maybe_initialize = 227,         /* maybe_initialize  */
  YYSYMBOL_maybe_initialize_or_constructor_body = 228, /* maybe_initialize_or_constructor_body  */
  YYSYMBOL_maybe_initialize_or_function_body = 229, /* maybe_initialize_or_function_body  */
  YYSYMBOL_structure_init = 230,           /* structure_init  */
  YYSYMBOL_structure_init_body = 231,      /* structure_init_body  */
  YYSYMBOL_function_parameter = 232,       /* function_parameter  */
  YYSYMBOL_formal_parameter = 233,         /* formal_parameter  */
  YYSYMBOL_not_paren_formal_parameter_identifier = 234, /* not_paren_formal_parameter_identifier  */
  YYSYMBOL_formal_parameter_identifier = 235, /* formal_parameter_identifier  */
  YYSYMBOL_parameter_pack_identifier = 236, /* parameter_pack_identifier  */
  YYSYMBOL_not_paren_empty_instance_identifier = 237, /* not_paren_empty_instance_identifier  */
  YYSYMBOL_empty_instance_identifier = 238, /* empty_instance_identifier  */
  YYSYMBOL_type = 239,                     /* type  */
  YYSYMBOL_type_pack = 240,                /* type_pack  */
  YYSYMBOL_type_decl = 241,                /* type_decl  */
  YYSYMBOL_predefined_type = 242,          /* predefined_type  */
  YYSYMBOL_var_type_decl = 243,            /* var_type_decl  */
  YYSYMBOL_full_type = 244,                /* full_type  */
  YYSYMBOL_struct_attributes = 245,        /* struct_attributes  */
  YYSYMBOL_anonymous_struct = 246,         /* anonymous_struct  */
  YYSYMBOL_247_16 = 247,                   /* $@16  */
  YYSYMBOL_named_struct = 248,             /* named_struct  */
  YYSYMBOL_249_17 = 249,                   /* $@17  */
  YYSYMBOL_maybe_final = 250,              /* maybe_final  */
  YYSYMBOL_maybe_class_derivation = 251,   /* maybe_class_derivation  */
  YYSYMBOL_class_derivation = 252,         /* class_derivation  */
  YYSYMBOL_base_specification = 253,       /* base_specification  */
  YYSYMBOL_enum = 254,                     /* enum  */
  YYSYMBOL_enum_decl = 255,                /* enum_decl  */
  YYSYMBOL_enum_element_type = 256,        /* enum_element_type  */
  YYSYMBOL_enum_body_trailing_comma = 257, /* enum_body_trailing_comma  */
  YYSYMBOL_enum_body = 258,                /* enum_body  */
  YYSYMBOL_enum_keyword = 259,             /* enum_keyword  */
  YYSYMBOL_struct_keyword = 260,           /* struct_keyword  */
  YYSYMBOL_namespace_declaration = 261,    /* namespace_declaration  */
  YYSYMBOL_262_18 = 262,                   /* $@18  */
  YYSYMBOL_263_19 = 263,                   /* $@19  */
  YYSYMBOL_using_declaration = 264,        /* using_declaration  */
  YYSYMBOL_simple_type = 265,              /* simple_type  */
  YYSYMBOL_simple_int_type = 266,          /* simple_int_type  */
  YYSYMBOL_simple_float_type = 267,        /* simple_float_type  */
  YYSYMBOL_simple_void_type = 268,         /* simple_void_type  */
  YYSYMBOL_code = 269,                     /* code  */
  YYSYMBOL_270_20 = 270,                   /* $@20  */
  YYSYMBOL_code_block = 271,               /* code_block  */
  YYSYMBOL_element = 272,                  /* element  */
  YYSYMBOL_optional_const_expr = 273,      /* optional_const_expr  */
  YYSYMBOL_optional_const_expr_comma = 274, /* optional_const_expr_comma  */
  YYSYMBOL_const_expr_comma = 275,         /* const_expr_comma  */
  YYSYMBOL_no_angle_bracket_const_expr = 276, /* no_angle_bracket_const_expr  */
  YYSYMBOL_const_expr = 277,               /* const_expr  */
  YYSYMBOL_const_operand = 278,            /* const_operand  */
  YYSYMBOL_formal_const_expr = 279,        /* formal_const_expr  */
  YYSYMBOL_formal_const_operand = 280,     /* formal_const_operand  */
  YYSYMBOL_capture_list = 281,             /* capture_list  */
  YYSYMBOL_capture = 282,                  /* capture  */
  YYSYMBOL_class_derivation_name = 283,    /* class_derivation_name  */
  YYSYMBOL_name = 284,                     /* name  */
  YYSYMBOL_name_no_final = 285,            /* name_no_final  */
  YYSYMBOL_string_literal = 286,           /* string_literal  */
  YYSYMBOL_empty = 287                     /* empty  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  107
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   8025

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  177
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  111
/* YYNRULES -- Number of rules.  */
#define YYNRULES  784
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1611

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   407


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   175,     2,     2,     2,   168,   161,     2,
     171,   173,   166,   164,   154,   165,   170,   167,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   156,   155,
     162,   157,   163,   158,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   172,     2,   176,   160,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   153,   159,   174,   169,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   459,   459,   460,   464,   471,   472,   473,   477,   478,
     482,   486,   490,   503,   502,   514,   515,   516,   517,   518,
     519,   520,   533,   542,   546,   554,   558,   562,   583,   610,
     631,   660,   696,   739,   751,   772,   808,   842,   864,   900,
     922,   933,   947,   946,   961,   965,   970,   974,   985,   989,
     993,   997,  1001,  1010,  1014,  1018,  1022,  1026,  1030,  1034,
    1038,  1042,  1046,  1051,  1055,  1062,  1063,  1067,  1068,  1069,
    1074,  1073,  1089,  1099,  1098,  1115,  1123,  1131,  1142,  1158,
    1157,  1172,  1187,  1196,  1211,  1210,  1250,  1249,  1277,  1276,
    1313,  1312,  1343,  1342,  1361,  1360,  1381,  1380,  1412,  1411,
    1437,  1450,  1454,  1458,  1462,  1466,  1475,  1479,  1483,  1487,
    1491,  1496,  1501,  1505,  1509,  1513,  1520,  1524,  1528,  1532,
    1536,  1540,  1544,  1548,  1552,  1556,  1560,  1564,  1568,  1572,
    1576,  1580,  1584,  1588,  1592,  1596,  1600,  1604,  1608,  1612,
    1616,  1620,  1624,  1628,  1632,  1636,  1640,  1644,  1648,  1652,
    1656,  1660,  1664,  1668,  1672,  1676,  1683,  1684,  1685,  1689,
    1691,  1690,  1698,  1699,  1703,  1704,  1708,  1714,  1723,  1724,
    1728,  1732,  1736,  1740,  1746,  1752,  1758,  1765,  1770,  1779,
    1783,  1788,  1796,  1808,  1812,  1826,  1841,  1846,  1851,  1856,
    1861,  1866,  1871,  1876,  1882,  1881,  1912,  1922,  1932,  1936,
    1940,  1949,  1953,  1961,  1965,  1970,  1974,  1979,  1987,  1992,
    2000,  2004,  2009,  2013,  2018,  2026,  2031,  2039,  2043,  2050,
    2054,  2061,  2065,  2069,  2073,  2077,  2084,  2088,  2092,  2096,
    2100,  2104,  2111,  2112,  2113,  2117,  2120,  2121,  2122,  2126,
    2131,  2137,  2143,  2148,  2154,  2160,  2164,  2175,  2179,  2189,
    2193,  2197,  2202,  2207,  2212,  2217,  2222,  2227,  2235,  2239,
    2243,  2248,  2253,  2258,  2263,  2268,  2273,  2278,  2284,  2292,
    2297,  2302,  2307,  2312,  2317,  2322,  2327,  2332,  2337,  2343,
    2351,  2355,  2360,  2365,  2370,  2375,  2380,  2385,  2390,  2395,
    2403,  2407,  2412,  2417,  2422,  2427,  2432,  2437,  2442,  2447,
    2452,  2458,  2465,  2472,  2482,  2486,  2494,  2498,  2502,  2506,
    2510,  2526,  2542,  2551,  2555,  2565,  2572,  2583,  2587,  2595,
    2599,  2603,  2607,  2611,  2627,  2643,  2661,  2670,  2674,  2684,
    2691,  2695,  2703,  2707,  2723,  2739,  2748,  2758,  2765,  2769,
    2777,  2781,  2786,  2790,  2798,  2799,  2800,  2801,  2806,  2805,
    2830,  2829,  2859,  2860,  2867,  2868,  2872,  2873,  2877,  2881,
    2885,  2889,  2893,  2897,  2901,  2905,  2909,  2913,  2920,  2928,
    2932,  2936,  2941,  2949,  2953,  2960,  2961,  2966,  2973,  2974,
    2979,  2987,  2991,  2995,  3002,  3006,  3010,  3018,  3017,  3040,
    3039,  3062,  3063,  3067,  3073,  3080,  3086,  3095,  3096,  3097,
    3101,  3105,  3109,  3113,  3117,  3121,  3125,  3130,  3135,  3140,
    3145,  3149,  3154,  3163,  3168,  3176,  3180,  3184,  3192,  3202,
    3202,  3212,  3213,  3217,  3218,  3219,  3220,  3221,  3222,  3223,
    3224,  3225,  3226,  3227,  3228,  3228,  3228,  3229,  3229,  3229,
    3229,  3229,  3230,  3230,  3230,  3230,  3230,  3231,  3231,  3231,
    3232,  3232,  3232,  3232,  3232,  3233,  3233,  3233,  3233,  3233,
    3234,  3234,  3235,  3235,  3235,  3235,  3235,  3236,  3236,  3236,
    3236,  3236,  3237,  3237,  3237,  3237,  3237,  3238,  3238,  3238,
    3238,  3238,  3239,  3239,  3239,  3239,  3239,  3240,  3240,  3240,
    3240,  3240,  3241,  3241,  3241,  3241,  3241,  3241,  3242,  3242,
    3242,  3242,  3242,  3243,  3243,  3243,  3243,  3244,  3244,  3244,
    3244,  3245,  3245,  3245,  3245,  3245,  3246,  3246,  3246,  3246,
    3247,  3247,  3247,  3247,  3247,  3248,  3248,  3248,  3248,  3249,
    3249,  3249,  3249,  3249,  3250,  3250,  3253,  3253,  3253,  3253,
    3253,  3253,  3253,  3253,  3253,  3253,  3253,  3254,  3254,  3254,
    3254,  3254,  3254,  3254,  3254,  3254,  3254,  3255,  3255,  3259,
    3263,  3270,  3274,  3281,  3285,  3292,  3296,  3300,  3304,  3308,
    3312,  3316,  3320,  3324,  3328,  3332,  3336,  3340,  3344,  3348,
    3352,  3356,  3360,  3364,  3368,  3372,  3376,  3380,  3384,  3388,
    3392,  3396,  3400,  3404,  3408,  3412,  3416,  3420,  3424,  3428,
    3432,  3436,  3440,  3444,  3448,  3456,  3460,  3464,  3468,  3472,
    3476,  3480,  3490,  3500,  3506,  3512,  3518,  3524,  3530,  3536,
    3542,  3549,  3556,  3563,  3570,  3576,  3582,  3586,  3590,  3594,
    3598,  3602,  3606,  3617,  3628,  3632,  3636,  3640,  3644,  3648,
    3652,  3656,  3660,  3664,  3668,  3672,  3676,  3680,  3684,  3688,
    3692,  3696,  3700,  3704,  3708,  3712,  3716,  3720,  3724,  3728,
    3732,  3736,  3740,  3744,  3748,  3752,  3756,  3763,  3767,  3771,
    3775,  3779,  3783,  3787,  3791,  3795,  3801,  3807,  3811,  3817,
    3824,  3828,  3832,  3836,  3840,  3844,  3848,  3852,  3856,  3860,
    3864,  3868,  3872,  3876,  3880,  3884,  3888,  3902,  3906,  3910,
    3914,  3918,  3922,  3926,  3930,  3934,  3938,  3942,  3946,  3950,
    3961,  3972,  3976,  3980,  3984,  3988,  3992,  3996,  4000,  4004,
    4008,  4012,  4016,  4020,  4024,  4028,  4032,  4036,  4040,  4044,
    4048,  4052,  4056,  4060,  4064,  4068,  4072,  4076,  4080,  4084,
    4088,  4092,  4099,  4103,  4107,  4111,  4115,  4119,  4123,  4127,
    4131,  4137,  4143,  4151,  4155,  4159,  4163,  4170,  4180,  4186,
    4192,  4202,  4214,  4222,  4226,  4256,  4260,  4264,  4268,  4272,
    4276,  4282,  4286,  4290,  4294,  4298,  4309,  4313,  4317,  4321,
    4329,  4333,  4337,  4343,  4354
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "REAL", "INTEGER",
  "CHAR_TOK", "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL",
  "CUSTOM_LITERAL", "IDENTIFIER", "TYPENAME_IDENTIFIER",
  "TYPEPACK_IDENTIFIER", "SCOPING", "TYPEDEFNAME", "ELLIPSIS", "OROR",
  "ANDAND", "EQCOMPARE", "NECOMPARE", "LECOMPARE", "GECOMPARE",
  "SPACESHIP", "LSHIFT", "RSHIFT", "POINTSAT_STAR", "DOT_STAR", "UNARY",
  "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS", "UNARY_PLUS", "UNARY_STAR",
  "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS", "TIMESEQUAL",
  "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL", "OREQUAL",
  "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL", "ATTR_LEFT",
  "ATTR_RIGHT", "KW_ALIGNAS", "KW_ALIGNOF", "KW_AUTO", "KW_BEGIN_PUBLISH",
  "KW_BLOCKING", "KW_BOOL", "KW_CATCH", "KW_CHAR", "KW_CHAR8_T",
  "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS", "KW_CONST", "KW_CONSTEVAL",
  "KW_CONSTEXPR", "KW_CONSTINIT", "KW_CONST_CAST", "KW_DECLTYPE",
  "KW_DEFAULT", "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE",
  "KW_END_PUBLISH", "KW_ENUM", "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT",
  "KW_EXPLICIT_LPAREN", "KW_PUBLISHED", "KW_FALSE", "KW_FINAL", "KW_FLOAT",
  "KW_FRIEND", "KW_FOR", "KW_GOTO", "KW_HAS_VIRTUAL_DESTRUCTOR", "KW_IF",
  "KW_INLINE", "KW_INT", "KW_IS_ABSTRACT", "KW_IS_BASE_OF", "KW_IS_CLASS",
  "KW_IS_CONSTRUCTIBLE", "KW_IS_CONVERTIBLE_TO", "KW_IS_DESTRUCTIBLE",
  "KW_IS_EMPTY", "KW_IS_ENUM", "KW_IS_FINAL", "KW_IS_FUNDAMENTAL",
  "KW_IS_POD", "KW_IS_POLYMORPHIC", "KW_IS_STANDARD_LAYOUT",
  "KW_IS_TRIVIAL", "KW_IS_UNION", "KW_LONG", "KW_MAKE_MAP_KEYS_SEQ",
  "KW_MAKE_MAP_PROPERTY", "KW_MAKE_PROPERTY", "KW_MAKE_PROPERTY2",
  "KW_MAKE_SEQ", "KW_MAKE_SEQ_PROPERTY", "KW_MUTABLE", "KW_NAMESPACE",
  "KW_NEW", "KW_NOEXCEPT", "KW_NOEXCEPT_LPAREN", "KW_NULLPTR",
  "KW_OPERATOR", "KW_OVERRIDE", "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC",
  "KW_REGISTER", "KW_REINTERPRET_CAST", "KW_RETURN", "KW_SHORT",
  "KW_SIGNED", "KW_SIZEOF", "KW_STATIC", "KW_STATIC_ASSERT",
  "KW_STATIC_CAST", "KW_STRUCT", "KW_TEMPLATE", "KW_THREAD_LOCAL",
  "KW_THROW", "KW_TRUE", "KW_TRY", "KW_TYPEDEF", "KW_TYPEID",
  "KW_TYPENAME", "KW_UNDERLYING_TYPE", "KW_UNION", "KW_UNSIGNED",
  "KW_USING", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WCHAR_T",
  "KW_WHILE", "START_CPP", "START_CONST_EXPR", "START_TYPE", "'{'", "','",
  "';'", "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'",
  "'!'", "']'", "$accept", "grammar", "cpp", "constructor_inits",
  "constructor_init", "extern_c", "$@1", "declaration",
  "friend_declaration", "$@2", "storage_class", "attribute_specifiers",
  "attribute_specifier", "type_like_declaration", "$@3", "$@4",
  "multiple_instance_identifiers", "typedef_declaration", "$@5",
  "typedef_instance_identifiers", "constructor_prototype", "$@6", "$@7",
  "$@8", "function_prototype", "$@9", "$@10", "$@11", "$@12", "$@13",
  "function_post", "function_operator", "more_template_declaration",
  "template_declaration", "$@14", "template_formal_parameters",
  "template_nonempty_formal_parameters", "typename_keyword",
  "template_formal_parameter", "template_formal_parameter_type",
  "instance_identifier", "$@15",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "maybe_comma_identifier",
  "function_parameter_list", "function_parameters",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "parameter_pack_identifier", "not_paren_empty_instance_identifier",
  "empty_instance_identifier", "type", "type_pack", "type_decl",
  "predefined_type", "var_type_decl", "full_type", "struct_attributes",
  "anonymous_struct", "$@16", "named_struct", "$@17", "maybe_final",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "enum", "enum_decl", "enum_element_type", "enum_body_trailing_comma",
  "enum_body", "enum_keyword", "struct_keyword", "namespace_declaration",
  "$@18", "$@19", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@20", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   123,    44,    59,    58,    61,    63,   124,
      94,    38,    60,    62,    43,    45,    42,    47,    37,   126,
      46,    40,    91,    41,   125,    33,    93
};
#endif

#define YYPACT_NINF (-943)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-780)

#define yytable_value_is_error(Yyn) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     351,  -943,  4051,  6509,    55,  5643,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,   -43,   -99,   -60,   -53,     1,    28,
      32,  -104,    35,   -30,  -943,  -943,    45,    81,    84,   105,
     141,   154,   161,   176,   179,   193,   196,   237,   258,   267,
     271,   274,   289,   291,   299,  6771,  4051,  -943,  -943,   -23,
     305,   309,  2923,   -20,  -943,   311,   315,   319,  4051,  4051,
    4051,  4051,  4051,  2045,   967,  4051,  4070,  -943,   169,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  6627,   334,
    -943,   -19,  -943,  -943,  7877,  4754,  4754,  -943,  6780,   346,
    -943,  4754,  -943,  -943,   415,   415,  -943,  -943,  -943,  -943,
     -31,    88,  -943,  -943,  -943,  -943,  -943,  -943,  6268,   359,
    -943,  7838,  7838,  7838,  7838,  7838,  -943,  7838,  6077,  7838,
    4051,    -4,  -943,  7799,   365,   379,   380,   387,   392,   393,
    7838,  4736,    65,    92,   275,  7838,  7838,   403,  7640,  7838,
    7838,  7510,  7838,  7838,  -943,  -943,  -943,  -943,  4899,  -943,
    -943,  -943,  -943,  -943,  4051,  4051,  6509,  4051,  4051,  4051,
    4051,  4051,  6509,  4051,  6509,  4051,  6509,  4051,  6509,  6509,
    6509,  6509,  6509,  6509,  6509,  6509,  6509,  6509,  6509,  6509,
    6509,  6509,  6509,  4051,  -943,  -943,   406,  6780,   408,   409,
    6780,  -943,  -943,  4758,  6509,  4051,  4051,   412,  2045,   103,
    6509,  2045,  4051,  4051,   103,   103,   103,   103,   103,   -43,
     -60,   -53,     1,    28,    32,    35,    45,    84,  6473,  6215,
    7539,  7553,   319,   144,   -70,  4070,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  6780,  6780,
     -81,   266,  -943,  -943,   103,  4051,  4051,  4051,  4051,  4051,
    4051,  4051,  4051,  4051,  4051,  4051,  4051,  4051,  4051,  4051,
    4051,  4051,  4051,  4051,  4051,  4051,  6780,  3064,  4051,  -943,
    -943,   415,   415,  3205,  -943,  -943,  -943,  4754,  -943,  -943,
    -943,  -943,  6509,  -943,   356,   446,   202,   415,   415,   202,
     202,  5763,   413,  -943,   416,  -943,  -943,  -943,  -943,  -943,
    -943,  5019,   428,  5798,  -943,  6780,   511,   433,   427,  2636,
    6116,  7838,  -943,  -943,  -943,  -943,  -943,  -943,  7838,  -943,
    -943,  -943,  5120,  -943,  7683,  4814,  -943,  6780,  6780,  6780,
    6780,  6780,  6780,  -943,  -943,   453,  -943,  -943,  -943,  -943,
    -943,  4051,  -943,  4954,  -943,   448,  -943,  5046,  -943,  6780,
    6780,   124,  -943,  -943,   284,   440,  -943,   441,  6653,  6780,
     442,  -943,  6780,  -943,   269,   459,  -943,  -943,  -943,  -943,
    4315,  -943,  -943,   443,   461,  -943,   447,   452,   456,   458,
     463,   464,   465,   460,   473,   471,   475,   476,   479,   480,
     462,   481,   -67,   501,   484,   486,   489,   490,   491,   494,
     499,   500,   503,   505,   506,  4051,  -943,  6509,  4051,  -943,
    7521,  -943,   522,   513,   515,  6780,   518,   529,   520,  5179,
     524,   526,  4051,  4051,  -943,   680,  -943,  1132,   530,  4051,
    -943,  -943,  1784,  5573,  4544,  4544,  1058,  1058,  1271,   429,
     429,  -943,  5474,  5773,  5820,  4187,  1058,  1058,    95,    95,
     103,   103,   103,  -943,  -943,   -66,  2655,  -943,  -943,   531,
    5200,   532,   202,   540,   548,  6780,   202,   202,   202,   202,
     202,   546,  -943,   413,  -943,   413,  -943,   546,   546,  -943,
     202,  6268,  6535,  6412,   202,   202,   547,    13,  -943,   922,
     683,  -943,  4051,  6780,   545,  -943,  -943,  -943,  -943,  5019,
     -44,   152,   165,  6268,   553,   213,  -943,  -943,  -943,   569,
    7838,  6268,  4333,   -43,   554,  5219,  -943,  7838,  -943,  -943,
     573,   576,   589,   598,   602,   603,   608,  6908,  -943,  4352,
    6176,   332,   593,   269,  -943,  -943,   614,   615,  -943,  6509,
    -943,    22,  3346,  6863,   993,  -943,  6509,  -943,   600,   219,
    -943,  -943,  2782,  -943,  -943,   826,  -943,   616,  5798,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,   605,  -943,   617,
    -943,  -943,  -943,  -943,  6509,  -943,  6509,  -943,  6509,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    5238,   601,   621,  -943,   625,  -943,  -943,   627,  4192,   630,
    -943,  -943,  -943,  -943,   103,  4070,  -943,  6780,   266,  6273,
    5989,  -943,  4070,  4051,  -943,  -943,  -943,  -943,  -943,   546,
     202,  -943,   546,   546,   546,   546,   546,  4051,   162,   724,
    6627,   922,   683,  -943,   188,   246,  -943,  -943,  6370,   632,
     922,   922,   922,   922,   922,   922,  -101,  -943,  -943,   636,
    6780,   683,   683,   683,   683,   683,   683,   -75,   611,  4070,
    -943,  -113,  -943,   650,   757,  2636,  -943,   730,  6268,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,   641,   652,   658,
    -943,  -943,  6771,  -943,  -943,   660,  1715,   665,  -943,   661,
    4051,  4051,  4051,  4051,  2045,  4051,   656,    50,  -943,  -943,
    5512,  -943,   169,  -943,  7838,  7838,  -943,  6995,  -943,   823,
     824,   830,   832,   835,   836,  -943,  -943,   301,   692,  -943,
    -943,  -943,  -943,   389,  -943,   685,   696,  5146,  -943,   542,
    -943,  -943,    73,  -943,   826,  -943,  -943,   697,  6273,   682,
     687,   826,  6273,   684,  5278,   993,   690,   993,   993,   993,
     993,   993,   321,  -943,  -943,   686,  7082,  -943,  -943,  -943,
    6780,   404,  -943,   688,  -943,   703,   705,  3487,  3506,   695,
     826,   826,  4830,   826,   826,   826,   826,  -943,    86,   343,
    -943,  5019,  -943,  4051,  4051,   691,   693,   716,  -943,  -943,
    -943,  4051,  -943,  4051,  -943,   718,  -943,  6745,  6268,  -943,
    -943,  -943,  -943,  -943,  4051,  -943,   694,  -943,  -943,   710,
    -943,  4070,   546,   717,   721,  6412,   922,   683,  -101,   -75,
     726,   727,  5989,  -943,  -943,   922,   728,   728,   728,   728,
     728,   340,  4051,  -943,   683,  -943,   731,   731,   731,   731,
     731,   352,  4051,  -943,   733,  -943,  4051,  -943,   729,  5297,
    7169,  -943,   750,  -943,  -943,  6509,  6509,  6509,   737,  6509,
     739,  2045,   121,  6509,  2045,   103,   103,   103,   103,   740,
     -52,   103,  -943,  -943,  4480,  4051,  4051,  4051,  4051,  4051,
    4051,  4051,  4051,  4051,  4051,  4051,  4051,  4051,  4051,  4051,
    4051,  4051,  4051,  4051,  4051,  4051,  6780,  3628,  4051,  -943,
    -943,  -943,  -943,   758,   -50,   761,   762,   770,   771,  7256,
      77,  -943,   542,  7760,  6176,  6780,   772,   764,   542,   542,
     542,   542,   542,   542,   111,   731,  -943,   343,  -943,   754,
     766,   826,   348,   755,  -943,  -943,   362,   993,   769,   769,
     769,   769,   769,  -943,  4051,  -943,  -943,  6273,   768,   388,
    -943,   143,   783,   792,  -943,  2462,  -943,  -943,  -943,  3487,
     774,   795,  4070,  -943,  -943,   826,   373,   373,   940,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,   780,   778,  -943,  -943,
     373,   373,   373,   367,  4051,  -943,  4051,  -943,  2782,   801,
    -943,   650,   -49,   -46,  -943,  -943,  -943,   -40,   -39,  -943,
    6771,   415,   908,  5396,    49,  -943,  -943,  6273,  -943,  -101,
     -75,  -943,  -943,  6273,  6273,  -943,   728,   788,   784,   731,
     790,   786,  3788,  -943,  -943,  -943,  6076,   811,   812,  -943,
     794,   809,   813,  4051,   817,  6780,   802,   818,   810,  5455,
    4051,  -943,  -943,  -943,  1784,  5573,  4544,  4544,  1058,  1058,
    1271,   429,   429,  -943,  5493,  5773,  5820,  4187,  1058,  1058,
      95,    95,   103,   103,   103,  -943,  -943,   -35,  2942,  7343,
     964,   972,   831,   975,   815,  -943,   983,   984,   990,  -943,
     846,   111,   731,  -943,  -943,  -943,  -943,  -943,  -943,  6509,
     542,  4669,  -943,  -943,   848,  -943,  -943,  -943,   376,   838,
    -943,  -943,   769,  6273,   837,   841,  -943,  -943,  6780,  4051,
    4051,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
     842,  -943,  3769,   373,  -943,  -943,  -943,  -943,  4070,  4333,
     843,  3506,   826,  -943,  -943,  -943,  -943,  5989,   415,  -943,
    -943,  -943,  -943,    18,   844,   847,  -943,  -943,   849,   851,
    6273,  -943,  6273,  -943,  -943,  5949,  6172,  6232,  6780,   450,
    -943,  -943,   996,  -943,  6076,  -943,   850,   855,   856,   860,
     859,  4192,   862,  -943,  -943,   103,  4051,  -943,  -943,  -943,
     861,   -29,  -943,   863,   885,   -28,   874,    -8,  -943,  -943,
    -943,   879,   892,   894,   895,  4567,   896,  4669,  4669,  4669,
    4669,  4669,  2045,  4669,  1804,  -943,   826,  5999,  6273,   890,
    -943,  5999,  6273,   891,  -943,  -943,   889,  -943,   893,   900,
    2234,  -943,  3487,  4070,   902,  -943,  -943,   912,  -943,   904,
    -943,  -943,  -943,  -943,  -943,   911,   917,  6621,  -943,  6621,
    -943,  6621,  -943,  -943,  6621,  6621,  6621,  -943,  7430,  -943,
    4051,  4051,  -943,  4051,  -943,  4051,  4070,   913,  1056,   936,
    1085,  -943,  1087,   943,   944,  1090,   946,  6509,  6509,  6509,
    6509,   931,  2045,   127,  6509,   127,   127,   127,   127,   127,
     930,    16,   127,  4669,  4669,  4669,  4669,  4669,  4669,  4669,
    4669,  4669,  4669,  4669,  4669,  4669,  4669,  4669,  4669,  4669,
    4669,  4669,  6780,  3910,  4051,  -943,   932,  -943,  6273,   933,
    -943,  5999,  -943,  -943,  1089,  -943,   934,  -943,  -943,  -943,
    5989,  5989,  5989,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,    19,    25,   130,   146,  -943,   953,  -943,   938,
     955,  -943,  -943,   147,  -943,   942,   954,   957,   958,  6780,
     945,   960,  4669,  -943,  2394,  5837,  1506,  1506,  1193,  1193,
    1461,   568,   568,  -943,  1257,  5854,  5878,  1894,   186,   186,
     127,   127,   127,  -943,  -943,   170,  3224,  -943,  6273,   962,
    -943,  5999,  -943,  -943,  5999,   952,  -943,  -943,  -943,  5999,
    5999,  -943,  -943,  -943,  -943,  1117,   963,   976,  1120,  1127,
     986,  -943,   974,   977,   978,   973,  1916,   980,   127,  4669,
    -943,  -943,  5999,   979,  -943,  5999,  -943,  -943,   992,  -943,
     985,   205,  -943,  4051,  4051,  4051,  -943,  4051,  1804,  -943,
    5989,  -943,   998,  1146,  1002,   248,   252,   260,   263,  5989,
    -943,  -943,   987,  -943,  -943,  -943,  -943,  -943,  -943,  1006,
    -943
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       0,   784,     0,     0,     0,   784,     5,   671,   667,   670,
     780,   781,   673,   674,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   669,   675,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   677,   676,     0,
       0,     0,     0,     0,   668,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   784,     0,     3,   605,   672,   305,
     316,   315,   400,   401,   403,   404,   405,   384,     0,     0,
     416,   381,   415,   410,   407,   406,   409,   385,     0,     0,
     386,   408,   418,   402,   784,   784,     4,   307,   308,   309,
       0,   370,   784,   304,   397,   398,   399,     1,     0,     0,
      21,   784,   784,   784,   784,   784,    22,   784,   784,   784,
       0,     0,    42,   784,     0,     0,     0,     0,     0,     0,
     784,     0,     0,     0,     0,   784,   784,     0,   784,   784,
     784,     0,   784,   784,     6,    17,     7,    19,     0,    15,
      16,    18,    76,    44,   784,   784,     0,   784,   784,   784,
     784,   784,     0,   784,     0,   784,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   784,   331,   337,     0,     0,     0,   630,
       0,   784,   330,     0,     0,   784,   784,     0,     0,   627,
       0,     0,   784,   784,   639,   637,   636,   638,   635,   305,
     400,   401,   403,   404,   405,   416,   415,   410,   407,   406,
     409,   408,   402,     0,     0,   563,   765,   766,   767,   775,
     768,   771,   769,   773,   772,   770,   774,   754,   755,     0,
       0,   784,   760,   753,   634,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   782,
     783,   784,   784,     0,   382,   383,   417,   407,   412,   411,
     414,   306,     0,   413,     0,   291,   784,   784,   784,   784,
     784,   784,     0,   340,   290,   342,   784,   776,   777,   778,
     779,     0,   372,     0,   344,     0,     0,    65,    67,     0,
     784,   784,    59,    45,    56,    57,    58,    60,   784,    46,
     159,    51,     0,    23,   784,     0,    49,     0,     0,     0,
       0,     0,     0,    55,   784,     0,    26,    25,    24,    53,
      48,     0,   163,     0,   162,     0,    61,     0,    20,     0,
       0,     0,    50,    54,   339,   318,   329,     0,     0,     0,
       0,    13,     0,    73,     0,   338,    70,   320,   321,   322,
     370,   784,   317,     0,   562,   561,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   332,     0,   784,   334,
       0,   663,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   666,   758,   761,     0,   784,     0,
     756,   219,   648,   649,   650,   651,   652,   653,   654,   657,
     658,   665,     0,   645,   646,   647,   655,   656,   643,   644,
     640,   641,   642,   664,   662,     0,     0,   341,   343,     0,
       0,     0,   784,   292,     0,   281,   784,   784,   784,   784,
     784,   297,   280,     0,   293,     0,   294,   296,   295,   204,
     784,     0,     0,     0,   784,   784,     0,   205,   208,   784,
       0,   203,   784,   378,     0,   375,   374,   369,   373,     0,
     765,   766,   767,     0,     0,   769,   348,   310,   350,     0,
     784,     0,   784,   318,     0,     0,    47,   784,    43,   784,
       0,     0,     0,     0,     0,     0,     0,   784,   387,     0,
     784,   339,   318,     0,   338,    79,     0,     0,   393,     0,
      84,    88,     0,     0,   784,   319,     0,   784,     0,     0,
     419,   226,     0,    75,    72,     0,   325,   372,     0,   612,
     611,   629,   619,   614,   616,   617,   618,     0,   625,     0,
     624,   680,   613,   681,     0,   683,     0,   684,     0,   687,
     688,   689,   690,   691,   692,   693,   694,   695,   696,   621,
       0,     0,     0,   333,     0,   620,   623,     0,   626,     0,
     632,   633,   622,   615,   606,   564,   759,     0,   784,   784,
     784,   101,   220,     0,   661,   660,   313,   312,   314,   298,
     784,   282,   287,   283,   284,   286,   285,   784,     0,     0,
       0,   784,     0,   245,     0,     0,   784,   207,     0,     0,
     784,   784,   784,   784,   784,   784,   784,   259,   258,     0,
     269,     0,     0,     0,     0,     0,     0,   784,     0,   560,
     559,   379,   368,   311,     0,     0,   784,   784,     0,    62,
      66,   746,   742,   745,   748,   749,   211,     0,     0,     0,
     744,   750,     0,   752,   751,     0,     0,     0,   743,     0,
       0,     0,     0,     0,     0,     0,     0,   212,   247,   215,
     248,   697,   747,   210,   784,   784,    52,   784,   389,     0,
       0,     0,     0,     0,     0,   391,   784,     0,     0,   180,
     181,   182,   168,     0,   169,     0,   165,   170,   166,   784,
     179,   164,     0,    81,     0,   396,   395,     0,   784,     0,
       0,     0,   784,     0,     0,   784,     0,   784,   784,   784,
     784,   784,     0,   250,   249,     0,   784,    90,   419,   221,
       0,     0,    74,     0,   784,     0,     0,   784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    71,   784,   784,
     183,     0,   323,     0,     0,     0,     0,     0,   335,   336,
     631,     0,   628,     0,   757,     0,   109,     0,     0,   102,
     111,   106,   110,   104,     0,   107,     0,   103,   108,     0,
     198,   659,   288,     0,     0,     0,   784,     0,   784,   784,
       0,     0,   784,   206,   209,   784,   264,   260,   261,   263,
     262,     0,   784,   239,     0,   270,   275,   271,   272,   274,
     273,     0,   784,   242,   299,   376,     0,   345,     0,     0,
     784,   353,   784,   352,    69,     0,     0,     0,   707,     0,
       0,     0,   704,     0,     0,   715,   714,   713,   712,     0,
       0,   711,    68,   214,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    64,
      63,   392,   784,     0,     0,   784,     0,     0,     0,   784,
       0,    41,   784,   784,     0,   173,   171,     0,   784,   784,
     784,   784,   784,   784,   784,   177,    80,   784,   394,     0,
       0,     0,     0,     0,   327,   326,     0,   784,   255,   251,
     252,   254,   253,    96,   784,   328,    14,   784,     0,     0,
       8,     0,     0,     0,   227,   420,   421,   229,   230,   784,
       0,   233,   235,   232,   228,     0,   190,   186,     0,   126,
     127,   128,   129,   130,   131,   134,   135,   136,   151,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   155,   154,   138,   137,   123,   125,   124,   132,   133,
     121,   122,   118,   119,   120,   117,     0,     0,   116,   184,
     187,   189,   188,     0,     0,   194,   784,   196,     0,     0,
      77,   324,     0,     0,   682,   685,   686,     0,     0,   784,
       0,   784,     0,     0,     0,   419,   289,   784,   246,   784,
     784,   240,   243,   784,   784,   300,   265,   268,     0,   276,
     279,     0,   380,   347,   346,   349,     0,     0,   355,   354,
       0,     0,     0,   784,     0,     0,     0,     0,     0,     0,
       0,   741,   213,   216,   724,   725,   726,   727,   728,   729,
     730,   733,   734,   740,     0,   721,   722,   723,   731,   732,
     719,   720,   716,   717,   718,   739,   738,     0,     0,   784,
       0,     0,     0,     0,     0,   201,     0,     0,     0,   388,
       0,   784,   178,   158,   156,   161,   157,   167,   174,     0,
     784,     0,   175,   217,     0,    82,   784,    86,     0,     0,
     784,    98,   256,   784,     0,     0,   222,   419,     0,   784,
     784,   224,   225,   423,   424,   428,   425,   433,   426,   427,
     429,   430,   431,   432,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   508,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   784,   552,   553,   554,
     545,   557,   541,   542,   540,   547,   548,   536,   537,   538,
     539,   546,   544,   551,   549,   555,   550,   543,   556,   422,
       0,   231,   234,   191,   185,   153,   152,   193,   197,   784,
       0,   220,     0,   609,   608,   610,   607,   784,   784,   199,
     115,   105,   112,     0,     0,     0,   241,   244,     0,     0,
     784,   266,   784,   277,   377,   773,     0,   772,     0,     0,
     356,   358,   762,   784,     0,   706,     0,     0,     0,     0,
       0,   703,     0,   709,   710,   698,     0,   737,   736,   390,
       0,     0,    33,   202,     0,     0,     0,     0,    40,   176,
     172,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   218,   565,     0,    85,   784,     0,
      92,    89,   784,     0,   257,   784,     0,     9,     0,     0,
       0,   236,   784,   237,     0,   192,    78,     0,   200,     0,
     113,   678,   784,   784,   784,     0,     0,     0,   361,     0,
     360,     0,   359,   763,     0,     0,     0,   764,   784,   357,
       0,     0,   708,     0,   705,     0,   735,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   572,     0,   580,   578,   577,   579,   576,
       0,     0,   575,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    83,     0,    94,   784,     0,
     784,    91,   223,    12,    10,   558,     0,   784,   419,   114,
     784,   784,   784,   784,   784,   367,   366,   365,   364,   363,
     362,   351,     0,     0,     0,     0,    36,   784,    34,     0,
       0,    37,    39,     0,    29,     0,     0,     0,     0,     0,
       0,     0,     0,   604,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   603,     0,   586,   587,   588,   584,   585,
     581,   582,   583,   602,   601,     0,     0,   784,   784,     0,
     784,    97,    11,   238,   195,     0,   303,   302,   301,   267,
     278,   701,   700,   702,   699,     0,     0,     0,     0,     0,
       0,   574,     0,     0,     0,     0,   571,     0,   566,     0,
     600,   599,    87,     0,   784,    99,   679,   202,     0,    28,
       0,     0,    30,     0,     0,     0,   573,     0,   598,   784,
     784,    35,     0,     0,     0,     0,     0,     0,     0,   784,
      93,    38,     0,    31,   569,   568,   570,   567,    95,     0,
      32
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -943,  -943,  -311,  -943,    24,  -943,  -943,   845,  -133,  -943,
    1066,  -454,   498,  -118,  -943,  -943,  -125,  -943,  -943,  -198,
    -943,  -943,  -943,  -943,   825,  -943,  -943,  -943,  -943,  -943,
    -424,  -943,  -943,  -116,  -943,  -943,  -943,  -943,   256,   467,
    -696,  -943,  -719,  -771,  -326,  -416,  -943,  -114,  -943,    62,
    -565,  -943,  -507,  -942,  -943,  -464,   302,  -681,  -413,  -469,
    -139,   -91,   -48,   525,  -285,  -657,   839,   215,  -162,  -109,
    -943,   -98,  -943,  -943,  -943,  -943,  -142,   -96,  -943,  -468,
    -943,  -943,   -32,    -5,  -943,  -943,  -943,  -943,    -7,     5,
    -943,  -943,  -755,  -943,   -69,  -943,  -605,  -149,   -62,   293,
     622,    98,   502,  -943,  -943,   765,  -646,  1430,    34,  -476,
      -1
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   949,   950,   145,   547,   146,   147,   324,
     148,   306,   307,   149,   555,   549,   777,   348,   734,   926,
     363,   738,  1368,   742,   364,   947,  1468,  1538,  1133,  1372,
     610,  1009,  1115,   150,   345,   725,   726,   727,   728,   729,
     778,  1289,   779,   809,  1104,   486,   487,   696,   697,  1122,
     430,   762,   553,   960,   961,   488,   699,   752,   826,   836,
     292,   293,    94,    95,   365,   189,   366,    96,   303,    97,
     666,    98,   667,   852,  1057,  1058,  1320,    99,   100,   497,
     493,   494,   101,   102,   151,   716,   902,   152,   103,   104,
     105,   106,   763,   764,   955,  1279,   658,   373,   374,  1568,
     225,    67,   700,   701,   240,   241,  1321,  1322,   647,    68,
     153
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       6,   224,   320,   948,   295,   342,   376,  1017,   378,   379,
     380,   381,   382,   190,   384,   927,   386,  1280,   388,   633,
     344,   657,   813,   527,   514,   858,   733,   629,   637,   410,
     271,   663,   739,  1389,   404,   740,   702,  -776,   192,   367,
     191,   845,   274,   794,   846,   932,   413,   414,   698,   664,
     368,  1045,   369,   420,   421,   107,   429,   670,   162,   226,
     227,   228,   534,   243,   936,   873,   938,   939,   940,   941,
     942,   832,   156,   427,   966,   967,   646,  1010,  1011,  1012,
    1013,   833,   429,   269,   423,   270,   740,   576,   423,   278,
     279,   280,   843,   294,   294,   428,   283,   842,   297,   298,
     299,   304,   423,   424,  1101,   423,   577,   614,   423,  -776,
     154,   157,  -776,   275,   423,   423,   370,   229,   158,   423,
     797,  1071,   296,  1102,  1293,  1418,  1422,  1294,   155,   254,
     230,   231,   164,  1295,  1296,   302,   224,   254,  1337,   194,
    1031,   372,   200,   371,  1419,  1423,  1425,   471,   473,   475,
     477,   478,   323,   375,   375,   884,   375,   375,   375,   375,
     375,  1452,   375,   819,   375,  1426,   375,   638,   232,   233,
     423,   234,   159,   423,   824,   269,   235,   270,   236,   423,
     457,   458,   375,   837,   838,   839,   840,   841,   741,  1513,
     304,  1390,  1551,   795,   375,   375,   474,   476,  1552,   160,
     367,   375,   375,   161,   874,   455,   163,   300,   707,   558,
     702,   368,   822,   369,  1019,   464,   165,   465,   818,   466,
    1452,   336,  1302,   278,   279,   280,   283,  1048,   827,   828,
     829,   830,   831,  -777,   367,  1128,   756,  1051,   367,   741,
     431,   910,  1014,   489,   301,   368,  -778,   369,   337,   368,
    1110,   369,   166,  1041,  1042,   167,  1132,  1015,  1016,   592,
     925,   263,   264,   265,   467,   266,   267,   268,  1121,  1283,
     294,   294,  1020,   266,   267,   268,   168,   370,   223,   538,
    1304,   539,   278,   832,   423,   472,   294,   294,   472,   472,
     491,   896,   897,   898,  -779,   495,  1139,  1462,  1463,  1464,
     423,  1559,   372,  1553,   371,  -777,   498,    10,  -777,    11,
     544,   370,   169,  1021,  1140,   370,   924,   422,  -778,  1554,
    1560,  -778,   929,   619,   423,   170,   933,   622,   623,   624,
     625,   626,   171,     6,   627,   814,   372,   508,   371,  1134,
     372,   628,   371,  1570,  1032,   634,   635,   172,  1040,   468,
     173,  1038,  1459,  1460,  1461,   850,  1462,  1463,  1464,  1593,
     627,   820,  1124,   469,   174,  1049,  -779,   175,   470,  -779,
     304,   377,   758,  1298,   759,   760,   761,   383,  1594,   385,
     848,   387,  1376,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   702,   719,
     720,   721,   423,  1039,   557,   909,   423,   375,   176,   412,
     698,  1290,  1046,   416,   423,   417,   418,   423,   627,   821,
    1125,  1604,   550,   429,   551,  1605,   552,   611,   284,   177,
     285,   338,   286,  1606,   631,   489,  1607,  -100,   178,  -100,
    1476,  -100,   179,  1112,    72,   180,    73,    74,    75,    76,
     837,   838,   839,   840,   841,   540,   226,   227,   228,    80,
     181,   472,   182,   254,   489,   472,   472,   472,   472,   472,
     183,    82,   952,   953,  1306,  1307,   195,   287,    83,   472,
     196,   812,   201,   472,   472,  -100,   202,  -100,   648,  -100,
     203,   660,   943,   944,    84,   745,   550,   461,   551,  1111,
    1018,     1,     2,     3,   498,   273,   827,   828,   829,   830,
     831,   703,   832,  1047,   229,    85,    86,   282,     6,  1015,
    1016,  1129,   462,   730,   842,  1050,  1387,   230,   231,   731,
     309,  1135,    91,  1131,   944,    92,   327,    93,  1015,  1016,
    1287,  1137,  1138,   754,  1015,  1016,     6,  1015,  1016,  1369,
     328,   329,   297,   298,   299,   917,   367,   650,   330,   918,
     510,   489,   288,   331,   332,   232,   233,   368,   234,   369,
    1404,  1405,  1406,   235,   341,   236,   289,   405,   753,   407,
     408,   290,   816,   415,   499,   492,   291,   511,  -280,   780,
     489,  1099,   508,   261,   262,   263,   264,   265,   512,   266,
     267,   268,  1452,   272,   919,  1297,   528,   431,   491,   810,
     530,   541,   542,   546,   554,   423,   574,   559,  -281,   472,
     560,  1305,   591,   567,    66,   561,   660,  1308,  1309,   562,
     648,   563,   870,   370,   569,   611,   564,   565,   566,   648,
     648,   648,   648,   648,   648,   431,   568,   927,   570,   571,
     190,  1049,   572,   573,   575,   578,   431,   579,   372,   580,
     371,   300,   581,   582,   583,     6,   853,   584,   193,  1398,
    1400,  1402,   585,   586,   199,   192,   587,   191,   588,   589,
     204,   205,   206,   207,   208,   594,   595,   244,   596,   920,
     489,   598,   599,   600,   489,   606,   649,   602,   650,   603,
     651,   609,  1367,   921,   616,   618,  1371,  1046,   922,  1546,
    1547,  1548,  -282,   923,   620,     6,   730,  1373,   627,   662,
     636,  1022,  1023,  1545,   665,   668,   708,   704,   648,  1027,
     709,  1028,  1457,  1458,  1459,  1460,  1461,   491,  1462,  1463,
    1464,   491,   322,   710,   754,   652,   754,   754,   754,   754,
     754,  1485,   711,  1486,   737,  1487,   712,   713,  1488,  1489,
    1490,   755,   714,   956,   732,   190,   963,   489,   780,   735,
     736,   757,   781,   815,   789,   780,   783,   810,   431,   753,
    1113,   753,   753,   753,   753,   753,   498,   844,   784,   785,
     192,   786,   191,   787,   790,  1114,   791,  1116,   825,   870,
     792,   793,   834,  -371,   780,   780,   847,   780,   780,   780,
     780,   851,   855,   702,   856,   648,   490,   431,   431,  1600,
     857,   810,   859,   419,   648,   698,   489,   863,  1608,   872,
     653,   660,   864,   903,   904,  1097,   297,   298,   299,   769,
     905,   660,   906,   770,   654,   907,   908,   911,   913,   655,
     914,  1059,   928,   931,   656,   930,   937,   934,   957,   945,
     958,   965,   954,  1035,  1024,  1034,  1025,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   771,  1026,
     456,  1029,  1037,  1036,  1395,   460,  1396,  1043,  1044,   489,
     832,     6,  1053,   842,  1105,  -289,  1056,   730,  1063,   869,
    1065,   648,  1100,  1070,  1328,  1103,  1106,   648,   648,   648,
     648,   648,   648,  1123,  1107,  1108,   431,  1126,  1130,  1119,
    1120,   515,   297,   298,   299,   639,   754,  1127,  1141,   640,
    1299,   944,  1136,   660,   772,   300,   491,  1142,  1281,  1282,
    1284,  1471,  1466,  1285,  1286,  1292,  1469,  1300,   963,  1310,
    1311,  1312,  1313,   529,  1323,   780,  1324,  1325,  1480,  1481,
    1482,   753,  1326,   773,  1340,  1331,  1327,   226,   227,   228,
    1329,  1332,  1341,  1333,   641,  1343,  1342,   774,  1344,   489,
    1378,  1379,   775,  1345,  1346,   489,   489,   776,   190,   780,
    1347,  1348,  1366,   297,   298,   299,   746,   632,   490,  1370,
     747,  1407,  1408,  1374,  1375,   660,  1381,  1420,  1391,  1385,
    1392,  1410,  1393,   192,  1394,   191,  1411,   590,   611,  1412,
     294,  1413,  1414,  1415,  1417,   229,   491,   490,   431,   431,
    1421,   300,   491,   491,   604,   605,  1541,  1424,   230,   231,
    1427,   612,  1539,  1544,  1428,   748,  1429,  1430,  1434,  1549,
    1550,  1467,   375,  1472,  1470,  1478,  1497,  1473,  1496,   642,
    1060,  1061,  1062,  1474,  1064,  1477,  1066,  1479,  1067,  1068,
     251,   252,   253,   643,  1483,   489,   232,   233,   644,   234,
    1484,  1498,   254,   645,   235,  1499,   236,  1500,  1501,  1502,
    1503,  1504,  1509,  1512,  1542,  1537,  1540,  1555,  1543,  1558,
    1123,  1557,   300,  1572,   659,  1561,  1575,  1562,  1566,   648,
    1563,  1564,  1573,  1567,   237,   611,  1576,  1577,   238,   611,
    1580,  1579,   491,   239,   490,  1574,  1578,  1581,   375,   375,
     749,  1582,   226,   227,   228,  1583,  1586,  1591,  1584,  1585,
    1590,  1587,  1589,  1601,   750,   817,  1602,  1603,  1592,   751,
    1609,  1610,  1377,   490,   744,  1599,   854,  1386,  1465,   518,
    1117,  1556,   533,  1349,   768,  1384,  1073,   312,   313,   314,
     315,   316,  1409,   317,   319,   321,   535,  1380,   862,   326,
     912,     0,   608,     0,     0,     0,   333,     0,     0,     0,
     229,   339,   340,     0,   343,   346,   347,  1388,   352,   353,
       0,     0,     0,   230,   231,  1449,  1450,  1451,     0,  1365,
     604,     0,   261,   262,   263,   264,   265,  1452,   266,   267,
     268,     0,     0,     0,     0,   811,     0,     0,     0,     0,
       0,   489,     0,     0,     0,     0,     0,     0,     0,   659,
       0,   232,   233,     0,   234,   956,     0,     0,     0,   235,
       0,   236,   489,   490,   489,     0,     0,   490,     0,     0,
       0,     0,     0,  1443,  1444,  1445,  1446,  1447,  1448,  1449,
    1450,  1451,     0,     0,     0,     0,     0,   849,   703,     0,
       0,  1452,     0,   607,   252,   253,   810,   294,   239,     0,
    1441,     0,     0,     0,     0,   254,     0,     0,     0,   491,
       0,   491,   865,   866,   867,   868,     0,   871,     0,     0,
     489,     0,     6,     0,   489,     0,   780,     0,     0,     0,
       0,     0,     0,     0,  1350,     0,     0,     0,     0,     0,
     490,     0,     0,     0,     0,     0,     0,     0,  1492,  1493,
       0,  1494,     0,  1495,     0,     0,     0,  1457,  1458,  1459,
    1460,  1461,     0,  1462,  1463,  1464,     0,   491,     0,     0,
    1441,   491,     0,     0,   611,     0,   319,   326,     0,     0,
       0,   963,     0,     0,   516,     0,     0,     0,     0,   962,
       0,   611,   611,   611,     0,     0,     0,     0,     0,   490,
     780,  1535,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1569,  1364,  1453,  1454,  1455,  1456,     0,
     489,  1457,  1458,  1459,  1460,  1461,  1033,  1462,  1463,  1464,
       0,     0,     0,     0,     0,   261,   262,   263,   264,   265,
       0,   266,   267,   268,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1365,   659,  1365,  1365,  1365,  1365,  1365,
       0,  1365,     0,     0,   659,     0,     0,   491,  1052,   611,
       0,     0,   490,     0,     0,     0,   611,     0,     0,   810,
     810,   810,   611,   611,  1450,  1451,  1069,     0,     0,     0,
     489,     0,     0,     0,   242,  1452,  1105,  1074,  1075,  1076,
    1077,  1078,  1079,  1080,  1081,  1082,  1083,  1084,  1085,  1086,
    1087,  1088,  1089,  1090,  1091,  1092,  1093,  1094,   281,     0,
    1098,  1595,  1596,  1597,     0,  1598,  1447,  1448,  1449,  1450,
    1451,     0,     0,     0,     0,     0,   611,   491,   308,   611,
    1452,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
       0,   335,   490,     0,     0,     0,   659,     0,   490,   490,
       0,   351,     0,   611,     0,     0,   669,  1440,     0,     0,
       0,   962,     0,   706,     0,     0,     0,     0,   611,   810,
       0,     0,     0,     0,     0,     0,     0,     0,   810,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1365,     0,     0,     0,     0,     0,     0,   406,     0,     0,
     409,     0,     0,     0,     0,  1457,  1458,  1459,  1460,  1461,
       0,  1462,  1463,  1464,     0,     0,  1288,     0,   659,     0,
    1291,     0,  1505,  1506,  1507,  1508,     0,  1510,  1433,  1511,
    1435,  1436,  1437,  1438,  1439,     0,  1442,     0,   490,     0,
       0,     0,     0,     0,  1365,     0,     0,  1365,   425,   426,
    1457,  1458,  1459,  1460,  1461,     0,  1462,  1463,  1464,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1335,     0,     0,     0,   453,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   463,     0,     0,   671,   672,
     673,    10,     0,    11,   674,   675,     0,     0,     0,     0,
     860,     0,     0,   507,     0,   509,  1514,  1515,  1516,  1517,
    1518,  1519,  1520,  1521,  1522,  1523,  1524,  1525,  1526,  1527,
    1528,  1529,  1530,  1531,  1532,   520,     0,   521,   522,   523,
     524,   525,   526,     0,     0,     0,   677,     0,     0,     0,
     899,   900,     0,     0,     0,     0,     0,     0,     0,   536,
     537,   678,     0,     0,     0,     0,   679,     0,     0,   545,
       0,     0,   548,     0,     0,   680,   681,     0,     0,     0,
     556,   246,   247,   248,   249,   250,   251,   252,   253,     0,
       0,     0,     0,     0,   490,     0,     0,     0,   254,     0,
    1443,  1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,   682,
       0,     0,   683,     0,   684,   490,     0,   490,  1452,   685,
     593,     0,     0,   686,     0,   597,   687,     0,     0,     0,
       0,   688,     0,     0,   689,     0,     0,   242,     0,     0,
       0,     0,  1588,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   690,     0,     0,   691,
     692,     0,     0,     0,   693,     0,   861,     0,     0,     0,
     695,     0,     0,   490,     0,   621,     0,   490,     0,     0,
       0,     0,     0,     0,  1383,     0,     0,     0,     0,     0,
       0,   308,  1445,  1446,  1447,  1448,  1449,  1450,  1451,     7,
       8,     9,    10,   661,    11,    12,    13,     0,  1452,     0,
       0,     0,     0,   308,     0,     0,     0,     0,     0,     0,
       0,   308,     0,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,  1335,   266,   267,   268,     0,  1416,     0,
       0,     0,  1453,  1454,  1455,  1456,     0,  1351,  1457,  1458,
    1459,  1460,  1461,     0,  1462,  1463,  1464,     0,     0,   343,
       0,     0,  1352,     0,     0,     0,     0,  1353,   782,     0,
       0,     0,     0,   490,     0,     0,    24,    25,     0,     0,
       0,     0,    27,     0,   962,     0,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    47,     0,    48,     0,   425,     0,     0,
    1354,     0,     0,     0,  1355,     0,     0,  1356,     7,     8,
       9,    10,    54,    11,    12,    13,   209,    70,  1457,  1458,
    1459,  1460,  1461,   490,  1462,  1463,  1464,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     835,     0,     0,     0,     0,  1361,  1536,  1362,    64,     0,
       0,  1363,     0,     0,     0,     0,    15,    71,   308,     0,
     210,     0,   211,   212,   213,   214,    77,    78,     0,     0,
       0,    21,    79,     0,     0,   215,    23,     0,     0,    81,
       0,     0,     0,     0,     0,    24,    25,   216,     0,     0,
       0,    27,     0,     0,   217,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
     218,     0,     0,     0,     0,     0,     0,   916,     0,    45,
       0,    46,    47,     0,    48,     0,     0,     0,     0,    49,
       0,   219,   220,    52,     0,     0,    53,    87,     0,     0,
       0,    54,     0,     0,    55,    88,    89,    90,   221,     0,
     951,    92,     0,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    58,     0,     0,    59,
      60,    61,     0,     0,    62,     0,    63,    64,     0,     0,
      65,     0,     0,     0,     0,     0,     0,     0,   308,     0,
       0,     0,     0,     0,     0,     0,     0,  1143,  1144,  1145,
    1146,  1147,  1148,  1149,  1150,  1151,  1152,  1153,     0,  1154,
    1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,
    1165,     0,     0,     0,     0,     0,     0,     0,  1166,  1167,
    1168,  1169,  1170,  1171,  1172,  1173,  1174,  1175,  1176,  1177,
    1178,  1179,  1180,  1181,  1182,  1183,  1184,     0,     0,  1185,
    1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,  1194,  1195,
    1196,  1197,  1198,  1199,  1200,  1201,  1202,     0,  1203,     0,
    1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,
       0,  1214,  1215,  1216,     0,     0,  1095,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1217,
       0,     0,     0,     0,     0,  1118,  1218,  1219,  1220,  1221,
    1222,  1223,  1224,  1225,  1226,  1227,  1228,  1229,  1230,  1231,
    1232,  1233,  1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,
    1242,  1243,  1244,  1245,  1246,  1247,  1248,  1249,  1250,  1251,
    1252,  1253,  1254,  1255,     0,     0,     0,  1256,  1257,  1258,
    1259,  1260,  1261,  1262,  1263,  1264,  1265,  1266,  1267,  1268,
    1269,  1270,  1271,  1272,  1273,  1274,  1275,  1276,  1475,  1277,
    1278,  1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1452,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1303,  1143,  1144,  1145,  1146,  1147,
    1148,  1149,  1150,  1151,  1152,  1153,     0,  1154,  1155,  1156,
    1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,  1165,     0,
       0,     0,     0,     0,     0,  1330,  1166,  1167,  1168,  1169,
    1170,  1171,  1172,  1173,  1174,  1175,  1176,  1177,  1178,  1179,
    1180,  1181,  1182,  1183,  1184,     0,     0,  1185,  1186,  1187,
    1188,  1189,  1190,  1191,  1192,  1193,  1194,  1195,  1196,  1197,
    1198,  1199,  1200,  1201,  1202,     0,  1203,     0,  1204,  1205,
    1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,     0,  1214,
    1215,  1216,     0,  1454,  1455,  1456,     0,     0,  1457,  1458,
    1459,  1460,  1461,     0,  1462,  1463,  1464,  1217,   951,     0,
       0,     0,     0,     0,  1218,  1219,  1220,  1221,  1222,  1223,
    1224,  1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,  1233,
    1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,  1242,  1243,
    1244,  1245,  1246,  1247,  1248,  1249,  1250,  1251,  1252,  1253,
    1254,  1255,     0,     0,     0,  1256,  1257,  1258,  1259,  1260,
    1261,  1262,  1263,  1264,  1265,  1266,  1267,  1268,  1269,  1270,
    1271,  1272,  1273,  1274,  1275,  1276,     0,  1277,  1278,     7,
       8,     9,    10,     0,    11,    12,    13,   513,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   245,   246,   247,   248,   249,   250,   251,   252,   253,
       0,     0,     0,     0,     0,     0,     0,    15,   356,   254,
       0,   210,     0,   211,   212,   213,   214,    77,     0,     0,
       0,     0,    21,   357,     0,     0,   215,    23,     0,     0,
      81,     0,     0,     0,     0,     0,    24,    25,   216,     0,
       0,     0,    27,     0,     0,   217,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,   218,     0,     0,     0,     0,     0,     0,  1403,     0,
      45,     0,    46,    47,     0,    48,     0,     0,     0,     0,
      49,     0,   219,   220,    52,     0,     0,    53,    87,     0,
       0,     0,    54,     0,     0,    55,   359,   360,    90,   221,
       0,     0,    92,     0,   222,     7,     8,     9,    10,     0,
      11,    12,    13,    14,     0,     0,     0,    58,     0,     0,
      59,    60,    61,     0,     0,    62,     0,    63,    64,     0,
       0,    65,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,   267,   268,     0,     0,
       0,   615,     0,    15,     0,     0,     0,    16,     0,    17,
      18,    19,    20,     0,     0,     0,     0,     0,    21,     0,
     765,   766,    22,    23,     0,     0,     0,     0,     0,     0,
       0,     0,    24,    25,    26,     0,     0,     0,    27,     0,
       0,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,     0,     0,
       0,     0,  1533,     0,     0,     0,    45,     0,    46,    47,
       0,    48,     0,     0,     0,     0,    49,     0,    50,    51,
      52,     0,     0,    53,     0,     0,     0,     0,    54,     0,
       0,    55,     0,     0,     0,    56,     7,     8,     9,    10,
      57,    11,    12,    13,    14,   767,     0,     0,   197,  1565,
       0,     0,     0,    58,     0,     0,    59,    60,    61,     0,
       0,    62,     0,    63,    64,     0,     0,    65,   245,   246,
     247,   248,   249,   250,   251,   252,   253,     0,     0,     0,
       0,     0,     0,     0,    15,     0,   254,     0,    16,     0,
      17,    18,    19,    20,     0,     0,     0,     0,     0,    21,
       0,     0,     0,    22,    23,     0,     0,     0,     0,     0,
       0,     0,     0,    24,    25,    26,     0,     0,     0,    27,
       0,     0,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,     0,
       0,     0,     0,     0,     0,     0,     0,    45,     0,    46,
      47,     0,    48,     0,     0,     0,     0,    49,     0,    50,
      51,    52,     0,     0,    53,     0,     0,     0,     0,    54,
       0,     0,    55,     0,     0,     0,    56,     7,     8,     9,
      10,    57,    11,    12,    13,    14,     0,     0,     0,     0,
       0,     0,     0,     0,    58,     0,     0,    59,    60,    61,
       0,     0,    62,     0,   198,    64,     0,     0,    65,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,   267,   268,    15,     0,     0,  1338,    16,
       0,    17,    18,    19,    20,     0,     0,     0,     0,     0,
      21,     0,     0,     0,    22,    23,     0,     0,     0,     0,
       0,     0,     0,     0,    24,    25,    26,     0,     0,     0,
      27,     0,     0,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
       0,     0,     0,     0,     0,     0,     0,     0,    45,     0,
      46,    47,     0,    48,     0,     0,     0,     0,    49,     0,
      50,    51,    52,     0,     0,    53,     0,     0,     0,     0,
      54,     0,     0,    55,     0,     0,     0,    56,     7,     8,
       9,    10,    57,    11,    12,    13,    14,     0,     0,     0,
       0,     0,     0,     0,     0,    58,     0,     0,    59,    60,
      61,     0,     0,    62,     0,    63,    64,   454,     0,    65,
     245,   246,   247,   248,   249,   250,   251,   252,   253,     0,
       0,     0,     0,     0,     0,     0,    15,   459,   254,     0,
      16,     0,    17,    18,    19,    20,     0,     0,     0,     0,
       0,    21,     0,     0,     0,    22,    23,     0,     0,     0,
       0,     0,     0,     0,     0,    24,    25,    26,     0,     0,
       0,    27,     0,     0,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,     0,     0,     0,     0,     0,     0,     0,     0,    45,
       0,    46,    47,     0,    48,     0,     0,     0,     0,    49,
       0,    50,    51,    52,     0,     0,    53,     0,     0,     0,
       0,    54,     0,     0,    55,     0,     0,     0,    56,     7,
       8,     9,    10,    57,    11,    12,    13,    14,     0,     0,
       0,     0,     0,     0,     0,     0,    58,     0,     0,    59,
      60,    61,     0,     0,    62,     0,    63,    64,     0,     0,
      65,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,    15,   743,     0,
    1571,    16,     0,    17,    18,    19,    20,     0,     0,     0,
       0,     0,    21,     0,     0,     0,    22,    23,     0,     0,
       0,     0,     0,     0,     0,     0,    24,    25,    26,     0,
       0,     0,    27,     0,     0,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
      45,     0,    46,    47,     0,    48,     0,     0,     0,     0,
      49,     0,    50,    51,    52,     0,     0,    53,     0,     0,
       0,     0,    54,     0,     0,    55,     0,     0,     0,    56,
       7,     8,     9,    10,    57,    11,    12,    13,    14,     0,
       0,     0,     0,     0,     0,     0,     0,    58,     0,     0,
      59,    60,    61,     0,     0,    62,     0,    63,    64,     0,
       0,    65,   245,   246,   247,   248,   249,   250,   251,   252,
     253,     0,     0,     0,     0,     0,     0,     0,    15,     0,
     254,     0,    16,     0,    17,    18,    19,    20,     0,     0,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
       0,     0,     0,     0,     0,     0,     0,    24,    25,    26,
       0,     0,     0,    27,     0,     0,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,     0,     0,     0,     0,     0,     0,     0,
       0,    45,     0,    46,    47,     0,    48,     0,     0,     0,
       0,    49,     0,    50,    51,    52,     0,     0,    53,     0,
       0,     0,     0,    54,     0,     0,    55,     0,     0,     0,
      56,     7,     8,     9,    10,    57,    11,    12,    13,    14,
     959,     0,     0,     0,     0,     0,     0,     0,    58,     0,
       0,    59,    60,    61,     0,     0,    62,     0,    63,    64,
       0,   964,    65,     0,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,   267,   268,    15,
       0,     0,     0,    16,     0,    17,    18,    19,    20,     0,
       0,     0,     0,     0,    21,     0,     0,     0,    22,    23,
       0,     0,     0,     0,     0,     0,     0,     0,    24,    25,
      26,     0,     0,     0,    27,     0,     0,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,     0,     0,     0,     0,     0,     0,
       0,     0,    45,     0,    46,    47,     0,    48,     0,     0,
       0,     0,    49,     0,    50,    51,    52,     0,     0,    53,
       0,     0,     0,     0,    54,     0,     0,    55,     0,     0,
       0,    56,     7,     8,     9,    10,    57,    11,    12,    13,
      14,     0,     0,     0,     0,     0,     0,     0,     0,    58,
       0,     0,    59,    60,    61,     0,     0,    62,     0,    63,
      64,  1096,     0,    65,   245,   246,   247,   248,   249,   250,
     251,   252,   253,     0,     0,     0,     0,     0,     0,     0,
      15,     0,   254,     0,    16,     0,    17,    18,    19,    20,
       0,     0,     0,     0,     0,    21,     0,     0,     0,    22,
      23,     0,     0,     0,     0,     0,     0,     0,     0,    24,
      25,    26,     0,     0,     0,    27,     0,     0,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,     0,     0,     0,     0,     0,
       0,     0,     0,    45,     0,    46,    47,     0,    48,     0,
       0,     0,     0,    49,     0,    50,    51,    52,     0,     0,
      53,     0,     0,     0,     0,    54,     0,     0,    55,     0,
       0,     0,    56,     7,     8,     9,    10,    57,    11,    12,
      13,    14,  1382,     0,     0,     0,     0,     0,     0,     0,
      58,     0,     0,    59,    60,    61,     0,     0,    62,     0,
      63,    64,  1314,     0,    65,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,    15,     0,     0,     0,    16,     0,    17,    18,    19,
      20,     0,     0,     0,     0,     0,    21,     0,     0,     0,
      22,    23,     0,     0,     0,     0,     0,     0,     0,     0,
      24,    25,    26,     0,     0,     0,    27,     0,     0,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,    46,    47,     0,    48,
       0,     0,     0,     0,    49,     0,    50,    51,    52,     0,
       0,    53,     0,     0,     0,     0,    54,     0,     0,    55,
       0,     0,     0,    56,     7,     8,     9,    10,    57,    11,
      12,    13,    14,     0,     0,     0,     0,     0,     0,     0,
       0,    58,     0,     0,    59,    60,    61,     0,     0,    62,
       0,    63,    64,  1534,     0,    65,   245,   246,   247,   248,
     249,   250,   251,   252,   253,     0,     0,     0,     0,     0,
       0,     0,    15,     0,   254,     0,    16,     0,    17,    18,
      19,    20,     0,     0,     0,     0,     0,    21,     0,     0,
       0,    22,    23,     0,     0,     0,     0,     0,     0,     0,
       0,    24,    25,    26,     0,     0,     0,    27,     0,     0,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,     0,     0,     0,
       0,     0,     0,     0,     0,    45,     0,    46,    47,     0,
      48,     0,     0,     0,     0,    49,     0,    50,    51,    52,
       0,     0,    53,     0,     0,     0,     0,    54,     0,     0,
      55,     0,     0,     0,    56,     7,     8,     9,    10,    57,
      11,    12,    13,    14,     0,   247,   248,   249,   250,   251,
     252,   253,    58,     0,     0,    59,    60,    61,     0,     0,
      62,   254,    63,    64,     0,     0,    65,     0,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,    15,     0,     0,     0,    16,     0,    17,
      18,    19,    20,     0,     0,     0,     0,     0,    21,     0,
       0,     0,    22,    23,     0,     0,     0,     0,     0,     0,
       0,     0,    24,    25,    26,     0,     0,     0,    27,     0,
       0,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,     0,     0,
       0,     0,     0,     0,     0,     0,    45,     0,    46,    47,
       0,    48,     0,     0,     0,     0,    49,     0,    50,    51,
      52,     0,     0,    53,     0,   500,   501,   502,    54,     0,
       0,    55,     0,     0,     0,    56,   671,   672,   673,    10,
      57,    11,   674,   675,    69,    70,     0,     0,   676,   259,
     260,   261,   262,   263,   264,   265,     0,   266,   267,   268,
       0,    62,     0,    63,    64,     0,     0,    65,   245,   246,
     247,   248,   249,   250,   251,   252,   253,     0,     0,     0,
       0,   481,     0,   229,   677,    71,   254,     0,    72,     0,
      73,    74,    75,    76,    77,   482,   230,   231,     0,   678,
      79,     0,     0,    80,   679,     0,     0,    81,     0,     0,
       0,     0,     0,   680,   681,    82,     0,     0,     0,     0,
       0,     0,    83,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   505,   233,     0,   234,    84,     0,
       0,     0,   235,     0,   236,     0,     0,   682,     0,     0,
     683,     0,   684,     0,     0,     0,   483,   685,     0,    85,
      86,   686,     0,     0,   687,    87,     0,     0,     0,   688,
       0,   301,   689,    88,    89,    90,    91,     0,     0,    92,
       0,    93,     0,   671,   672,   673,    10,     0,    11,   674,
     675,    69,    70,     0,   690,  1072,     0,   691,   692,     0,
       0,     0,   693,     0,   694,     0,   717,     0,   695,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,   267,   268,   718,     0,     0,   481,     0,
       0,   677,    71,     0,     0,    72,     0,    73,    74,    75,
      76,    77,   482,     0,     0,     0,   678,    79,     0,     0,
      80,   679,     0,     0,    81,     0,     0,     0,     0,     0,
     680,   681,    82,     0,   249,   250,   251,   252,   253,    83,
       7,     8,     9,    10,     0,    11,    12,    13,   254,     0,
       0,     0,  1431,     0,     0,    84,     0,     0,     0,     0,
       0,     0,     0,     0,   682,     0,     0,   683,     0,   684,
       0,     0,     0,   483,   685,     0,    85,    86,   686,     0,
       0,   687,    87,     0,     0,     0,   688,     0,  1351,   689,
      88,    89,    90,    91,     0,     0,    92,     0,    93,     0,
       0,     0,     0,  1352,     0,     0,     0,     0,  1353,     0,
       0,   690,     0,     0,   691,   692,     0,    24,    25,   693,
       0,   694,     0,    27,     0,   695,     0,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     7,     8,     9,    10,     0,    11,    12,    13,
       0,     0,     0,     0,    47,     0,    48,     0,     0,     0,
       0,  1354,     0,     0,     0,  1355,     0,     0,  1356,     0,
       0,     0,     0,    54,     0,     0,   259,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,     0,     0,     0,
    1351,     0,     0,     0,     0,     0,     0,     0,  1357,     0,
       0,  1358,  1359,  1360,     0,  1352,  1361,     0,  1432,    64,
    1353,     0,  1363,     0,     0,     0,   226,   227,   228,    24,
      25,     0,     0,     0,     0,    27,     0,     0,     0,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,   245,   246,   247,   248,   249,   250,
     251,   252,   253,     0,     0,     0,    47,     0,    48,     0,
       0,     0,   254,  1354,     0,     0,     0,  1355,     0,     0,
    1356,     0,     0,     0,   229,    54,     0,     0,     0,    72,
       0,    73,    74,    75,    76,     0,     0,   230,   231,     0,
       0,     0,     0,     0,   226,   227,   228,     0,     0,     0,
    1357,     0,     0,  1358,  1359,  1360,   968,     0,  1361,     0,
    1362,    64,     0,    83,  1363,     0,   969,   970,   971,   972,
     973,   974,   975,   976,   977,   232,   233,     0,   234,   277,
       0,     0,     0,   235,   978,   236,   979,   980,   981,   982,
     983,   984,   985,   986,   987,   988,   989,   990,     0,     0,
      85,    86,   229,     0,     0,     0,     0,     0,     0,   334,
       0,     0,     0,     0,     0,   230,   231,    91,     0,   991,
       0,     0,    93,     0,     0,     0,     0,     0,     0,   354,
     355,     0,     0,     0,     0,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,   411,     0,   232,   233,     0,   234,     0,     0,     0,
       0,   235,     0,   236,   992,     0,     0,     0,     0,     0,
       0,   356,     0,     0,    72,     0,    73,    74,    75,    76,
      77,     0,     0,     0,   354,   355,   357,   519,     0,    80,
       0,     0,     0,    81,     0,     0,     0,     0,     0,     0,
       0,    82,     0,     0,   993,     0,     0,   994,    83,   995,
     996,   997,   998,   999,  1000,  1001,  1002,  1003,  1004,  1005,
       0,  1006,  1007,     0,    84,  1008,   356,     0,     0,    72,
       0,    73,    74,    75,    76,    77,     0,   358,     0,     0,
       0,   357,     0,     0,    80,    85,    86,     0,    81,     0,
     496,    87,     0,     0,     0,     0,    82,     0,     0,   359,
     360,    90,    91,    83,     0,    92,     0,    93,     0,     0,
       0,     0,   361,     0,     0,     0,   531,   532,     0,    84,
       0,     0,     0,     0,     0,     0,     0,     0,   362,     0,
       0,     0,   358,     0,    72,     0,    73,    74,    75,    76,
      85,    86,     0,     0,     0,     0,    87,     0,     0,     0,
       0,     0,     0,     0,   359,   360,    90,    91,   356,     0,
      92,    72,    93,    73,    74,    75,    76,    77,    83,     0,
       0,     0,     0,   357,     0,     0,    80,     0,     0,     0,
      81,     0,     0,   362,   277,     0,     0,     0,    82,     0,
       0,     0,     0,     0,     0,    83,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    85,    86,     0,     0,     0,
       0,    84,     0,     0,   254,     0,   226,   227,   228,     0,
       0,   915,    91,     0,   358,     0,     0,    93,     0,     0,
       0,     0,    85,    86,     0,     0,     0,     0,    87,     0,
       0,     0,     0,     0,     0,     0,   359,   360,    90,    91,
       0,     0,    92,     0,    93,   245,   246,   247,   248,   249,
     250,   251,   252,   253,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   254,   229,   362,   245,   246,   247,   248,
     249,   250,   251,   252,   253,     0,     0,   230,   231,     0,
       0,     0,     0,     0,   254,   245,   246,   247,   248,   249,
     250,   251,   252,   253,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   254,   245,   246,   247,   248,   249,   250,
     251,   252,   253,     0,     0,   232,   233,     0,   234,     0,
       0,     0,   254,   235,     0,   236,     0,     0,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,   517,   245,   246,   247,   248,   249,   250,
     251,   252,   253,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   254,   245,   246,   247,   248,   249,   250,   251,
     252,   253,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   254,     0,     0,     0,     0,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
     267,   268,   601,     0,     0,     0,     0,     0,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,   617,     0,     0,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
     267,   268,   705,     0,     0,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,   788,   245,   246,   247,   248,   249,   250,   251,   252,
     253,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     254,     0,     0,     0,     0,     0,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,   935,     0,     0,     0,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,   267,   268,
    1054,   245,   246,   247,   248,   249,   250,   251,   252,   253,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   254,
     245,   246,   247,   248,   249,   250,   251,   252,   253,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   254,   245,
     246,   247,   248,   249,   250,   251,   252,   253,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   254,   875,   876,
     877,   878,   879,   880,   881,   882,   883,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   884,     0,     0,     0,
       0,     0,     0,     0,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,   267,   268,  1301,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   247,   248,   249,   250,   251,   252,   253,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   254,     0,     0,
       0,     0,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,   267,   268,  1334,     0,
     613,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -2,   266,   267,   268,     0,     0,  1336,
       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,   267,   268,     0,     0,     0,     0,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,     0,   896,   897,   898,     0,     0,     0,     0,     0,
       0,   108,     0,   109,     0,     0,   110,   111,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,     0,
       0,     0,     0,     0,     0,     0,   116,     0,   117,   118,
     119,   120,   121,     0,     0,     0,   122,     0,     0,     0,
       0,   123,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,   267,   268,     0,     0,     0,   124,
     125,   126,   127,   128,   129,   130,   131,     0,     0,     0,
       0,     0,     0,   132,   133,   134,   135,     0,     0,     0,
       0,     0,   136,   137,    69,    70,   138,   139,   479,     0,
     480,   140,     0,     0,     0,     0,     0,   141,   142,     0,
     143,   247,   248,   249,   250,   251,   252,   253,   144,     0,
       0,     0,     0,     0,     0,     0,     0,   254,   500,   501,
     502,   481,     0,     0,     0,    71,     0,     0,    72,     0,
      73,    74,    75,    76,    77,   482,     0,     0,     0,     0,
      79,     0,     0,    80,     0,     0,     0,    81,   247,   248,
     249,   250,   251,   252,   253,    82,   503,     0,   504,     0,
       0,     0,    83,     0,   254,  1445,  1446,  1447,  1448,  1449,
    1450,  1451,     0,     0,     0,     0,   229,     0,    84,     0,
       0,  1452,  1445,  1446,  1447,  1448,  1449,  1450,  1451,   230,
     231,     0,     0,     0,     0,     0,   483,     0,  1452,    85,
      86,     0,     0,     0,     0,    87,  1445,  1446,  1447,  1448,
    1449,  1450,  1451,    88,    89,    90,    91,     0,     0,    92,
       0,    93,  1452,     0,     0,     0,     0,   505,   233,     0,
     234,     0,     0,     0,   484,   235,     0,   236,     0,   485,
       0,     0,     0,   257,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,   267,   268,     0,     0,     0,     0,
       0,   506,     0,     0,     0,     0,     0,     0,     0,   226,
     227,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,     0,     0,     0,  1454,  1455,  1456,     0,
       0,  1457,  1458,  1459,  1460,  1461,   796,  1462,  1463,  1464,
       0,     0,     0,     0,  1455,  1456,   796,   229,  1457,  1458,
    1459,  1460,  1461,   797,  1462,  1463,  1464,     0,     0,     0,
     230,   231,     0,     0,     0,     0,     0,   798,     0,  1456,
       0,     0,  1457,  1458,  1459,  1460,  1461,   798,  1462,  1463,
    1464,   799,     0,   800,     0,     0,     0,     0,     0,     0,
       0,   799,     0,   800,     0,     0,     0,     0,   232,   233,
     801,   234,     0,     0,     0,     0,   235,     0,   236,     0,
     801,     0,     0,   318,     0,     0,   226,   227,   228,  1318,
       0,     0,     0,     0,  1397,     0,     0,     0,     0,     0,
       0,   802,     0,     0,   803,   804,     0,     0,   805,     0,
       0,   802,     0,     0,   803,   804,     0,     0,   805,     0,
       0,     0,   318,     0,   806,   108,     0,   109,     0,     0,
       0,   111,     0,     0,   806,     0,   807,     0,     0,   112,
     113,   114,   115,     0,   229,     0,   807,     0,     0,     0,
     808,     0,   117,   118,   119,   120,     0,   230,   231,     0,
     808,     0,     0,     0,   108,   311,   109,     0,     0,     0,
     111,     0,     0,     0,     0,     0,     0,     0,   112,   113,
     114,   115,   226,   227,   228,     0,   719,   720,   721,   130,
       0,   117,   310,   119,   120,   232,  1315,  1316,  1317,     0,
     135,     0,     0,   235,   311,   236,   136,     0,     0,     0,
     138,   139,     0,     0,     0,     0,  1318,     0,     0,     0,
       0,  1319,   142,     0,   143,     0,     0,     0,   130,     0,
       0,    72,     0,    73,    74,    75,    76,   722,   723,   135,
     229,     0,   226,   227,   228,   136,    80,     0,     0,     0,
     139,     0,     0,   230,   231,     0,     0,     0,    82,     0,
       0,   142,     0,   143,     0,    83,     0,     0,     0,     0,
      72,     0,    73,    74,    75,    76,     0,     0,   226,   227,
     228,    84,     0,     0,    69,    70,     0,     0,   479,     0,
       0,   232,   233,     0,   234,     0,     0,     0,     0,   235,
     229,   236,    85,    86,    83,     0,     0,     0,     0,     0,
       0,     0,  1318,   230,   231,     0,   724,  1399,     0,    91,
     277,   481,    92,     0,    93,    71,     0,     0,    72,     0,
      73,    74,    75,    76,    77,   482,   229,     0,     0,     0,
      79,    85,    86,    80,     0,     0,     0,    81,     0,   230,
     231,   232,   233,     0,   234,    82,     0,     0,    91,   235,
       0,   236,    83,    93,     0,     0,     0,     0,     0,     0,
       0,     0,  1318,     0,     0,     0,     0,  1401,    84,     0,
       0,    69,    70,     0,     0,   823,   195,   232,   233,     0,
     234,     0,     0,     0,     0,   235,   483,   236,     0,    85,
      86,     0,     0,     0,     0,    87,     0,     0,     0,     0,
       0,     0,   305,    88,    89,    90,    91,     0,   481,    92,
       0,    93,    71,    69,    70,    72,     0,    73,    74,    75,
      76,    77,   482,     0,     0,     0,     0,    79,     0,     0,
      80,     0,     0,     0,    81,     0,     0,     0,     0,     0,
       0,     0,    82,     0,     0,     0,     0,     0,     0,    83,
     481,     0,     0,     0,    71,     0,     0,    72,     0,    73,
      74,    75,    76,    77,   482,    84,     0,     0,     0,    79,
       0,     0,    80,     0,     0,     0,    81,     0,     0,     0,
       0,     0,     0,   483,    82,     0,    85,    86,     0,     0,
       0,    83,    87,     0,     0,     0,     0,     0,     0,     0,
      88,    89,    90,    91,     0,     0,    92,    84,    93,     0,
      69,    70,     0,     0,     0,     0,     0,     0,    72,     0,
      73,    74,    75,    76,     0,   483,     0,     0,    85,    86,
       0,     0,     0,   276,    87,     0,    69,    70,     0,     0,
       0,     0,    88,    89,    90,    91,     0,     0,    92,     0,
      93,    71,    83,     0,    72,     0,    73,    74,    75,    76,
      77,    78,     0,     0,     0,     0,    79,     0,   277,    80,
       0,     0,     0,    81,     0,     0,     0,    71,     0,     0,
      72,    82,    73,    74,    75,    76,    77,     0,    83,    85,
      86,     0,    79,     0,     0,    80,     0,     0,     0,    81,
       0,     0,     0,     0,    84,     0,    91,    82,     0,     0,
       0,    93,     0,     0,    83,     0,     0,     0,     0,     0,
       0,   226,   227,   228,     0,    85,    86,     0,    69,    70,
      84,    87,     0,     0,   183,     0,     0,     0,     0,    88,
      89,    90,    91,     0,     0,    92,     0,    93,   630,     0,
       0,    85,    86,     0,    69,     0,     0,    87,     0,     0,
       0,     0,     0,     0,     0,    88,    89,    90,    91,    71,
       0,    92,    72,    93,    73,    74,    75,    76,    77,   229,
       0,     0,     0,     0,    79,     0,     0,    80,     0,     0,
       0,    81,   230,   231,     0,    71,     0,     0,    72,    82,
      73,    74,    75,    76,    77,   543,    83,     0,     0,     0,
      79,     0,     0,    80,     0,     0,     0,    81,     0,     0,
       0,     0,    84,     0,     0,    82,     0,     0,     0,     0,
     232,   233,    83,   234,     0,     0,     0,     0,   235,     0,
     236,     0,     0,    85,    86,     0,   184,     0,    84,    87,
       0,  1318,     0,     0,     0,     0,     0,    88,    89,    90,
      91,     0,     0,    92,     0,    93,     0,     0,     0,    85,
      86,     0,   184,     0,     0,    87,     0,     0,     0,     0,
     226,   227,   228,    88,    89,    90,    91,   185,     0,    92,
      72,    93,    73,    74,    75,    76,    77,  1030,     0,     0,
       0,     0,   186,     0,     0,    80,     0,     0,     0,    81,
       0,     0,     0,   185,     0,     0,    72,    82,    73,    74,
      75,    76,    77,     0,    83,     0,     0,     0,   186,     0,
       0,    80,     0,     0,     0,    81,     0,     0,   229,     0,
      84,     0,     0,    82,     0,     0,     0,     0,     0,     0,
      83,   230,   231,     0,     0,     0,     0,     0,     0,     0,
       0,    85,    86,     0,    69,     0,    84,    87,     0,     0,
       0,     0,     0,     0,     0,   187,   188,    90,    91,     0,
       0,    92,     0,    93,     0,     0,     0,    85,    86,   232,
     233,     0,   234,    87,     0,     0,     0,   235,     0,   236,
       0,   187,   188,    90,    91,    71,     0,    92,    72,    93,
      73,    74,    75,    76,    77,     0,     0,     0,     0,     0,
      79,     0,     0,    80,     0,     0,     0,    81,     0,     0,
       0,     0,     0,     0,     0,    82,     0,     0,     0,     0,
       0,     0,    83,     0,     0,     0,   108,     0,   109,     0,
       0,   110,   111,     0,     0,     0,     0,     0,    84,     0,
     112,   113,   114,   115,     0,     0,     0,     0,     0,     0,
       0,   116,     0,   117,   118,   119,   120,   121,     0,    85,
      86,   122,     0,     0,     0,    87,   123,     0,     0,     0,
       0,     0,     0,    88,    89,    90,    91,     0,     0,    92,
       0,    93,     0,     0,   124,   125,   126,   127,   128,   129,
     130,   131,     0,     0,     0,     0,     0,     0,   132,   133,
     134,   135,     0,     0,     0,     0,     0,   136,   137,     0,
       0,   138,   139,   108,     0,   109,   140,     0,   110,   111,
       0,     0,   141,   142,     0,   143,     0,   112,   113,   114,
     115,     0,     0,   144,     0,     0,     0,     0,   116,     0,
     117,   118,   119,   120,   121,     0,     0,     0,   122,     0,
       0,     0,   715,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   125,   126,   127,   128,   129,   130,   131,     0,
       0,     0,     0,     0,     0,   132,   133,   134,   135,     0,
       0,     0,     0,     0,   136,   137,     0,     0,   138,   139,
     108,     0,   109,   140,     0,   110,   111,     0,     0,   141,
     142,     0,   143,     0,   112,   113,   114,   115,     0,     0,
     144,     0,     0,     0,     0,   116,     0,   117,   118,   119,
     120,   121,     0,     0,     0,   122,     0,     0,     0,   901,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   124,   125,
     126,   127,   128,   129,   130,   131,     0,     0,     0,     0,
       0,     0,   132,   133,   134,   135,     0,     0,     0,     0,
       0,   136,   137,     0,     0,   138,   139,   108,     0,   109,
     140,     0,   110,   111,     0,     0,   141,   142,     0,   143,
       0,   112,   113,   114,   115,     0,     0,   144,     0,     0,
       0,     0,   116,     0,   117,   118,   119,   120,   121,     0,
       0,     0,   122,     0,     0,     0,   946,   123,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,   126,   127,   128,
     129,   130,   131,     0,     0,     0,     0,     0,     0,   132,
     133,   134,   135,     0,     0,     0,     0,     0,   136,   137,
       0,     0,   138,   139,   108,     0,   109,   140,     0,   110,
     111,     0,     0,   141,   142,     0,   143,     0,   112,   113,
     114,   115,     0,     0,   144,     0,     0,     0,     0,   116,
       0,   117,   118,   119,   120,   121,     0,     0,     0,   122,
       0,     0,     0,  1055,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,   126,   127,   128,   129,   130,   131,
       0,     0,     0,     0,     0,     0,   132,   133,   134,   135,
       0,     0,     0,     0,     0,   136,   137,     0,     0,   138,
     139,   108,     0,   109,   140,     0,   110,   111,     0,     0,
     141,   142,     0,   143,     0,   112,   113,   114,   115,     0,
       0,   144,     0,     0,     0,     0,   116,     0,   117,   118,
     119,   120,   121,     0,     0,     0,   122,     0,     0,     0,
    1109,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,   126,   127,   128,   129,   130,   131,     0,     0,     0,
       0,     0,     0,   132,   133,   134,   135,     0,     0,     0,
       0,     0,   136,   137,     0,     0,   138,   139,   108,     0,
     109,   140,     0,   110,   111,     0,     0,   141,   142,     0,
     143,     0,   112,   113,   114,   115,     0,     0,   144,     0,
       0,     0,     0,   116,     0,   117,   118,   119,   120,   121,
       0,     0,     0,   122,     0,     0,     0,  1339,   123,     0,
     226,   227,   228,     0,     0,     0,     0,     0,     0,     0,
       0,   226,   227,   228,     0,     0,   124,   125,   126,   127,
     128,   129,   130,   131,     0,     0,     0,     0,     0,     0,
     132,   133,   134,   135,     0,     0,     0,     0,     0,   136,
     137,     0,     0,   138,   139,     0,     0,     0,   140,   503,
       0,   504,     0,     0,   141,   142,     0,   143,   229,     0,
       0,     0,     0,     0,   349,   144,     0,     0,     0,   229,
       0,   230,   231,     0,    72,     0,    73,    74,    75,    76,
       0,     0,   230,   231,  1491,     0,     0,     0,    72,     0,
      73,    74,    75,    76,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   350,     0,     0,     0,     0,    83,   232,
     233,     0,   234,     0,     0,     0,     0,   235,     0,   236,
     232,   233,    83,   234,   277,     0,     0,     0,   235,     0,
     236,     0,     0,     0,     0,     0,     0,     0,   277,     0,
       0,     0,     0,     0,     0,    85,    86,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    85,
      86,     0,    91,     0,     0,     0,     0,    93,   108,     0,
     109,     0,     0,     0,   111,     0,    91,     0,     0,     0,
       0,    93,   112,   113,   114,   115,     0,     0,     0,     0,
     196,     0,     0,     0,     0,   117,   310,   119,   120,     0,
       0,     0,     0,   122,   202,     0,     0,     0,   311,     0,
       0,   108,     0,   109,     0,     0,   110,   111,     0,     0,
       0,     0,     0,     0,     0,   112,   113,   114,   115,     0,
       0,     0,   130,     0,     0,     0,   116,     0,   117,   118,
     119,   120,   121,   135,     0,     0,   122,     0,     0,   136,
       0,   123,     0,     0,   139,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   141,   142,     0,   143,     0,   124,
     125,   126,   127,   128,   129,   130,   131,     0,     0,     0,
       0,     0,  -160,   132,   133,   134,   135,     0,   108,     0,
     109,     0,   136,   137,   111,     0,   138,   139,     0,     0,
       0,   140,   112,   113,   114,   115,     0,   141,   142,     0,
     143,     0,     0,     0,     0,   117,   118,   119,   120,     0,
       0,     0,     0,   122,     0,     0,     0,   108,   311,   109,
       0,     0,     0,   111,     0,     0,     0,     0,     0,     0,
       0,   112,   113,   114,   115,     0,     0,     0,     0,     0,
       0,     0,   130,     0,   117,   310,   119,   120,     0,     0,
       0,     0,     0,   135,     0,     0,   108,   311,   109,   136,
       0,     0,   111,   138,   139,     0,     0,     0,     0,     0,
     112,   113,   114,   115,   141,   142,     0,   143,     0,     0,
       0,   130,   325,   117,   310,   119,   120,     0,     0,     0,
       0,     0,   135,     0,     0,     0,   311,     0,   136,     0,
       0,     0,    72,   139,    73,    74,    75,    76,     0,     0,
       0,     0,     0,     0,   142,     0,   143,   276,     0,     0,
     130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   135,     0,     0,     0,     0,    83,   136,     0,     0,
       0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,   142,     0,   143,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    85,    86,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      91,     0,     0,     0,     0,    93
};

static const yytype_int16 yycheck[] =
{
       1,    63,   118,   758,    95,   138,   155,   778,   157,   158,
     159,   160,   161,    45,   163,   734,   165,   959,   167,   483,
     138,   490,   627,   334,   309,   682,   533,   481,    15,   191,
      78,   499,    10,    15,   183,    13,   512,    81,    45,   148,
      45,   154,    61,   608,   157,   741,   195,   196,   512,   503,
     148,   822,   148,   202,   203,     0,   157,   511,   162,    10,
      11,    12,   347,    64,   745,    15,   747,   748,   749,   750,
     751,   172,   171,   154,   770,   771,   489,   773,   774,   775,
     776,   646,   157,     6,   154,     8,    13,   154,   154,    84,
      85,    86,   657,    94,    95,   176,    91,   172,    10,    11,
      12,   102,   154,   173,   154,   154,   173,   173,   154,   153,
     153,   171,   156,   132,   154,   154,   148,    68,   171,   154,
      34,   173,   153,   173,   173,   154,   154,   173,   171,    34,
      81,    82,   162,   173,   173,   101,   198,    34,   173,   162,
     797,   148,   162,   148,   173,   173,   154,   286,   287,   288,
     289,   290,   156,   154,   155,    34,   157,   158,   159,   160,
     161,    34,   163,   632,   165,   173,   167,   154,   119,   120,
     154,   122,   171,   154,   638,     6,   127,     8,   129,   154,
     271,   272,   183,   652,   653,   654,   655,   656,   166,   173,
     191,   173,   173,   609,   195,   196,   287,   288,   173,   171,
     309,   202,   203,   171,   154,   267,   171,   119,   519,   371,
     686,   309,   636,   309,   779,    13,   171,    15,   631,    17,
      34,   156,   173,   218,   219,   220,   221,   832,   641,   642,
     643,   644,   645,    81,   343,   931,   547,   842,   347,   166,
     241,   717,   156,   291,   156,   343,    81,   343,   156,   347,
     173,   347,   171,   818,   819,   171,   937,   171,   172,   408,
     729,   166,   167,   168,    62,   170,   171,   172,   157,   965,
     271,   272,   779,   170,   171,   172,   171,   309,    63,   155,
    1035,   157,   277,   172,   154,   286,   287,   288,   289,   290,
     291,   170,   171,   172,    81,   296,   153,   170,   171,   172,
     154,   154,   309,   173,   309,   153,   301,     6,   156,     8,
     358,   343,   171,   781,   171,   347,   729,   173,   153,   173,
     173,   156,   738,   462,   154,   171,   742,   466,   467,   468,
     469,   470,   171,   334,   172,   173,   343,   303,   343,   944,
     347,   480,   347,   173,   798,   484,   485,   171,   817,   147,
     171,   815,   166,   167,   168,   666,   170,   171,   172,   154,
     172,   173,   927,   161,   171,   834,   153,   171,   166,   156,
     371,   156,   153,  1030,   155,   156,   157,   162,   173,   164,
     665,   166,  1137,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   874,    10,
      11,    12,   154,   816,   370,   716,   154,   408,   171,   194,
     874,  1016,   825,   198,   154,   200,   201,   154,   172,   173,
     927,   173,   153,   157,   155,   173,   157,   428,    13,   171,
      15,   156,    17,   173,   482,   483,   173,   153,   171,   155,
    1382,   157,   171,   912,    55,   171,    57,    58,    59,    60,
     919,   920,   921,   922,   923,   171,    10,    11,    12,    70,
     171,   462,   171,    34,   512,   466,   467,   468,   469,   470,
     171,    82,    68,    69,  1039,  1040,   171,    62,    89,   480,
     171,   620,   171,   484,   485,   153,   171,   155,   489,   157,
     171,   492,   171,   172,   105,   543,   153,   282,   155,   912,
     157,   150,   151,   152,   499,   171,   919,   920,   921,   922,
     923,   512,   172,   173,    68,   126,   127,   171,   519,   171,
     172,   173,   166,   530,   172,   173,  1297,    81,    82,   530,
     171,   947,   143,   171,   172,   146,   171,   148,   171,   172,
     173,   153,   154,   544,   171,   172,   547,   171,   172,   173,
     171,   171,    10,    11,    12,    13,   665,    15,   171,    17,
      49,   609,   147,   171,   171,   119,   120,   665,   122,   665,
     120,   121,   122,   127,   171,   129,   161,   171,   544,   171,
     171,   166,   630,   171,   156,   172,   171,   154,   172,   555,
     638,   902,   558,   164,   165,   166,   167,   168,   171,   170,
     171,   172,    34,    78,    62,  1029,   153,   608,   609,   610,
     162,   171,   171,   171,   155,   154,   154,   174,   172,   620,
     173,  1037,   407,   163,     2,   173,   627,  1043,  1044,   173,
     631,   173,   694,   665,   163,   636,   173,   173,   173,   640,
     641,   642,   643,   644,   645,   646,   173,  1366,   173,   173,
     682,  1120,   173,   173,   173,   154,   657,   173,   665,   173,
     665,   119,   173,   173,   173,   666,   667,   173,    46,  1315,
    1316,  1317,   173,   173,    52,   682,   173,   682,   173,   173,
      58,    59,    60,    61,    62,   163,   173,    65,   173,   147,
     738,   173,   163,   173,   742,    15,    13,   173,    15,   173,
      17,   171,  1126,   161,   173,   173,  1130,  1120,   166,  1480,
    1481,  1482,   172,   171,   166,   716,   723,  1133,   172,   174,
     173,   783,   784,  1478,   171,   156,   153,   173,   729,   791,
     154,   793,   164,   165,   166,   167,   168,   738,   170,   171,
     172,   742,   120,   154,   745,    62,   747,   748,   749,   750,
     751,  1397,   154,  1399,   539,  1401,   154,   154,  1404,  1405,
    1406,   546,   154,   764,   171,   797,   767,   815,   734,   155,
     155,   171,   156,    49,   173,   741,   171,   778,   779,   745,
     913,   747,   748,   749,   750,   751,   781,   176,   171,   574,
     797,   576,   797,   578,   173,   913,   171,   913,   166,   861,
     173,   171,   166,   153,   770,   771,    49,   773,   774,   775,
     776,    81,   171,  1289,   162,   816,   291,   818,   819,  1590,
     162,   822,   162,   201,   825,  1289,   874,   162,  1599,   173,
     147,   832,   171,    10,    10,   897,    10,    11,    12,    13,
      10,   842,    10,    17,   161,    10,    10,   155,   163,   166,
     154,   852,   155,   166,   171,   173,   166,   173,   155,   173,
     155,   166,   174,   153,   173,   171,   173,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    62,   173,
     268,   173,   171,   176,  1310,   273,  1312,   171,   171,   947,
     172,   902,   173,   172,   905,   172,   156,   914,   171,   694,
     171,   912,   154,   173,  1063,   154,   154,   918,   919,   920,
     921,   922,   923,   924,   154,   154,   927,   173,   173,   157,
     166,   309,    10,    11,    12,    13,   937,   171,   155,    17,
    1031,   172,   174,   944,   118,   119,   947,   155,   174,   154,
      10,  1375,  1368,   173,   176,   154,  1372,    49,   959,   171,
     176,   171,   176,   341,   153,   931,   154,   173,  1392,  1393,
    1394,   937,   163,   147,    10,   173,   163,    10,    11,    12,
     163,   163,    10,   173,    62,    10,   155,   161,   173,  1037,
    1139,  1140,   166,    10,    10,  1043,  1044,   171,  1030,   965,
      10,   155,   154,    10,    11,    12,    13,   482,   483,   171,
      17,    15,  1323,   176,   173,  1016,   174,   154,   174,   176,
     173,   171,   173,  1030,   173,  1030,   171,   405,  1029,   173,
    1031,   171,   173,   171,   173,    68,  1037,   512,  1039,  1040,
     155,   119,  1043,  1044,   422,   423,  1470,   173,    81,    82,
     171,   429,  1468,  1477,   162,    62,   162,   162,   162,  1483,
    1484,   171,  1063,   174,   173,   153,    10,   174,   155,   147,
     855,   856,   857,   173,   859,   173,   861,   173,   863,   864,
      22,    23,    24,   161,   173,  1133,   119,   120,   166,   122,
     173,   155,    34,   171,   127,    10,   129,    10,   155,   155,
      10,   155,   171,   173,    15,   173,   173,   154,   174,   154,
    1111,   173,   119,  1537,   492,   173,  1540,   163,   173,  1120,
     163,   163,  1538,   163,   157,  1126,   174,    10,   161,  1130,
      10,   155,  1133,   166,   609,   173,   173,    10,  1139,  1140,
     147,   155,    10,    11,    12,   171,   173,   155,   171,   171,
    1574,   171,   173,   155,   161,   630,    10,   155,   173,   166,
     173,   155,  1138,   638,   542,  1589,   668,  1292,  1366,   324,
     914,  1497,   347,  1111,   552,  1289,   874,   111,   112,   113,
     114,   115,  1324,   117,   118,   119,   347,  1256,   686,   123,
     723,    -1,   427,    -1,    -1,    -1,   130,    -1,    -1,    -1,
      68,   135,   136,    -1,   138,   139,   140,  1298,   142,   143,
      -1,    -1,    -1,    81,    82,    22,    23,    24,    -1,  1121,
     598,    -1,   164,   165,   166,   167,   168,    34,   170,   171,
     172,    -1,    -1,    -1,    -1,   613,    -1,    -1,    -1,    -1,
      -1,  1289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   627,
      -1,   119,   120,    -1,   122,  1256,    -1,    -1,    -1,   127,
      -1,   129,  1310,   738,  1312,    -1,    -1,   742,    -1,    -1,
      -1,    -1,    -1,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    -1,    -1,    -1,    -1,    -1,   665,  1289,    -1,
      -1,    34,    -1,   161,    23,    24,  1297,  1298,   166,    -1,
    1362,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,  1310,
      -1,  1312,   690,   691,   692,   693,    -1,   695,    -1,    -1,
    1368,    -1,  1323,    -1,  1372,    -1,  1292,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1119,    -1,    -1,    -1,    -1,    -1,
     815,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1410,  1411,
      -1,  1413,    -1,  1415,    -1,    -1,    -1,   164,   165,   166,
     167,   168,    -1,   170,   171,   172,    -1,  1368,    -1,    -1,
    1432,  1372,    -1,    -1,  1375,    -1,   310,   311,    -1,    -1,
      -1,  1382,    -1,    -1,   318,    -1,    -1,    -1,    -1,   767,
      -1,  1392,  1393,  1394,    -1,    -1,    -1,    -1,    -1,   874,
    1366,  1463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   156,  1121,   158,   159,   160,   161,    -1,
    1468,   164,   165,   166,   167,   168,   804,   170,   171,   172,
      -1,    -1,    -1,    -1,    -1,   164,   165,   166,   167,   168,
      -1,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1355,   832,  1357,  1358,  1359,  1360,  1361,
      -1,  1363,    -1,    -1,   842,    -1,    -1,  1468,   846,  1470,
      -1,    -1,   947,    -1,    -1,    -1,  1477,    -1,    -1,  1480,
    1481,  1482,  1483,  1484,    23,    24,   864,    -1,    -1,    -1,
    1538,    -1,    -1,    -1,    64,    34,  1497,   875,   876,   877,
     878,   879,   880,   881,   882,   883,   884,   885,   886,   887,
     888,   889,   890,   891,   892,   893,   894,   895,    88,    -1,
     898,  1583,  1584,  1585,    -1,  1587,    20,    21,    22,    23,
      24,    -1,    -1,    -1,    -1,    -1,  1537,  1538,   108,  1540,
      34,  1443,  1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,
    1452,  1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,  1461,
      -1,   131,  1037,    -1,    -1,    -1,   944,    -1,  1043,  1044,
      -1,   141,    -1,  1574,    -1,    -1,   510,  1362,    -1,    -1,
      -1,   959,    -1,   517,    -1,    -1,    -1,    -1,  1589,  1590,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1599,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1512,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,    -1,
     190,    -1,    -1,    -1,    -1,   164,   165,   166,   167,   168,
      -1,   170,   171,   172,    -1,    -1,  1014,    -1,  1016,    -1,
    1018,    -1,  1427,  1428,  1429,  1430,    -1,  1432,  1355,  1434,
    1357,  1358,  1359,  1360,  1361,    -1,  1363,    -1,  1133,    -1,
      -1,    -1,    -1,    -1,  1566,    -1,    -1,  1569,   238,   239,
     164,   165,   166,   167,   168,    -1,   170,   171,   172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1070,    -1,    -1,    -1,   266,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    10,    -1,    -1,    -1,    -1,
      15,    -1,    -1,   303,    -1,   305,  1443,  1444,  1445,  1446,
    1447,  1448,  1449,  1450,  1451,  1452,  1453,  1454,  1455,  1456,
    1457,  1458,  1459,  1460,  1461,   325,    -1,   327,   328,   329,
     330,   331,   332,    -1,    -1,    -1,    51,    -1,    -1,    -1,
     704,   705,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,
     350,    66,    -1,    -1,    -1,    -1,    71,    -1,    -1,   359,
      -1,    -1,   362,    -1,    -1,    80,    81,    -1,    -1,    -1,
     370,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,  1289,    -1,    -1,    -1,    34,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,    24,   114,
      -1,    -1,   117,    -1,   119,  1310,    -1,  1312,    34,   124,
     410,    -1,    -1,   128,    -1,   415,   131,    -1,    -1,    -1,
      -1,   136,    -1,    -1,   139,    -1,    -1,   427,    -1,    -1,
      -1,    -1,  1569,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,   164,
     165,    -1,    -1,    -1,   169,    -1,   171,    -1,    -1,    -1,
     175,    -1,    -1,  1368,    -1,   465,    -1,  1372,    -1,    -1,
      -1,    -1,    -1,    -1,  1282,    -1,    -1,    -1,    -1,    -1,
      -1,   481,    18,    19,    20,    21,    22,    23,    24,     3,
       4,     5,     6,   493,     8,     9,    10,    -1,    34,    -1,
      -1,    -1,    -1,   503,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   511,    -1,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,  1331,   170,   171,   172,    -1,  1336,    -1,
      -1,    -1,   158,   159,   160,   161,    -1,    51,   164,   165,
     166,   167,   168,    -1,   170,   171,   172,    -1,    -1,   913,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    71,   558,    -1,
      -1,    -1,    -1,  1468,    -1,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,  1382,    -1,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,   119,    -1,   607,    -1,    -1,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,     3,     4,
       5,     6,   136,     8,     9,    10,    11,    12,   164,   165,
     166,   167,   168,  1538,   170,   171,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     650,    -1,    -1,    -1,    -1,   169,  1464,   171,   172,    -1,
      -1,   175,    -1,    -1,    -1,    -1,    51,    52,   668,    -1,
      55,    -1,    57,    58,    59,    60,    61,    62,    -1,    -1,
      -1,    66,    67,    -1,    -1,    70,    71,    -1,    -1,    74,
      -1,    -1,    -1,    -1,    -1,    80,    81,    82,    -1,    -1,
      -1,    86,    -1,    -1,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,    -1,    -1,    -1,    -1,    -1,    -1,   727,    -1,   114,
      -1,   116,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,
      -1,   126,   127,   128,    -1,    -1,   131,   132,    -1,    -1,
      -1,   136,    -1,    -1,   139,   140,   141,   142,   143,    -1,
     760,   146,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,   171,   172,    -1,    -1,
     175,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   798,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    -1,    -1,   896,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
      -1,    -1,    -1,    -1,    -1,   915,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,    -1,    -1,    -1,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1034,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    -1,    -1,    -1,  1065,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,   159,   160,   161,    -1,    -1,   164,   165,
     166,   167,   168,    -1,   170,   171,   172,   105,  1138,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,    -1,    -1,    -1,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,    -1,   175,   176,     3,
       4,     5,     6,    -1,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    34,
      -1,    55,    -1,    57,    58,    59,    60,    61,    -1,    -1,
      -1,    -1,    66,    67,    -1,    -1,    70,    71,    -1,    -1,
      74,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,    -1,
      -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    -1,    -1,    -1,    -1,    -1,  1318,    -1,
     114,    -1,   116,   117,    -1,   119,    -1,    -1,    -1,    -1,
     124,    -1,   126,   127,   128,    -1,    -1,   131,   132,    -1,
      -1,    -1,   136,    -1,    -1,   139,   140,   141,   142,   143,
      -1,    -1,   146,    -1,   148,     3,     4,     5,     6,    -1,
       8,     9,    10,    11,    -1,    -1,    -1,   161,    -1,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,   171,   172,    -1,
      -1,   175,    -1,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,    -1,   170,   171,   172,    -1,    -1,
      -1,   176,    -1,    51,    -1,    -1,    -1,    55,    -1,    57,
      58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,    -1,
      -1,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    -1,
      -1,    -1,  1462,    -1,    -1,    -1,   114,    -1,   116,   117,
      -1,   119,    -1,    -1,    -1,    -1,   124,    -1,   126,   127,
     128,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,    -1,
      -1,   139,    -1,    -1,    -1,   143,     3,     4,     5,     6,
     148,     8,     9,    10,    11,   153,    -1,    -1,    15,  1509,
      -1,    -1,    -1,   161,    -1,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,   171,   172,    -1,    -1,   175,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    34,    -1,    55,    -1,
      57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,
      -1,    -1,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,
     117,    -1,   119,    -1,    -1,    -1,    -1,   124,    -1,   126,
     127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,
      -1,    -1,   139,    -1,    -1,    -1,   143,     3,     4,     5,
       6,   148,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   161,    -1,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,   171,   172,    -1,    -1,   175,    -1,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,    -1,   170,   171,   172,    51,    -1,    -1,   176,    55,
      -1,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,
      86,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,
     116,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,    -1,
     126,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,
     136,    -1,    -1,   139,    -1,    -1,    -1,   143,     3,     4,
       5,     6,   148,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,   171,   172,   173,    -1,   175,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    34,    -1,
      55,    -1,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    81,    82,    -1,    -1,
      -1,    86,    -1,    -1,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
      -1,   116,   117,    -1,   119,    -1,    -1,    -1,    -1,   124,
      -1,   126,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,
      -1,   136,    -1,    -1,   139,    -1,    -1,    -1,   143,     3,
       4,     5,     6,   148,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,   171,   172,    -1,    -1,
     175,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,    -1,   170,   171,   172,    51,    52,    -1,
     176,    55,    -1,    57,    58,    59,    60,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    70,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,    -1,
      -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     114,    -1,   116,   117,    -1,   119,    -1,    -1,    -1,    -1,
     124,    -1,   126,   127,   128,    -1,    -1,   131,    -1,    -1,
      -1,    -1,   136,    -1,    -1,   139,    -1,    -1,    -1,   143,
       3,     4,     5,     6,   148,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,   171,   172,    -1,
      -1,   175,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,
      34,    -1,    55,    -1,    57,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
      -1,    -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   114,    -1,   116,   117,    -1,   119,    -1,    -1,    -1,
      -1,   124,    -1,   126,   127,   128,    -1,    -1,   131,    -1,
      -1,    -1,    -1,   136,    -1,    -1,   139,    -1,    -1,    -1,
     143,     3,     4,     5,     6,   148,     8,     9,    10,    11,
     153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,
      -1,   164,   165,   166,    -1,    -1,   169,    -1,   171,   172,
      -1,   155,   175,    -1,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,    -1,   170,   171,   172,    51,
      -1,    -1,    -1,    55,    -1,    57,    58,    59,    60,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,
      82,    -1,    -1,    -1,    86,    -1,    -1,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   114,    -1,   116,   117,    -1,   119,    -1,    -1,
      -1,    -1,   124,    -1,   126,   127,   128,    -1,    -1,   131,
      -1,    -1,    -1,    -1,   136,    -1,    -1,   139,    -1,    -1,
      -1,   143,     3,     4,     5,     6,   148,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,
      -1,    -1,   164,   165,   166,    -1,    -1,   169,    -1,   171,
     172,   173,    -1,   175,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    34,    -1,    55,    -1,    57,    58,    59,    60,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      81,    82,    -1,    -1,    -1,    86,    -1,    -1,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   114,    -1,   116,   117,    -1,   119,    -1,
      -1,    -1,    -1,   124,    -1,   126,   127,   128,    -1,    -1,
     131,    -1,    -1,    -1,    -1,   136,    -1,    -1,   139,    -1,
      -1,    -1,   143,     3,     4,     5,     6,   148,     8,     9,
      10,    11,   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     161,    -1,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
     171,   172,   154,    -1,   175,    -1,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,    -1,   170,   171,
     172,    51,    -1,    -1,    -1,    55,    -1,    57,    58,    59,
      60,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   114,    -1,   116,   117,    -1,   119,
      -1,    -1,    -1,    -1,   124,    -1,   126,   127,   128,    -1,
      -1,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,   139,
      -1,    -1,    -1,   143,     3,     4,     5,     6,   148,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   161,    -1,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,   171,   172,   173,    -1,   175,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    34,    -1,    55,    -1,    57,    58,
      59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   114,    -1,   116,   117,    -1,
     119,    -1,    -1,    -1,    -1,   124,    -1,   126,   127,   128,
      -1,    -1,   131,    -1,    -1,    -1,    -1,   136,    -1,    -1,
     139,    -1,    -1,    -1,   143,     3,     4,     5,     6,   148,
       8,     9,    10,    11,    -1,    18,    19,    20,    21,    22,
      23,    24,   161,    -1,    -1,   164,   165,   166,    -1,    -1,
     169,    34,   171,   172,    -1,    -1,   175,    -1,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,    -1,
     170,   171,   172,    51,    -1,    -1,    -1,    55,    -1,    57,
      58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,    -1,
      -1,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,   117,
      -1,   119,    -1,    -1,    -1,    -1,   124,    -1,   126,   127,
     128,    -1,    -1,   131,    -1,    10,    11,    12,   136,    -1,
      -1,   139,    -1,    -1,    -1,   143,     3,     4,     5,     6,
     148,     8,     9,    10,    11,    12,    -1,    -1,    15,   162,
     163,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
      -1,   169,    -1,   171,   172,    -1,    -1,   175,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    48,    -1,    68,    51,    52,    34,    -1,    55,    -1,
      57,    58,    59,    60,    61,    62,    81,    82,    -1,    66,
      67,    -1,    -1,    70,    71,    -1,    -1,    74,    -1,    -1,
      -1,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,   105,    -1,
      -1,    -1,   127,    -1,   129,    -1,    -1,   114,    -1,    -1,
     117,    -1,   119,    -1,    -1,    -1,   123,   124,    -1,   126,
     127,   128,    -1,    -1,   131,   132,    -1,    -1,    -1,   136,
      -1,   156,   139,   140,   141,   142,   143,    -1,    -1,   146,
      -1,   148,    -1,     3,     4,     5,     6,    -1,     8,     9,
      10,    11,    12,    -1,   161,    15,    -1,   164,   165,    -1,
      -1,    -1,   169,    -1,   171,    -1,   154,    -1,   175,    -1,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,    -1,   170,   171,   172,   173,    -1,    -1,    48,    -1,
      -1,    51,    52,    -1,    -1,    55,    -1,    57,    58,    59,
      60,    61,    62,    -1,    -1,    -1,    66,    67,    -1,    -1,
      70,    71,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,
      80,    81,    82,    -1,    20,    21,    22,    23,    24,    89,
       3,     4,     5,     6,    -1,     8,     9,    10,    34,    -1,
      -1,    -1,    15,    -1,    -1,   105,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   114,    -1,    -1,   117,    -1,   119,
      -1,    -1,    -1,   123,   124,    -1,   126,   127,   128,    -1,
      -1,   131,   132,    -1,    -1,    -1,   136,    -1,    51,   139,
     140,   141,   142,   143,    -1,    -1,   146,    -1,   148,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    71,    -1,
      -1,   161,    -1,    -1,   164,   165,    -1,    80,    81,   169,
      -1,   171,    -1,    86,    -1,   175,    -1,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,     3,     4,     5,     6,    -1,     8,     9,    10,
      -1,    -1,    -1,    -1,   117,    -1,   119,    -1,    -1,    -1,
      -1,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,    -1,
      -1,    -1,    -1,   136,    -1,    -1,   162,   163,   164,   165,
     166,   167,   168,    -1,   170,   171,   172,    -1,    -1,    -1,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,
      -1,   164,   165,   166,    -1,    66,   169,    -1,   171,   172,
      71,    -1,   175,    -1,    -1,    -1,    10,    11,    12,    80,
      81,    -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    -1,    -1,    -1,   117,    -1,   119,    -1,
      -1,    -1,    34,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,    -1,    -1,    -1,    68,   136,    -1,    -1,    -1,    55,
      -1,    57,    58,    59,    60,    -1,    -1,    81,    82,    -1,
      -1,    -1,    -1,    -1,    10,    11,    12,    -1,    -1,    -1,
     161,    -1,    -1,   164,   165,   166,     6,    -1,   169,    -1,
     171,   172,    -1,    89,   175,    -1,    16,    17,    18,    19,
      20,    21,    22,    23,    24,   119,   120,    -1,   122,   105,
      -1,    -1,    -1,   127,    34,   129,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
     126,   127,    68,    -1,    -1,    -1,    -1,    -1,    -1,   153,
      -1,    -1,    -1,    -1,    -1,    81,    82,   143,    -1,    69,
      -1,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,    10,
      11,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,    -1,   170,   171,
     172,   173,    -1,   119,   120,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,   129,   114,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    55,    -1,    57,    58,    59,    60,
      61,    -1,    -1,    -1,    10,    11,    67,   153,    -1,    70,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    -1,   154,    -1,    -1,   157,    89,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
      -1,   171,   172,    -1,   105,   175,    52,    -1,    -1,    55,
      -1,    57,    58,    59,    60,    61,    -1,   118,    -1,    -1,
      -1,    67,    -1,    -1,    70,   126,   127,    -1,    74,    -1,
      11,   132,    -1,    -1,    -1,    -1,    82,    -1,    -1,   140,
     141,   142,   143,    89,    -1,   146,    -1,   148,    -1,    -1,
      -1,    -1,   153,    -1,    -1,    -1,    10,    11,    -1,   105,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   169,    -1,
      -1,    -1,   118,    -1,    55,    -1,    57,    58,    59,    60,
     126,   127,    -1,    -1,    -1,    -1,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   140,   141,   142,   143,    52,    -1,
     146,    55,   148,    57,    58,    59,    60,    61,    89,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,
      74,    -1,    -1,   169,   105,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    16,    17,    18,    19,
      20,    21,    22,    23,    24,   126,   127,    -1,    -1,    -1,
      -1,   105,    -1,    -1,    34,    -1,    10,    11,    12,    -1,
      -1,    15,   143,    -1,   118,    -1,    -1,   148,    -1,    -1,
      -1,    -1,   126,   127,    -1,    -1,    -1,    -1,   132,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   140,   141,   142,   143,
      -1,    -1,   146,    -1,   148,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    68,   169,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    -1,    -1,    81,    82,    -1,
      -1,    -1,    -1,    -1,    34,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    -1,    -1,   119,   120,    -1,   122,    -1,
      -1,    -1,    34,   127,    -1,   129,    -1,    -1,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,    -1,
     170,   171,   172,   173,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    34,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
     171,   172,   173,    -1,    -1,    -1,    -1,    -1,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,    -1,
     170,   171,   172,   173,    -1,    -1,    -1,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
     171,   172,   173,    -1,    -1,    -1,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,    -1,   170,   171,
     172,   173,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    -1,    -1,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,    -1,   170,   171,
     172,   173,    -1,    -1,    -1,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,    -1,   170,   171,   172,
     173,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,    -1,   170,   171,   172,   173,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,    -1,   170,   171,   172,   173,    -1,
     156,    -1,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   170,   171,   172,    -1,    -1,   156,
      -1,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,    -1,   170,   171,   172,    -1,    -1,    -1,    -1,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,    -1,   170,   171,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,    50,    -1,    -1,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    -1,    -1,    -1,
      -1,    88,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,    -1,   170,   171,   172,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,   122,   123,    -1,    -1,    -1,
      -1,    -1,   129,   130,    11,    12,   133,   134,    15,    -1,
      17,   138,    -1,    -1,    -1,    -1,    -1,   144,   145,    -1,
     147,    18,    19,    20,    21,    22,    23,    24,   155,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    10,    11,
      12,    48,    -1,    -1,    -1,    52,    -1,    -1,    55,    -1,
      57,    58,    59,    60,    61,    62,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    70,    -1,    -1,    -1,    74,    18,    19,
      20,    21,    22,    23,    24,    82,    48,    -1,    50,    -1,
      -1,    -1,    89,    -1,    34,    18,    19,    20,    21,    22,
      23,    24,    -1,    -1,    -1,    -1,    68,    -1,   105,    -1,
      -1,    34,    18,    19,    20,    21,    22,    23,    24,    81,
      82,    -1,    -1,    -1,    -1,    -1,   123,    -1,    34,   126,
     127,    -1,    -1,    -1,    -1,   132,    18,    19,    20,    21,
      22,    23,    24,   140,   141,   142,   143,    -1,    -1,   146,
      -1,   148,    34,    -1,    -1,    -1,    -1,   119,   120,    -1,
     122,    -1,    -1,    -1,   161,   127,    -1,   129,    -1,   166,
      -1,    -1,    -1,   160,   161,   162,   163,   164,   165,   166,
     167,   168,    -1,   170,   171,   172,    -1,    -1,    -1,    -1,
      -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,
      11,    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   161,   162,   163,   164,   165,   166,   167,   168,    -1,
     170,   171,   172,    -1,    -1,    -1,   159,   160,   161,    -1,
      -1,   164,   165,   166,   167,   168,    17,   170,   171,   172,
      -1,    -1,    -1,    -1,   160,   161,    17,    68,   164,   165,
     166,   167,   168,    34,   170,   171,   172,    -1,    -1,    -1,
      81,    82,    -1,    -1,    -1,    -1,    -1,    48,    -1,   161,
      -1,    -1,   164,   165,   166,   167,   168,    48,   170,   171,
     172,    62,    -1,    64,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    -1,    64,    -1,    -1,    -1,    -1,   119,   120,
      81,   122,    -1,    -1,    -1,    -1,   127,    -1,   129,    -1,
      81,    -1,    -1,     6,    -1,    -1,    10,    11,    12,   140,
      -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,
      -1,   112,    -1,    -1,   115,   116,    -1,    -1,   119,    -1,
      -1,   112,    -1,    -1,   115,   116,    -1,    -1,   119,    -1,
      -1,    -1,     6,    -1,   135,    48,    -1,    50,    -1,    -1,
      -1,    54,    -1,    -1,   135,    -1,   147,    -1,    -1,    62,
      63,    64,    65,    -1,    68,    -1,   147,    -1,    -1,    -1,
     161,    -1,    75,    76,    77,    78,    -1,    81,    82,    -1,
     161,    -1,    -1,    -1,    48,    88,    50,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,
      64,    65,    10,    11,    12,    -1,    10,    11,    12,   112,
      -1,    75,    76,    77,    78,   119,   120,   121,   122,    -1,
     123,    -1,    -1,   127,    88,   129,   129,    -1,    -1,    -1,
     133,   134,    -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,
      -1,   145,   145,    -1,   147,    -1,    -1,    -1,   112,    -1,
      -1,    55,    -1,    57,    58,    59,    60,    61,    62,   123,
      68,    -1,    10,    11,    12,   129,    70,    -1,    -1,    -1,
     134,    -1,    -1,    81,    82,    -1,    -1,    -1,    82,    -1,
      -1,   145,    -1,   147,    -1,    89,    -1,    -1,    -1,    -1,
      55,    -1,    57,    58,    59,    60,    -1,    -1,    10,    11,
      12,   105,    -1,    -1,    11,    12,    -1,    -1,    15,    -1,
      -1,   119,   120,    -1,   122,    -1,    -1,    -1,    -1,   127,
      68,   129,   126,   127,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   140,    81,    82,    -1,   140,   145,    -1,   143,
     105,    48,   146,    -1,   148,    52,    -1,    -1,    55,    -1,
      57,    58,    59,    60,    61,    62,    68,    -1,    -1,    -1,
      67,   126,   127,    70,    -1,    -1,    -1,    74,    -1,    81,
      82,   119,   120,    -1,   122,    82,    -1,    -1,   143,   127,
      -1,   129,    89,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   140,    -1,    -1,    -1,    -1,   145,   105,    -1,
      -1,    11,    12,    -1,    -1,    15,   171,   119,   120,    -1,
     122,    -1,    -1,    -1,    -1,   127,   123,   129,    -1,   126,
     127,    -1,    -1,    -1,    -1,   132,    -1,    -1,    -1,    -1,
      -1,    -1,   144,   140,   141,   142,   143,    -1,    48,   146,
      -1,   148,    52,    11,    12,    55,    -1,    57,    58,    59,
      60,    61,    62,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      70,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      48,    -1,    -1,    -1,    52,    -1,    -1,    55,    -1,    57,
      58,    59,    60,    61,    62,   105,    -1,    -1,    -1,    67,
      -1,    -1,    70,    -1,    -1,    -1,    74,    -1,    -1,    -1,
      -1,    -1,    -1,   123,    82,    -1,   126,   127,    -1,    -1,
      -1,    89,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     140,   141,   142,   143,    -1,    -1,   146,   105,   148,    -1,
      11,    12,    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      57,    58,    59,    60,    -1,   123,    -1,    -1,   126,   127,
      -1,    -1,    -1,    70,   132,    -1,    11,    12,    -1,    -1,
      -1,    -1,   140,   141,   142,   143,    -1,    -1,   146,    -1,
     148,    52,    89,    -1,    55,    -1,    57,    58,    59,    60,
      61,    62,    -1,    -1,    -1,    -1,    67,    -1,   105,    70,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    52,    -1,    -1,
      55,    82,    57,    58,    59,    60,    61,    -1,    89,   126,
     127,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    74,
      -1,    -1,    -1,    -1,   105,    -1,   143,    82,    -1,    -1,
      -1,   148,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    10,    11,    12,    -1,   126,   127,    -1,    11,    12,
     105,   132,    -1,    -1,   171,    -1,    -1,    -1,    -1,   140,
     141,   142,   143,    -1,    -1,   146,    -1,   148,   123,    -1,
      -1,   126,   127,    -1,    11,    -1,    -1,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   140,   141,   142,   143,    52,
      -1,   146,    55,   148,    57,    58,    59,    60,    61,    68,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
      -1,    74,    81,    82,    -1,    52,    -1,    -1,    55,    82,
      57,    58,    59,    60,    61,    62,    89,    -1,    -1,    -1,
      67,    -1,    -1,    70,    -1,    -1,    -1,    74,    -1,    -1,
      -1,    -1,   105,    -1,    -1,    82,    -1,    -1,    -1,    -1,
     119,   120,    89,   122,    -1,    -1,    -1,    -1,   127,    -1,
     129,    -1,    -1,   126,   127,    -1,    11,    -1,   105,   132,
      -1,   140,    -1,    -1,    -1,    -1,    -1,   140,   141,   142,
     143,    -1,    -1,   146,    -1,   148,    -1,    -1,    -1,   126,
     127,    -1,    11,    -1,    -1,   132,    -1,    -1,    -1,    -1,
      10,    11,    12,   140,   141,   142,   143,    52,    -1,   146,
      55,   148,    57,    58,    59,    60,    61,    62,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    74,
      -1,    -1,    -1,    52,    -1,    -1,    55,    82,    57,    58,
      59,    60,    61,    -1,    89,    -1,    -1,    -1,    67,    -1,
      -1,    70,    -1,    -1,    -1,    74,    -1,    -1,    68,    -1,
     105,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126,   127,    -1,    11,    -1,   105,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   140,   141,   142,   143,    -1,
      -1,   146,    -1,   148,    -1,    -1,    -1,   126,   127,   119,
     120,    -1,   122,   132,    -1,    -1,    -1,   127,    -1,   129,
      -1,   140,   141,   142,   143,    52,    -1,   146,    55,   148,
      57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    70,    -1,    -1,    -1,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    89,    -1,    -1,    -1,    48,    -1,    50,    -1,
      -1,    53,    54,    -1,    -1,    -1,    -1,    -1,   105,    -1,
      62,    63,    64,    65,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    75,    76,    77,    78,    79,    -1,   126,
     127,    83,    -1,    -1,    -1,   132,    88,    -1,    -1,    -1,
      -1,    -1,    -1,   140,   141,   142,   143,    -1,    -1,   146,
      -1,   148,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
     122,   123,    -1,    -1,    -1,    -1,    -1,   129,   130,    -1,
      -1,   133,   134,    48,    -1,    50,   138,    -1,    53,    54,
      -1,    -1,   144,   145,    -1,   147,    -1,    62,    63,    64,
      65,    -1,    -1,   155,    -1,    -1,    -1,    -1,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    -1,
      -1,    -1,   174,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,   122,   123,    -1,
      -1,    -1,    -1,    -1,   129,   130,    -1,    -1,   133,   134,
      48,    -1,    50,   138,    -1,    53,    54,    -1,    -1,   144,
     145,    -1,   147,    -1,    62,    63,    64,    65,    -1,    -1,
     155,    -1,    -1,    -1,    -1,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    -1,    -1,    -1,   174,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
      -1,   129,   130,    -1,    -1,   133,   134,    48,    -1,    50,
     138,    -1,    53,    54,    -1,    -1,   144,   145,    -1,   147,
      -1,    62,    63,    64,    65,    -1,    -1,   155,    -1,    -1,
      -1,    -1,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    -1,    -1,    -1,   174,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,   129,   130,
      -1,    -1,   133,   134,    48,    -1,    50,   138,    -1,    53,
      54,    -1,    -1,   144,   145,    -1,   147,    -1,    62,    63,
      64,    65,    -1,    -1,   155,    -1,    -1,    -1,    -1,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      -1,    -1,    -1,   174,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,    -1,   129,   130,    -1,    -1,   133,
     134,    48,    -1,    50,   138,    -1,    53,    54,    -1,    -1,
     144,   145,    -1,   147,    -1,    62,    63,    64,    65,    -1,
      -1,   155,    -1,    -1,    -1,    -1,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    -1,    -1,    -1,
     174,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,   122,   123,    -1,    -1,    -1,
      -1,    -1,   129,   130,    -1,    -1,   133,   134,    48,    -1,
      50,   138,    -1,    53,    54,    -1,    -1,   144,   145,    -1,
     147,    -1,    62,    63,    64,    65,    -1,    -1,   155,    -1,
      -1,    -1,    -1,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    -1,    -1,    -1,   174,    88,    -1,
      10,    11,    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    10,    11,    12,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,   129,
     130,    -1,    -1,   133,   134,    -1,    -1,    -1,   138,    48,
      -1,    50,    -1,    -1,   144,   145,    -1,   147,    68,    -1,
      -1,    -1,    -1,    -1,    74,   155,    -1,    -1,    -1,    68,
      -1,    81,    82,    -1,    55,    -1,    57,    58,    59,    60,
      -1,    -1,    81,    82,   174,    -1,    -1,    -1,    55,    -1,
      57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,    89,   119,
     120,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,   129,
     119,   120,    89,   122,   105,    -1,    -1,    -1,   127,    -1,
     129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,    -1,
      -1,    -1,    -1,    -1,    -1,   126,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
     127,    -1,   143,    -1,    -1,    -1,    -1,   148,    48,    -1,
      50,    -1,    -1,    -1,    54,    -1,   143,    -1,    -1,    -1,
      -1,   148,    62,    63,    64,    65,    -1,    -1,    -1,    -1,
     171,    -1,    -1,    -1,    -1,    75,    76,    77,    78,    -1,
      -1,    -1,    -1,    83,   171,    -1,    -1,    -1,    88,    -1,
      -1,    48,    -1,    50,    -1,    -1,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    -1,
      -1,    -1,   112,    -1,    -1,    -1,    73,    -1,    75,    76,
      77,    78,    79,   123,    -1,    -1,    83,    -1,    -1,   129,
      -1,    88,    -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   144,   145,    -1,   147,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,
      -1,    -1,   162,   120,   121,   122,   123,    -1,    48,    -1,
      50,    -1,   129,   130,    54,    -1,   133,   134,    -1,    -1,
      -1,   138,    62,    63,    64,    65,    -1,   144,   145,    -1,
     147,    -1,    -1,    -1,    -1,    75,    76,    77,    78,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    -1,    48,    88,    50,
      -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,    -1,    75,    76,    77,    78,    -1,    -1,
      -1,    -1,    -1,   123,    -1,    -1,    48,    88,    50,   129,
      -1,    -1,    54,   133,   134,    -1,    -1,    -1,    -1,    -1,
      62,    63,    64,    65,   144,   145,    -1,   147,    -1,    -1,
      -1,   112,   113,    75,    76,    77,    78,    -1,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    88,    -1,   129,    -1,
      -1,    -1,    55,   134,    57,    58,    59,    60,    -1,    -1,
      -1,    -1,    -1,    -1,   145,    -1,   147,    70,    -1,    -1,
     112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   123,    -1,    -1,    -1,    -1,    89,   129,    -1,    -1,
      -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   145,    -1,   147,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   126,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     143,    -1,    -1,    -1,    -1,   148
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,   150,   151,   152,   178,   179,   287,     3,     4,     5,
       6,     8,     9,    10,    11,    51,    55,    57,    58,    59,
      60,    66,    70,    71,    80,    81,    82,    86,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   114,   116,   117,   119,   124,
     126,   127,   128,   131,   136,   139,   143,   148,   161,   164,
     165,   166,   169,   171,   172,   175,   277,   278,   286,    11,
      12,    52,    55,    57,    58,    59,    60,    61,    62,    67,
      70,    74,    82,    89,   105,   126,   127,   132,   140,   141,
     142,   143,   146,   148,   239,   240,   244,   246,   248,   254,
     255,   259,   260,   265,   266,   267,   268,     0,    48,    50,
      53,    54,    62,    63,    64,    65,    73,    75,    76,    77,
      78,    79,    83,    88,   106,   107,   108,   109,   110,   111,
     112,   113,   120,   121,   122,   123,   129,   130,   133,   134,
     138,   144,   145,   147,   155,   182,   184,   185,   187,   190,
     210,   261,   264,   287,   153,   171,   171,   171,   171,   171,
     171,   171,   162,   171,   162,   171,   171,   171,   171,   171,
     171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
     171,   171,   171,   171,    11,    52,    67,   140,   141,   242,
     259,   260,   265,   277,   162,   171,   171,    15,   171,   277,
     162,   171,   171,   171,   277,   277,   277,   277,   277,    11,
      55,    57,    58,    59,    60,    70,    82,    89,   105,   126,
     127,   143,   148,   244,   275,   277,    10,    11,    12,    68,
      81,    82,   119,   120,   122,   127,   129,   157,   161,   166,
     281,   282,   284,   287,   277,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    34,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   170,   171,   172,     6,
       8,   239,   240,   171,    61,   132,    70,   105,   266,   266,
     266,   284,   171,   266,    13,    15,    17,    62,   147,   161,
     166,   171,   237,   238,   287,   238,   153,    10,    11,    12,
     119,   156,   285,   245,   287,   144,   188,   189,   284,   171,
      76,    88,   187,   187,   187,   187,   187,   187,     6,   187,
     210,   187,   277,   156,   186,   113,   187,   171,   171,   171,
     171,   171,   171,   187,   153,   284,   156,   156,   156,   187,
     187,   171,   185,   187,   190,   211,   187,   187,   194,    74,
     113,   284,   187,   187,    10,    11,    52,    67,   118,   140,
     141,   153,   169,   197,   201,   241,   243,   246,   248,   254,
     259,   260,   265,   274,   275,   287,   274,   244,   274,   274,
     274,   274,   274,   244,   274,   244,   274,   244,   274,   244,
     244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
     244,   244,   244,   244,   274,   171,   284,   171,   171,   284,
     245,   173,   244,   274,   274,   171,   244,   244,   244,   277,
     274,   274,   173,   154,   173,   284,   284,   154,   176,   157,
     227,   287,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   284,   173,   275,   277,   238,   238,    52,
     277,   244,   166,   284,    13,    15,    17,    62,   147,   161,
     166,   237,   287,   237,   238,   237,   238,   237,   237,    15,
      17,    48,    62,   123,   161,   166,   222,   223,   232,   239,
     240,   287,   172,   257,   258,   287,    11,   256,   266,   156,
      10,    11,    12,    48,    50,   119,   153,   284,   285,   284,
      49,   154,   171,    11,   241,   277,   187,   173,   184,   153,
     284,   284,   284,   284,   284,   284,   284,   179,   153,   277,
     162,    10,    11,   201,   241,   243,   284,   284,   155,   157,
     171,   171,   171,    62,   239,   284,   171,   183,   284,   192,
     153,   155,   157,   229,   155,   191,   284,   285,   245,   174,
     173,   173,   173,   173,   173,   173,   173,   163,   173,   163,
     173,   173,   173,   173,   154,   173,   154,   173,   154,   173,
     173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
     277,   244,   274,   284,   163,   173,   173,   284,   173,   163,
     173,   173,   173,   173,   277,   277,    15,   161,   282,   171,
     207,   287,   277,   156,   173,   176,   173,   173,   173,   237,
     166,   284,   237,   237,   237,   237,   237,   172,   237,   188,
     123,   239,   240,   232,   237,   237,   173,    15,   154,    13,
      17,    62,   147,   161,   166,   171,   235,   285,   287,    13,
      15,    17,    62,   147,   161,   166,   171,   236,   273,   277,
     287,   284,   174,   256,   188,   171,   247,   249,   156,   187,
     188,     3,     4,     5,     9,    10,    15,    51,    66,    71,
      80,    81,   114,   117,   119,   124,   128,   131,   136,   139,
     161,   164,   165,   169,   171,   175,   224,   225,   232,   233,
     279,   280,   286,   287,   173,   173,   187,   179,   153,   154,
     154,   154,   154,   154,   154,   174,   262,   154,   173,    10,
      11,    12,    61,    62,   140,   212,   213,   214,   215,   216,
     265,   287,   171,   229,   195,   155,   155,   244,   198,    10,
      13,   166,   200,    52,   277,   239,    13,    17,    62,   147,
     161,   166,   234,   285,   287,   244,   179,   171,   153,   155,
     156,   157,   228,   269,   270,    68,    69,   153,   277,    13,
      17,    62,   118,   147,   161,   166,   171,   193,   217,   219,
     285,   156,   284,   171,   171,   244,   244,   244,   173,   173,
     173,   171,   173,   171,   227,   222,    17,    34,    48,    62,
      64,    81,   112,   115,   116,   119,   135,   147,   161,   220,
     287,   277,   237,   273,   173,    49,   239,   240,   235,   236,
     173,   173,   207,    15,   232,   166,   235,   235,   235,   235,
     235,   235,   172,   227,   166,   284,   236,   236,   236,   236,
     236,   236,   172,   227,   176,   154,   157,    49,   241,   277,
     179,    81,   250,   287,   189,   171,   162,   162,   242,   162,
      15,   171,   279,   162,   171,   277,   277,   277,   277,   244,
     275,   277,   173,    15,   154,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    34,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   170,   171,   172,   187,
     187,   174,   263,    10,    10,    10,    10,    10,    10,   179,
     286,   155,   216,   163,   154,    15,   284,    13,    17,    62,
     147,   161,   166,   171,   235,   236,   196,   219,   155,   222,
     173,   166,   217,   222,   173,   173,   234,   166,   234,   234,
     234,   234,   234,   171,   172,   173,   174,   202,   269,   180,
     181,   284,    68,    69,   174,   271,   287,   155,   155,   153,
     230,   231,   277,   287,   155,   166,   217,   217,     6,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    34,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    69,   114,   154,   157,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   171,   172,   175,   208,
     217,   217,   217,   217,   156,   171,   172,   220,   157,   227,
     229,   256,   275,   275,   173,   173,   173,   275,   275,   173,
      62,   242,   188,   277,   171,   153,   176,   171,   232,   235,
     236,   227,   227,   171,   171,   220,   235,   173,   273,   236,
     173,   273,   277,   173,   173,   174,   156,   251,   252,   287,
     244,   244,   244,   171,   244,   171,   244,   244,   244,   277,
     173,   173,    15,   233,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   284,   173,   275,   277,   179,
     154,   154,   173,   154,   221,   287,   154,   154,   154,   174,
     173,   235,   236,   185,   190,   209,   210,   215,   284,   157,
     166,   157,   226,   287,   227,   229,   173,   171,   217,   173,
     173,   171,   234,   205,   273,   222,   174,   153,   154,   153,
     171,   155,   155,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    74,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    87,    88,    89,   105,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   175,   176,   272,
     230,   174,   154,   217,    10,   173,   176,   173,   277,   218,
     273,   277,   154,   173,   173,   173,   173,   207,   242,   238,
      49,   173,   173,   284,   269,   222,   227,   227,   222,   222,
     171,   176,   171,   176,   154,   120,   121,   122,   140,   145,
     253,   283,   284,   153,   154,   173,   163,   163,   274,   163,
     284,   173,   163,   173,   173,   277,   156,   173,   176,   174,
      10,    10,   155,    10,   173,    10,    10,    10,   155,   226,
     244,    51,    66,    71,   124,   128,   131,   161,   164,   165,
     166,   169,   171,   175,   276,   278,   154,   207,   199,   173,
     171,   207,   206,   222,   176,   173,   269,   181,   274,   274,
     271,   174,   153,   277,   224,   176,   193,   220,   238,    15,
     173,   174,   173,   173,   173,   222,   222,   145,   283,   145,
     283,   145,   283,   284,   120,   121,   122,    15,   179,   253,
     171,   171,   173,   171,   173,   171,   277,   173,   154,   173,
     154,   155,   154,   173,   173,   154,   173,   171,   162,   162,
     162,    15,   171,   276,   162,   276,   276,   276,   276,   276,
     244,   275,   276,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    34,   158,   159,   160,   161,   164,   165,   166,
     167,   168,   170,   171,   172,   196,   222,   171,   203,   222,
     173,   207,   174,   174,   173,   174,   230,   173,   153,   173,
     207,   207,   207,   173,   173,   283,   283,   283,   283,   283,
     283,   174,   275,   275,   275,   275,   155,    10,   155,    10,
      10,   155,   155,    10,   155,   244,   244,   244,   244,   171,
     244,   244,   173,   173,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   284,   173,   275,   277,   173,   204,   222,
     173,   207,    15,   174,   207,   269,   220,   220,   220,   207,
     207,   173,   173,   173,   173,   154,   221,   173,   154,   154,
     173,   173,   163,   163,   163,   284,   173,   163,   276,   156,
     173,   176,   207,   222,   173,   207,   174,    10,   173,   155,
      10,    10,   155,   171,   171,   171,   173,   171,   276,   173,
     207,   155,   173,   154,   173,   275,   275,   275,   275,   207,
     220,   155,    10,   155,   173,   173,   173,   173,   220,   173,
     155
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   177,   178,   178,   178,   179,   179,   179,   180,   180,
     181,   181,   181,   183,   182,   184,   184,   184,   184,   184,
     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
     184,   184,   186,   185,   187,   187,   187,   187,   187,   187,
     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
     187,   187,   187,   187,   187,   188,   188,   189,   189,   189,
     191,   190,   190,   192,   190,   190,   190,   193,   193,   195,
     194,   194,   196,   196,   198,   197,   199,   197,   200,   197,
     202,   201,   203,   201,   204,   201,   205,   201,   206,   201,
     201,   207,   207,   207,   207,   207,   207,   207,   207,   207,
     207,   207,   207,   207,   207,   207,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   209,   209,   209,   210,
     211,   210,   210,   210,   212,   212,   213,   213,   214,   214,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   216,
     216,   216,   216,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   218,   217,   219,   219,   220,   220,
     220,   221,   221,   222,   222,   222,   222,   222,   223,   223,
     224,   224,   224,   224,   224,   225,   225,   226,   226,   227,
     227,   228,   228,   228,   228,   228,   229,   229,   229,   229,
     229,   229,   230,   230,   230,   231,   231,   231,   231,   232,
     232,   232,   232,   232,   232,   232,   232,   233,   233,   234,
     234,   234,   234,   234,   234,   234,   234,   234,   235,   235,
     235,   235,   235,   235,   235,   235,   235,   235,   235,   236,
     236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
     237,   237,   237,   237,   237,   237,   237,   237,   237,   237,
     238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
     238,   238,   238,   238,   239,   239,   239,   239,   239,   239,
     239,   239,   239,   239,   239,   239,   240,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     242,   242,   242,   242,   242,   242,   242,   242,   243,   243,
     244,   244,   244,   244,   245,   245,   245,   245,   247,   246,
     249,   248,   250,   250,   251,   251,   252,   252,   253,   253,
     253,   253,   253,   253,   253,   253,   253,   253,   254,   255,
     255,   255,   255,   256,   256,   257,   257,   257,   258,   258,
     258,   259,   259,   259,   260,   260,   260,   262,   261,   263,
     261,   261,   261,   264,   264,   264,   264,   265,   265,   265,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   267,   267,   267,   268,   270,
     269,   271,   271,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   273,
     273,   274,   274,   275,   275,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   281,   281,   281,   281,   281,   282,   282,
     282,   282,   283,   283,   283,   284,   284,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   285,   285,   285,   285,
     286,   286,   286,   286,   287
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     5,     4,     0,     5,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     2,     2,     2,     8,    11,     9,
      11,    13,    15,     7,     9,    12,     9,     9,    13,     9,
       7,     5,     0,     3,     1,     2,     2,     3,     2,     2,
       2,     2,     4,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     4,     5,     5,     1,     3,     1,     4,     4,
       0,     4,     3,     0,     4,     3,     1,     2,     4,     0,
       4,     3,     2,     4,     0,     6,     0,     9,     0,     6,
       0,     7,     0,    11,     0,    12,     0,     8,     0,     9,
       1,     1,     2,     2,     2,     4,     2,     2,     2,     2,
       2,     2,     4,     5,     6,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     2,
       0,     6,     2,     2,     1,     1,     1,     3,     1,     1,
       1,     2,     4,     2,     3,     3,     4,     2,     3,     1,
       1,     1,     1,     1,     2,     3,     2,     2,     2,     2,
       2,     3,     4,     3,     0,     6,     2,     3,     1,     3,
       4,     1,     2,     1,     1,     1,     3,     2,     1,     3,
       1,     1,     1,     3,     2,     1,     3,     1,     2,     1,
       2,     1,     3,     5,     3,     3,     1,     3,     3,     3,
       3,     4,     1,     1,     2,     1,     3,     3,     5,     3,
       4,     5,     3,     4,     5,     2,     4,     1,     1,     1,
       1,     2,     2,     2,     2,     2,     3,     4,     1,     1,
       2,     2,     2,     2,     2,     3,     4,     7,     3,     1,
       2,     2,     2,     2,     2,     2,     3,     4,     7,     3,
       1,     1,     2,     2,     2,     2,     2,     2,     3,     4,
       1,     1,     2,     2,     2,     2,     2,     2,     3,     4,
       5,     9,     9,     9,     1,     1,     2,     1,     1,     1,
       3,     4,     4,     4,     4,     1,     1,     1,     1,     2,
       1,     1,     1,     3,     4,     2,     4,     4,     4,     1,
       1,     1,     2,     3,     2,     4,     4,     1,     1,     1,
       2,     3,     2,     3,     1,     4,     5,     5,     0,     6,
       0,     9,     1,     1,     1,     1,     2,     3,     1,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     4,     3,
       1,     4,     2,     1,     1,     1,     3,     5,     1,     2,
       4,     1,     2,     2,     1,     1,     1,     0,     6,     0,
       7,     4,     5,     3,     5,     4,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     2,     2,     1,     1,     2,     1,     0,
       2,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     1,     3,     1,     4,     7,     7,     7,
       7,     4,     2,     5,     4,     2,     2,     2,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     5,     4,
       4,     3,     3,     3,     3,     1,     4,     7,     7,     7,
       7,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     2,     5,     4,
       2,     5,     4,     4,     2,     2,     2,     2,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       4,     4,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     8,    11,
       4,     4,     6,     4,     4,     6,     6,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     1,     4,     7,
       7,     7,     7,     4,     2,     5,     4,     2,     5,     4,
       4,     2,     2,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     4,     4,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     4,     2,     3,
       1,     2,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     0
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YY_LOCATION_PRINT
#  if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#   define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

#  else
#   define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#  endif
# endif /* !defined YY_LOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yykind < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yykind], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]));
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 3: /* grammar: START_CONST_EXPR const_expr  */
#line 461 "dtool/src/cppparser/cppBison.yxx"
{
  current_expr = (yyvsp[0].u.expr);
}
#line 4081 "built/tmp/cppBison.yxx.c"
    break;

  case 4: /* grammar: START_TYPE full_type  */
#line 465 "dtool/src/cppparser/cppBison.yxx"
{
  current_type = (yyvsp[0].u.type);
}
#line 4089 "built/tmp/cppBison.yxx.c"
    break;

  case 10: /* constructor_init: name '(' optional_const_expr_comma ')'  */
#line 483 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-1].u.expr);
}
#line 4097 "built/tmp/cppBison.yxx.c"
    break;

  case 11: /* constructor_init: name '(' optional_const_expr_comma ')' ELLIPSIS  */
#line 487 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-2].u.expr);
}
#line 4105 "built/tmp/cppBison.yxx.c"
    break;

  case 12: /* constructor_init: name '{' optional_const_expr_comma '}'  */
#line 491 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-1].u.expr);
}
#line 4113 "built/tmp/cppBison.yxx.c"
    break;

  case 13: /* $@1: %empty  */
#line 503 "dtool/src/cppparser/cppBison.yxx"
{
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
#line 4122 "built/tmp/cppBison.yxx.c"
    break;

  case 14: /* extern_c: storage_class '{' $@1 cpp '}'  */
#line 508 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4130 "built/tmp/cppBison.yxx.c"
    break;

  case 21: /* declaration: KW_BEGIN_PUBLISH  */
#line 521 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
#line 4147 "built/tmp/cppBison.yxx.c"
    break;

  case 22: /* declaration: KW_END_PUBLISH  */
#line 534 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
#line 4160 "built/tmp/cppBison.yxx.c"
    break;

  case 23: /* declaration: KW_PUBLISHED ':'  */
#line 543 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_published);
}
#line 4168 "built/tmp/cppBison.yxx.c"
    break;

  case 24: /* declaration: KW_PUBLIC ':'  */
#line 547 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
#line 4180 "built/tmp/cppBison.yxx.c"
    break;

  case 25: /* declaration: KW_PROTECTED ':'  */
#line 555 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_protected);
}
#line 4188 "built/tmp/cppBison.yxx.c"
    break;

  case 26: /* declaration: KW_PRIVATE ':'  */
#line 559 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_private);
}
#line 4196 "built/tmp/cppBison.yxx.c"
    break;

  case 27: /* declaration: KW_MAKE_PROPERTY '(' name ',' IDENTIFIER maybe_comma_identifier ')' ';'  */
#line 563 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-5].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-7]).file);
    make_property->_get_function = getter->as_function_group();

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_set_function = setter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-7]));
  }
}
#line 4221 "built/tmp/cppBison.yxx.c"
    break;

  case 28: /* declaration: KW_MAKE_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 584 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4252 "built/tmp/cppBison.yxx.c"
    break;

  case 29: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 611 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4277 "built/tmp/cppBison.yxx.c"
    break;

  case 30: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 632 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4310 "built/tmp/cppBison.yxx.c"
    break;

  case 31: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 661 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4350 "built/tmp/cppBison.yxx.c"
    break;

  case 32: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 697 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-10].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-12].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-14]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    CPPDeclaration *inserter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (inserter == nullptr || inserter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid append method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_insert_function = inserter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-14]));
  }
}
#line 4397 "built/tmp/cppBison.yxx.c"
    break;

  case 33: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ')' ';'  */
#line 740 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid item getter method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-4].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-6]).file);
    make_property->_get_function = getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-6]));
  }
}
#line 4413 "built/tmp/cppBison.yxx.c"
    break;

  case 34: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 752 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4438 "built/tmp/cppBison.yxx.c"
    break;

  case 35: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER maybe_comma_identifier ')' ';'  */
#line 773 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-5].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-9].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-11]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-7].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-7].u.identifier)->get_fully_scoped_name(), (yylsp[-7]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_del_function = deleter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-11]));
  }
}
#line 4478 "built/tmp/cppBison.yxx.c"
    break;

  case 36: /* declaration: KW_MAKE_MAP_KEYS_SEQ '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 809 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = nullptr;
    for (size_t i = 0; i < current_scope->_declarations.size(); ++i) {
      make_property = current_scope->_declarations[i]->as_make_property();
      if (make_property != nullptr) {
        if (make_property->get_fully_scoped_name() == (yyvsp[-6].u.identifier)->get_fully_scoped_name()) {
          break;
        } else {
          make_property = nullptr;
        }
      }
    }
    if (make_property != nullptr) {
      make_property->_get_key_function = getter->as_function_group();
      make_property->_length_function = length_getter->as_function_group();
    } else {
      yyerror("reference to non-existent MAKE_MAP_PROPERTY: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    }
  }
}
#line 4516 "built/tmp/cppBison.yxx.c"
    break;

  case 37: /* declaration: KW_MAKE_PROPERTY2 '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 843 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4542 "built/tmp/cppBison.yxx.c"
    break;

  case 38: /* declaration: KW_MAKE_PROPERTY2 '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 865 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *clearer = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (clearer == nullptr || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid clear method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_clear_function = clearer->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4582 "built/tmp/cppBison.yxx.c"
    break;

  case 39: /* declaration: KW_MAKE_SEQ '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 901 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *element_getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == nullptr || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    element_getter = nullptr;
  }

  if (length_getter != nullptr && element_getter != nullptr) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4608 "built/tmp/cppBison.yxx.c"
    break;

  case 40: /* declaration: KW_STATIC_ASSERT '(' const_expr ',' string_literal ')' ';'  */
#line 923 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-4].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-4]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[-2].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[-4]));
  }
}
#line 4623 "built/tmp/cppBison.yxx.c"
    break;

  case 41: /* declaration: KW_STATIC_ASSERT '(' const_expr ')' ';'  */
#line 934 "dtool/src/cppparser/cppBison.yxx"
{
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-2]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[-2]));
  }
}
#line 4637 "built/tmp/cppBison.yxx.c"
    break;

  case 42: /* $@2: %empty  */
#line 947 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
#line 4647 "built/tmp/cppBison.yxx.c"
    break;

  case 43: /* friend_declaration: KW_FRIEND $@2 declaration  */
#line 953 "dtool/src/cppparser/cppBison.yxx"
{
  delete current_scope;
  pop_scope();
}
#line 4656 "built/tmp/cppBison.yxx.c"
    break;

  case 44: /* storage_class: empty  */
#line 962 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = 0;
}
#line 4664 "built/tmp/cppBison.yxx.c"
    break;

  case 45: /* storage_class: KW_CONST storage_class  */
#line 966 "dtool/src/cppparser/cppBison.yxx"
{
  // This isn't really a storage class, but it helps with parsing.
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_const;
}
#line 4673 "built/tmp/cppBison.yxx.c"
    break;

  case 46: /* storage_class: KW_EXTERN storage_class  */
#line 971 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
}
#line 4681 "built/tmp/cppBison.yxx.c"
    break;

  case 47: /* storage_class: KW_EXTERN SIMPLE_STRING storage_class  */
#line 975 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[-1].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[-1].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[-1].str) + "\"", (yylsp[-1]));
  }
}
#line 4696 "built/tmp/cppBison.yxx.c"
    break;

  case 48: /* storage_class: KW_STATIC storage_class  */
#line 986 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_static;
}
#line 4704 "built/tmp/cppBison.yxx.c"
    break;

  case 49: /* storage_class: KW_INLINE storage_class  */
#line 990 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_inline;
}
#line 4712 "built/tmp/cppBison.yxx.c"
    break;

  case 50: /* storage_class: KW_VIRTUAL storage_class  */
#line 994 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_virtual;
}
#line 4720 "built/tmp/cppBison.yxx.c"
    break;

  case 51: /* storage_class: KW_EXPLICIT storage_class  */
#line 998 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
}
#line 4728 "built/tmp/cppBison.yxx.c"
    break;

  case 52: /* storage_class: KW_EXPLICIT_LPAREN const_expr ')' storage_class  */
#line 1002 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("explicit() requires a constant expression", (yylsp[-2]));
  } else if (result.as_boolean()) {
    (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
  }
}
#line 4741 "built/tmp/cppBison.yxx.c"
    break;

  case 53: /* storage_class: KW_REGISTER storage_class  */
#line 1011 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_register;
}
#line 4749 "built/tmp/cppBison.yxx.c"
    break;

  case 54: /* storage_class: KW_VOLATILE storage_class  */
#line 1015 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_volatile;
}
#line 4757 "built/tmp/cppBison.yxx.c"
    break;

  case 55: /* storage_class: KW_MUTABLE storage_class  */
#line 1019 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_mutable;
}
#line 4765 "built/tmp/cppBison.yxx.c"
    break;

  case 56: /* storage_class: KW_CONSTEVAL storage_class  */
#line 1023 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_consteval;
}
#line 4773 "built/tmp/cppBison.yxx.c"
    break;

  case 57: /* storage_class: KW_CONSTEXPR storage_class  */
#line 1027 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constexpr;
}
#line 4781 "built/tmp/cppBison.yxx.c"
    break;

  case 58: /* storage_class: KW_CONSTINIT storage_class  */
#line 1031 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constinit;
}
#line 4789 "built/tmp/cppBison.yxx.c"
    break;

  case 59: /* storage_class: KW_BLOCKING storage_class  */
#line 1035 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_blocking;
}
#line 4797 "built/tmp/cppBison.yxx.c"
    break;

  case 60: /* storage_class: KW_EXTENSION storage_class  */
#line 1039 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extension;
}
#line 4805 "built/tmp/cppBison.yxx.c"
    break;

  case 61: /* storage_class: KW_THREAD_LOCAL storage_class  */
#line 1043 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_thread_local;
}
#line 4813 "built/tmp/cppBison.yxx.c"
    break;

  case 62: /* storage_class: ATTR_LEFT attribute_specifiers ATTR_RIGHT storage_class  */
#line 1047 "dtool/src/cppparser/cppBison.yxx"
{
  // Ignore attribute specifiers for now.
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4822 "built/tmp/cppBison.yxx.c"
    break;

  case 63: /* storage_class: KW_ALIGNAS '(' const_expr ')' storage_class  */
#line 1052 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4830 "built/tmp/cppBison.yxx.c"
    break;

  case 64: /* storage_class: KW_ALIGNAS '(' type_decl ')' storage_class  */
#line 1056 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4838 "built/tmp/cppBison.yxx.c"
    break;

  case 70: /* $@3: %empty  */
#line 1074 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // type_like_declaration.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4853 "built/tmp/cppBison.yxx.c"
    break;

  case 71: /* type_like_declaration: storage_class var_type_decl $@3 multiple_instance_identifiers  */
#line 1085 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4861 "built/tmp/cppBison.yxx.c"
    break;

  case 72: /* type_like_declaration: storage_class type_decl ';'  */
#line 1090 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
#line 4874 "built/tmp/cppBison.yxx.c"
    break;

  case 73: /* $@4: %empty  */
#line 1099 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[0].u.instance) != nullptr) {
    // Push the scope so that the initializers can make use of things defined
    // in the class body.
    push_scope((yyvsp[0].u.instance)->get_scope(current_scope, global_scope));
    (yyvsp[0].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-1].u.integer));
  }
}
#line 4887 "built/tmp/cppBison.yxx.c"
    break;

  case 74: /* type_like_declaration: storage_class constructor_prototype $@4 maybe_initialize_or_constructor_body  */
#line 1108 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-2].u.instance) != nullptr) {
    pop_scope();
    current_scope->add_declaration((yyvsp[-2].u.instance), global_scope, current_lexer, (yylsp[-2]));
    (yyvsp[-2].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4899 "built/tmp/cppBison.yxx.c"
    break;

  case 75: /* type_like_declaration: storage_class function_prototype maybe_initialize_or_function_body  */
#line 1116 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-1].u.instance) != nullptr) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4911 "built/tmp/cppBison.yxx.c"
    break;

  case 77: /* multiple_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize_or_function_body  */
#line 1132 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 4926 "built/tmp/cppBison.yxx.c"
    break;

  case 78: /* multiple_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize ',' multiple_instance_identifiers  */
#line 1143 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 4941 "built/tmp/cppBison.yxx.c"
    break;

  case 79: /* $@5: %empty  */
#line 1158 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4956 "built/tmp/cppBison.yxx.c"
    break;

  case 80: /* typedef_declaration: storage_class var_type_decl $@5 typedef_instance_identifiers  */
#line 1169 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4964 "built/tmp/cppBison.yxx.c"
    break;

  case 81: /* typedef_declaration: storage_class function_prototype maybe_initialize_or_function_body  */
#line 1173 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-1].u.instance) != nullptr) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != nullptr) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
#line 4980 "built/tmp/cppBison.yxx.c"
    break;

  case 82: /* typedef_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize_or_function_body  */
#line 1188 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
}
#line 4993 "built/tmp/cppBison.yxx.c"
    break;

  case 83: /* typedef_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize ',' typedef_instance_identifiers  */
#line 1197 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-3]));
}
#line 5006 "built/tmp/cppBison.yxx.c"
    break;

  case 84: /* $@6: %empty  */
#line 1211 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5023 "built/tmp/cppBison.yxx.c"
    break;

  case 85: /* constructor_prototype: IDENTIFIER '(' $@6 function_parameter_list ')' function_post  */
#line 1224 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-5].u.identifier)->get_scope(current_scope, global_scope);
  CPPType *type;
  std::string simple_name = (yyvsp[-5].u.identifier)->get_simple_name();
  if (!simple_name.empty() && simple_name[0] == '~') {
    // A destructor has no return type.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else if (scope != nullptr && simple_name == scope->get_simple_name()) {
    // Neither does a constructor.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[-5]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 5051 "built/tmp/cppBison.yxx.c"
    break;

  case 86: /* $@7: %empty  */
#line 1250 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-2].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5068 "built/tmp/cppBison.yxx.c"
    break;

  case 87: /* constructor_prototype: TYPENAME_IDENTIFIER '(' IDENTIFIER ')' '(' $@7 function_parameter_list ')' function_post  */
#line 1263 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-8].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-6].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-8]).file);
}
#line 5086 "built/tmp/cppBison.yxx.c"
    break;

  case 88: /* $@8: %empty  */
#line 1277 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5103 "built/tmp/cppBison.yxx.c"
    break;

  case 89: /* constructor_prototype: TYPENAME_IDENTIFIER '(' $@8 function_parameter_list ')' function_post  */
#line 1290 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 5125 "built/tmp/cppBison.yxx.c"
    break;

  case 90: /* $@9: %empty  */
#line 1313 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 5133 "built/tmp/cppBison.yxx.c"
    break;

  case 91: /* function_prototype: '~' name '(' $@9 function_parameter_list ')' function_post  */
#line 1317 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  if ((yyvsp[-5].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[-5].u.identifier)->get_simple_name(), (yylsp[-5]));
    delete (yyvsp[-5].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
  }
}
#line 5156 "built/tmp/cppBison.yxx.c"
    break;

  case 92: /* $@10: %empty  */
#line 1343 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5164 "built/tmp/cppBison.yxx.c"
    break;

  case 93: /* function_prototype: TYPENAME_IDENTIFIER '(' '*' instance_identifier ')' '(' $@10 function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 1347 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-10].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-10]).file);
}
#line 5182 "built/tmp/cppBison.yxx.c"
    break;

  case 94: /* $@11: %empty  */
#line 1361 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5190 "built/tmp/cppBison.yxx.c"
    break;

  case 95: /* function_prototype: TYPENAME_IDENTIFIER '(' SCOPING '*' instance_identifier ')' '(' $@11 function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 1365 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-11].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-11].u.identifier)->get_fully_scoped_name(), (yylsp[-11]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-9].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-11]).file);
}
#line 5208 "built/tmp/cppBison.yxx.c"
    break;

  case 96: /* $@12: %empty  */
#line 1381 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-3].u.identifier) != nullptr) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5218 "built/tmp/cppBison.yxx.c"
    break;

  case 97: /* function_prototype: KW_OPERATOR type not_paren_formal_parameter_identifier '(' $@12 function_parameter_list ')' function_post  */
#line 1387 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-7].u.identifier) != nullptr) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier(name, (yylsp[-6]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5247 "built/tmp/cppBison.yxx.c"
    break;

  case 98: /* $@13: %empty  */
#line 1412 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-4].u.identifier) != nullptr) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5257 "built/tmp/cppBison.yxx.c"
    break;

  case 99: /* function_prototype: KW_OPERATOR KW_CONST type not_paren_formal_parameter_identifier '(' $@13 function_parameter_list ')' function_post  */
#line 1418 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-8].u.identifier) != nullptr) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-5]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5277 "built/tmp/cppBison.yxx.c"
    break;

  case 100: /* function_prototype: IDENTIFIER  */
#line 1438 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *decl =
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != nullptr) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = nullptr;
  }
}
#line 5291 "built/tmp/cppBison.yxx.c"
    break;

  case 101: /* function_post: empty  */
#line 1451 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = 0;
}
#line 5299 "built/tmp/cppBison.yxx.c"
    break;

  case 102: /* function_post: function_post KW_CONST  */
#line 1455 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_const_method;
}
#line 5307 "built/tmp/cppBison.yxx.c"
    break;

  case 103: /* function_post: function_post KW_VOLATILE  */
#line 1459 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_volatile_method;
}
#line 5315 "built/tmp/cppBison.yxx.c"
    break;

  case 104: /* function_post: function_post KW_NOEXCEPT  */
#line 1463 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_noexcept;
}
#line 5323 "built/tmp/cppBison.yxx.c"
    break;

  case 105: /* function_post: function_post KW_NOEXCEPT_LPAREN const_expr ')'  */
#line 1467 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-1].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("noexcept() requires a constant expression", (yylsp[-1]));
  } else if (result.as_boolean()) {
    (yyval.u.integer) = (yyvsp[-3].u.integer) | (int)CPPFunctionType::F_noexcept;
  }
}
#line 5336 "built/tmp/cppBison.yxx.c"
    break;

  case 106: /* function_post: function_post KW_FINAL  */
#line 1476 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_final;
}
#line 5344 "built/tmp/cppBison.yxx.c"
    break;

  case 107: /* function_post: function_post KW_OVERRIDE  */
#line 1480 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_override;
}
#line 5352 "built/tmp/cppBison.yxx.c"
    break;

  case 108: /* function_post: function_post '&'  */
#line 1484 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_lvalue_method;
}
#line 5360 "built/tmp/cppBison.yxx.c"
    break;

  case 109: /* function_post: function_post ANDAND  */
#line 1488 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_rvalue_method;
}
#line 5368 "built/tmp/cppBison.yxx.c"
    break;

  case 110: /* function_post: function_post KW_MUTABLE  */
#line 1492 "dtool/src/cppparser/cppBison.yxx"
{
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5377 "built/tmp/cppBison.yxx.c"
    break;

  case 111: /* function_post: function_post KW_CONSTEXPR  */
#line 1497 "dtool/src/cppparser/cppBison.yxx"
{
  // Used for lambdas in C++17, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5386 "built/tmp/cppBison.yxx.c"
    break;

  case 112: /* function_post: function_post KW_THROW '(' ')'  */
#line 1502 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5394 "built/tmp/cppBison.yxx.c"
    break;

  case 113: /* function_post: function_post KW_THROW '(' name ')'  */
#line 1506 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
#line 5402 "built/tmp/cppBison.yxx.c"
    break;

  case 114: /* function_post: function_post KW_THROW '(' name ELLIPSIS ')'  */
#line 1510 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-5].u.integer);
}
#line 5410 "built/tmp/cppBison.yxx.c"
    break;

  case 115: /* function_post: function_post ATTR_LEFT attribute_specifiers ATTR_RIGHT  */
#line 1514 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5418 "built/tmp/cppBison.yxx.c"
    break;

  case 116: /* function_operator: '!'  */
#line 1521 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "!";
}
#line 5426 "built/tmp/cppBison.yxx.c"
    break;

  case 117: /* function_operator: '~'  */
#line 1525 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "~";
}
#line 5434 "built/tmp/cppBison.yxx.c"
    break;

  case 118: /* function_operator: '*'  */
#line 1529 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "*";
}
#line 5442 "built/tmp/cppBison.yxx.c"
    break;

  case 119: /* function_operator: '/'  */
#line 1533 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "/";
}
#line 5450 "built/tmp/cppBison.yxx.c"
    break;

  case 120: /* function_operator: '%'  */
#line 1537 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "%";
}
#line 5458 "built/tmp/cppBison.yxx.c"
    break;

  case 121: /* function_operator: '+'  */
#line 1541 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "+";
}
#line 5466 "built/tmp/cppBison.yxx.c"
    break;

  case 122: /* function_operator: '-'  */
#line 1545 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "-";
}
#line 5474 "built/tmp/cppBison.yxx.c"
    break;

  case 123: /* function_operator: '|'  */
#line 1549 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "|";
}
#line 5482 "built/tmp/cppBison.yxx.c"
    break;

  case 124: /* function_operator: '&'  */
#line 1553 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&";
}
#line 5490 "built/tmp/cppBison.yxx.c"
    break;

  case 125: /* function_operator: '^'  */
#line 1557 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "^";
}
#line 5498 "built/tmp/cppBison.yxx.c"
    break;

  case 126: /* function_operator: OROR  */
#line 1561 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "||";
}
#line 5506 "built/tmp/cppBison.yxx.c"
    break;

  case 127: /* function_operator: ANDAND  */
#line 1565 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&&";
}
#line 5514 "built/tmp/cppBison.yxx.c"
    break;

  case 128: /* function_operator: EQCOMPARE  */
#line 1569 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "==";
}
#line 5522 "built/tmp/cppBison.yxx.c"
    break;

  case 129: /* function_operator: NECOMPARE  */
#line 1573 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "!=";
}
#line 5530 "built/tmp/cppBison.yxx.c"
    break;

  case 130: /* function_operator: LECOMPARE  */
#line 1577 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<=";
}
#line 5538 "built/tmp/cppBison.yxx.c"
    break;

  case 131: /* function_operator: GECOMPARE  */
#line 1581 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">=";
}
#line 5546 "built/tmp/cppBison.yxx.c"
    break;

  case 132: /* function_operator: '<'  */
#line 1585 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<";
}
#line 5554 "built/tmp/cppBison.yxx.c"
    break;

  case 133: /* function_operator: '>'  */
#line 1589 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">";
}
#line 5562 "built/tmp/cppBison.yxx.c"
    break;

  case 134: /* function_operator: SPACESHIP  */
#line 1593 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<=>";
}
#line 5570 "built/tmp/cppBison.yxx.c"
    break;

  case 135: /* function_operator: LSHIFT  */
#line 1597 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<<";
}
#line 5578 "built/tmp/cppBison.yxx.c"
    break;

  case 136: /* function_operator: RSHIFT  */
#line 1601 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">>";
}
#line 5586 "built/tmp/cppBison.yxx.c"
    break;

  case 137: /* function_operator: '='  */
#line 1605 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "=";
}
#line 5594 "built/tmp/cppBison.yxx.c"
    break;

  case 138: /* function_operator: ','  */
#line 1609 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ",";
}
#line 5602 "built/tmp/cppBison.yxx.c"
    break;

  case 139: /* function_operator: PLUSPLUS  */
#line 1613 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "++";
}
#line 5610 "built/tmp/cppBison.yxx.c"
    break;

  case 140: /* function_operator: MINUSMINUS  */
#line 1617 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "--";
}
#line 5618 "built/tmp/cppBison.yxx.c"
    break;

  case 141: /* function_operator: TIMESEQUAL  */
#line 1621 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "*=";
}
#line 5626 "built/tmp/cppBison.yxx.c"
    break;

  case 142: /* function_operator: DIVIDEEQUAL  */
#line 1625 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "/=";
}
#line 5634 "built/tmp/cppBison.yxx.c"
    break;

  case 143: /* function_operator: MODEQUAL  */
#line 1629 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "%=";
}
#line 5642 "built/tmp/cppBison.yxx.c"
    break;

  case 144: /* function_operator: PLUSEQUAL  */
#line 1633 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "+=";
}
#line 5650 "built/tmp/cppBison.yxx.c"
    break;

  case 145: /* function_operator: MINUSEQUAL  */
#line 1637 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "-=";
}
#line 5658 "built/tmp/cppBison.yxx.c"
    break;

  case 146: /* function_operator: OREQUAL  */
#line 1641 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "|=";
}
#line 5666 "built/tmp/cppBison.yxx.c"
    break;

  case 147: /* function_operator: ANDEQUAL  */
#line 1645 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&=";
}
#line 5674 "built/tmp/cppBison.yxx.c"
    break;

  case 148: /* function_operator: XOREQUAL  */
#line 1649 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "^=";
}
#line 5682 "built/tmp/cppBison.yxx.c"
    break;

  case 149: /* function_operator: LSHIFTEQUAL  */
#line 1653 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<<=";
}
#line 5690 "built/tmp/cppBison.yxx.c"
    break;

  case 150: /* function_operator: RSHIFTEQUAL  */
#line 1657 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">>=";
}
#line 5698 "built/tmp/cppBison.yxx.c"
    break;

  case 151: /* function_operator: POINTSAT  */
#line 1661 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "->";
}
#line 5706 "built/tmp/cppBison.yxx.c"
    break;

  case 152: /* function_operator: '[' ']'  */
#line 1665 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "[]";
}
#line 5714 "built/tmp/cppBison.yxx.c"
    break;

  case 153: /* function_operator: '(' ')'  */
#line 1669 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "()";
}
#line 5722 "built/tmp/cppBison.yxx.c"
    break;

  case 154: /* function_operator: KW_NEW  */
#line 1673 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "new";
}
#line 5730 "built/tmp/cppBison.yxx.c"
    break;

  case 155: /* function_operator: KW_DELETE  */
#line 1677 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "delete";
}
#line 5738 "built/tmp/cppBison.yxx.c"
    break;

  case 160: /* $@14: %empty  */
#line 1691 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope(new CPPTemplateScope(current_scope));
}
#line 5746 "built/tmp/cppBison.yxx.c"
    break;

  case 161: /* template_declaration: KW_TEMPLATE $@14 '<' template_formal_parameters '>' more_template_declaration  */
#line 1695 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 5754 "built/tmp/cppBison.yxx.c"
    break;

  case 166: /* template_nonempty_formal_parameters: template_formal_parameter  */
#line 1709 "dtool/src/cppparser/cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5764 "built/tmp/cppBison.yxx.c"
    break;

  case 167: /* template_nonempty_formal_parameters: template_nonempty_formal_parameters ',' template_formal_parameter  */
#line 1715 "dtool/src/cppparser/cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5774 "built/tmp/cppBison.yxx.c"
    break;

  case 170: /* template_formal_parameter: typename_keyword  */
#line 1729 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter(nullptr));
}
#line 5782 "built/tmp/cppBison.yxx.c"
    break;

  case 171: /* template_formal_parameter: typename_keyword name  */
#line 1733 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 5790 "built/tmp/cppBison.yxx.c"
    break;

  case 172: /* template_formal_parameter: typename_keyword name '=' full_type  */
#line 1737 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 5798 "built/tmp/cppBison.yxx.c"
    break;

  case 173: /* template_formal_parameter: typename_keyword ELLIPSIS  */
#line 1741 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter(nullptr);
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5808 "built/tmp/cppBison.yxx.c"
    break;

  case 174: /* template_formal_parameter: typename_keyword ELLIPSIS name  */
#line 1747 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[0].u.identifier));
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5818 "built/tmp/cppBison.yxx.c"
    break;

  case 175: /* template_formal_parameter: template_formal_parameter_type formal_parameter_identifier template_parameter_maybe_initialize  */
#line 1753 "dtool/src/cppparser/cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5828 "built/tmp/cppBison.yxx.c"
    break;

  case 176: /* template_formal_parameter: KW_CONST template_formal_parameter_type formal_parameter_identifier template_parameter_maybe_initialize  */
#line 1759 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5839 "built/tmp/cppBison.yxx.c"
    break;

  case 177: /* template_formal_parameter: template_formal_parameter_type parameter_pack_identifier  */
#line 1766 "dtool/src/cppparser/cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5848 "built/tmp/cppBison.yxx.c"
    break;

  case 178: /* template_formal_parameter: KW_CONST template_formal_parameter_type parameter_pack_identifier  */
#line 1771 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5858 "built/tmp/cppBison.yxx.c"
    break;

  case 179: /* template_formal_parameter_type: simple_type  */
#line 1780 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5866 "built/tmp/cppBison.yxx.c"
    break;

  case 180: /* template_formal_parameter_type: IDENTIFIER  */
#line 1784 "dtool/src/cppparser/cppBison.yxx"
{
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 5875 "built/tmp/cppBison.yxx.c"
    break;

  case 181: /* template_formal_parameter_type: TYPENAME_IDENTIFIER  */
#line 1789 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5887 "built/tmp/cppBison.yxx.c"
    break;

  case 182: /* template_formal_parameter_type: TYPEPACK_IDENTIFIER  */
#line 1797 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5899 "built/tmp/cppBison.yxx.c"
    break;

  case 183: /* instance_identifier: name_no_final  */
#line 1809 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 5907 "built/tmp/cppBison.yxx.c"
    break;

  case 184: /* instance_identifier: KW_OPERATOR function_operator  */
#line 1813 "dtool/src/cppparser/cppBison.yxx"
{
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-1].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator "+(yyvsp[0].str), (yylsp[0]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[0].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5925 "built/tmp/cppBison.yxx.c"
    break;

  case 185: /* instance_identifier: KW_OPERATOR SIMPLE_STRING IDENTIFIER  */
#line 1827 "dtool/src/cppparser/cppBison.yxx"
{
  // A C++11 literal operator.
  if (!(yyvsp[-1].str).empty()) {
    yyerror("expected empty string", (yylsp[-1]));
  }
  CPPIdentifier *ident = (yyvsp[-2].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name(), (yylsp[0]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5944 "built/tmp/cppBison.yxx.c"
    break;

  case 186: /* instance_identifier: KW_CONST instance_identifier  */
#line 1842 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5953 "built/tmp/cppBison.yxx.c"
    break;

  case 187: /* instance_identifier: KW_VOLATILE instance_identifier  */
#line 1847 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5962 "built/tmp/cppBison.yxx.c"
    break;

  case 188: /* instance_identifier: '*' instance_identifier  */
#line 1852 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 5971 "built/tmp/cppBison.yxx.c"
    break;

  case 189: /* instance_identifier: '&' instance_identifier  */
#line 1857 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 5980 "built/tmp/cppBison.yxx.c"
    break;

  case 190: /* instance_identifier: ANDAND instance_identifier  */
#line 1862 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 5989 "built/tmp/cppBison.yxx.c"
    break;

  case 191: /* instance_identifier: SCOPING '*' instance_identifier  */
#line 1867 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 5998 "built/tmp/cppBison.yxx.c"
    break;

  case 192: /* instance_identifier: instance_identifier '[' optional_const_expr ']'  */
#line 1872 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6007 "built/tmp/cppBison.yxx.c"
    break;

  case 193: /* instance_identifier: '(' instance_identifier ')'  */
#line 1877 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6016 "built/tmp/cppBison.yxx.c"
    break;

  case 194: /* $@15: %empty  */
#line 1882 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function (in case it is a function)
  CPPScope *scope = new CPPScope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope),
                                 CPPNameComponent(""), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 6033 "built/tmp/cppBison.yxx.c"
    break;

  case 195: /* instance_identifier: instance_identifier '(' $@15 formal_parameter_list ')' function_post  */
#line 1895 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  if ((yyvsp[-2].u.param_list)->is_parameter_expr() && (yyvsp[0].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-2].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  }
}
#line 6051 "built/tmp/cppBison.yxx.c"
    break;

  case 196: /* instance_identifier_and_maybe_trailing_return_type: instance_identifier maybe_trailing_return_type  */
#line 1913 "dtool/src/cppparser/cppBison.yxx"
{
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[0].u.type) != nullptr) {
    (yyvsp[-1].u.inst_ident)->add_trailing_return_type((yyvsp[0].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
}
#line 6065 "built/tmp/cppBison.yxx.c"
    break;

  case 197: /* instance_identifier_and_maybe_trailing_return_type: instance_identifier ':' const_expr  */
#line 1923 "dtool/src/cppparser/cppBison.yxx"
{
  // Bitfield definition.
  (yyvsp[-2].u.inst_ident)->_bit_width = (yyvsp[0].u.expr);
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
#line 6075 "built/tmp/cppBison.yxx.c"
    break;

  case 198: /* maybe_trailing_return_type: empty  */
#line 1933 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = nullptr;
}
#line 6083 "built/tmp/cppBison.yxx.c"
    break;

  case 199: /* maybe_trailing_return_type: POINTSAT predefined_type empty_instance_identifier  */
#line 1937 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6091 "built/tmp/cppBison.yxx.c"
    break;

  case 200: /* maybe_trailing_return_type: POINTSAT KW_CONST predefined_type empty_instance_identifier  */
#line 1941 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6100 "built/tmp/cppBison.yxx.c"
    break;

  case 201: /* maybe_comma_identifier: empty  */
#line 1950 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = nullptr;
}
#line 6108 "built/tmp/cppBison.yxx.c"
    break;

  case 202: /* maybe_comma_identifier: ',' IDENTIFIER  */
#line 1954 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 6116 "built/tmp/cppBison.yxx.c"
    break;

  case 203: /* function_parameter_list: empty  */
#line 1962 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
}
#line 6124 "built/tmp/cppBison.yxx.c"
    break;

  case 204: /* function_parameter_list: ELLIPSIS  */
#line 1966 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6133 "built/tmp/cppBison.yxx.c"
    break;

  case 205: /* function_parameter_list: function_parameters  */
#line 1971 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6141 "built/tmp/cppBison.yxx.c"
    break;

  case 206: /* function_parameter_list: function_parameters ',' ELLIPSIS  */
#line 1975 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6150 "built/tmp/cppBison.yxx.c"
    break;

  case 207: /* function_parameter_list: function_parameters ELLIPSIS  */
#line 1980 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6159 "built/tmp/cppBison.yxx.c"
    break;

  case 208: /* function_parameters: function_parameter  */
#line 1988 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6168 "built/tmp/cppBison.yxx.c"
    break;

  case 209: /* function_parameters: function_parameters ',' function_parameter  */
#line 1993 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6177 "built/tmp/cppBison.yxx.c"
    break;

  case 210: /* formal_parameter_list: empty  */
#line 2001 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
}
#line 6185 "built/tmp/cppBison.yxx.c"
    break;

  case 211: /* formal_parameter_list: ELLIPSIS  */
#line 2005 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6194 "built/tmp/cppBison.yxx.c"
    break;

  case 212: /* formal_parameter_list: formal_parameters  */
#line 2010 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6202 "built/tmp/cppBison.yxx.c"
    break;

  case 213: /* formal_parameter_list: formal_parameters ',' ELLIPSIS  */
#line 2014 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6211 "built/tmp/cppBison.yxx.c"
    break;

  case 214: /* formal_parameter_list: formal_parameters ELLIPSIS  */
#line 2019 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6220 "built/tmp/cppBison.yxx.c"
    break;

  case 215: /* formal_parameters: formal_parameter  */
#line 2027 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6229 "built/tmp/cppBison.yxx.c"
    break;

  case 216: /* formal_parameters: formal_parameters ',' formal_parameter  */
#line 2032 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6238 "built/tmp/cppBison.yxx.c"
    break;

  case 217: /* template_parameter_maybe_initialize: empty  */
#line 2040 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6246 "built/tmp/cppBison.yxx.c"
    break;

  case 218: /* template_parameter_maybe_initialize: '=' no_angle_bracket_const_expr  */
#line 2044 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6254 "built/tmp/cppBison.yxx.c"
    break;

  case 219: /* maybe_initialize: empty  */
#line 2051 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6262 "built/tmp/cppBison.yxx.c"
    break;

  case 220: /* maybe_initialize: '=' const_expr  */
#line 2055 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6270 "built/tmp/cppBison.yxx.c"
    break;

  case 221: /* maybe_initialize_or_constructor_body: ';'  */
#line 2062 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6278 "built/tmp/cppBison.yxx.c"
    break;

  case 222: /* maybe_initialize_or_constructor_body: '{' code '}'  */
#line 2066 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6286 "built/tmp/cppBison.yxx.c"
    break;

  case 223: /* maybe_initialize_or_constructor_body: ':' constructor_inits '{' code '}'  */
#line 2070 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6294 "built/tmp/cppBison.yxx.c"
    break;

  case 224: /* maybe_initialize_or_constructor_body: '=' KW_DEFAULT ';'  */
#line 2074 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6302 "built/tmp/cppBison.yxx.c"
    break;

  case 225: /* maybe_initialize_or_constructor_body: '=' KW_DELETE ';'  */
#line 2078 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6310 "built/tmp/cppBison.yxx.c"
    break;

  case 226: /* maybe_initialize_or_function_body: ';'  */
#line 2085 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6318 "built/tmp/cppBison.yxx.c"
    break;

  case 227: /* maybe_initialize_or_function_body: '{' code '}'  */
#line 2089 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6326 "built/tmp/cppBison.yxx.c"
    break;

  case 228: /* maybe_initialize_or_function_body: '=' const_expr ';'  */
#line 2093 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 6334 "built/tmp/cppBison.yxx.c"
    break;

  case 229: /* maybe_initialize_or_function_body: '=' KW_DEFAULT ';'  */
#line 2097 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6342 "built/tmp/cppBison.yxx.c"
    break;

  case 230: /* maybe_initialize_or_function_body: '=' KW_DELETE ';'  */
#line 2101 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6350 "built/tmp/cppBison.yxx.c"
    break;

  case 231: /* maybe_initialize_or_function_body: '=' '{' structure_init '}'  */
#line 2105 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6358 "built/tmp/cppBison.yxx.c"
    break;

  case 235: /* structure_init_body: const_expr  */
#line 2118 "dtool/src/cppparser/cppBison.yxx"
{
}
#line 6365 "built/tmp/cppBison.yxx.c"
    break;

  case 239: /* function_parameter: type formal_parameter_identifier maybe_initialize  */
#line 2127 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6374 "built/tmp/cppBison.yxx.c"
    break;

  case 240: /* function_parameter: KW_CONST type formal_parameter_identifier maybe_initialize  */
#line 2132 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6384 "built/tmp/cppBison.yxx.c"
    break;

  case 241: /* function_parameter: KW_CONST KW_REGISTER type formal_parameter_identifier maybe_initialize  */
#line 2138 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6394 "built/tmp/cppBison.yxx.c"
    break;

  case 242: /* function_parameter: type_pack parameter_pack_identifier maybe_initialize  */
#line 2144 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6403 "built/tmp/cppBison.yxx.c"
    break;

  case 243: /* function_parameter: KW_CONST type_pack parameter_pack_identifier maybe_initialize  */
#line 2149 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6413 "built/tmp/cppBison.yxx.c"
    break;

  case 244: /* function_parameter: KW_CONST KW_REGISTER type_pack parameter_pack_identifier maybe_initialize  */
#line 2155 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6423 "built/tmp/cppBison.yxx.c"
    break;

  case 245: /* function_parameter: KW_REGISTER function_parameter  */
#line 2161 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6431 "built/tmp/cppBison.yxx.c"
    break;

  case 246: /* function_parameter: ATTR_LEFT attribute_specifiers ATTR_RIGHT function_parameter  */
#line 2165 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6439 "built/tmp/cppBison.yxx.c"
    break;

  case 247: /* formal_parameter: function_parameter  */
#line 2176 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6447 "built/tmp/cppBison.yxx.c"
    break;

  case 248: /* formal_parameter: formal_const_expr  */
#line 2180 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6458 "built/tmp/cppBison.yxx.c"
    break;

  case 249: /* not_paren_formal_parameter_identifier: empty  */
#line 2190 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6466 "built/tmp/cppBison.yxx.c"
    break;

  case 250: /* not_paren_formal_parameter_identifier: name_no_final  */
#line 2194 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 6474 "built/tmp/cppBison.yxx.c"
    break;

  case 251: /* not_paren_formal_parameter_identifier: KW_CONST not_paren_formal_parameter_identifier  */
#line 2198 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6483 "built/tmp/cppBison.yxx.c"
    break;

  case 252: /* not_paren_formal_parameter_identifier: KW_VOLATILE not_paren_formal_parameter_identifier  */
#line 2203 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6492 "built/tmp/cppBison.yxx.c"
    break;

  case 253: /* not_paren_formal_parameter_identifier: '*' not_paren_formal_parameter_identifier  */
#line 2208 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6501 "built/tmp/cppBison.yxx.c"
    break;

  case 254: /* not_paren_formal_parameter_identifier: '&' not_paren_formal_parameter_identifier  */
#line 2213 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6510 "built/tmp/cppBison.yxx.c"
    break;

  case 255: /* not_paren_formal_parameter_identifier: ANDAND not_paren_formal_parameter_identifier  */
#line 2218 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6519 "built/tmp/cppBison.yxx.c"
    break;

  case 256: /* not_paren_formal_parameter_identifier: SCOPING '*' not_paren_formal_parameter_identifier  */
#line 2223 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6528 "built/tmp/cppBison.yxx.c"
    break;

  case 257: /* not_paren_formal_parameter_identifier: not_paren_formal_parameter_identifier '[' optional_const_expr ']'  */
#line 2228 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6537 "built/tmp/cppBison.yxx.c"
    break;

  case 258: /* formal_parameter_identifier: empty  */
#line 2236 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6545 "built/tmp/cppBison.yxx.c"
    break;

  case 259: /* formal_parameter_identifier: name_no_final  */
#line 2240 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 6553 "built/tmp/cppBison.yxx.c"
    break;

  case 260: /* formal_parameter_identifier: KW_CONST formal_parameter_identifier  */
#line 2244 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6562 "built/tmp/cppBison.yxx.c"
    break;

  case 261: /* formal_parameter_identifier: KW_VOLATILE formal_parameter_identifier  */
#line 2249 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6571 "built/tmp/cppBison.yxx.c"
    break;

  case 262: /* formal_parameter_identifier: '*' formal_parameter_identifier  */
#line 2254 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6580 "built/tmp/cppBison.yxx.c"
    break;

  case 263: /* formal_parameter_identifier: '&' formal_parameter_identifier  */
#line 2259 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6589 "built/tmp/cppBison.yxx.c"
    break;

  case 264: /* formal_parameter_identifier: ANDAND formal_parameter_identifier  */
#line 2264 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6598 "built/tmp/cppBison.yxx.c"
    break;

  case 265: /* formal_parameter_identifier: SCOPING '*' formal_parameter_identifier  */
#line 2269 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6607 "built/tmp/cppBison.yxx.c"
    break;

  case 266: /* formal_parameter_identifier: formal_parameter_identifier '[' optional_const_expr ']'  */
#line 2274 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6616 "built/tmp/cppBison.yxx.c"
    break;

  case 267: /* formal_parameter_identifier: '(' formal_parameter_identifier ')' '(' function_parameter_list ')' function_post  */
#line 2279 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6626 "built/tmp/cppBison.yxx.c"
    break;

  case 268: /* formal_parameter_identifier: '(' formal_parameter_identifier ')'  */
#line 2285 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6635 "built/tmp/cppBison.yxx.c"
    break;

  case 269: /* parameter_pack_identifier: ELLIPSIS  */
#line 2293 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6644 "built/tmp/cppBison.yxx.c"
    break;

  case 270: /* parameter_pack_identifier: ELLIPSIS name  */
#line 2298 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6653 "built/tmp/cppBison.yxx.c"
    break;

  case 271: /* parameter_pack_identifier: KW_CONST parameter_pack_identifier  */
#line 2303 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6662 "built/tmp/cppBison.yxx.c"
    break;

  case 272: /* parameter_pack_identifier: KW_VOLATILE parameter_pack_identifier  */
#line 2308 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6671 "built/tmp/cppBison.yxx.c"
    break;

  case 273: /* parameter_pack_identifier: '*' parameter_pack_identifier  */
#line 2313 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6680 "built/tmp/cppBison.yxx.c"
    break;

  case 274: /* parameter_pack_identifier: '&' parameter_pack_identifier  */
#line 2318 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6689 "built/tmp/cppBison.yxx.c"
    break;

  case 275: /* parameter_pack_identifier: ANDAND parameter_pack_identifier  */
#line 2323 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6698 "built/tmp/cppBison.yxx.c"
    break;

  case 276: /* parameter_pack_identifier: SCOPING '*' parameter_pack_identifier  */
#line 2328 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6707 "built/tmp/cppBison.yxx.c"
    break;

  case 277: /* parameter_pack_identifier: parameter_pack_identifier '[' optional_const_expr ']'  */
#line 2333 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6716 "built/tmp/cppBison.yxx.c"
    break;

  case 278: /* parameter_pack_identifier: '(' parameter_pack_identifier ')' '(' function_parameter_list ')' function_post  */
#line 2338 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6726 "built/tmp/cppBison.yxx.c"
    break;

  case 279: /* parameter_pack_identifier: '(' parameter_pack_identifier ')'  */
#line 2344 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6735 "built/tmp/cppBison.yxx.c"
    break;

  case 280: /* not_paren_empty_instance_identifier: empty  */
#line 2352 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6743 "built/tmp/cppBison.yxx.c"
    break;

  case 281: /* not_paren_empty_instance_identifier: ELLIPSIS  */
#line 2356 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6752 "built/tmp/cppBison.yxx.c"
    break;

  case 282: /* not_paren_empty_instance_identifier: ELLIPSIS name  */
#line 2361 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6761 "built/tmp/cppBison.yxx.c"
    break;

  case 283: /* not_paren_empty_instance_identifier: KW_CONST not_paren_empty_instance_identifier  */
#line 2366 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6770 "built/tmp/cppBison.yxx.c"
    break;

  case 284: /* not_paren_empty_instance_identifier: KW_VOLATILE not_paren_empty_instance_identifier  */
#line 2371 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6779 "built/tmp/cppBison.yxx.c"
    break;

  case 285: /* not_paren_empty_instance_identifier: '*' not_paren_empty_instance_identifier  */
#line 2376 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6788 "built/tmp/cppBison.yxx.c"
    break;

  case 286: /* not_paren_empty_instance_identifier: '&' not_paren_empty_instance_identifier  */
#line 2381 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6797 "built/tmp/cppBison.yxx.c"
    break;

  case 287: /* not_paren_empty_instance_identifier: ANDAND not_paren_empty_instance_identifier  */
#line 2386 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6806 "built/tmp/cppBison.yxx.c"
    break;

  case 288: /* not_paren_empty_instance_identifier: SCOPING '*' not_paren_empty_instance_identifier  */
#line 2391 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6815 "built/tmp/cppBison.yxx.c"
    break;

  case 289: /* not_paren_empty_instance_identifier: not_paren_empty_instance_identifier '[' optional_const_expr ']'  */
#line 2396 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6824 "built/tmp/cppBison.yxx.c"
    break;

  case 290: /* empty_instance_identifier: empty  */
#line 2404 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6832 "built/tmp/cppBison.yxx.c"
    break;

  case 291: /* empty_instance_identifier: ELLIPSIS  */
#line 2408 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6841 "built/tmp/cppBison.yxx.c"
    break;

  case 292: /* empty_instance_identifier: ELLIPSIS name  */
#line 2413 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6850 "built/tmp/cppBison.yxx.c"
    break;

  case 293: /* empty_instance_identifier: KW_CONST empty_instance_identifier  */
#line 2418 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6859 "built/tmp/cppBison.yxx.c"
    break;

  case 294: /* empty_instance_identifier: KW_VOLATILE empty_instance_identifier  */
#line 2423 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6868 "built/tmp/cppBison.yxx.c"
    break;

  case 295: /* empty_instance_identifier: '*' not_paren_empty_instance_identifier  */
#line 2428 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6877 "built/tmp/cppBison.yxx.c"
    break;

  case 296: /* empty_instance_identifier: '&' not_paren_empty_instance_identifier  */
#line 2433 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6886 "built/tmp/cppBison.yxx.c"
    break;

  case 297: /* empty_instance_identifier: ANDAND not_paren_empty_instance_identifier  */
#line 2438 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6895 "built/tmp/cppBison.yxx.c"
    break;

  case 298: /* empty_instance_identifier: SCOPING '*' not_paren_empty_instance_identifier  */
#line 2443 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6904 "built/tmp/cppBison.yxx.c"
    break;

  case 299: /* empty_instance_identifier: not_paren_empty_instance_identifier '[' optional_const_expr ']'  */
#line 2448 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6913 "built/tmp/cppBison.yxx.c"
    break;

  case 300: /* empty_instance_identifier: '(' function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 2453 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6923 "built/tmp/cppBison.yxx.c"
    break;

  case 301: /* empty_instance_identifier: '(' '*' not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 2459 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6934 "built/tmp/cppBison.yxx.c"
    break;

  case 302: /* empty_instance_identifier: '(' '&' not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 2466 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6945 "built/tmp/cppBison.yxx.c"
    break;

  case 303: /* empty_instance_identifier: '(' ANDAND not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 2473 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6956 "built/tmp/cppBison.yxx.c"
    break;

  case 304: /* type: simple_type  */
#line 2483 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6964 "built/tmp/cppBison.yxx.c"
    break;

  case 305: /* type: TYPENAME_IDENTIFIER  */
#line 2487 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 6976 "built/tmp/cppBison.yxx.c"
    break;

  case 306: /* type: KW_TYPENAME name  */
#line 2495 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6984 "built/tmp/cppBison.yxx.c"
    break;

  case 307: /* type: anonymous_struct  */
#line 2499 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6992 "built/tmp/cppBison.yxx.c"
    break;

  case 308: /* type: named_struct  */
#line 2503 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 7000 "built/tmp/cppBison.yxx.c"
    break;

  case 309: /* type: enum  */
#line 2507 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
#line 7008 "built/tmp/cppBison.yxx.c"
    break;

  case 310: /* type: struct_keyword struct_attributes name  */
#line 2511 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7028 "built/tmp/cppBison.yxx.c"
    break;

  case 311: /* type: enum_keyword name_no_final ':' enum_element_type  */
#line 2527 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7048 "built/tmp/cppBison.yxx.c"
    break;

  case 312: /* type: KW_DECLTYPE '(' const_expr ')'  */
#line 2543 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7061 "built/tmp/cppBison.yxx.c"
    break;

  case 313: /* type: KW_DECLTYPE '(' KW_AUTO ')'  */
#line 2552 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7069 "built/tmp/cppBison.yxx.c"
    break;

  case 314: /* type: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2556 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 7083 "built/tmp/cppBison.yxx.c"
    break;

  case 315: /* type: KW_AUTO  */
#line 2566 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7091 "built/tmp/cppBison.yxx.c"
    break;

  case 316: /* type_pack: TYPEPACK_IDENTIFIER  */
#line 2573 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 7103 "built/tmp/cppBison.yxx.c"
    break;

  case 317: /* type_decl: simple_type  */
#line 2584 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7111 "built/tmp/cppBison.yxx.c"
    break;

  case 318: /* type_decl: TYPENAME_IDENTIFIER  */
#line 2588 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.decl) != nullptr);
}
#line 7123 "built/tmp/cppBison.yxx.c"
    break;

  case 319: /* type_decl: KW_TYPENAME name  */
#line 2596 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7131 "built/tmp/cppBison.yxx.c"
    break;

  case 320: /* type_decl: anonymous_struct  */
#line 2600 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 7139 "built/tmp/cppBison.yxx.c"
    break;

  case 321: /* type_decl: named_struct  */
#line 2604 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
#line 7147 "built/tmp/cppBison.yxx.c"
    break;

  case 322: /* type_decl: enum  */
#line 2608 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
#line 7155 "built/tmp/cppBison.yxx.c"
    break;

  case 323: /* type_decl: struct_keyword struct_attributes name  */
#line 2612 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7175 "built/tmp/cppBison.yxx.c"
    break;

  case 324: /* type_decl: enum_keyword name_no_final ':' enum_element_type  */
#line 2628 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7195 "built/tmp/cppBison.yxx.c"
    break;

  case 325: /* type_decl: enum_keyword name  */
#line 2644 "dtool/src/cppparser/cppBison.yxx"
{
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));

  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7217 "built/tmp/cppBison.yxx.c"
    break;

  case 326: /* type_decl: KW_DECLTYPE '(' const_expr ')'  */
#line 2662 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.decl) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7230 "built/tmp/cppBison.yxx.c"
    break;

  case 327: /* type_decl: KW_DECLTYPE '(' KW_AUTO ')'  */
#line 2671 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7238 "built/tmp/cppBison.yxx.c"
    break;

  case 328: /* type_decl: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2675 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.decl) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.decl) = enum_type->get_underlying_type();
  }
}
#line 7252 "built/tmp/cppBison.yxx.c"
    break;

  case 329: /* type_decl: KW_AUTO  */
#line 2685 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7260 "built/tmp/cppBison.yxx.c"
    break;

  case 330: /* predefined_type: simple_type  */
#line 2692 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7268 "built/tmp/cppBison.yxx.c"
    break;

  case 331: /* predefined_type: TYPENAME_IDENTIFIER  */
#line 2696 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 7280 "built/tmp/cppBison.yxx.c"
    break;

  case 332: /* predefined_type: KW_TYPENAME name  */
#line 2704 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7288 "built/tmp/cppBison.yxx.c"
    break;

  case 333: /* predefined_type: struct_keyword struct_attributes name  */
#line 2708 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7308 "built/tmp/cppBison.yxx.c"
    break;

  case 334: /* predefined_type: enum_keyword name  */
#line 2724 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7328 "built/tmp/cppBison.yxx.c"
    break;

  case 335: /* predefined_type: KW_DECLTYPE '(' const_expr ')'  */
#line 2740 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7341 "built/tmp/cppBison.yxx.c"
    break;

  case 336: /* predefined_type: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2749 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 7355 "built/tmp/cppBison.yxx.c"
    break;

  case 337: /* predefined_type: KW_AUTO  */
#line 2759 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7363 "built/tmp/cppBison.yxx.c"
    break;

  case 338: /* var_type_decl: type_decl  */
#line 2766 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[0].u.decl);
}
#line 7371 "built/tmp/cppBison.yxx.c"
    break;

  case 339: /* var_type_decl: IDENTIFIER  */
#line 2770 "dtool/src/cppparser/cppBison.yxx"
{
  yyerror(string("unknown type '") + (yyvsp[0].u.identifier)->get_fully_scoped_name() + "'", (yylsp[0]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 7381 "built/tmp/cppBison.yxx.c"
    break;

  case 340: /* full_type: type empty_instance_identifier  */
#line 2778 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7389 "built/tmp/cppBison.yxx.c"
    break;

  case 341: /* full_type: KW_CONST type empty_instance_identifier  */
#line 2782 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7398 "built/tmp/cppBison.yxx.c"
    break;

  case 342: /* full_type: type_pack empty_instance_identifier  */
#line 2787 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7406 "built/tmp/cppBison.yxx.c"
    break;

  case 343: /* full_type: KW_CONST type_pack empty_instance_identifier  */
#line 2791 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7415 "built/tmp/cppBison.yxx.c"
    break;

  case 348: /* $@16: %empty  */
#line 2806 "dtool/src/cppparser/cppBison.yxx"
{
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), nullptr, current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7433 "built/tmp/cppBison.yxx.c"
    break;

  case 349: /* anonymous_struct: struct_keyword struct_attributes '{' $@16 cpp '}'  */
#line 2820 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7444 "built/tmp/cppBison.yxx.c"
    break;

  case 350: /* $@17: %empty  */
#line 2830 "dtool/src/cppparser/cppBison.yxx"
{
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7468 "built/tmp/cppBison.yxx.c"
    break;

  case 351: /* named_struct: struct_keyword struct_attributes name_no_final $@17 maybe_final maybe_class_derivation '{' cpp '}'  */
#line 2850 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7479 "built/tmp/cppBison.yxx.c"
    break;

  case 353: /* maybe_final: KW_FINAL  */
#line 2861 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->_final = true;
}
#line 7487 "built/tmp/cppBison.yxx.c"
    break;

  case 358: /* base_specification: class_derivation_name  */
#line 2878 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_unknown, false);
}
#line 7495 "built/tmp/cppBison.yxx.c"
    break;

  case 359: /* base_specification: KW_PUBLIC class_derivation_name  */
#line 2882 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
#line 7503 "built/tmp/cppBison.yxx.c"
    break;

  case 360: /* base_specification: KW_PROTECTED class_derivation_name  */
#line 2886 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
#line 7511 "built/tmp/cppBison.yxx.c"
    break;

  case 361: /* base_specification: KW_PRIVATE class_derivation_name  */
#line 2890 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
#line 7519 "built/tmp/cppBison.yxx.c"
    break;

  case 362: /* base_specification: KW_VIRTUAL KW_PUBLIC class_derivation_name  */
#line 2894 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7527 "built/tmp/cppBison.yxx.c"
    break;

  case 363: /* base_specification: KW_VIRTUAL KW_PROTECTED class_derivation_name  */
#line 2898 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7535 "built/tmp/cppBison.yxx.c"
    break;

  case 364: /* base_specification: KW_VIRTUAL KW_PRIVATE class_derivation_name  */
#line 2902 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7543 "built/tmp/cppBison.yxx.c"
    break;

  case 365: /* base_specification: KW_PUBLIC KW_VIRTUAL class_derivation_name  */
#line 2906 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7551 "built/tmp/cppBison.yxx.c"
    break;

  case 366: /* base_specification: KW_PROTECTED KW_VIRTUAL class_derivation_name  */
#line 2910 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7559 "built/tmp/cppBison.yxx.c"
    break;

  case 367: /* base_specification: KW_PRIVATE KW_VIRTUAL class_derivation_name  */
#line 2914 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7567 "built/tmp/cppBison.yxx.c"
    break;

  case 368: /* enum: enum_decl '{' enum_body '}'  */
#line 2921 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.enum_type) = current_enum;
  current_enum = nullptr;
}
#line 7576 "built/tmp/cppBison.yxx.c"
    break;

  case 369: /* enum_decl: enum_keyword ':' enum_element_type  */
#line 2929 "dtool/src/cppparser/cppBison.yxx"
{
  current_enum = new CPPEnumType((yyvsp[-2].u.extension_enum), nullptr, (yyvsp[0].u.type), current_scope, nullptr, (yylsp[-2]).file);
}
#line 7584 "built/tmp/cppBison.yxx.c"
    break;

  case 370: /* enum_decl: enum_keyword  */
#line 2933 "dtool/src/cppparser/cppBison.yxx"
{
  current_enum = new CPPEnumType((yyvsp[0].u.extension_enum), nullptr, current_scope, nullptr, (yylsp[0]).file);
}
#line 7592 "built/tmp/cppBison.yxx.c"
    break;

  case 371: /* enum_decl: enum_keyword name_no_final ':' enum_element_type  */
#line 2937 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[-2].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), (yyvsp[0].u.type), current_scope, new_scope, (yylsp[-3]).file);
}
#line 7601 "built/tmp/cppBison.yxx.c"
    break;

  case 372: /* enum_decl: enum_keyword name_no_final  */
#line 2942 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[0].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, new_scope, (yylsp[-1]).file);
}
#line 7610 "built/tmp/cppBison.yxx.c"
    break;

  case 373: /* enum_element_type: simple_int_type  */
#line 2950 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7618 "built/tmp/cppBison.yxx.c"
    break;

  case 374: /* enum_element_type: TYPENAME_IDENTIFIER  */
#line 2954 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
#line 7626 "built/tmp/cppBison.yxx.c"
    break;

  case 376: /* enum_body_trailing_comma: enum_body_trailing_comma name ','  */
#line 2962 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-1].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[-1]));
}
#line 7635 "built/tmp/cppBison.yxx.c"
    break;

  case 377: /* enum_body_trailing_comma: enum_body_trailing_comma name '=' const_expr ','  */
#line 2967 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-3].u.identifier)->get_simple_name(), (yyvsp[-1].u.expr), current_lexer, (yylsp[-3]));
}
#line 7644 "built/tmp/cppBison.yxx.c"
    break;

  case 379: /* enum_body: enum_body_trailing_comma name  */
#line 2975 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[0].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[0]));
}
#line 7653 "built/tmp/cppBison.yxx.c"
    break;

  case 380: /* enum_body: enum_body_trailing_comma name '=' const_expr  */
#line 2980 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), (yyvsp[0].u.expr), current_lexer, (yylsp[-2]));
}
#line 7662 "built/tmp/cppBison.yxx.c"
    break;

  case 381: /* enum_keyword: KW_ENUM  */
#line 2988 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
#line 7670 "built/tmp/cppBison.yxx.c"
    break;

  case 382: /* enum_keyword: KW_ENUM KW_CLASS  */
#line 2992 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_class;
}
#line 7678 "built/tmp/cppBison.yxx.c"
    break;

  case 383: /* enum_keyword: KW_ENUM KW_STRUCT  */
#line 2996 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_struct;
}
#line 7686 "built/tmp/cppBison.yxx.c"
    break;

  case 384: /* struct_keyword: KW_CLASS  */
#line 3003 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
#line 7694 "built/tmp/cppBison.yxx.c"
    break;

  case 385: /* struct_keyword: KW_STRUCT  */
#line 3007 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
#line 7702 "built/tmp/cppBison.yxx.c"
    break;

  case 386: /* struct_keyword: KW_UNION  */
#line 3011 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
#line 7710 "built/tmp/cppBison.yxx.c"
    break;

  case 387: /* $@18: %empty  */
#line 3018 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7732 "built/tmp/cppBison.yxx.c"
    break;

  case 388: /* namespace_declaration: KW_NAMESPACE name '{' $@18 cpp '}'  */
#line 3036 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 7740 "built/tmp/cppBison.yxx.c"
    break;

  case 389: /* $@19: %empty  */
#line 3040 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7763 "built/tmp/cppBison.yxx.c"
    break;

  case 390: /* namespace_declaration: KW_INLINE KW_NAMESPACE name '{' $@19 cpp '}'  */
#line 3059 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 7771 "built/tmp/cppBison.yxx.c"
    break;

  case 393: /* using_declaration: KW_USING name ';'  */
#line 3068 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7781 "built/tmp/cppBison.yxx.c"
    break;

  case 394: /* using_declaration: KW_USING name '=' full_type ';'  */
#line 3074 "dtool/src/cppparser/cppBison.yxx"
{
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[-1].u.type), (yyvsp[-3].u.identifier), current_scope);
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-4]));
}
#line 7792 "built/tmp/cppBison.yxx.c"
    break;

  case 395: /* using_declaration: KW_USING KW_NAMESPACE name ';'  */
#line 3081 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), true, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7802 "built/tmp/cppBison.yxx.c"
    break;

  case 396: /* using_declaration: KW_USING KW_ENUM name ';'  */
#line 3087 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7812 "built/tmp/cppBison.yxx.c"
    break;

  case 400: /* simple_int_type: KW_BOOL  */
#line 3102 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
#line 7820 "built/tmp/cppBison.yxx.c"
    break;

  case 401: /* simple_int_type: KW_CHAR  */
#line 3106 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
#line 7828 "built/tmp/cppBison.yxx.c"
    break;

  case 402: /* simple_int_type: KW_WCHAR_T  */
#line 3110 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
#line 7836 "built/tmp/cppBison.yxx.c"
    break;

  case 403: /* simple_int_type: KW_CHAR8_T  */
#line 3114 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char8_t);
}
#line 7844 "built/tmp/cppBison.yxx.c"
    break;

  case 404: /* simple_int_type: KW_CHAR16_T  */
#line 3118 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
#line 7852 "built/tmp/cppBison.yxx.c"
    break;

  case 405: /* simple_int_type: KW_CHAR32_T  */
#line 3122 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
#line 7860 "built/tmp/cppBison.yxx.c"
    break;

  case 406: /* simple_int_type: KW_SHORT  */
#line 3126 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
#line 7869 "built/tmp/cppBison.yxx.c"
    break;

  case 407: /* simple_int_type: KW_LONG  */
#line 3131 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
#line 7878 "built/tmp/cppBison.yxx.c"
    break;

  case 408: /* simple_int_type: KW_UNSIGNED  */
#line 3136 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
#line 7887 "built/tmp/cppBison.yxx.c"
    break;

  case 409: /* simple_int_type: KW_SIGNED  */
#line 3141 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
#line 7896 "built/tmp/cppBison.yxx.c"
    break;

  case 410: /* simple_int_type: KW_INT  */
#line 3146 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
#line 7904 "built/tmp/cppBison.yxx.c"
    break;

  case 411: /* simple_int_type: KW_SHORT simple_int_type  */
#line 3150 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
#line 7913 "built/tmp/cppBison.yxx.c"
    break;

  case 412: /* simple_int_type: KW_LONG simple_int_type  */
#line 3155 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
#line 7926 "built/tmp/cppBison.yxx.c"
    break;

  case 413: /* simple_int_type: KW_UNSIGNED simple_int_type  */
#line 3164 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
#line 7935 "built/tmp/cppBison.yxx.c"
    break;

  case 414: /* simple_int_type: KW_SIGNED simple_int_type  */
#line 3169 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
#line 7944 "built/tmp/cppBison.yxx.c"
    break;

  case 415: /* simple_float_type: KW_FLOAT  */
#line 3177 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
#line 7952 "built/tmp/cppBison.yxx.c"
    break;

  case 416: /* simple_float_type: KW_DOUBLE  */
#line 3181 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
#line 7960 "built/tmp/cppBison.yxx.c"
    break;

  case 417: /* simple_float_type: KW_LONG KW_DOUBLE  */
#line 3185 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
#line 7969 "built/tmp/cppBison.yxx.c"
    break;

  case 418: /* simple_void_type: KW_VOID  */
#line 3193 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
#line 7977 "built/tmp/cppBison.yxx.c"
    break;

  case 419: /* $@20: %empty  */
#line 3202 "dtool/src/cppparser/cppBison.yxx"
{
  current_lexer->_resolve_identifiers = false;
}
#line 7985 "built/tmp/cppBison.yxx.c"
    break;

  case 420: /* code: $@20 code_block  */
#line 3206 "dtool/src/cppparser/cppBison.yxx"
{
  current_lexer->_resolve_identifiers = true;
}
#line 7993 "built/tmp/cppBison.yxx.c"
    break;

  case 535: /* element: KW_WHILE  */
#line 3251 "dtool/src/cppparser/cppBison.yxx"
{
}
#line 8000 "built/tmp/cppBison.yxx.c"
    break;

  case 559: /* optional_const_expr: empty  */
#line 3260 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 8008 "built/tmp/cppBison.yxx.c"
    break;

  case 560: /* optional_const_expr: const_expr  */
#line 3264 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8016 "built/tmp/cppBison.yxx.c"
    break;

  case 561: /* optional_const_expr_comma: empty  */
#line 3271 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 8024 "built/tmp/cppBison.yxx.c"
    break;

  case 562: /* optional_const_expr_comma: const_expr_comma  */
#line 3275 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8032 "built/tmp/cppBison.yxx.c"
    break;

  case 563: /* const_expr_comma: const_expr  */
#line 3282 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8040 "built/tmp/cppBison.yxx.c"
    break;

  case 564: /* const_expr_comma: const_expr_comma ',' const_expr  */
#line 3286 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8048 "built/tmp/cppBison.yxx.c"
    break;

  case 565: /* no_angle_bracket_const_expr: const_operand  */
#line 3293 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8056 "built/tmp/cppBison.yxx.c"
    break;

  case 566: /* no_angle_bracket_const_expr: '(' full_type ')' no_angle_bracket_const_expr  */
#line 3297 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8064 "built/tmp/cppBison.yxx.c"
    break;

  case 567: /* no_angle_bracket_const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3301 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8072 "built/tmp/cppBison.yxx.c"
    break;

  case 568: /* no_angle_bracket_const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3305 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8080 "built/tmp/cppBison.yxx.c"
    break;

  case 569: /* no_angle_bracket_const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3309 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8088 "built/tmp/cppBison.yxx.c"
    break;

  case 570: /* no_angle_bracket_const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3313 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8096 "built/tmp/cppBison.yxx.c"
    break;

  case 571: /* no_angle_bracket_const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3317 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8104 "built/tmp/cppBison.yxx.c"
    break;

  case 572: /* no_angle_bracket_const_expr: KW_SIZEOF no_angle_bracket_const_expr  */
#line 3321 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 8112 "built/tmp/cppBison.yxx.c"
    break;

  case 573: /* no_angle_bracket_const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3325 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8120 "built/tmp/cppBison.yxx.c"
    break;

  case 574: /* no_angle_bracket_const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3329 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8128 "built/tmp/cppBison.yxx.c"
    break;

  case 575: /* no_angle_bracket_const_expr: '!' no_angle_bracket_const_expr  */
#line 3333 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8136 "built/tmp/cppBison.yxx.c"
    break;

  case 576: /* no_angle_bracket_const_expr: '~' no_angle_bracket_const_expr  */
#line 3337 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8144 "built/tmp/cppBison.yxx.c"
    break;

  case 577: /* no_angle_bracket_const_expr: '-' no_angle_bracket_const_expr  */
#line 3341 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8152 "built/tmp/cppBison.yxx.c"
    break;

  case 578: /* no_angle_bracket_const_expr: '+' no_angle_bracket_const_expr  */
#line 3345 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8160 "built/tmp/cppBison.yxx.c"
    break;

  case 579: /* no_angle_bracket_const_expr: '*' no_angle_bracket_const_expr  */
#line 3349 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8168 "built/tmp/cppBison.yxx.c"
    break;

  case 580: /* no_angle_bracket_const_expr: '&' no_angle_bracket_const_expr  */
#line 3353 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8176 "built/tmp/cppBison.yxx.c"
    break;

  case 581: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '*' no_angle_bracket_const_expr  */
#line 3357 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8184 "built/tmp/cppBison.yxx.c"
    break;

  case 582: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '/' no_angle_bracket_const_expr  */
#line 3361 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8192 "built/tmp/cppBison.yxx.c"
    break;

  case 583: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '%' no_angle_bracket_const_expr  */
#line 3365 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8200 "built/tmp/cppBison.yxx.c"
    break;

  case 584: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '+' no_angle_bracket_const_expr  */
#line 3369 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8208 "built/tmp/cppBison.yxx.c"
    break;

  case 585: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '-' no_angle_bracket_const_expr  */
#line 3373 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8216 "built/tmp/cppBison.yxx.c"
    break;

  case 586: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '|' no_angle_bracket_const_expr  */
#line 3377 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8224 "built/tmp/cppBison.yxx.c"
    break;

  case 587: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '^' no_angle_bracket_const_expr  */
#line 3381 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8232 "built/tmp/cppBison.yxx.c"
    break;

  case 588: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '&' no_angle_bracket_const_expr  */
#line 3385 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8240 "built/tmp/cppBison.yxx.c"
    break;

  case 589: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr OROR no_angle_bracket_const_expr  */
#line 3389 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8248 "built/tmp/cppBison.yxx.c"
    break;

  case 590: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr ANDAND no_angle_bracket_const_expr  */
#line 3393 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8256 "built/tmp/cppBison.yxx.c"
    break;

  case 591: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr EQCOMPARE no_angle_bracket_const_expr  */
#line 3397 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8264 "built/tmp/cppBison.yxx.c"
    break;

  case 592: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr NECOMPARE no_angle_bracket_const_expr  */
#line 3401 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8272 "built/tmp/cppBison.yxx.c"
    break;

  case 593: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr LECOMPARE no_angle_bracket_const_expr  */
#line 3405 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8280 "built/tmp/cppBison.yxx.c"
    break;

  case 594: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr GECOMPARE no_angle_bracket_const_expr  */
#line 3409 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8288 "built/tmp/cppBison.yxx.c"
    break;

  case 595: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr SPACESHIP no_angle_bracket_const_expr  */
#line 3413 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8296 "built/tmp/cppBison.yxx.c"
    break;

  case 596: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr LSHIFT no_angle_bracket_const_expr  */
#line 3417 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8304 "built/tmp/cppBison.yxx.c"
    break;

  case 597: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr RSHIFT no_angle_bracket_const_expr  */
#line 3421 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8312 "built/tmp/cppBison.yxx.c"
    break;

  case 598: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '?' no_angle_bracket_const_expr ':' no_angle_bracket_const_expr  */
#line 3425 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8320 "built/tmp/cppBison.yxx.c"
    break;

  case 599: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '[' const_expr ']'  */
#line 3429 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8328 "built/tmp/cppBison.yxx.c"
    break;

  case 600: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '(' const_expr_comma ')'  */
#line 3433 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8336 "built/tmp/cppBison.yxx.c"
    break;

  case 601: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '(' ')'  */
#line 3437 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8344 "built/tmp/cppBison.yxx.c"
    break;

  case 602: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '.' name  */
#line 3441 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 8352 "built/tmp/cppBison.yxx.c"
    break;

  case 603: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr POINTSAT no_angle_bracket_const_expr  */
#line 3445 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8360 "built/tmp/cppBison.yxx.c"
    break;

  case 604: /* no_angle_bracket_const_expr: '(' const_expr_comma ')'  */
#line 3449 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8368 "built/tmp/cppBison.yxx.c"
    break;

  case 605: /* const_expr: const_operand  */
#line 3457 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8376 "built/tmp/cppBison.yxx.c"
    break;

  case 606: /* const_expr: '(' full_type ')' const_expr  */
#line 3461 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8384 "built/tmp/cppBison.yxx.c"
    break;

  case 607: /* const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3465 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8392 "built/tmp/cppBison.yxx.c"
    break;

  case 608: /* const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3469 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8400 "built/tmp/cppBison.yxx.c"
    break;

  case 609: /* const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3473 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8408 "built/tmp/cppBison.yxx.c"
    break;

  case 610: /* const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3477 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8416 "built/tmp/cppBison.yxx.c"
    break;

  case 611: /* const_expr: TYPENAME_IDENTIFIER '(' optional_const_expr_comma ')'  */
#line 3481 "dtool/src/cppparser/cppBison.yxx"
{
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8430 "built/tmp/cppBison.yxx.c"
    break;

  case 612: /* const_expr: TYPENAME_IDENTIFIER '{' optional_const_expr_comma '}'  */
#line 3491 "dtool/src/cppparser/cppBison.yxx"
{
  // Aggregate initialization.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::aggregate_init_op(type, (yyvsp[-1].u.expr)));
}
#line 8444 "built/tmp/cppBison.yxx.c"
    break;

  case 613: /* const_expr: KW_INT '(' optional_const_expr_comma ')'  */
#line 3501 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8454 "built/tmp/cppBison.yxx.c"
    break;

  case 614: /* const_expr: KW_CHAR '(' optional_const_expr_comma ')'  */
#line 3507 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8464 "built/tmp/cppBison.yxx.c"
    break;

  case 615: /* const_expr: KW_WCHAR_T '(' optional_const_expr_comma ')'  */
#line 3513 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8474 "built/tmp/cppBison.yxx.c"
    break;

  case 616: /* const_expr: KW_CHAR8_T '(' optional_const_expr_comma ')'  */
#line 3519 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char8_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8484 "built/tmp/cppBison.yxx.c"
    break;

  case 617: /* const_expr: KW_CHAR16_T '(' optional_const_expr_comma ')'  */
#line 3525 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8494 "built/tmp/cppBison.yxx.c"
    break;

  case 618: /* const_expr: KW_CHAR32_T '(' optional_const_expr_comma ')'  */
#line 3531 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8504 "built/tmp/cppBison.yxx.c"
    break;

  case 619: /* const_expr: KW_BOOL '(' optional_const_expr_comma ')'  */
#line 3537 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8514 "built/tmp/cppBison.yxx.c"
    break;

  case 620: /* const_expr: KW_SHORT '(' optional_const_expr_comma ')'  */
#line 3543 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8525 "built/tmp/cppBison.yxx.c"
    break;

  case 621: /* const_expr: KW_LONG '(' optional_const_expr_comma ')'  */
#line 3550 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8536 "built/tmp/cppBison.yxx.c"
    break;

  case 622: /* const_expr: KW_UNSIGNED '(' optional_const_expr_comma ')'  */
#line 3557 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8547 "built/tmp/cppBison.yxx.c"
    break;

  case 623: /* const_expr: KW_SIGNED '(' optional_const_expr_comma ')'  */
#line 3564 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8558 "built/tmp/cppBison.yxx.c"
    break;

  case 624: /* const_expr: KW_FLOAT '(' optional_const_expr_comma ')'  */
#line 3571 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8568 "built/tmp/cppBison.yxx.c"
    break;

  case 625: /* const_expr: KW_DOUBLE '(' optional_const_expr_comma ')'  */
#line 3577 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8578 "built/tmp/cppBison.yxx.c"
    break;

  case 626: /* const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3583 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8586 "built/tmp/cppBison.yxx.c"
    break;

  case 627: /* const_expr: KW_SIZEOF const_expr  */
#line 3587 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 8594 "built/tmp/cppBison.yxx.c"
    break;

  case 628: /* const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3591 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8602 "built/tmp/cppBison.yxx.c"
    break;

  case 629: /* const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3595 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8610 "built/tmp/cppBison.yxx.c"
    break;

  case 630: /* const_expr: KW_NEW predefined_type  */
#line 3599 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8618 "built/tmp/cppBison.yxx.c"
    break;

  case 631: /* const_expr: KW_NEW predefined_type '(' optional_const_expr_comma ')'  */
#line 3603 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8626 "built/tmp/cppBison.yxx.c"
    break;

  case 632: /* const_expr: KW_TYPEID '(' full_type ')'  */
#line 3607 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 8641 "built/tmp/cppBison.yxx.c"
    break;

  case 633: /* const_expr: KW_TYPEID '(' const_expr ')'  */
#line 3618 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 8656 "built/tmp/cppBison.yxx.c"
    break;

  case 634: /* const_expr: '!' const_expr  */
#line 3629 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8664 "built/tmp/cppBison.yxx.c"
    break;

  case 635: /* const_expr: '~' const_expr  */
#line 3633 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8672 "built/tmp/cppBison.yxx.c"
    break;

  case 636: /* const_expr: '-' const_expr  */
#line 3637 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8680 "built/tmp/cppBison.yxx.c"
    break;

  case 637: /* const_expr: '+' const_expr  */
#line 3641 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8688 "built/tmp/cppBison.yxx.c"
    break;

  case 638: /* const_expr: '*' const_expr  */
#line 3645 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8696 "built/tmp/cppBison.yxx.c"
    break;

  case 639: /* const_expr: '&' const_expr  */
#line 3649 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8704 "built/tmp/cppBison.yxx.c"
    break;

  case 640: /* const_expr: const_expr '*' const_expr  */
#line 3653 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8712 "built/tmp/cppBison.yxx.c"
    break;

  case 641: /* const_expr: const_expr '/' const_expr  */
#line 3657 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8720 "built/tmp/cppBison.yxx.c"
    break;

  case 642: /* const_expr: const_expr '%' const_expr  */
#line 3661 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8728 "built/tmp/cppBison.yxx.c"
    break;

  case 643: /* const_expr: const_expr '+' const_expr  */
#line 3665 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8736 "built/tmp/cppBison.yxx.c"
    break;

  case 644: /* const_expr: const_expr '-' const_expr  */
#line 3669 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8744 "built/tmp/cppBison.yxx.c"
    break;

  case 645: /* const_expr: const_expr '|' const_expr  */
#line 3673 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8752 "built/tmp/cppBison.yxx.c"
    break;

  case 646: /* const_expr: const_expr '^' const_expr  */
#line 3677 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8760 "built/tmp/cppBison.yxx.c"
    break;

  case 647: /* const_expr: const_expr '&' const_expr  */
#line 3681 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8768 "built/tmp/cppBison.yxx.c"
    break;

  case 648: /* const_expr: const_expr OROR const_expr  */
#line 3685 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8776 "built/tmp/cppBison.yxx.c"
    break;

  case 649: /* const_expr: const_expr ANDAND const_expr  */
#line 3689 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8784 "built/tmp/cppBison.yxx.c"
    break;

  case 650: /* const_expr: const_expr EQCOMPARE const_expr  */
#line 3693 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8792 "built/tmp/cppBison.yxx.c"
    break;

  case 651: /* const_expr: const_expr NECOMPARE const_expr  */
#line 3697 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8800 "built/tmp/cppBison.yxx.c"
    break;

  case 652: /* const_expr: const_expr LECOMPARE const_expr  */
#line 3701 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8808 "built/tmp/cppBison.yxx.c"
    break;

  case 653: /* const_expr: const_expr GECOMPARE const_expr  */
#line 3705 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8816 "built/tmp/cppBison.yxx.c"
    break;

  case 654: /* const_expr: const_expr SPACESHIP const_expr  */
#line 3709 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8824 "built/tmp/cppBison.yxx.c"
    break;

  case 655: /* const_expr: const_expr '<' const_expr  */
#line 3713 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8832 "built/tmp/cppBison.yxx.c"
    break;

  case 656: /* const_expr: const_expr '>' const_expr  */
#line 3717 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8840 "built/tmp/cppBison.yxx.c"
    break;

  case 657: /* const_expr: const_expr LSHIFT const_expr  */
#line 3721 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8848 "built/tmp/cppBison.yxx.c"
    break;

  case 658: /* const_expr: const_expr RSHIFT const_expr  */
#line 3725 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8856 "built/tmp/cppBison.yxx.c"
    break;

  case 659: /* const_expr: const_expr '?' const_expr ':' const_expr  */
#line 3729 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8864 "built/tmp/cppBison.yxx.c"
    break;

  case 660: /* const_expr: const_expr '[' const_expr ']'  */
#line 3733 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8872 "built/tmp/cppBison.yxx.c"
    break;

  case 661: /* const_expr: const_expr '(' const_expr_comma ')'  */
#line 3737 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8880 "built/tmp/cppBison.yxx.c"
    break;

  case 662: /* const_expr: const_expr '(' ')'  */
#line 3741 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8888 "built/tmp/cppBison.yxx.c"
    break;

  case 663: /* const_expr: KW_NOEXCEPT_LPAREN const_expr ')'  */
#line 3745 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(KW_NOEXCEPT, (yyvsp[-1].u.expr));
}
#line 8896 "built/tmp/cppBison.yxx.c"
    break;

  case 664: /* const_expr: const_expr '.' name  */
#line 3749 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 8904 "built/tmp/cppBison.yxx.c"
    break;

  case 665: /* const_expr: const_expr POINTSAT const_expr  */
#line 3753 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8912 "built/tmp/cppBison.yxx.c"
    break;

  case 666: /* const_expr: '(' const_expr_comma ')'  */
#line 3757 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8920 "built/tmp/cppBison.yxx.c"
    break;

  case 667: /* const_operand: INTEGER  */
#line 3764 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8928 "built/tmp/cppBison.yxx.c"
    break;

  case 668: /* const_operand: KW_TRUE  */
#line 3768 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(true);
}
#line 8936 "built/tmp/cppBison.yxx.c"
    break;

  case 669: /* const_operand: KW_FALSE  */
#line 3772 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(false);
}
#line 8944 "built/tmp/cppBison.yxx.c"
    break;

  case 670: /* const_operand: CHAR_TOK  */
#line 3776 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8952 "built/tmp/cppBison.yxx.c"
    break;

  case 671: /* const_operand: REAL  */
#line 3780 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 8960 "built/tmp/cppBison.yxx.c"
    break;

  case 672: /* const_operand: string_literal  */
#line 3784 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8968 "built/tmp/cppBison.yxx.c"
    break;

  case 673: /* const_operand: CUSTOM_LITERAL  */
#line 3788 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8976 "built/tmp/cppBison.yxx.c"
    break;

  case 674: /* const_operand: IDENTIFIER  */
#line 3792 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 8984 "built/tmp/cppBison.yxx.c"
    break;

  case 675: /* const_operand: KW_FINAL  */
#line 3796 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8994 "built/tmp/cppBison.yxx.c"
    break;

  case 676: /* const_operand: KW_OVERRIDE  */
#line 3802 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9004 "built/tmp/cppBison.yxx.c"
    break;

  case 677: /* const_operand: KW_NULLPTR  */
#line 3808 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 9012 "built/tmp/cppBison.yxx.c"
    break;

  case 678: /* const_operand: '[' capture_list ']' function_post maybe_trailing_return_type '{' code '}'  */
#line 3812 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-6].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-6].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-6].u.closure_type)));
}
#line 9022 "built/tmp/cppBison.yxx.c"
    break;

  case 679: /* const_operand: '[' capture_list ']' '(' function_parameter_list ')' function_post maybe_trailing_return_type '{' code '}'  */
#line 3818 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-9].u.closure_type)->_parameters = (yyvsp[-6].u.param_list);
  (yyvsp[-9].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-9].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-9].u.closure_type)));
}
#line 9033 "built/tmp/cppBison.yxx.c"
    break;

  case 680: /* const_operand: KW_HAS_VIRTUAL_DESTRUCTOR '(' full_type ')'  */
#line 3825 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_HAS_VIRTUAL_DESTRUCTOR, (yyvsp[-1].u.type)));
}
#line 9041 "built/tmp/cppBison.yxx.c"
    break;

  case 681: /* const_operand: KW_IS_ABSTRACT '(' full_type ')'  */
#line 3829 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ABSTRACT, (yyvsp[-1].u.type)));
}
#line 9049 "built/tmp/cppBison.yxx.c"
    break;

  case 682: /* const_operand: KW_IS_BASE_OF '(' full_type ',' full_type ')'  */
#line 3833 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 9057 "built/tmp/cppBison.yxx.c"
    break;

  case 683: /* const_operand: KW_IS_CLASS '(' full_type ')'  */
#line 3837 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-1].u.type)));
}
#line 9065 "built/tmp/cppBison.yxx.c"
    break;

  case 684: /* const_operand: KW_IS_CONSTRUCTIBLE '(' full_type ')'  */
#line 3841 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 9073 "built/tmp/cppBison.yxx.c"
    break;

  case 685: /* const_operand: KW_IS_CONSTRUCTIBLE '(' full_type ',' full_type ')'  */
#line 3845 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 9081 "built/tmp/cppBison.yxx.c"
    break;

  case 686: /* const_operand: KW_IS_CONVERTIBLE_TO '(' full_type ',' full_type ')'  */
#line 3849 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONVERTIBLE_TO, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 9089 "built/tmp/cppBison.yxx.c"
    break;

  case 687: /* const_operand: KW_IS_DESTRUCTIBLE '(' full_type ')'  */
#line 3853 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_DESTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 9097 "built/tmp/cppBison.yxx.c"
    break;

  case 688: /* const_operand: KW_IS_EMPTY '(' full_type ')'  */
#line 3857 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_EMPTY, (yyvsp[-1].u.type)));
}
#line 9105 "built/tmp/cppBison.yxx.c"
    break;

  case 689: /* const_operand: KW_IS_ENUM '(' full_type ')'  */
#line 3861 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ENUM, (yyvsp[-1].u.type)));
}
#line 9113 "built/tmp/cppBison.yxx.c"
    break;

  case 690: /* const_operand: KW_IS_FINAL '(' full_type ')'  */
#line 3865 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FINAL, (yyvsp[-1].u.type)));
}
#line 9121 "built/tmp/cppBison.yxx.c"
    break;

  case 691: /* const_operand: KW_IS_FUNDAMENTAL '(' full_type ')'  */
#line 3869 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FUNDAMENTAL, (yyvsp[-1].u.type)));
}
#line 9129 "built/tmp/cppBison.yxx.c"
    break;

  case 692: /* const_operand: KW_IS_POD '(' full_type ')'  */
#line 3873 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POD, (yyvsp[-1].u.type)));
}
#line 9137 "built/tmp/cppBison.yxx.c"
    break;

  case 693: /* const_operand: KW_IS_POLYMORPHIC '(' full_type ')'  */
#line 3877 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POLYMORPHIC, (yyvsp[-1].u.type)));
}
#line 9145 "built/tmp/cppBison.yxx.c"
    break;

  case 694: /* const_operand: KW_IS_STANDARD_LAYOUT '(' full_type ')'  */
#line 3881 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_STANDARD_LAYOUT, (yyvsp[-1].u.type)));
}
#line 9153 "built/tmp/cppBison.yxx.c"
    break;

  case 695: /* const_operand: KW_IS_TRIVIAL '(' full_type ')'  */
#line 3885 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIAL, (yyvsp[-1].u.type)));
}
#line 9161 "built/tmp/cppBison.yxx.c"
    break;

  case 696: /* const_operand: KW_IS_UNION '(' full_type ')'  */
#line 3889 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_UNION, (yyvsp[-1].u.type)));
}
#line 9169 "built/tmp/cppBison.yxx.c"
    break;

  case 697: /* formal_const_expr: formal_const_operand  */
#line 3903 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9177 "built/tmp/cppBison.yxx.c"
    break;

  case 698: /* formal_const_expr: '(' full_type ')' const_expr  */
#line 3907 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 9185 "built/tmp/cppBison.yxx.c"
    break;

  case 699: /* formal_const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3911 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 9193 "built/tmp/cppBison.yxx.c"
    break;

  case 700: /* formal_const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3915 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 9201 "built/tmp/cppBison.yxx.c"
    break;

  case 701: /* formal_const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3919 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 9209 "built/tmp/cppBison.yxx.c"
    break;

  case 702: /* formal_const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3923 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 9217 "built/tmp/cppBison.yxx.c"
    break;

  case 703: /* formal_const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3927 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 9225 "built/tmp/cppBison.yxx.c"
    break;

  case 704: /* formal_const_expr: KW_SIZEOF formal_const_expr  */
#line 3931 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 9233 "built/tmp/cppBison.yxx.c"
    break;

  case 705: /* formal_const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3935 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 9241 "built/tmp/cppBison.yxx.c"
    break;

  case 706: /* formal_const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3939 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 9249 "built/tmp/cppBison.yxx.c"
    break;

  case 707: /* formal_const_expr: KW_NEW predefined_type  */
#line 3943 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 9257 "built/tmp/cppBison.yxx.c"
    break;

  case 708: /* formal_const_expr: KW_NEW predefined_type '(' optional_const_expr_comma ')'  */
#line 3947 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 9265 "built/tmp/cppBison.yxx.c"
    break;

  case 709: /* formal_const_expr: KW_TYPEID '(' full_type ')'  */
#line 3951 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 9280 "built/tmp/cppBison.yxx.c"
    break;

  case 710: /* formal_const_expr: KW_TYPEID '(' const_expr ')'  */
#line 3962 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 9295 "built/tmp/cppBison.yxx.c"
    break;

  case 711: /* formal_const_expr: '!' const_expr  */
#line 3973 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 9303 "built/tmp/cppBison.yxx.c"
    break;

  case 712: /* formal_const_expr: '~' const_expr  */
#line 3977 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 9311 "built/tmp/cppBison.yxx.c"
    break;

  case 713: /* formal_const_expr: '-' const_expr  */
#line 3981 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 9319 "built/tmp/cppBison.yxx.c"
    break;

  case 714: /* formal_const_expr: '+' const_expr  */
#line 3985 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 9327 "built/tmp/cppBison.yxx.c"
    break;

  case 715: /* formal_const_expr: '&' const_expr  */
#line 3989 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 9335 "built/tmp/cppBison.yxx.c"
    break;

  case 716: /* formal_const_expr: formal_const_expr '*' const_expr  */
#line 3993 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9343 "built/tmp/cppBison.yxx.c"
    break;

  case 717: /* formal_const_expr: formal_const_expr '/' const_expr  */
#line 3997 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9351 "built/tmp/cppBison.yxx.c"
    break;

  case 718: /* formal_const_expr: formal_const_expr '%' const_expr  */
#line 4001 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9359 "built/tmp/cppBison.yxx.c"
    break;

  case 719: /* formal_const_expr: formal_const_expr '+' const_expr  */
#line 4005 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9367 "built/tmp/cppBison.yxx.c"
    break;

  case 720: /* formal_const_expr: formal_const_expr '-' const_expr  */
#line 4009 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9375 "built/tmp/cppBison.yxx.c"
    break;

  case 721: /* formal_const_expr: formal_const_expr '|' const_expr  */
#line 4013 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9383 "built/tmp/cppBison.yxx.c"
    break;

  case 722: /* formal_const_expr: formal_const_expr '^' const_expr  */
#line 4017 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9391 "built/tmp/cppBison.yxx.c"
    break;

  case 723: /* formal_const_expr: formal_const_expr '&' const_expr  */
#line 4021 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9399 "built/tmp/cppBison.yxx.c"
    break;

  case 724: /* formal_const_expr: formal_const_expr OROR const_expr  */
#line 4025 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9407 "built/tmp/cppBison.yxx.c"
    break;

  case 725: /* formal_const_expr: formal_const_expr ANDAND const_expr  */
#line 4029 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9415 "built/tmp/cppBison.yxx.c"
    break;

  case 726: /* formal_const_expr: formal_const_expr EQCOMPARE const_expr  */
#line 4033 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9423 "built/tmp/cppBison.yxx.c"
    break;

  case 727: /* formal_const_expr: formal_const_expr NECOMPARE const_expr  */
#line 4037 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9431 "built/tmp/cppBison.yxx.c"
    break;

  case 728: /* formal_const_expr: formal_const_expr LECOMPARE const_expr  */
#line 4041 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9439 "built/tmp/cppBison.yxx.c"
    break;

  case 729: /* formal_const_expr: formal_const_expr GECOMPARE const_expr  */
#line 4045 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9447 "built/tmp/cppBison.yxx.c"
    break;

  case 730: /* formal_const_expr: formal_const_expr SPACESHIP const_expr  */
#line 4049 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9455 "built/tmp/cppBison.yxx.c"
    break;

  case 731: /* formal_const_expr: formal_const_expr '<' const_expr  */
#line 4053 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9463 "built/tmp/cppBison.yxx.c"
    break;

  case 732: /* formal_const_expr: formal_const_expr '>' const_expr  */
#line 4057 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9471 "built/tmp/cppBison.yxx.c"
    break;

  case 733: /* formal_const_expr: formal_const_expr LSHIFT const_expr  */
#line 4061 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9479 "built/tmp/cppBison.yxx.c"
    break;

  case 734: /* formal_const_expr: formal_const_expr RSHIFT const_expr  */
#line 4065 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9487 "built/tmp/cppBison.yxx.c"
    break;

  case 735: /* formal_const_expr: formal_const_expr '?' const_expr ':' const_expr  */
#line 4069 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9495 "built/tmp/cppBison.yxx.c"
    break;

  case 736: /* formal_const_expr: formal_const_expr '[' const_expr ']'  */
#line 4073 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9503 "built/tmp/cppBison.yxx.c"
    break;

  case 737: /* formal_const_expr: formal_const_expr '(' const_expr_comma ')'  */
#line 4077 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9511 "built/tmp/cppBison.yxx.c"
    break;

  case 738: /* formal_const_expr: formal_const_expr '(' ')'  */
#line 4081 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 9519 "built/tmp/cppBison.yxx.c"
    break;

  case 739: /* formal_const_expr: formal_const_expr '.' name  */
#line 4085 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 9527 "built/tmp/cppBison.yxx.c"
    break;

  case 740: /* formal_const_expr: formal_const_expr POINTSAT const_expr  */
#line 4089 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9535 "built/tmp/cppBison.yxx.c"
    break;

  case 741: /* formal_const_expr: '(' const_expr_comma ')'  */
#line 4093 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 9543 "built/tmp/cppBison.yxx.c"
    break;

  case 742: /* formal_const_operand: INTEGER  */
#line 4100 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9551 "built/tmp/cppBison.yxx.c"
    break;

  case 743: /* formal_const_operand: KW_TRUE  */
#line 4104 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(true);
}
#line 9559 "built/tmp/cppBison.yxx.c"
    break;

  case 744: /* formal_const_operand: KW_FALSE  */
#line 4108 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(false);
}
#line 9567 "built/tmp/cppBison.yxx.c"
    break;

  case 745: /* formal_const_operand: CHAR_TOK  */
#line 4112 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9575 "built/tmp/cppBison.yxx.c"
    break;

  case 746: /* formal_const_operand: REAL  */
#line 4116 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 9583 "built/tmp/cppBison.yxx.c"
    break;

  case 747: /* formal_const_operand: string_literal  */
#line 4120 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9591 "built/tmp/cppBison.yxx.c"
    break;

  case 748: /* formal_const_operand: CUSTOM_LITERAL  */
#line 4124 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9599 "built/tmp/cppBison.yxx.c"
    break;

  case 749: /* formal_const_operand: IDENTIFIER  */
#line 4128 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 9607 "built/tmp/cppBison.yxx.c"
    break;

  case 750: /* formal_const_operand: KW_FINAL  */
#line 4132 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9617 "built/tmp/cppBison.yxx.c"
    break;

  case 751: /* formal_const_operand: KW_OVERRIDE  */
#line 4138 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9627 "built/tmp/cppBison.yxx.c"
    break;

  case 752: /* formal_const_operand: KW_NULLPTR  */
#line 4144 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 9635 "built/tmp/cppBison.yxx.c"
    break;

  case 753: /* capture_list: empty  */
#line 4152 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType();
}
#line 9643 "built/tmp/cppBison.yxx.c"
    break;

  case 754: /* capture_list: '='  */
#line 4156 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_value);
}
#line 9651 "built/tmp/cppBison.yxx.c"
    break;

  case 755: /* capture_list: '&'  */
#line 4160 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_reference);
}
#line 9659 "built/tmp/cppBison.yxx.c"
    break;

  case 756: /* capture_list: capture maybe_initialize  */
#line 4164 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType();
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9670 "built/tmp/cppBison.yxx.c"
    break;

  case 757: /* capture_list: capture_list ',' capture maybe_initialize  */
#line 4171 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = (yyvsp[-3].u.closure_type);
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9681 "built/tmp/cppBison.yxx.c"
    break;

  case 758: /* capture: '&' name  */
#line 4181 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9691 "built/tmp/cppBison.yxx.c"
    break;

  case 759: /* capture: '&' name ELLIPSIS  */
#line 4187 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[-1].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9701 "built/tmp/cppBison.yxx.c"
    break;

  case 760: /* capture: name  */
#line 4193 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  if ((yyval.u.capture)->_name == "this") {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
  } else {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  }
}
#line 9715 "built/tmp/cppBison.yxx.c"
    break;

  case 761: /* capture: '*' name  */
#line 4203 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  if ((yyval.u.capture)->_name != "this") {
    yywarning("only capture name 'this' may be preceded by an asterisk", (yylsp[0]));
  }
}
#line 9728 "built/tmp/cppBison.yxx.c"
    break;

  case 762: /* class_derivation_name: name  */
#line 4215 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == nullptr) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 9740 "built/tmp/cppBison.yxx.c"
    break;

  case 763: /* class_derivation_name: KW_TYPENAME name  */
#line 4223 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 9748 "built/tmp/cppBison.yxx.c"
    break;

  case 764: /* class_derivation_name: name ELLIPSIS  */
#line 4227 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[-1].u.identifier));
  ctp->_packed = true;
  (yyval.u.type) = CPPType::new_type(ctp);
}
#line 9758 "built/tmp/cppBison.yxx.c"
    break;

  case 765: /* name: IDENTIFIER  */
#line 4257 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9766 "built/tmp/cppBison.yxx.c"
    break;

  case 766: /* name: TYPENAME_IDENTIFIER  */
#line 4261 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9774 "built/tmp/cppBison.yxx.c"
    break;

  case 767: /* name: TYPEPACK_IDENTIFIER  */
#line 4265 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9782 "built/tmp/cppBison.yxx.c"
    break;

  case 768: /* name: KW_FINAL  */
#line 4269 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[0]));
}
#line 9790 "built/tmp/cppBison.yxx.c"
    break;

  case 769: /* name: KW_OVERRIDE  */
#line 4273 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9798 "built/tmp/cppBison.yxx.c"
    break;

  case 770: /* name: KW_SIGNED  */
#line 4277 "dtool/src/cppparser/cppBison.yxx"
{
  // This is not a keyword in Python, so it is useful to be able to use this
  // in MAKE_PROPERTY definitions, etc.
  (yyval.u.identifier) = new CPPIdentifier("signed", (yylsp[0]));
}
#line 9808 "built/tmp/cppBison.yxx.c"
    break;

  case 771: /* name: KW_FLOAT  */
#line 4283 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("float", (yylsp[0]));
}
#line 9816 "built/tmp/cppBison.yxx.c"
    break;

  case 772: /* name: KW_PUBLIC  */
#line 4287 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("public", (yylsp[0]));
}
#line 9824 "built/tmp/cppBison.yxx.c"
    break;

  case 773: /* name: KW_PRIVATE  */
#line 4291 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("private", (yylsp[0]));
}
#line 9832 "built/tmp/cppBison.yxx.c"
    break;

  case 774: /* name: KW_STATIC  */
#line 4295 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("static", (yylsp[0]));
}
#line 9840 "built/tmp/cppBison.yxx.c"
    break;

  case 775: /* name: KW_DEFAULT  */
#line 4299 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("default", (yylsp[0]));
}
#line 9848 "built/tmp/cppBison.yxx.c"
    break;

  case 776: /* name_no_final: IDENTIFIER  */
#line 4310 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9856 "built/tmp/cppBison.yxx.c"
    break;

  case 777: /* name_no_final: TYPENAME_IDENTIFIER  */
#line 4314 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9864 "built/tmp/cppBison.yxx.c"
    break;

  case 778: /* name_no_final: TYPEPACK_IDENTIFIER  */
#line 4318 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9872 "built/tmp/cppBison.yxx.c"
    break;

  case 779: /* name_no_final: KW_OVERRIDE  */
#line 4322 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9880 "built/tmp/cppBison.yxx.c"
    break;

  case 780: /* string_literal: SIMPLE_STRING  */
#line 4330 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 9888 "built/tmp/cppBison.yxx.c"
    break;

  case 781: /* string_literal: STRING_LITERAL  */
#line 4334 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9896 "built/tmp/cppBison.yxx.c"
    break;

  case 782: /* string_literal: string_literal SIMPLE_STRING  */
#line 4338 "dtool/src/cppparser/cppBison.yxx"
{
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  (yyval.u.expr)->_str += (yyvsp[0].str);
}
#line 9906 "built/tmp/cppBison.yxx.c"
    break;

  case 783: /* string_literal: string_literal STRING_LITERAL  */
#line 4344 "dtool/src/cppparser/cppBison.yxx"
{
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  if ((yyvsp[0].u.expr)->_type != CPPExpression::T_string && (yyvsp[0].u.expr)->_type != (yyvsp[-1].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[0].u.expr)->_str;
}
#line 9919 "built/tmp/cppBison.yxx.c"
    break;


#line 9923 "built/tmp/cppBison.yxx.c"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturn;
#endif


/*-------------------------------------------------------.
| yyreturn -- parsing is finished, clean up and return.  |
`-------------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

