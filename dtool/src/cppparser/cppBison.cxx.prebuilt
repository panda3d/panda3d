/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs


/* Copy the first part of user declarations.  */
#line 7 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:339  */


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppClosureType.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL;
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static CPPClosureType *current_closure = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#line 268 "built/tmp/cppBison.yxx.c" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "cppBison.yxx.h".  */
#ifndef YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    REAL = 258,
    INTEGER = 259,
    CHAR_TOK = 260,
    SIMPLE_STRING = 261,
    SIMPLE_IDENTIFIER = 262,
    STRING_LITERAL = 263,
    CUSTOM_LITERAL = 264,
    IDENTIFIER = 265,
    TYPENAME_IDENTIFIER = 266,
    TYPEPACK_IDENTIFIER = 267,
    SCOPING = 268,
    TYPEDEFNAME = 269,
    ELLIPSIS = 270,
    OROR = 271,
    ANDAND = 272,
    EQCOMPARE = 273,
    NECOMPARE = 274,
    LECOMPARE = 275,
    GECOMPARE = 276,
    LSHIFT = 277,
    RSHIFT = 278,
    POINTSAT_STAR = 279,
    DOT_STAR = 280,
    UNARY = 281,
    UNARY_NOT = 282,
    UNARY_NEGATE = 283,
    UNARY_MINUS = 284,
    UNARY_PLUS = 285,
    UNARY_STAR = 286,
    UNARY_REF = 287,
    POINTSAT = 288,
    SCOPE = 289,
    PLUSPLUS = 290,
    MINUSMINUS = 291,
    TIMESEQUAL = 292,
    DIVIDEEQUAL = 293,
    MODEQUAL = 294,
    PLUSEQUAL = 295,
    MINUSEQUAL = 296,
    OREQUAL = 297,
    ANDEQUAL = 298,
    XOREQUAL = 299,
    LSHIFTEQUAL = 300,
    RSHIFTEQUAL = 301,
    ATTR_LEFT = 302,
    ATTR_RIGHT = 303,
    KW_ALIGNAS = 304,
    KW_ALIGNOF = 305,
    KW_AUTO = 306,
    KW_BEGIN_PUBLISH = 307,
    KW_BLOCKING = 308,
    KW_BOOL = 309,
    KW_CATCH = 310,
    KW_CHAR = 311,
    KW_CHAR16_T = 312,
    KW_CHAR32_T = 313,
    KW_CLASS = 314,
    KW_CONST = 315,
    KW_CONSTEXPR = 316,
    KW_CONST_CAST = 317,
    KW_DECLTYPE = 318,
    KW_DEFAULT = 319,
    KW_DELETE = 320,
    KW_DOUBLE = 321,
    KW_DYNAMIC_CAST = 322,
    KW_ELSE = 323,
    KW_END_PUBLISH = 324,
    KW_ENUM = 325,
    KW_EXTENSION = 326,
    KW_EXTERN = 327,
    KW_EXPLICIT = 328,
    KW_PUBLISHED = 329,
    KW_FALSE = 330,
    KW_FINAL = 331,
    KW_FLOAT = 332,
    KW_FRIEND = 333,
    KW_FOR = 334,
    KW_GOTO = 335,
    KW_HAS_VIRTUAL_DESTRUCTOR = 336,
    KW_IF = 337,
    KW_INLINE = 338,
    KW_INT = 339,
    KW_IS_ABSTRACT = 340,
    KW_IS_BASE_OF = 341,
    KW_IS_CLASS = 342,
    KW_IS_CONSTRUCTIBLE = 343,
    KW_IS_CONVERTIBLE_TO = 344,
    KW_IS_DESTRUCTIBLE = 345,
    KW_IS_EMPTY = 346,
    KW_IS_ENUM = 347,
    KW_IS_FINAL = 348,
    KW_IS_FUNDAMENTAL = 349,
    KW_IS_POD = 350,
    KW_IS_POLYMORPHIC = 351,
    KW_IS_STANDARD_LAYOUT = 352,
    KW_IS_TRIVIAL = 353,
    KW_IS_UNION = 354,
    KW_LONG = 355,
    KW_MAKE_MAP_PROPERTY = 356,
    KW_MAKE_PROPERTY = 357,
    KW_MAKE_PROPERTY2 = 358,
    KW_MAKE_SEQ = 359,
    KW_MAKE_SEQ_PROPERTY = 360,
    KW_MUTABLE = 361,
    KW_NAMESPACE = 362,
    KW_NEW = 363,
    KW_NOEXCEPT = 364,
    KW_NULLPTR = 365,
    KW_OPERATOR = 366,
    KW_OVERRIDE = 367,
    KW_PRIVATE = 368,
    KW_PROTECTED = 369,
    KW_PUBLIC = 370,
    KW_REGISTER = 371,
    KW_REINTERPRET_CAST = 372,
    KW_RETURN = 373,
    KW_SHORT = 374,
    KW_SIGNED = 375,
    KW_SIZEOF = 376,
    KW_STATIC = 377,
    KW_STATIC_ASSERT = 378,
    KW_STATIC_CAST = 379,
    KW_STRUCT = 380,
    KW_TEMPLATE = 381,
    KW_THREAD_LOCAL = 382,
    KW_THROW = 383,
    KW_TRUE = 384,
    KW_TRY = 385,
    KW_TYPEDEF = 386,
    KW_TYPEID = 387,
    KW_TYPENAME = 388,
    KW_UNDERLYING_TYPE = 389,
    KW_UNION = 390,
    KW_UNSIGNED = 391,
    KW_USING = 392,
    KW_VIRTUAL = 393,
    KW_VOID = 394,
    KW_VOLATILE = 395,
    KW_WCHAR_T = 396,
    KW_WHILE = 397,
    START_CPP = 398,
    START_CONST_EXPR = 399,
    START_TYPE = 400
  };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define SIMPLE_STRING 261
#define SIMPLE_IDENTIFIER 262
#define STRING_LITERAL 263
#define CUSTOM_LITERAL 264
#define IDENTIFIER 265
#define TYPENAME_IDENTIFIER 266
#define TYPEPACK_IDENTIFIER 267
#define SCOPING 268
#define TYPEDEFNAME 269
#define ELLIPSIS 270
#define OROR 271
#define ANDAND 272
#define EQCOMPARE 273
#define NECOMPARE 274
#define LECOMPARE 275
#define GECOMPARE 276
#define LSHIFT 277
#define RSHIFT 278
#define POINTSAT_STAR 279
#define DOT_STAR 280
#define UNARY 281
#define UNARY_NOT 282
#define UNARY_NEGATE 283
#define UNARY_MINUS 284
#define UNARY_PLUS 285
#define UNARY_STAR 286
#define UNARY_REF 287
#define POINTSAT 288
#define SCOPE 289
#define PLUSPLUS 290
#define MINUSMINUS 291
#define TIMESEQUAL 292
#define DIVIDEEQUAL 293
#define MODEQUAL 294
#define PLUSEQUAL 295
#define MINUSEQUAL 296
#define OREQUAL 297
#define ANDEQUAL 298
#define XOREQUAL 299
#define LSHIFTEQUAL 300
#define RSHIFTEQUAL 301
#define ATTR_LEFT 302
#define ATTR_RIGHT 303
#define KW_ALIGNAS 304
#define KW_ALIGNOF 305
#define KW_AUTO 306
#define KW_BEGIN_PUBLISH 307
#define KW_BLOCKING 308
#define KW_BOOL 309
#define KW_CATCH 310
#define KW_CHAR 311
#define KW_CHAR16_T 312
#define KW_CHAR32_T 313
#define KW_CLASS 314
#define KW_CONST 315
#define KW_CONSTEXPR 316
#define KW_CONST_CAST 317
#define KW_DECLTYPE 318
#define KW_DEFAULT 319
#define KW_DELETE 320
#define KW_DOUBLE 321
#define KW_DYNAMIC_CAST 322
#define KW_ELSE 323
#define KW_END_PUBLISH 324
#define KW_ENUM 325
#define KW_EXTENSION 326
#define KW_EXTERN 327
#define KW_EXPLICIT 328
#define KW_PUBLISHED 329
#define KW_FALSE 330
#define KW_FINAL 331
#define KW_FLOAT 332
#define KW_FRIEND 333
#define KW_FOR 334
#define KW_GOTO 335
#define KW_HAS_VIRTUAL_DESTRUCTOR 336
#define KW_IF 337
#define KW_INLINE 338
#define KW_INT 339
#define KW_IS_ABSTRACT 340
#define KW_IS_BASE_OF 341
#define KW_IS_CLASS 342
#define KW_IS_CONSTRUCTIBLE 343
#define KW_IS_CONVERTIBLE_TO 344
#define KW_IS_DESTRUCTIBLE 345
#define KW_IS_EMPTY 346
#define KW_IS_ENUM 347
#define KW_IS_FINAL 348
#define KW_IS_FUNDAMENTAL 349
#define KW_IS_POD 350
#define KW_IS_POLYMORPHIC 351
#define KW_IS_STANDARD_LAYOUT 352
#define KW_IS_TRIVIAL 353
#define KW_IS_UNION 354
#define KW_LONG 355
#define KW_MAKE_MAP_PROPERTY 356
#define KW_MAKE_PROPERTY 357
#define KW_MAKE_PROPERTY2 358
#define KW_MAKE_SEQ 359
#define KW_MAKE_SEQ_PROPERTY 360
#define KW_MUTABLE 361
#define KW_NAMESPACE 362
#define KW_NEW 363
#define KW_NOEXCEPT 364
#define KW_NULLPTR 365
#define KW_OPERATOR 366
#define KW_OVERRIDE 367
#define KW_PRIVATE 368
#define KW_PROTECTED 369
#define KW_PUBLIC 370
#define KW_REGISTER 371
#define KW_REINTERPRET_CAST 372
#define KW_RETURN 373
#define KW_SHORT 374
#define KW_SIGNED 375
#define KW_SIZEOF 376
#define KW_STATIC 377
#define KW_STATIC_ASSERT 378
#define KW_STATIC_CAST 379
#define KW_STRUCT 380
#define KW_TEMPLATE 381
#define KW_THREAD_LOCAL 382
#define KW_THROW 383
#define KW_TRUE 384
#define KW_TRY 385
#define KW_TYPEDEF 386
#define KW_TYPEID 387
#define KW_TYPENAME 388
#define KW_UNDERLYING_TYPE 389
#define KW_UNION 390
#define KW_UNSIGNED 391
#define KW_USING 392
#define KW_VIRTUAL 393
#define KW_VOID 394
#define KW_VOLATILE 395
#define KW_WCHAR_T 396
#define KW_WHILE 397
#define START_CPP 398
#define START_CONST_EXPR 399
#define START_TYPE 400

/* Value type.  */

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int cppyyparse (void);

#endif /* !YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 617 "built/tmp/cppBison.yxx.c" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  104
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   7000

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  170
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  109
/* YYNRULES -- Number of rules.  */
#define YYNRULES  757
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1539

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   400

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   168,     2,     2,     2,   161,   154,     2,
     164,   166,   159,   157,   147,   158,   163,   160,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   149,   148,
     155,   150,   156,   151,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   165,     2,   169,   153,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   146,   152,   167,   162,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   448,   448,   449,   453,   460,   461,   462,   466,   467,
     471,   475,   479,   492,   491,   503,   504,   505,   506,   507,
     508,   509,   522,   531,   535,   543,   547,   551,   562,   583,
     613,   630,   658,   695,   717,   750,   772,   783,   797,   796,
     811,   815,   820,   824,   835,   839,   843,   847,   851,   855,
     859,   863,   867,   871,   875,   879,   884,   888,   895,   896,
     900,   901,   902,   907,   906,   922,   932,   931,   948,   956,
     964,   975,   991,   990,  1005,  1020,  1029,  1044,  1043,  1068,
    1067,  1095,  1094,  1125,  1124,  1143,  1142,  1163,  1162,  1194,
    1193,  1219,  1232,  1236,  1240,  1244,  1257,  1261,  1265,  1269,
    1273,  1278,  1283,  1287,  1291,  1295,  1302,  1306,  1310,  1314,
    1318,  1322,  1326,  1330,  1334,  1338,  1342,  1346,  1350,  1354,
    1358,  1362,  1366,  1370,  1374,  1378,  1382,  1386,  1390,  1394,
    1398,  1402,  1406,  1410,  1414,  1418,  1422,  1426,  1430,  1434,
    1438,  1442,  1446,  1450,  1454,  1461,  1462,  1463,  1467,  1469,
    1468,  1476,  1477,  1481,  1482,  1486,  1492,  1501,  1502,  1506,
    1510,  1514,  1518,  1524,  1530,  1536,  1543,  1548,  1557,  1561,
    1566,  1574,  1586,  1590,  1604,  1619,  1624,  1629,  1634,  1639,
    1644,  1649,  1654,  1660,  1659,  1690,  1700,  1710,  1714,  1718,
    1727,  1731,  1736,  1740,  1745,  1753,  1758,  1766,  1770,  1775,
    1779,  1784,  1792,  1797,  1805,  1809,  1816,  1820,  1827,  1831,
    1835,  1839,  1843,  1850,  1854,  1858,  1862,  1866,  1870,  1877,
    1878,  1879,  1883,  1886,  1887,  1888,  1892,  1897,  1903,  1909,
    1914,  1920,  1926,  1930,  1941,  1945,  1955,  1959,  1963,  1968,
    1973,  1978,  1983,  1988,  1993,  2001,  2005,  2009,  2014,  2019,
    2024,  2029,  2034,  2039,  2044,  2050,  2058,  2063,  2068,  2073,
    2078,  2083,  2088,  2093,  2098,  2103,  2109,  2117,  2121,  2126,
    2131,  2136,  2141,  2146,  2151,  2156,  2161,  2169,  2173,  2178,
    2183,  2188,  2193,  2198,  2203,  2208,  2213,  2218,  2224,  2231,
    2238,  2248,  2252,  2260,  2264,  2268,  2272,  2276,  2292,  2308,
    2317,  2321,  2331,  2338,  2349,  2353,  2361,  2365,  2369,  2373,
    2377,  2393,  2409,  2427,  2436,  2440,  2450,  2457,  2461,  2469,
    2473,  2489,  2505,  2514,  2524,  2531,  2535,  2543,  2547,  2552,
    2556,  2564,  2565,  2566,  2567,  2572,  2571,  2596,  2595,  2625,
    2626,  2633,  2634,  2638,  2639,  2643,  2647,  2651,  2655,  2659,
    2663,  2667,  2671,  2675,  2679,  2686,  2694,  2698,  2702,  2707,
    2715,  2719,  2726,  2727,  2732,  2739,  2740,  2745,  2753,  2757,
    2761,  2768,  2772,  2776,  2784,  2783,  2806,  2805,  2828,  2829,
    2833,  2839,  2846,  2855,  2856,  2857,  2861,  2865,  2869,  2873,
    2877,  2881,  2886,  2891,  2896,  2901,  2905,  2910,  2919,  2924,
    2932,  2936,  2940,  2948,  2958,  2958,  2968,  2969,  2973,  2974,
    2975,  2976,  2977,  2978,  2979,  2980,  2981,  2982,  2983,  2984,
    2984,  2984,  2985,  2985,  2985,  2985,  2986,  2986,  2986,  2986,
    2986,  2987,  2987,  2987,  2988,  2988,  2988,  2988,  2988,  2989,
    2989,  2989,  2989,  2989,  2990,  2990,  2991,  2991,  2991,  2991,
    2991,  2992,  2992,  2992,  2992,  2992,  2993,  2993,  2993,  2993,
    2994,  2994,  2994,  2994,  2994,  2995,  2995,  2995,  2995,  2995,
    2996,  2996,  2996,  2996,  2996,  2996,  2997,  2997,  2997,  2997,
    2997,  2998,  2998,  2998,  2998,  2999,  2999,  2999,  2999,  3000,
    3000,  3000,  3000,  3000,  3001,  3001,  3001,  3001,  3002,  3002,
    3002,  3002,  3002,  3003,  3003,  3003,  3003,  3004,  3004,  3004,
    3004,  3004,  3005,  3005,  3008,  3008,  3008,  3008,  3008,  3008,
    3008,  3008,  3008,  3008,  3008,  3009,  3009,  3009,  3009,  3009,
    3009,  3009,  3009,  3009,  3009,  3010,  3010,  3014,  3018,  3025,
    3029,  3036,  3040,  3047,  3051,  3055,  3059,  3063,  3067,  3071,
    3075,  3087,  3091,  3095,  3099,  3103,  3107,  3111,  3115,  3119,
    3123,  3127,  3131,  3135,  3139,  3143,  3147,  3151,  3155,  3159,
    3163,  3167,  3171,  3175,  3179,  3183,  3187,  3191,  3195,  3199,
    3203,  3207,  3215,  3219,  3223,  3227,  3231,  3235,  3239,  3249,
    3259,  3265,  3271,  3277,  3283,  3289,  3295,  3302,  3309,  3316,
    3323,  3329,  3335,  3339,  3351,  3355,  3359,  3363,  3367,  3378,
    3389,  3393,  3397,  3401,  3405,  3409,  3413,  3417,  3421,  3425,
    3429,  3433,  3437,  3441,  3445,  3449,  3453,  3457,  3461,  3465,
    3469,  3473,  3477,  3481,  3485,  3489,  3493,  3497,  3501,  3505,
    3509,  3516,  3520,  3524,  3528,  3532,  3536,  3540,  3544,  3548,
    3554,  3560,  3564,  3570,  3577,  3581,  3585,  3589,  3593,  3597,
    3601,  3605,  3609,  3613,  3617,  3621,  3625,  3629,  3633,  3637,
    3641,  3655,  3659,  3663,  3667,  3671,  3675,  3679,  3683,  3695,
    3699,  3703,  3707,  3711,  3722,  3733,  3737,  3741,  3745,  3749,
    3753,  3757,  3761,  3765,  3769,  3773,  3777,  3781,  3785,  3789,
    3793,  3797,  3801,  3805,  3809,  3813,  3817,  3821,  3825,  3829,
    3833,  3837,  3841,  3845,  3849,  3856,  3860,  3864,  3868,  3872,
    3876,  3880,  3884,  3888,  3894,  3900,  3908,  3912,  3916,  3920,
    3927,  3937,  3943,  3949,  3959,  3971,  3979,  3983,  4013,  4017,
    4021,  4025,  4029,  4033,  4039,  4043,  4047,  4051,  4055,  4066,
    4070,  4074,  4078,  4086,  4090,  4094,  4100,  4111
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK",
  "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL", "CUSTOM_LITERAL",
  "IDENTIFIER", "TYPENAME_IDENTIFIER", "TYPEPACK_IDENTIFIER", "SCOPING",
  "TYPEDEFNAME", "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE",
  "LECOMPARE", "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR",
  "DOT_STAR", "UNARY", "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS",
  "UNARY_PLUS", "UNARY_STAR", "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS",
  "MINUSMINUS", "TIMESEQUAL", "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL",
  "MINUSEQUAL", "OREQUAL", "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL",
  "RSHIFTEQUAL", "ATTR_LEFT", "ATTR_RIGHT", "KW_ALIGNAS", "KW_ALIGNOF",
  "KW_AUTO", "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL", "KW_CATCH",
  "KW_CHAR", "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS", "KW_CONST",
  "KW_CONSTEXPR", "KW_CONST_CAST", "KW_DECLTYPE", "KW_DEFAULT",
  "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH",
  "KW_ENUM", "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED",
  "KW_FALSE", "KW_FINAL", "KW_FLOAT", "KW_FRIEND", "KW_FOR", "KW_GOTO",
  "KW_HAS_VIRTUAL_DESTRUCTOR", "KW_IF", "KW_INLINE", "KW_INT",
  "KW_IS_ABSTRACT", "KW_IS_BASE_OF", "KW_IS_CLASS", "KW_IS_CONSTRUCTIBLE",
  "KW_IS_CONVERTIBLE_TO", "KW_IS_DESTRUCTIBLE", "KW_IS_EMPTY",
  "KW_IS_ENUM", "KW_IS_FINAL", "KW_IS_FUNDAMENTAL", "KW_IS_POD",
  "KW_IS_POLYMORPHIC", "KW_IS_STANDARD_LAYOUT", "KW_IS_TRIVIAL",
  "KW_IS_UNION", "KW_LONG", "KW_MAKE_MAP_PROPERTY", "KW_MAKE_PROPERTY",
  "KW_MAKE_PROPERTY2", "KW_MAKE_SEQ", "KW_MAKE_SEQ_PROPERTY", "KW_MUTABLE",
  "KW_NAMESPACE", "KW_NEW", "KW_NOEXCEPT", "KW_NULLPTR", "KW_OPERATOR",
  "KW_OVERRIDE", "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER",
  "KW_REINTERPRET_CAST", "KW_RETURN", "KW_SHORT", "KW_SIGNED", "KW_SIZEOF",
  "KW_STATIC", "KW_STATIC_ASSERT", "KW_STATIC_CAST", "KW_STRUCT",
  "KW_TEMPLATE", "KW_THREAD_LOCAL", "KW_THROW", "KW_TRUE", "KW_TRY",
  "KW_TYPEDEF", "KW_TYPEID", "KW_TYPENAME", "KW_UNDERLYING_TYPE",
  "KW_UNION", "KW_UNSIGNED", "KW_USING", "KW_VIRTUAL", "KW_VOID",
  "KW_VOLATILE", "KW_WCHAR_T", "KW_WHILE", "START_CPP", "START_CONST_EXPR",
  "START_TYPE", "'{'", "','", "';'", "':'", "'='", "'?'", "'|'", "'^'",
  "'&'", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'.'",
  "'('", "'['", "')'", "'}'", "'!'", "']'", "$accept", "grammar", "cpp",
  "constructor_inits", "constructor_init", "extern_c", "$@1",
  "declaration", "friend_declaration", "$@2", "storage_class",
  "attribute_specifiers", "attribute_specifier", "type_like_declaration",
  "$@3", "$@4", "multiple_instance_identifiers", "typedef_declaration",
  "$@5", "typedef_instance_identifiers", "constructor_prototype", "$@6",
  "$@7", "function_prototype", "$@8", "$@9", "$@10", "$@11", "$@12",
  "function_post", "function_operator", "more_template_declaration",
  "template_declaration", "$@13", "template_formal_parameters",
  "template_nonempty_formal_parameters", "typename_keyword",
  "template_formal_parameter", "template_formal_parameter_type",
  "instance_identifier", "$@14",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "function_parameter_list",
  "function_parameters", "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "parameter_pack_identifier", "not_paren_empty_instance_identifier",
  "empty_instance_identifier", "type", "type_pack", "type_decl",
  "predefined_type", "var_type_decl", "full_type", "struct_attributes",
  "anonymous_struct", "$@15", "named_struct", "$@16", "maybe_final",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "enum", "enum_decl", "enum_element_type", "enum_body_trailing_comma",
  "enum_body", "enum_keyword", "struct_keyword", "namespace_declaration",
  "$@17", "$@18", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@19", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   123,    44,    59,    58,
      61,    63,   124,    94,    38,    60,    62,    43,    45,    42,
      47,    37,   126,    46,    40,    91,    41,   125,    33,    93
};
# endif

#define YYPACT_NINF -918

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-918)))

#define YYTABLE_NINF -753

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     328,  -918,  3448,  5658,    36,  4726,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,   -50,  -112,  -100,   -83,   -71,   -51,
     -98,   -22,   -52,  -918,  -918,    11,    56,    78,    95,   116,
     121,   154,   162,   167,   174,   178,   185,   195,   198,   207,
     215,   231,   259,   267,  5969,  -918,  -918,    13,   269,   285,
      10,   296,  -918,   290,   292,   295,  3448,  3448,  3448,  3448,
    3448,  1577,  1319,  3448,  4528,  -918,    81,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  5768,   321,  -918,   -30,  -918,
    -918,  3803,  4177,  4177,  -918,  5453,   325,  -918,  4177,  -918,
    -918,    87,    87,  -918,  -918,  -918,  -918,   163,   111,  -918,
    -918,  -918,  -918,  -918,  -918,  6089,   342,  -918,  6860,  6860,
    6860,  -918,  6860,  5109,  6860,  -101,  -918,  6851,   347,   348,
     350,   351,  6860,  1165,   237,   368,   373,  6860,  6860,   360,
    6687,  6860,  6860,  5777,  6860,  6860,  -918,  -918,  -918,  -918,
    3942,  -918,  -918,  -918,  -918,  -918,  3448,  3448,  5658,  3448,
    3448,  3448,  3448,  5658,  3448,  5658,  3448,  5658,  3448,  5658,
    5658,  5658,  5658,  5658,  5658,  5658,  5658,  5658,  5658,  5658,
    5658,  5658,  5658,  5658,  3448,  -918,  -918,   364,  5453,   366,
     370,  5453,  -918,  -918,  5658,  3448,  3448,   372,  5197,  5658,
    1577,  3448,  3448,    50,    50,    50,    50,    50,   -50,  -100,
     -83,   -71,   -51,   -22,    11,    78,  4083,  5386,  5645,  6631,
     295,   371,  -110,  4528,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  5453,  5453,  -116,   390,
    -918,  -918,    50,  3448,  3448,  3448,  3448,  3448,  3448,  3448,
    3448,  3448,  3448,  3448,  3448,  3448,  3448,  3448,  3448,  3448,
    3448,  3448,  3448,  3448,  2510,  3448,  -918,  -918,    87,    87,
    2644,  -918,  -918,  -918,  4177,  -918,  -918,  -918,  -918,  5658,
    -918,   384,  1154,   401,    87,    87,   401,   401,  4839,   377,
    -918,   385,  -918,  -918,  -918,  -918,  -918,  -918,   867,   404,
    4526,  -918,  5453,   510,   419,   403,  2237,  5112,  6860,  -918,
    -918,  -918,  -918,  6860,  -918,  -918,  -918,  -918,  6779,  1693,
    -918,  5453,  5453,  5453,  5453,  -918,  -918,   435,  -918,  -918,
    -918,  -918,  -918,  3448,  -918,  4035,  -918,   424,  -918,  4121,
    -918,  5453,     4,  -918,  -918,   439,   422,  -918,   426,  5854,
    5453,   427,  -918,  5453,  -918,    -9,   440,  -918,  -918,  -918,
    -918,  2568,  -918,  -918,   428,   446,  -918,   434,   436,   438,
     441,   442,   447,   468,   459,   470,   462,   463,   464,   466,
     486,   471,   -72,   487,   472,   473,   477,   478,   479,   480,
     481,   483,   484,   488,   489,  3448,  -918,  5658,  3448,  -918,
    6665,   497,   491,   492,  5453,   493,   494,   506,   498,  4247,
     499,   500,  3448,  3448,  -918,   621,  -918,  2434,   503,  3448,
    -918,  -918,  3772,  4892,  1052,  1052,  1444,  1444,  1031,  1031,
    -918,  2800,  4908,  4924,  4964,  1444,  1444,    75,    75,    50,
      50,    50,  -918,  -918,   -67,  2256,  -918,  -918,   502,  4268,
     504,   401,   509,   520,  5453,   401,   401,   401,   401,   401,
     515,  -918,   377,  -918,   377,  -918,   515,   515,  -918,   401,
    6089,  5744,  5627,   401,   401,   523,    20,  -918,   392,   532,
    -918,  3448,  5453,   496,  -918,  -918,  -918,  -918,   867,   -13,
     153,   161,  6089,   526,   232,  -918,  -918,  -918,   546,  6860,
    6089,  1717,   -50,   531,  4286,  -918,  -918,  -918,   535,   551,
     552,   555,   557,  6163,  -918,  4190,  5400,   383,   542,    -9,
    -918,  -918,   561,  -918,  5658,  -918,    17,  2778,  5993,  1081,
    -918,  5658,  -918,   548,   278,  -918,  -918,  2376,  -918,  -918,
     310,  -918,   564,  4526,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,   558,  -918,   560,  -918,  -918,  -918,  -918,  5658,  -918,
    5658,  -918,  5658,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  4305,   544,   549,  -918,   562,  -918,
    -918,   559,  -918,  -918,   565,  -918,  -918,  -918,  -918,    50,
    4528,  -918,  5453,   390,  5501,   978,  -918,  4528,  3448,  -918,
    -918,  -918,  -918,  -918,   515,   401,  -918,   515,   515,   515,
     515,   515,  3448,   -39,   680,  5768,   392,   532,  -918,    38,
      66,  -918,  -918,  5532,   571,   392,   392,   392,   392,   392,
     392,  -126,  -918,  -918,   573,  5453,   532,   532,   532,   532,
     532,   532,   -77,   566,  4528,  -918,   189,  -918,   591,   690,
    2237,  -918,   663,  6089,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,   576,   586,   587,  -918,  -918,  5969,  -918,  -918,
     590,    18,   594,  -918,   582,  3448,  3448,  3448,  3448,  1577,
    3448,   608,    59,  -918,  -918,  4546,  -918,    81,  -918,  6860,
    6860,  6235,  -918,   781,   782,   784,   785,  -918,  -918,   218,
     648,  -918,  -918,  -918,  -918,  5415,  -918,   641,   652,  4476,
    -918,  1139,  -918,  -918,    17,  -918,   310,  -918,   653,  5501,
     643,   310,  5501,   639,  4341,  1081,   649,  1081,  1081,  1081,
    1081,  1081,     0,  -918,  -918,   645,  6307,  -918,  -918,  -918,
    5453,   183,  -918,   640,  -918,   661,   664,  2912,  3068,   655,
     310,   310,  3875,   310,   310,   310,   310,  -918,    -5,   411,
    -918,   867,  -918,  3448,  3448,   650,   651,   656,  -918,  -918,
    -918,  3448,  -918,  3448,  -918,   657,  -918,  5883,  6089,  -918,
    -918,  -918,  -918,  -918,  -918,   660,  -918,  -918,   673,  -918,
    4528,   515,   662,   666,  5627,   392,   532,  -126,   -77,   668,
     670,   978,  -918,  -918,   392,   671,   671,   671,   671,   671,
     148,  3448,  -918,   532,  -918,   672,   672,   672,   672,   672,
     200,  3448,  -918,   676,  -918,  3448,  -918,   669,  4359,  6379,
    -918,   689,  -918,  -918,  5658,  5658,  5658,   678,  5658,   679,
    5283,  5658,  1577,    50,    50,    50,    50,   681,   -65,    50,
    -918,  -918,  3582,  3448,  3448,  3448,  3448,  3448,  3448,  3448,
    3448,  3448,  3448,  3448,  3448,  3448,  3448,  3448,  3448,  3448,
    3448,  3448,  3448,  3448,  3046,  3448,  -918,  -918,  -918,  -918,
     -23,   674,   697,   698,  6451,    12,  -918,  1139,  6739,  5400,
    5453,   696,   692,  1139,  1139,  1139,  1139,  1139,  1139,   -25,
     672,  -918,   411,  -918,   682,   310,   316,   683,  -918,  -918,
     301,  1081,   687,   687,   687,   687,   687,  -918,  3448,  -918,
    -918,  5501,   686,   354,  -918,    52,   707,   708,  -918,  2070,
    -918,  -918,  -918,  2912,   693,   710,  4528,  -918,  -918,   310,
     344,   344,   849,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,   695,
     705,  -918,  -918,   344,   344,   344,   398,   858,  -918,  3448,
    -918,  2376,   718,  -918,   591,    53,    97,  -918,  -918,  -918,
     132,   150,  -918,  5969,    87,   818,  1059,  -918,  -918,  5501,
    -918,  -126,   -77,  -918,  -918,  5501,  5501,  -918,   671,   711,
     712,   672,   713,   720,  3336,  -918,  -918,  -918,  5165,   733,
     743,  -918,   714,   738,   745,  3448,   747,  5453,   739,   742,
     748,   746,  4456,  3448,  -918,  -918,  -918,  3772,  4892,  1052,
    1052,  1444,  1444,  1031,  1031,  -918,  4510,  4908,  4924,  4964,
    1444,  1444,    75,    75,    50,    50,    50,  -918,  -918,   216,
    3601,  6523,   889,   761,   901,   903,   904,  -918,   767,   -25,
     672,  -918,  -918,  -918,  -918,  -918,  -918,  5658,  1139,  3721,
    -918,  -918,   769,  -918,  -918,   433,   753,  -918,  -918,   687,
    5501,   759,   764,  -918,  -918,  5453,  3448,  3448,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
     765,  -918,  3180,   344,  -918,  -918,  -918,  -918,  -918,  1717,
     762,  3068,   310,  -918,  -918,  -918,  -918,   978,    87,  -918,
    -918,  -918,    -4,   768,   770,  -918,  -918,   771,   773,  5501,
    -918,  5501,  -918,  -918,  6002,  6061,  6075,  5453,   508,  -918,
    -918,   919,  -918,  5165,  -918,   776,   778,   777,   783,   803,
    -918,  -918,   806,  -918,  -918,    50,  3448,  -918,  -918,  -918,
     217,  -918,   222,   805,   225,  -918,  -918,  -918,   808,   819,
     820,   821,    19,   824,  3721,  3721,  3721,  3721,  3721,  1577,
    3721,  4607,  -918,   310,  1275,   809,  -918,  1275,  5501,   826,
    -918,  -918,   817,  -918,   827,   831,  1890,  -918,  2912,  4528,
     833,  -918,  -918,   839,  -918,   836,  -918,  -918,  -918,  -918,
    -918,   840,   841,  5618,  -918,  5618,  -918,  5618,  -918,  -918,
    5618,  5618,  5618,  -918,  6595,  -918,  3448,  3448,  -918,  3448,
    -918,  3448,  4528,  1000,   864,  1005,   868,   869,  1008,   872,
    5658,  5658,  5658,  5658,   859,  5314,  5658,   105,   105,   105,
     105,   105,   856,   228,   105,  3721,  3721,  3721,  3721,  3721,
    3721,  3721,  3721,  3721,  3721,  3721,  3721,  3721,  3721,  3721,
    3721,  3721,  3721,  3721,  3314,  3448,  -918,  -918,  5501,   860,
    -918,  1275,  -918,  -918,  1018,  -918,   870,  -918,  -918,  -918,
     978,   978,   978,  -918,  -918,  -918,  -918,  -918,  -918,  -918,
    -918,  -918,   233,   242,   246,   249,   874,  -918,   888,  -918,
    -918,   251,  -918,   876,   880,   887,   890,  5453,   879,   883,
     894,  3721,  -918,  4718,  4948,  3957,  3957,  1821,  1821,  1352,
    1352,  -918,  4564,   334,  4981,  4990,   169,   169,   105,   105,
     105,  -918,  -918,   272,  3806,  5501,   885,  -918,  1275,  -918,
    -918,  1275,   891,  -918,  -918,  -918,  1275,  1275,  -918,  -918,
    -918,  -918,   907,  1042,  1046,   909,  -918,   895,   896,   897,
     899,  -918,  -918,   902,   105,  3721,  -918,  -918,   910,  -918,
    1275,  -918,  -918,   912,   913,  -918,  3448,  3448,  3448,  -918,
    3448,  4607,  -918,   978,   915,   932,   273,   287,   289,   294,
     978,  -918,  -918,  -918,  -918,  -918,  -918,  -918,  -918
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   757,     0,     0,     0,   757,     5,   645,   641,   644,
     753,   754,   647,   648,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   643,   649,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   651,   650,     0,     0,     0,
       0,     0,   642,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   757,     0,     3,   582,   646,   292,   303,   302,
     386,   387,   389,   390,   371,     0,     0,   401,   368,   400,
     395,   392,   391,   394,   372,     0,     0,   373,   393,   403,
     388,   757,   757,     4,   294,   295,   296,     0,   357,   757,
     291,   383,   384,   385,     1,     0,     0,    21,   757,   757,
     757,    22,   757,   757,   757,     0,    38,   757,     0,     0,
       0,     0,   757,     0,     0,     0,     0,   757,   757,     0,
     757,   757,   757,     0,   757,   757,     6,    17,     7,    19,
       0,    15,    16,    18,    69,    40,   757,   757,     0,   757,
     757,   757,   757,     0,   757,     0,   757,     0,   757,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   757,   318,   324,     0,     0,     0,
     606,     0,   757,   317,     0,   757,   757,     0,     0,     0,
       0,   757,   757,   615,   613,   612,   614,   611,   292,   386,
     387,   389,   390,   401,   400,   395,   392,   391,   394,   393,
     388,     0,     0,   541,   738,   739,   740,   748,   741,   744,
     742,   746,   745,   743,   747,   727,   728,     0,     0,   757,
     733,   726,   610,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   755,   756,   757,   757,
       0,   369,   370,   402,   392,   397,   396,   399,   293,     0,
     398,     0,   278,   757,   757,   757,   757,   757,   757,     0,
     327,   277,   329,   757,   749,   750,   751,   752,     0,   359,
       0,   331,     0,     0,    58,    60,     0,   757,   757,    52,
      41,    51,    53,   757,    42,   148,    47,    23,   757,     0,
      45,     0,     0,     0,     0,    50,   757,     0,    26,    25,
      24,    48,    44,     0,   152,     0,   151,     0,    54,     0,
      20,     0,     0,    46,    49,   326,   305,   316,     0,     0,
       0,     0,    13,     0,    66,     0,   325,    63,   307,   308,
     309,   357,   757,   304,     0,   540,   539,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   319,     0,   757,   321,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   640,   731,   734,     0,   757,     0,
     729,   206,   624,   625,   626,   627,   628,   629,   632,   633,
     639,     0,   621,   622,   623,   630,   631,   619,   620,   616,
     617,   618,   638,   637,     0,     0,   328,   330,     0,     0,
       0,   757,   279,     0,   268,   757,   757,   757,   757,   757,
     284,   267,     0,   280,     0,   281,   283,   282,   191,   757,
       0,     0,     0,   757,   757,     0,   192,   195,   757,     0,
     190,   757,   365,     0,   362,   361,   356,   360,     0,   738,
     739,   740,     0,     0,   742,   335,   297,   337,     0,   757,
       0,   757,   305,     0,     0,    43,    39,   757,     0,     0,
       0,     0,     0,   757,   374,     0,   757,   326,   305,     0,
     325,    72,     0,   380,     0,    77,    79,     0,     0,   757,
     306,     0,   757,     0,     0,   404,   213,     0,    68,    65,
       0,   312,   359,     0,   589,   588,   605,   595,   591,   593,
     594,     0,   601,     0,   600,   654,   590,   655,     0,   657,
       0,   658,     0,   661,   662,   663,   664,   665,   666,   667,
     668,   669,   670,   597,     0,     0,     0,   320,     0,   596,
     599,     0,   603,   602,     0,   608,   609,   598,   592,   583,
     542,   732,     0,   757,   757,   757,    92,   207,     0,   636,
     635,   300,   299,   301,   285,   757,   269,   274,   270,   271,
     273,   272,   757,     0,     0,     0,   757,     0,   232,     0,
       0,   757,   194,     0,     0,   757,   757,   757,   757,   757,
     757,   757,   246,   245,     0,   256,     0,     0,     0,     0,
       0,     0,   757,     0,   538,   537,   366,   355,   298,     0,
       0,   757,   757,     0,    55,    59,   719,   715,   718,   721,
     722,   198,     0,     0,     0,   717,   723,     0,   725,   724,
       0,     0,     0,   716,     0,     0,     0,     0,     0,     0,
       0,     0,   199,   234,   202,   235,   671,   720,   197,   757,
     757,   757,   376,     0,     0,     0,     0,   378,   757,     0,
       0,   169,   170,   171,   157,     0,   158,     0,   154,   159,
     155,   757,   168,   153,     0,    74,     0,   382,     0,   757,
       0,     0,   757,     0,     0,   757,     0,   757,   757,   757,
     757,   757,     0,   237,   236,     0,   757,    81,   404,   208,
       0,     0,    67,     0,   757,     0,     0,   757,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    64,   757,   757,
     172,     0,   310,     0,     0,     0,     0,     0,   322,   323,
     607,     0,   604,     0,   730,     0,    99,     0,     0,    93,
     101,    96,   100,    95,    97,     0,    94,    98,     0,   187,
     634,   275,     0,     0,     0,   757,     0,   757,   757,     0,
       0,   757,   193,   196,   757,   251,   247,   248,   250,   249,
       0,   757,   226,     0,   257,   262,   258,   259,   261,   260,
       0,   757,   229,   286,   363,     0,   332,     0,     0,   757,
     340,   757,   339,    62,     0,     0,     0,   681,     0,     0,
       0,     0,     0,   689,   688,   687,   686,     0,     0,   685,
      61,   201,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    57,    56,   379,   757,
       0,     0,     0,     0,   757,     0,    37,   757,   757,     0,
     162,   160,     0,   757,   757,   757,   757,   757,   757,   757,
     166,    73,   757,   381,     0,     0,     0,     0,   314,   313,
       0,   757,   242,   238,   239,   241,   240,    87,   757,   315,
      14,   757,     0,     0,     8,     0,     0,     0,   214,   405,
     406,   216,   217,   757,     0,   220,   222,   219,   215,     0,
     179,   175,     0,   116,   117,   118,   119,   120,   121,   124,
     125,   140,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   144,   143,   127,   126,   113,   115,
     114,   122,   123,   111,   112,   108,   109,   110,   107,     0,
       0,   106,   173,   176,   178,   177,     0,     0,   183,   757,
     185,     0,     0,    70,   311,     0,     0,   656,   659,   660,
       0,     0,   757,     0,   757,     0,     0,   404,   276,   757,
     233,   757,   757,   227,   230,   757,   757,   287,   252,   255,
       0,   263,   266,     0,   367,   334,   333,   336,     0,     0,
     342,   341,     0,     0,     0,   757,     0,     0,     0,     0,
       0,     0,     0,     0,   714,   200,   203,   698,   699,   700,
     701,   702,   703,   706,   707,   713,     0,   695,   696,   697,
     704,   705,   693,   694,   690,   691,   692,   712,   711,     0,
       0,   757,     0,     0,     0,     0,     0,   375,     0,   757,
     167,   147,   145,   150,   146,   156,   163,     0,   757,     0,
     164,   204,     0,    75,   757,     0,     0,   757,    89,   243,
     757,     0,     0,   209,   404,     0,   757,   757,   211,   212,
     408,   409,   413,   410,   418,   411,   412,   414,   415,   416,
     417,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   486,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   757,   530,   531,   532,
     523,   535,   519,   520,   518,   525,   526,   514,   515,   516,
     517,   524,   522,   529,   527,   533,   528,   521,   534,   407,
       0,   218,   221,   180,   174,   142,   141,   182,   186,   757,
       0,   207,     0,   586,   585,   587,   584,   757,   757,   188,
     105,   102,     0,     0,     0,   228,   231,     0,     0,   757,
     253,   757,   264,   364,   746,     0,   745,     0,     0,   343,
     345,   735,   757,     0,   680,     0,     0,     0,     0,     0,
     678,   677,     0,   683,   684,   672,     0,   710,   709,   377,
       0,    27,     0,     0,     0,    36,   165,   161,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,   543,     0,    78,     0,    83,    80,   757,     0,
     244,   757,     0,     9,     0,     0,     0,   223,   757,   224,
       0,   181,    71,     0,   189,     0,   103,   652,   757,   757,
     757,     0,     0,     0,   348,     0,   347,     0,   346,   736,
       0,     0,     0,   737,   757,   344,     0,     0,   682,     0,
     679,     0,   708,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   558,   556,   555,
     557,   554,     0,     0,   553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    76,    85,   757,     0,
     757,    82,   210,    12,    10,   536,     0,   757,   404,   104,
     757,   757,   757,   757,   757,   354,   353,   352,   351,   350,
     349,   338,     0,     0,     0,     0,     0,    28,     0,    33,
      35,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   581,   567,   568,   569,   570,   571,   572,   573,
     574,   580,     0,   564,   565,   566,   562,   563,   559,   560,
     561,   579,   578,     0,     0,   757,     0,   757,    88,    11,
     225,   184,     0,   290,   289,   288,   254,   265,   675,   674,
     676,   673,     0,     0,     0,     0,   552,     0,     0,     0,
       0,   550,   549,     0,   544,     0,   577,   576,     0,   757,
      90,   653,    29,     0,     0,    31,     0,     0,     0,   551,
       0,   575,   757,   757,     0,     0,     0,     0,     0,     0,
     757,    84,    34,    32,   547,   546,   548,   545,    86
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -918,  -918,  -304,  -918,   -28,  -918,  -918,   774,  -103,  -918,
    1012,  -428,   445,   -89,  -918,  -918,  -145,  -918,  -918,  -214,
    -918,  -918,  -918,   772,  -918,  -918,  -918,  -918,  -918,  -308,
    -918,  -918,  -105,  -918,  -918,  -918,  -918,   221,   408,  -634,
    -918,  -701,  -745,  -479,  -918,  -135,  -918,    39,  -463,  -918,
    -500,  -917,  -918,  -436,   265,  -649,  -409,   -59,  -158,   -88,
     -61,    22,  -279,  -635,   788,   793,  -163,  -133,  -918,  -130,
    -918,  -918,  -918,  -918,  -162,  -124,  -918,  -457,  -918,  -918,
      16,    21,  -918,  -918,  -918,  -918,    48,    47,  -918,  -918,
    -726,  -918,   -96,  -918,  -589,  -107,   -60,   175,   517,   145,
    -918,  -918,  -918,   706,   206,   -47,   152,  -468,    -1
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     4,     5,   913,   914,   137,   522,   138,   139,   308,
     140,   293,   294,   141,   530,   524,   747,   330,   706,   891,
     344,   709,   712,   345,   911,  1408,  1475,  1090,  1318,   585,
     972,  1073,   142,   327,   697,   698,   699,   700,   701,   748,
    1239,   749,   778,   465,   466,   671,   672,  1080,   410,   732,
     528,   924,   925,   467,   674,   722,   795,   805,   279,   280,
      91,    92,   346,   180,   347,    93,   290,    94,   641,    95,
     642,   821,  1019,  1020,  1269,    96,    97,   476,   472,   473,
      98,    99,   143,   688,   869,   144,   100,   101,   102,   103,
     733,   734,   919,  1229,   633,   354,   355,  1311,   213,    65,
     675,   676,   228,   229,  1270,  1271,   622,    66,   145
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       6,   212,   912,   980,   282,   892,  1230,   348,   305,   705,
     349,  1335,   503,   782,   258,   230,   350,   493,   256,   390,
     257,   638,   827,   677,   409,   187,   608,   324,   767,   261,
     710,   407,   604,   829,  1374,   612,   104,   403,   268,   801,
     357,   326,   359,   360,   361,   362,  1007,   364,   307,   366,
     510,   368,   148,   408,   639,   673,   404,   153,   295,   621,
     181,   231,   645,  -749,   149,   182,   900,   384,   902,   903,
     904,   905,   906,   409,   841,   550,   317,   896,   392,   393,
     403,   150,   403,   241,   400,   401,   332,   256,   811,   257,
     281,   281,   183,   151,   551,   262,   146,   259,   291,   589,
     271,  1034,   272,   155,   273,   765,   930,   931,   241,   973,
     974,   975,   976,   152,   147,   450,   452,   454,   456,   457,
     764,   284,   285,   286,  1062,  1079,   602,   783,   265,   266,
     267,   386,   994,  -749,   389,   270,  -749,   525,  1393,   526,
     801,   527,   154,  1063,   977,   356,   356,   274,   356,   356,
     356,   356,   513,   356,   514,   356,   351,   356,   802,   978,
     979,   352,  1336,   348,   907,   908,   349,   613,   184,   812,
     436,   437,   350,   356,   188,   156,   711,   793,  1068,   405,
     406,   291,   830,  1375,   356,   356,   453,   455,   353,   533,
     356,   356,   348,   681,   434,   349,   348,   787,  1096,   349,
     403,   350,  1393,   602,   789,   350,   842,   796,   797,   798,
     799,   800,  1010,   253,   254,   255,  1097,   468,   726,  1243,
     157,   875,  1013,   287,    10,   442,    11,   275,   411,  -750,
     894,   602,   790,   897,   250,   251,   252,  -751,   253,   254,
     255,   276,   158,   486,   403,   488,   277,   916,   917,   983,
     289,   278,  1089,   265,   266,   267,   270,   281,   281,   159,
     288,  1085,   498,  1244,   499,   500,   501,   502,  1403,  1404,
    1405,  1253,   451,   281,   281,   451,   451,   470,   519,   403,
     160,   566,   474,   594,   512,   161,   982,   597,   598,   599,
     600,   601,   889,   520,   984,  1233,   523,   403,  1245,  -750,
     469,   603,  -750,   791,   531,   609,   610,  -751,  -752,   283,
    -751,   265,   351,   801,  1009,     6,  1246,   352,   162,  1091,
     284,   285,   286,   739,  1003,  1004,   163,   740,  1400,  1401,
    1402,   164,  1403,  1404,  1405,   477,   814,   819,   165,   815,
     995,   351,   166,   567,   353,   351,   352,   571,  1000,   167,
     352,   291,  1387,  1388,  1389,  1390,  1391,  1392,  1248,   168,
     230,   817,   169,   403,  1363,   811,  1012,  1393,  1322,  1365,
     741,   170,  1368,   353,   677,   403,  1001,   353,  -752,   171,
     403,  -752,  1287,  1364,   874,  1008,   318,   356,  1366,   403,
    1240,  1369,  1083,   403,  1452,   172,   403,   596,  1494,  1488,
     606,   468,   284,   285,   286,   614,   673,   586,  1489,   615,
     632,  1416,  1490,   295,   443,  1491,   444,  1495,   445,   403,
     403,   742,   287,   173,   728,   636,   729,   730,   731,  1082,
     468,   174,  1092,   185,   403,   295,   403,   781,  1506,  1534,
     451,   403,   487,   295,   451,   451,   451,   451,   451,   186,
     743,   189,   616,  1535,   190,  1536,   191,   715,   451,   192,
    1537,   446,   451,   451,   744,  1088,   908,   623,  1069,   745,
     635,     1,     2,     3,   746,   796,   797,   798,   799,   800,
     978,   979,  1086,   607,   469,   260,   752,  1396,  1397,   269,
     678,  1398,  1399,  1400,  1401,  1402,     6,  1403,  1404,  1405,
    1094,  1095,  1333,   532,   287,   703,   296,   348,   978,   979,
     349,   311,   312,   469,   313,   314,   350,   319,   724,    64,
    1254,     6,   320,   468,   323,   477,  1257,  1258,   385,   -91,
     387,   -91,   617,   -91,   388,   405,   394,   402,  1255,  1256,
     409,   447,   471,   441,   785,   624,   618,   625,   788,   626,
    -267,   619,   468,   478,   702,   448,   620,   525,   489,   526,
     449,   981,   978,   979,  1237,  1061,   490,   491,   806,   807,
     808,   809,   810,   193,   194,   195,   196,   197,   804,   506,
     232,   504,   411,   470,   779,   -91,   516,   -91,   529,   -91,
     517,   521,   627,   403,   451,   534,   295,   978,   979,  1315,
     535,   635,   536,   515,   537,   623,   469,   538,   539,   838,
     586,  1319,   892,   540,   623,   623,   623,   623,   623,   623,
     411,  1350,  1351,  1352,   541,   542,   543,   786,   544,   545,
     546,   411,   547,   548,   552,   469,   581,   549,   553,   554,
       6,   822,   890,   555,   556,   557,   558,   559,   468,   560,
     561,   468,   881,   568,   562,   563,   351,   569,   570,   572,
     573,   352,   574,   637,   575,   577,   578,   584,   591,  1008,
     593,   723,   628,   181,  -269,  1483,  1484,  1485,   182,   595,
     602,   682,   750,   915,  1247,   487,   629,     6,   353,   611,
     640,   630,  1482,   985,   986,   643,   631,   679,   683,   684,
     623,   990,   685,   991,   686,   183,   704,   399,   470,   707,
     759,   470,   727,   751,   724,   760,   724,   724,   724,   724,
     724,   295,   753,   468,   754,   762,   761,  1002,   784,   763,
     794,   469,   803,   920,   469,   813,   927,  -358,   816,   820,
     824,   825,   826,   702,  1011,   828,   832,   779,   411,   831,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   677,   435,  1074,   840,  1071,  1314,   439,  1531,  1317,
    1341,   468,  1342,   181,   623,  1538,   411,   411,   182,  1072,
     779,   870,   871,   623,   872,   873,   876,   878,   477,   879,
     635,   893,   895,   673,  1059,   898,   469,   918,   901,   921,
     635,   909,   922,   494,   929,   183,   987,   988,  1070,   997,
    1021,  1064,   989,   992,   996,   806,   807,   808,   809,   810,
     999,   998,  1005,  1076,  1006,  1015,   801,   811,  1018,  1409,
     505,  -276,  1025,  1027,  1065,  1066,  1077,  1033,  1084,  1087,
     468,  1078,   908,  1093,   211,  1098,  1099,  1232,   750,  1234,
    1231,  1235,  1238,   750,   469,  1242,  1250,   723,     6,   723,
     723,   723,   723,   723,  1236,  1259,   623,  1261,   475,  1272,
    1274,  1260,   623,   623,   623,   623,   623,   623,  1081,  1262,
    1273,   411,   750,   750,  1275,   750,   750,   750,   750,  1290,
     724,  1276,   564,  1278,  1282,  1280,  1249,   635,  1281,  1291,
     470,  1292,  1283,  1293,  1294,  1295,  1313,  1316,  1277,   579,
     580,    70,   927,    71,    72,    73,   587,   702,  1320,  1476,
    1321,  1331,  1327,   469,  1353,  1337,  1338,  1339,   468,  1340,
    1356,   358,  1357,  1358,   468,   468,   363,  1359,   365,  1252,
     367,    80,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   264,  1354,  1360,
    1361,  1367,  1370,  1407,  1371,  1372,  1373,   391,   635,  1376,
    1279,   396,   397,   398,  1412,  1418,    82,    83,   634,  1324,
    1325,   586,  1410,   281,  1413,   766,  1508,  1414,   470,  1417,
     411,   411,  1419,    88,   470,   470,  1423,  1424,    90,   181,
    1436,   767,  1437,  1411,   182,  1438,  1439,  1440,  1441,  1011,
    1442,   469,  1451,  1447,   356,   768,  1477,   469,   469,   468,
    1420,  1421,  1422,  1479,   714,  1493,  1497,  1480,   769,   770,
    1492,   183,  1496,  1498,   738,  1501,  1499,   750,   915,  1502,
    1503,  1509,  1513,   723,   771,  1512,  1514,  1515,  1511,  1516,
    1517,  1518,   440,  1532,   241,  1519,  1520,  1323,  1081,   214,
     215,   216,   237,   238,   239,   240,  1522,   623,  1524,  1525,
    1533,   750,   496,   586,   772,   241,   586,   773,   823,   470,
     774,   284,   285,   286,   716,   356,   356,  1332,   717,  1406,
    1075,   509,  1478,   877,  1330,   780,   775,  1036,  1296,  1481,
    1326,  1355,   469,   583,     0,  1486,  1487,   511,   776,   634,
     299,   300,   301,   217,   302,   304,   306,     0,     0,   310,
       0,     0,   777,     0,   315,   218,   219,     0,     0,   321,
     322,   718,   325,   328,   329,     0,   333,   334,     0,   284,
     285,   286,   882,     0,   625,     0,   883,   818,     0,     0,
    1334,     0,     0,     0,   214,   215,   216,     0,     0,  1510,
       0,   220,   221,     0,   222,   214,   215,   216,   468,   223,
     565,   224,   833,   834,   835,   836,     0,   839,   248,   249,
     250,   251,   252,   287,   253,   254,   255,     0,   468,   884,
     468,  1523,     0,     0,     0,   920,     0,   246,   247,   248,
     249,   250,   251,   252,  1530,   253,   254,   255,   217,     0,
    1349,   719,     0,     0,  1312,  1251,     0,     0,     0,   217,
     218,   219,     0,     0,     0,   720,     0,     0,   678,     0,
     721,   218,   219,     0,     0,     0,   779,   281,     0,  1383,
       0,   287,     0,     0,   926,     0,     0,   468,   470,     0,
     470,   469,     0,     0,     0,     0,   220,   221,     0,   222,
       0,     6,     0,     0,   223,     0,   224,   220,   221,   885,
     222,   469,     0,   469,     0,   223,     0,   224,     0,     0,
       0,     0,   766,   886,     0,     0,  1432,  1433,   887,  1434,
       0,  1435,     0,   888,     0,     0,     0,   708,     0,   304,
     310,   316,     0,     0,   725,   495,     0,   470,   634,  -268,
     586,     0,   768,     0,     0,     0,     0,   927,   634,   214,
     215,   216,  1014,     0,     0,   769,   770,   586,   586,   586,
     469,   755,     0,   756,  1473,   757,     0,   468,     0,  1032,
       0,   771,     0,     0,     0,     0,     0,     0,     0,     0,
    1037,  1038,  1039,  1040,  1041,  1042,  1043,  1044,  1045,  1046,
    1047,  1048,  1049,  1050,  1051,  1052,  1053,  1054,  1055,  1056,
    1057,   772,  1060,   217,   773,  1393,     0,   774,     0,     0,
       0,     0,     0,     0,   750,   218,   219,     0,     0,     0,
    1500,     0,     0,   775,     0,     0,     0,   470,     0,   586,
       0,     0,     0,     0,   468,   776,   586,     0,     0,   779,
     779,   779,   586,   586,     0,   634,     0,     0,     0,   777,
     469,   220,   221,     0,   222,     0,     0,     0,     0,   223,
     926,   224,     0,     0,     0,     0,     0,     0,     0,  1312,
    1312,  1312,  1312,  1312,     0,  1312,  1526,  1527,  1528,     0,
    1529,     0,   837,     0,     0,   750,   239,   240,     0,   225,
    1344,  1346,  1348,   226,   470,     0,   586,   241,   227,  1377,
    1378,  1379,  1380,  1381,     0,  1384,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   634,   469,  1241,     0,
       0,   644,     0,     0,     0,     0,     0,     0,   586,  1398,
    1399,  1400,  1401,  1402,     0,  1403,  1404,  1405,     0,     0,
       0,   586,   779,     0,     0,     0,     0,     0,     0,   779,
    1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,
    1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,  1312,  1425,
    1285,  1426,     0,  1427,     0,     0,  1428,  1429,  1430,     0,
    1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,  1461,  1462,
    1463,  1464,  1465,  1466,  1467,  1468,  1469,  1470,  1471,     0,
       7,     8,     9,    10,     0,    11,    12,    13,   198,    68,
       0,     0,     0,     0,     0,     0,  1312,     0,     0,     0,
       0,   248,   249,   250,   251,   252,     0,   253,   254,   255,
       0,     0,     0,     0,     0,     0,     0,  1022,  1023,  1024,
       0,  1026,     0,  1029,  1030,  1031,  1504,    15,    69,     0,
       0,   199,     0,   200,   201,   202,    74,    75,     0,    20,
      76,     0,     0,   203,    22,     0,     0,    78,     0,     0,
    1312,     0,    23,    24,   204,     0,     0,     0,    26,     0,
       0,   205,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,   206,     0,     0,
    1521,     0,     0,     0,     0,    44,     0,    45,     0,    46,
       0,   866,   867,     0,    47,     0,   207,   208,    50,     0,
       0,    51,    84,   214,   215,   216,    52,     0,     0,    53,
      85,    86,    87,   209,     0,     0,    89,     0,   210,     0,
     646,   647,   648,    10,     0,    11,   649,   650,    67,    68,
       0,    56,   651,     0,    57,    58,    59,     0,     0,    60,
       0,    61,    62,     0,     0,    63,     0,     0,     0,  1329,
       0,     0,     0,     0,     0,     0,     0,   217,     0,     0,
       0,     0,     0,     0,   460,     0,     0,   652,    69,   218,
     219,    70,     0,    71,    72,    73,    74,   461,     0,   653,
      76,     0,     0,    77,   654,     0,     0,    78,     0,     0,
       0,     0,   655,   656,    79,     0,     0,     0,     0,     0,
       0,    80,     0,  1362,     0,   220,   221,     0,   222,     0,
       0,     0,     0,   223,     0,   224,     0,    81,     0,     0,
       0,     0,     0,     0,     0,   657,     0,   658,     0,   659,
       0,     0,     0,   462,   660,     0,    82,    83,   661,   497,
       0,   662,    84,  1391,  1392,   926,   663,     0,     0,   664,
      85,    86,    87,    88,  1393,     0,    89,     0,    90,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1297,   665,     0,     0,   666,   667,     0,     0,     0,   668,
       0,   669,     0,     0,     0,   670,     0,     0,     0,     0,
     325,     0,     0,  1100,  1101,  1102,  1103,  1104,  1105,  1106,
    1107,  1108,  1109,  1110,     0,  1111,  1112,  1113,  1114,  1115,
    1116,  1117,  1118,  1119,  1120,  1121,     0,     0,     0,     0,
       0,     0,  1474,  1122,  1123,  1124,  1125,  1126,  1127,  1128,
    1129,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,  1138,
    1139,  1140,     0,     0,  1141,  1142,  1143,  1144,  1145,  1146,
    1147,  1148,  1149,  1150,  1151,  1152,  1153,  1154,  1155,     0,
    1156,     0,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,
    1165,     0,  1166,  1167,  1168,     0,     0,     0,  1398,  1399,
    1400,  1401,  1402,     0,  1403,  1404,  1405,     0,     0,     0,
    1169,     0,     0,     0,     0,     0,  1170,  1171,  1172,     0,
    1173,  1174,  1175,  1176,  1177,  1178,  1179,  1180,  1181,  1182,
    1183,  1184,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,
    1193,  1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,
    1203,  1204,  1205,     0,     0,     0,  1206,  1207,  1208,  1209,
    1210,  1211,  1212,  1213,  1214,  1215,  1216,  1217,  1218,  1219,
    1220,  1221,  1222,  1223,  1224,  1225,  1226,  1415,  1227,  1228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1100,  1101,  1102,  1103,  1104,  1105,  1106,
    1107,  1108,  1109,  1110,     0,  1111,  1112,  1113,  1114,  1115,
    1116,  1117,  1118,  1119,  1120,  1121,     0,     0,     0,     0,
       0,     0,  1382,  1122,  1123,  1124,  1125,  1126,  1127,  1128,
    1129,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,  1138,
    1139,  1140,     0,     0,  1141,  1142,  1143,  1144,  1145,  1146,
    1147,  1148,  1149,  1150,  1151,  1152,  1153,  1154,  1155,     0,
    1156,     0,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,
    1165,     0,  1166,  1167,  1168,     0,     0,     0,     0,     0,
       0,     0,     0,  1443,  1444,  1445,  1446,     0,  1449,  1450,
    1169,     0,     0,     0,     0,     0,  1170,  1171,  1172,     0,
    1173,  1174,  1175,  1176,  1177,  1178,  1179,  1180,  1181,  1182,
    1183,  1184,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,
    1193,  1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,
    1203,  1204,  1205,     0,     0,     0,  1206,  1207,  1208,  1209,
    1210,  1211,  1212,  1213,  1214,  1215,  1216,  1217,  1218,  1219,
    1220,  1221,  1222,  1223,  1224,  1225,  1226,     0,  1227,  1228,
       7,     8,     9,    10,     0,    11,    12,    13,   492,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   233,   234,   235,   236,   237,   238,   239,   240,
       0,     0,     0,     0,     0,     0,     0,    15,   337,   241,
       0,   199,     0,   200,   201,   202,    74,     0,     0,    20,
     338,     0,     0,   203,    22,     0,     0,    78,     0,     0,
       0,     0,    23,    24,   204,     0,     0,     0,    26,     0,
       0,   205,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,   206,     0,     0,
       0,     0,     0,     0,     0,    44,     0,    45,     0,    46,
       0,     0,     0,     0,    47,     0,   207,   208,    50,     0,
       0,    51,    84,     0,     0,     0,    52,     0,     0,    53,
     340,   341,    87,   209,     0,     0,    89,     0,   210,     7,
       8,     9,    10,     0,    11,    12,    13,    14,     0,     0,
       0,    56,     0,     0,    57,    58,    59,     0,     0,    60,
       0,    61,    62,     0,     0,    63,     0,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,     0,   253,
     254,   255,     0,     0,     0,   590,    15,     0,     0,     0,
      16,     0,    17,    18,    19,     0,     0,     0,    20,     0,
     735,   736,    21,    22,   214,   215,   216,     0,     0,     0,
       0,    23,    24,    25,     0,     0,     0,    26,     0,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,    44,     0,    45,     0,    46,     0,
       0,     0,     0,    47,     0,    48,    49,    50,   217,     0,
      51,     0,     0,     0,     0,    52,     0,     0,    53,     0,
     218,   219,    54,     7,     8,     9,    10,    55,    11,    12,
      13,    14,   737,     0,     0,     0,     0,     0,     0,     0,
      56,     0,     0,    57,    58,    59,     0,     0,    60,     0,
      61,    62,     0,     0,    63,     0,   220,   221,     0,   222,
       0,     0,     0,     0,   223,     0,   224,     0,     0,     0,
      15,     0,     0,     0,    16,     0,    17,    18,    19,     0,
       0,     0,    20,     0,     0,     0,    21,    22,   479,   480,
     481,     0,     0,     0,     0,    23,    24,    25,   582,     0,
       0,    26,     0,   227,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,     0,     0,     0,     0,     0,     0,     0,    44,     0,
      45,     0,    46,     0,     0,     0,     0,    47,     0,    48,
      49,    50,   217,     0,    51,     0,     0,     0,     0,    52,
       0,     0,    53,     0,   218,   219,    54,     7,     8,     9,
      10,    55,    11,    12,    13,    14,     0,     0,     0,     0,
       0,     0,     0,     0,    56,     0,     0,    57,    58,    59,
       0,     0,    60,     0,    61,    62,   433,     0,    63,     0,
     484,   221,     0,   222,     0,     0,     0,     0,   223,     0,
     224,     0,     0,     0,    15,   438,     0,     0,    16,     0,
      17,    18,    19,     0,     0,     0,    20,     0,     0,     0,
      21,    22,     0,     0,     0,     0,     0,   288,     0,    23,
      24,    25,     0,     0,     0,    26,     0,     0,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,     0,     0,     0,     0,     0,
       0,     0,    44,     0,    45,     0,    46,     0,     0,     0,
       0,    47,     0,    48,    49,    50,     0,     0,    51,     0,
       0,     0,     0,    52,     0,     0,    53,     0,     0,     0,
      54,     7,     8,     9,    10,    55,    11,    12,    13,    14,
       0,     0,     0,     0,     0,     0,     0,     0,    56,     0,
       0,    57,    58,    59,     0,     0,    60,     0,    61,    62,
       0,     0,    63,     0,     0,     0,   233,   234,   235,   236,
     237,   238,   239,   240,     0,     0,     0,     0,    15,   713,
       0,     0,    16,   241,    17,    18,    19,     0,     0,     0,
      20,     0,     0,     0,    21,    22,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,     0,     0,     0,    26,
       0,     0,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,     0,
       0,     0,     0,     0,     0,     0,    44,     0,    45,     0,
      46,     0,     0,     0,     0,    47,     0,    48,    49,    50,
       0,     0,    51,     0,     0,     0,     0,    52,     0,     0,
      53,     0,     0,     0,    54,     7,     8,     9,    10,    55,
      11,    12,    13,    14,     0,     0,     0,     0,     0,     0,
       0,     0,    56,     0,     0,    57,    58,    59,     0,     0,
      60,     0,    61,    62,     0,     0,    63,     0,     0,   588,
       0,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,    15,   253,   254,   255,    16,     0,    17,    18,
      19,     0,     0,     0,    20,     0,     0,     0,    21,    22,
       0,     0,     0,     0,     0,     0,     0,    23,    24,    25,
       0,     0,     0,    26,     0,     0,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
      44,     0,    45,     0,    46,     0,     0,     0,     0,    47,
       0,    48,    49,    50,     0,     0,    51,     0,     0,     0,
       0,    52,     0,     0,    53,     0,     0,     0,    54,     7,
       8,     9,    10,    55,    11,    12,    13,    14,   923,     0,
       0,     0,     0,     0,     0,     0,    56,     0,     0,    57,
      58,    59,     0,     0,    60,     0,    61,    62,     0,     0,
      63,     0,     0,     0,   233,   234,   235,   236,   237,   238,
     239,   240,     0,     0,     0,     0,    15,     0,     0,     0,
      16,   241,    17,    18,    19,     0,     0,     0,    20,     0,
       0,     0,    21,    22,     0,     0,     0,     0,     0,     0,
       0,    23,    24,    25,     0,     0,     0,    26,     0,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,    44,     0,    45,     0,    46,     0,
       0,     0,     0,    47,     0,    48,    49,    50,     0,     0,
      51,     0,     0,     0,     0,    52,     0,     0,    53,     0,
       0,     0,    54,     7,     8,     9,    10,    55,    11,    12,
      13,    14,     0,     0,     0,     0,     0,     0,     0,     0,
      56,     0,     0,    57,    58,    59,     0,     0,    60,     0,
      61,    62,  1058,     0,    63,     0,   928,     0,     0,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
      15,   253,   254,   255,    16,     0,    17,    18,    19,     0,
       0,     0,    20,     0,     0,     0,    21,    22,     0,     0,
       0,     0,     0,     0,     0,    23,    24,    25,     0,     0,
       0,    26,     0,     0,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,     0,     0,     0,     0,     0,     0,     0,    44,     0,
      45,     0,    46,     0,     0,     0,     0,    47,     0,    48,
      49,    50,     0,     0,    51,     0,     0,     0,     0,    52,
       0,     0,    53,     0,     0,     0,    54,     7,     8,     9,
      10,    55,    11,    12,    13,    14,  1328,     0,     0,     0,
       0,     0,     0,     0,    56,     0,     0,    57,    58,    59,
       0,     0,    60,     0,    61,    62,     0,     0,    63,     0,
       0,     0,   233,   234,   235,   236,   237,   238,   239,   240,
       0,     0,     0,     0,    15,     0,     0,     0,    16,   241,
      17,    18,    19,     0,     0,     0,    20,     0,     0,     0,
      21,    22,     0,     0,     0,     0,     0,     0,     0,    23,
      24,    25,     0,     0,     0,    26,     0,     0,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,     0,     0,     0,     0,     0,
       0,     0,    44,     0,    45,     0,    46,     0,     0,     0,
       0,    47,     0,    48,    49,    50,     0,     0,    51,     0,
       0,     0,     0,    52,     0,     0,    53,     0,     0,     0,
      54,     7,     8,     9,    10,    55,    11,    12,    13,    14,
       0,     0,     0,     0,     0,     0,     0,     0,    56,     0,
       0,    57,    58,    59,     0,     0,    60,     0,    61,    62,
    1472,     0,    63,  1263,     0,     0,     0,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,    15,   253,
     254,   255,    16,     0,    17,    18,    19,     0,     0,     0,
      20,     0,     0,     0,    21,    22,     0,     0,     0,     0,
       0,     0,     0,    23,    24,    25,     0,     0,     0,    26,
       0,     0,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,     0,
       0,     0,     0,     0,     0,     0,    44,     0,    45,     0,
      46,     0,     0,     0,     0,    47,     0,    48,    49,    50,
       0,     0,    51,     0,     0,     0,     0,    52,     0,     0,
      53,     0,     0,     0,    54,   646,   647,   648,    10,    55,
      11,   649,   650,    67,    68,     0,     0,  1035,     0,     0,
       0,     0,    56,     0,     0,    57,    58,    59,     0,     0,
      60,     0,    61,    62,     0,     0,    63,   233,   234,   235,
     236,   237,   238,   239,   240,     0,     0,     0,     0,   460,
       0,     0,   652,    69,   241,     0,    70,     0,    71,    72,
      73,    74,   461,     0,   653,    76,     0,     0,    77,   654,
       0,     0,    78,     0,     0,     0,     0,   655,   656,    79,
       0,     0,     0,     0,     0,     0,    80,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    81,     0,     0,     0,     0,     0,     0,     0,
     657,     0,   658,     0,   659,     0,     0,     0,   462,   660,
       0,    82,    83,   661,     0,     0,   662,    84,     0,     0,
       0,   663,     0,     0,   664,    85,    86,    87,    88,     0,
       0,    89,     0,    90,     7,     8,     9,    10,     0,    11,
      12,    13,     0,     0,     0,     0,   665,     0,     0,   666,
     667,     0,     0,     0,   668,     0,   669,     0,     0,     0,
     670,     0,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,     0,   253,   254,   255,     0,     0,     0,
    1288,  1298,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1299,     0,     0,     0,     0,  1300,   234,
     235,   236,   237,   238,   239,   240,    23,    24,     0,     0,
       0,     0,    26,     0,     0,   241,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,     0,   233,   234,   235,   236,   237,   238,   239,   240,
       0,    45,     0,    46,     0,     0,     0,     0,  1301,   241,
       0,     0,  1302,     0,     0,  1303,     0,     0,     0,     0,
      52,     0,     0,     0,     0,     0,     0,    70,     0,    71,
      72,    73,     0,     0,     0,     0,     0,     0,     0,   263,
       0,     0,     0,     0,     0,  1304,     0,     0,  1305,  1306,
    1307,   932,     0,  1308,     0,  1309,    62,    80,     0,  1310,
       0,   933,   934,   935,   936,   937,   938,   939,   940,     0,
       0,     0,     0,   264,     0,     0,     0,     0,   941,     0,
     942,   943,   944,   945,   946,   947,   948,   949,   950,   951,
     952,   953,    82,    83,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,     0,   253,   254,   255,     0,    88,
     954,     0,     0,     0,    90,     0,     0,     0,     0,     0,
       0,     0,   335,   336,     0,     0,     0,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,     0,   253,
     254,   255,     0,     0,     0,  1507,     0,  1389,  1390,  1391,
    1392,     0,     0,   955,     0,     0,     0,     0,     0,     0,
    1393,     0,     0,   337,     0,     0,    70,     0,    71,    72,
      73,    74,     0,     0,     0,   338,     0,     0,    77,     0,
       0,     0,    78,     0,     0,     0,     0,     0,     0,    79,
       0,     0,   956,     0,     0,   957,    80,   958,   959,   960,
     961,   962,   963,   964,   965,   966,   967,   968,     0,   969,
     970,     0,    81,   971,     0,   335,   336,     0,     0,     0,
       0,     0,     0,   339,     0,     0,     0,     0,     0,     0,
       0,    82,    83,     0,     0,     0,     0,    84,     0,     0,
       0,     0,     0,     0,     0,   340,   341,    87,    88,     0,
       0,    89,     0,    90,     0,     0,   337,     0,   342,    70,
       0,    71,    72,    73,    74,     0,     0,     0,   338,     0,
       0,    77,     0,     0,   343,    78,     0,     0,     0,     0,
       0,     0,    79,     0,  1398,  1399,  1400,  1401,  1402,    80,
    1403,  1404,  1405,     0,     0,     0,     0,     0,     0,     0,
       0,   507,   508,     0,     0,    81,     0,    70,     0,    71,
      72,    73,     0,     0,     0,     0,   339,     0,     0,   263,
       0,     0,     0,     0,    82,    83,     0,     0,     0,     0,
      84,     0,     0,     0,     0,     0,     0,    80,   340,   341,
      87,    88,   337,     0,    89,    70,    90,    71,    72,    73,
      74,     0,     0,   264,   338,     0,     0,    77,     0,     0,
       0,    78,     0,     0,     0,     0,     0,   343,    79,     0,
       0,     0,    82,    83,     0,    80,   233,   234,   235,   236,
     237,   238,   239,   240,     0,     0,     0,     0,     0,    88,
       0,    81,     0,   241,    90,     0,     0,     0,     0,     0,
       0,    70,   339,    71,    72,    73,     0,     0,     0,     0,
      82,    83,     0,     0,     0,     0,    84,   174,     0,     0,
       0,     0,     0,     0,   340,   341,    87,    88,     0,     0,
      89,    80,    90,   233,   234,   235,   236,   237,   238,   239,
     240,     0,     0,     0,     0,     0,     0,   264,     0,     0,
     241,     0,     0,   343,   233,   234,   235,   236,   237,   238,
     239,   240,     0,     0,     0,     0,    82,    83,     0,     0,
       0,   241,   233,   234,   235,   236,   237,   238,   239,   240,
       0,     0,     0,    88,     0,     0,     0,     0,    90,   241,
       0,   233,   234,   235,   236,   237,   238,   239,   240,     0,
       0,     0,     0,     0,     0,     0,     0,   689,   241,     0,
       0,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,     0,   253,   254,   255,   690,   233,   234,   235,
     236,   237,   238,   239,   240,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   241,   233,   234,   235,   236,   237,
     238,   239,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   241,     0,     0,     0,     0,     0,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,     0,
     253,   254,   255,   576,     0,     0,     0,     0,     0,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
       0,   253,   254,   255,   592,     0,     0,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,     0,   253,
     254,   255,   680,     0,     0,     0,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,     0,   253,   254,
     255,   758,   233,   234,   235,   236,   237,   238,   239,   240,
       0,     0,     0,     0,     0,     0,   214,   215,   216,   241,
       0,   880,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,     0,   253,   254,   255,   899,     0,     0,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,     0,   253,   254,   255,  1016,   233,   234,   235,   236,
     237,   238,   239,   240,     0,     0,   479,   480,   481,     0,
     217,     0,     0,   241,   233,   234,   235,   236,   237,   238,
     239,   240,   218,   219,     0,     0,     0,     0,     0,     0,
       0,   241,   843,   844,   845,   846,   847,   848,   849,   850,
       0,     0,     0,   482,     0,   483,     0,     0,     0,   851,
    1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,   220,   221,
     217,   222,     0,     0,     0,     0,   223,  1393,   224,     0,
       0,     0,   218,   219,     0,     0,     0,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,     0,   253,
     254,   255,  1284,  1385,  1386,  1387,  1388,  1389,  1390,  1391,
    1392,     0,     0,     0,     0,     0,     0,     0,   484,   221,
    1393,   222,     0,     0,     0,     0,   223,     0,   224,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1286,
       0,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   485,   253,   254,   255,     0,     0,     0,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
       0,   253,   254,   255,     0,     0,     0,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,     0,   863,
     864,   865,     0,  1505,     0,  1394,  1395,  1396,  1397,     0,
       0,  1398,  1399,  1400,  1401,  1402,    -2,  1403,  1404,  1405,
       0,     0,     0,     0,     0,  1386,  1387,  1388,  1389,  1390,
    1391,  1392,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1393,     0,     0,     0,     0,     0,     0,  1394,  1395,
    1396,  1397,     0,     0,  1398,  1399,  1400,  1401,  1402,     0,
    1403,  1404,  1405,   105,     0,   106,     0,     0,   107,   108,
       0,     0,     0,     0,     0,     0,   109,   110,     0,     0,
       0,     0,     0,     0,     0,   111,     0,   112,   113,   114,
     115,     0,     0,     0,   116,     0,     0,     0,     0,   117,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,   119,
     120,   121,   122,   123,     0,     0,     0,     0,     0,   124,
     125,   126,   127,     0,     0,     0,     0,     0,   128,   129,
      67,    68,   130,   131,   458,     0,   459,   132,     0,     0,
       0,     0,     0,   133,   134,     0,   135,     0,     0,     0,
    1395,  1396,  1397,     0,   136,  1398,  1399,  1400,  1401,  1402,
       0,  1403,  1404,  1405,     0,     0,   460,     0,     0,     0,
      69,     0,     0,    70,     0,    71,    72,    73,    74,   461,
       0,     0,    76,     0,     0,    77,     0,     0,     0,    78,
     235,   236,   237,   238,   239,   240,    79,     0,     0,     0,
       0,     0,     0,    80,     0,   241,   235,   236,   237,   238,
     239,   240,     0,     0,     0,     0,     0,     0,     0,    81,
       0,   241,   235,   236,   237,   238,   239,   240,     0,     0,
       0,     0,     0,     0,     0,   462,     0,   241,    82,    83,
       0,     0,     0,     0,    84,     0,  1387,  1388,  1389,  1390,
    1391,  1392,    85,    86,    87,    88,     0,     0,    89,     0,
      90,  1393,   235,   236,   237,   238,   239,   240,     0,     0,
       0,     0,     0,   463,     0,     0,     0,   241,   464,  1387,
    1388,  1389,  1390,  1391,  1392,     0,     0,     0,  1387,  1388,
    1389,  1390,  1391,  1392,  1393,     0,     0,     0,     0,     0,
       0,     0,     0,  1393,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,     0,   253,   254,   255,     0,     0,
       0,   244,   245,   246,   247,   248,   249,   250,   251,   252,
       0,   253,   254,   255,     0,     0,     0,     0,   245,   246,
     247,   248,   249,   250,   251,   252,     0,   253,   254,   255,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1395,  1396,  1397,     0,     0,  1398,  1399,  1400,  1401,  1402,
       0,  1403,  1404,  1405,     0,   303,     0,     0,   303,   246,
     247,   248,   249,   250,   251,   252,     0,   253,   254,   255,
       0,     0,     0,     0,     0,  1397,     0,     0,  1398,  1399,
    1400,  1401,  1402,     0,  1403,  1404,  1405,  1398,  1399,  1400,
    1401,  1402,     0,  1403,  1404,  1405,   105,     0,   106,   105,
       0,   106,   108,     0,     0,   108,     0,     0,     0,   109,
     110,     0,   109,   110,     0,   214,   215,   216,     0,     0,
     112,   113,   114,   112,   297,   114,     0,     0,     0,     0,
       0,     0,   298,     0,     0,   298,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   395,    67,    68,
       0,     0,     0,     0,     0,   122,     0,     0,   122,     0,
       0,     0,     0,     0,     0,   127,     0,     0,   127,   217,
       0,   128,     0,     0,   128,   130,   131,     0,     0,   131,
       0,   218,   219,     0,     0,     0,     0,   134,    69,   135,
     134,    70,   135,    71,    72,    73,    74,    75,     0,     0,
      76,     0,     0,    77,     0,     0,     0,    78,     0,     0,
       0,     0,     0,     0,    79,     0,     0,   220,  1264,  1265,
    1266,    80,     0,     0,     0,   223,     0,   224,     0,     0,
       0,     0,     0,  1028,    67,    68,     0,    81,  1267,     0,
       0,     0,     0,  1268,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    82,    83,     0,     0,
       0,     0,    84,     0,  1448,    67,    68,     0,     0,     0,
      85,    86,    87,    88,    69,     0,    89,    70,    90,    71,
      72,    73,    74,    75,     0,     0,    76,     0,     0,    77,
       0,     0,     0,    78,     0,     0,     0,     0,     0,     0,
      79,     0,     0,     0,     0,    69,     0,    80,    70,     0,
      71,    72,    73,    74,    75,     0,     0,    76,     0,     0,
      77,     0,     0,    81,    78,     0,     0,     0,     0,     0,
       0,    79,     0,     0,     0,     0,     0,     0,    80,     0,
       0,     0,    82,    83,     0,     0,     0,     0,    84,     0,
     691,   692,   693,     0,    81,     0,    85,    86,    87,    88,
       0,     0,    89,     0,    90,   691,   692,   693,     0,     0,
       0,     0,     0,    82,    83,     0,     0,     0,     0,    84,
      70,     0,    71,    72,    73,     0,     0,    85,    86,    87,
      88,     0,     0,    89,    70,    90,    71,    72,    73,   694,
     695,     0,     0,   214,   215,   216,    77,     0,     0,    70,
      80,    71,    72,    73,     0,     0,     0,    79,     0,     0,
       0,    77,     0,     0,    80,     0,   264,     0,     0,     0,
       0,     0,    79,     0,     0,     0,     0,     0,     0,    80,
      81,     0,     0,     0,     0,    82,    83,     0,     0,     0,
       0,     0,    67,    68,     0,    81,   458,   217,     0,    82,
      83,     0,    88,     0,     0,     0,     0,    90,     0,   218,
     219,     0,     0,   696,    82,    83,    88,     0,     0,    89,
       0,    90,     0,    67,    68,     0,     0,   792,   460,     0,
     185,    88,    69,     0,    89,    70,    90,    71,    72,    73,
      74,   461,     0,     0,    76,   220,   221,    77,   222,     0,
       0,    78,     0,   223,     0,   224,     0,     0,    79,   460,
       0,     0,     0,    69,     0,    80,    70,     0,    71,    72,
      73,    74,   461,     0,     0,    76,     0,     0,    77,     0,
       0,    81,    78,     0,     0,     0,     0,     0,     0,    79,
       0,     0,     0,     0,     0,     0,    80,   462,     0,     0,
      82,    83,     0,     0,     0,     0,    84,     0,   214,   215,
     216,     0,    81,     0,    85,    86,    87,    88,    67,    68,
      89,     0,    90,     0,     0,     0,     0,     0,   462,     0,
       0,    82,    83,     0,     0,     0,     0,    84,     0,     0,
       0,     0,     0,     0,     0,    85,    86,    87,    88,    67,
      68,    89,     0,    90,   460,     0,     0,     0,    69,     0,
       0,    70,   217,    71,    72,    73,    74,   461,     0,     0,
      76,     0,     0,    77,   218,   219,     0,    78,     0,    70,
       0,    71,    72,    73,    79,     0,     0,     0,     0,    69,
       0,    80,    70,     0,    71,    72,    73,    74,    75,     0,
       0,    76,     0,     0,    77,     0,     0,    81,    78,    80,
     220,   221,     0,   222,     0,    79,     0,     0,   223,     0,
     224,     0,    80,   462,     0,   264,    82,    83,     0,     0,
       0,  1267,    84,     0,     0,    67,    68,     0,    81,     0,
      85,    86,    87,    88,    82,    83,    89,     0,    90,     0,
       0,     0,     0,     0,     0,     0,     0,    82,    83,    67,
      68,    88,     0,    84,     0,     0,    90,   214,   215,   216,
       0,    85,    86,    87,    88,    69,     0,    89,    70,    90,
      71,    72,    73,    74,     0,     0,     0,    76,     0,   186,
      77,     0,     0,     0,    78,     0,     0,     0,     0,    69,
       0,    79,    70,     0,    71,    72,    73,    74,    80,     0,
       0,    76,     0,     0,    77,     0,     0,     0,    78,     0,
       0,   217,     0,     0,    81,    79,     0,     0,     0,     0,
       0,     0,    80,   218,   219,     0,     0,     0,     0,     0,
     605,     0,     0,    82,    83,    67,     0,     0,    81,    84,
       0,     0,     0,     0,     0,     0,     0,    85,    86,    87,
      88,     0,     0,    89,   331,    90,     0,    82,    83,   220,
     221,     0,   222,    84,   175,     0,     0,   223,     0,   224,
       0,    85,    86,    87,    88,    69,     0,    89,    70,    90,
      71,    72,    73,    74,   518,     0,     0,    76,     0,     0,
      77,     0,     0,     0,    78,     0,     0,     0,     0,     0,
       0,    79,     0,     0,   176,     0,     0,    70,    80,    71,
      72,    73,    74,   993,     0,     0,   177,     0,     0,    77,
       0,     0,     0,    78,    81,     0,     0,     0,     0,     0,
      79,     0,     0,     0,     0,     0,     0,    80,     0,     0,
       0,     0,     0,    82,    83,     0,     0,     0,     0,    84,
     175,     0,     0,    81,     0,     0,     0,    85,    86,    87,
      88,     0,     0,    89,     0,    90,     0,     0,     0,     0,
       0,     0,    82,    83,    67,     0,     0,     0,    84,     0,
       0,     0,   214,   215,   216,     0,   178,   179,    87,    88,
     176,     0,    89,    70,    90,    71,    72,    73,    74,     0,
       0,     0,   177,     0,     0,    77,     0,     0,     0,    78,
       0,     0,     0,     0,    69,     0,    79,    70,     0,    71,
      72,    73,    74,    80,     0,     0,    76,     0,     0,    77,
       0,     0,     0,    78,     0,     0,   217,     0,     0,    81,
      79,   214,   215,   216,     0,     0,     0,    80,   218,   219,
       0,     0,     0,     0,     0,   214,   215,   216,    82,    83,
       0,     0,     0,    81,    84,     0,     0,     0,     0,   214,
     215,   216,   178,   179,    87,    88,     0,     0,    89,     0,
      90,     0,    82,    83,   220,   221,     0,   222,    84,     0,
       0,     0,   223,     0,   224,   217,    85,    86,    87,    88,
       0,     0,    89,     0,    90,  1267,     0,   218,   219,   217,
    1343,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   218,   219,   217,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   218,   219,     0,     0,     0,
       0,     0,     0,   220,   221,     0,   222,     0,     0,     0,
       0,   223,     0,   224,     0,     0,     0,   220,   221,     0,
     222,     0,     0,     0,  1267,   223,     0,   224,     0,  1345,
       0,   220,   221,     0,   222,     0,     0,     0,  1267,   223,
     105,   224,   106,  1347,     0,   107,   108,     0,     0,     0,
       0,     0,     0,   109,   110,     0,   292,     0,     0,     0,
       0,     0,   111,     0,   112,   113,   114,   115,     0,     0,
       0,   116,     0,     0,     0,     0,   117,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,     0,     0,     0,     0,     0,   124,   125,   126,   127,
       0,     0,   105,     0,   106,   128,   129,   107,   108,   130,
     131,     0,     0,     0,   132,   109,   110,     0,     0,     0,
     133,   134,     0,   135,   111,     0,   112,   113,   114,   115,
       0,   136,     0,   116,     0,     0,     0,     0,   117,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     687,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,     0,     0,     0,     0,     0,   124,   125,
     126,   127,     0,     0,   105,     0,   106,   128,   129,   107,
     108,   130,   131,     0,     0,     0,   132,   109,   110,     0,
       0,     0,   133,   134,     0,   135,   111,     0,   112,   113,
     114,   115,     0,   136,     0,   116,     0,     0,     0,     0,
     117,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   868,     0,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,     0,     0,     0,     0,     0,
     124,   125,   126,   127,     0,     0,   105,     0,   106,   128,
     129,   107,   108,   130,   131,     0,     0,     0,   132,   109,
     110,     0,     0,     0,   133,   134,     0,   135,   111,     0,
     112,   113,   114,   115,     0,   136,     0,   116,     0,     0,
       0,     0,   117,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   910,     0,     0,     0,     0,     0,
       0,   118,   119,   120,   121,   122,   123,     0,     0,     0,
       0,     0,   124,   125,   126,   127,     0,     0,   105,     0,
     106,   128,   129,   107,   108,   130,   131,     0,     0,     0,
     132,   109,   110,     0,     0,     0,   133,   134,     0,   135,
     111,     0,   112,   113,   114,   115,     0,   136,     0,   116,
       0,     0,     0,     0,   117,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1017,     0,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,     0,
       0,     0,     0,     0,   124,   125,   126,   127,     0,     0,
     105,     0,   106,   128,   129,   107,   108,   130,   131,     0,
       0,     0,   132,   109,   110,     0,     0,     0,   133,   134,
       0,   135,   111,     0,   112,   113,   114,   115,     0,   136,
       0,   116,     0,     0,     0,     0,   117,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1067,     0,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,     0,     0,     0,     0,     0,   124,   125,   126,   127,
       0,     0,   105,     0,   106,   128,   129,   107,   108,   130,
     131,     0,     0,     0,   132,   109,   110,     0,     0,     0,
     133,   134,     0,   135,   111,     0,   112,   113,   114,   115,
       0,   136,     0,   116,     0,   214,   215,   216,   117,     0,
       0,     0,     0,     0,     0,    70,     0,    71,    72,    73,
    1289,     0,     0,     0,     0,     0,     0,   118,   119,   120,
     121,   122,   123,     0,     0,     0,     0,     0,   124,   125,
     126,   127,   482,     0,   483,    80,     0,   128,   129,     0,
       0,   130,   131,     0,     0,     0,   132,     0,     0,   217,
       0,   264,   133,   134,   105,   135,   106,     0,     0,     0,
     108,   218,   219,   136,     0,     0,     0,   109,   110,     0,
      82,    83,     0,     0,     0,     0,     0,     0,   112,   297,
     114,     0,  1431,     0,     0,   116,     0,    88,     0,     0,
     298,     0,    90,     0,     0,     0,     0,   220,   221,     0,
     222,     0,     0,     0,     0,   223,   105,   224,   106,     0,
       0,     0,   108,   122,     0,   191,     0,     0,     0,   109,
     110,     0,     0,   127,     0,     0,     0,     0,     0,   128,
     112,   113,   114,     0,   131,     0,     0,   116,     0,     0,
       0,     0,   298,     0,   133,   134,   105,   135,   106,     0,
       0,   107,   108,     0,     0,     0,     0,     0,     0,   109,
     110,     0,  -149,     0,     0,   122,     0,     0,   111,     0,
     112,   113,   114,   115,     0,   127,     0,   116,     0,     0,
       0,   128,   117,     0,     0,   130,   131,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   133,   134,     0,   135,
       0,   118,   119,   120,   121,   122,   123,     0,     0,     0,
       0,     0,   124,   125,   126,   127,     0,     0,   105,     0,
     106,   128,   129,     0,   108,   130,   131,   105,     0,   106,
     132,   109,   110,   108,     0,     0,   133,   134,     0,   135,
     109,   110,   112,   297,   114,     0,     0,     0,     0,     0,
       0,   112,   297,   114,   298,     0,     0,     0,     0,     0,
       0,     0,     0,   298,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   309,     0,
       0,     0,     0,     0,     0,     0,   122,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   127,     0,   131,     0,
       0,     0,   128,     0,     0,     0,     0,   131,     0,   134,
       0,   135,     0,     0,     0,     0,     0,     0,   134,     0,
     135
};

static const yytype_int16 yycheck[] =
{
       1,    61,   728,   748,    92,   706,   923,   140,   113,   509,
     140,    15,   316,   602,    75,    62,   140,   296,     6,   182,
       8,   478,   657,   491,   150,    15,   462,   130,    33,    59,
      13,   147,   460,    15,    15,    15,     0,   147,    85,   165,
     147,   130,   149,   150,   151,   152,   791,   154,   149,   156,
     329,   158,   164,   169,   482,   491,   166,   155,   105,   468,
      44,    62,   490,    76,   164,    44,   715,   174,   717,   718,
     719,   720,   721,   150,    15,   147,   123,   711,   185,   186,
     147,   164,   147,    33,   191,   192,   133,     6,   165,     8,
      91,    92,    44,   164,   166,   125,   146,    75,    99,   166,
      13,   166,    15,   155,    17,   584,   740,   741,    33,   743,
     744,   745,   746,   164,   164,   273,   274,   275,   276,   277,
     583,    10,    11,    12,   147,   150,   165,   166,    81,    82,
      83,   178,   767,   146,   181,    88,   149,   146,    33,   148,
     165,   150,   164,   166,   149,   146,   147,    60,   149,   150,
     151,   152,   148,   154,   150,   156,   140,   158,   621,   164,
     165,   140,   166,   296,   164,   165,   296,   147,   155,   632,
     258,   259,   296,   174,   164,   164,   159,   613,   166,   226,
     227,   182,   164,   164,   185,   186,   274,   275,   140,   352,
     191,   192,   325,   497,   254,   325,   329,   606,   146,   329,
     147,   325,    33,   165,   166,   329,   147,   616,   617,   618,
     619,   620,   801,   163,   164,   165,   164,   278,   522,   166,
     164,   689,   811,   112,     6,   272,     8,   140,   229,    76,
     709,   165,   166,   712,   159,   160,   161,    76,   163,   164,
     165,   154,   164,   290,   147,   292,   159,    64,    65,   749,
      98,   164,   901,   206,   207,   208,   209,   258,   259,   164,
     149,   895,   309,   166,   311,   312,   313,   314,   163,   164,
     165,   997,   273,   274,   275,   276,   277,   278,   339,   147,
     164,   388,   283,   441,   331,   164,   749,   445,   446,   447,
     448,   449,   701,   340,   751,   929,   343,   147,   166,   146,
     278,   459,   149,   611,   351,   463,   464,   146,    76,   146,
     149,   264,   296,   165,   166,   316,   166,   296,   164,   908,
      10,    11,    12,    13,   787,   788,   164,    17,   159,   160,
     161,   164,   163,   164,   165,   288,   147,   641,   164,   150,
     768,   325,   164,   390,   296,   329,   325,   394,   784,   164,
     329,   352,    18,    19,    20,    21,    22,    23,   993,   164,
     407,   640,   164,   147,   147,   165,   166,    33,  1094,   147,
      60,   164,   147,   325,   842,   147,   785,   329,   146,   164,
     147,   149,   166,   166,   688,   794,   149,   388,   166,   147,
     979,   166,   892,   147,   166,   164,   147,   444,   147,   166,
     461,   462,    10,    11,    12,    13,   842,   408,   166,    17,
     469,  1328,   166,   460,    13,   166,    15,   166,    17,   147,
     147,   111,   112,   164,   146,   472,   148,   149,   150,   892,
     491,   164,   911,   164,   147,   482,   147,   595,   166,   166,
     441,   147,   290,   490,   445,   446,   447,   448,   449,   164,
     140,   155,    60,   166,   164,   166,   164,   518,   459,   164,
     166,    60,   463,   464,   154,   164,   165,   468,   877,   159,
     471,   143,   144,   145,   164,   884,   885,   886,   887,   888,
     164,   165,   166,   461,   462,   164,   533,   153,   154,   164,
     491,   157,   158,   159,   160,   161,   497,   163,   164,   165,
     146,   147,  1247,   351,   112,   506,   164,   640,   164,   165,
     640,   164,   164,   491,   164,   164,   640,   149,   519,     2,
     999,   522,   149,   584,   164,   478,  1005,  1006,   164,   146,
     164,   148,   140,   150,   164,   582,   164,   166,  1001,  1002,
     150,   140,   165,   159,   605,    13,   154,    15,   607,    17,
     165,   159,   613,   149,   506,   154,   164,   146,    48,   148,
     159,   150,   164,   165,   166,   869,   147,   164,   627,   628,
     629,   630,   631,    56,    57,    58,    59,    60,   625,   155,
      63,   146,   583,   584,   585,   146,   164,   148,   148,   150,
     164,   164,    60,   147,   595,   167,   643,   164,   165,   166,
     166,   602,   166,   164,   166,   606,   584,   166,   166,   669,
     611,  1090,  1313,   166,   615,   616,   617,   618,   619,   620,
     621,   113,   114,   115,   156,   166,   156,   605,   166,   166,
     166,   632,   166,   147,   147,   613,    15,   166,   166,   166,
     641,   642,   701,   166,   166,   166,   166,   166,   709,   166,
     166,   712,   699,   156,   166,   166,   640,   166,   166,   166,
     166,   640,   156,   167,   166,   166,   166,   164,   166,  1078,
     166,   519,   140,   657,   165,  1420,  1421,  1422,   657,   159,
     165,   146,   530,   730,   992,   533,   154,   688,   640,   166,
     164,   159,  1418,   753,   754,   149,   164,   166,   147,   147,
     701,   761,   147,   763,   147,   657,   164,   190,   709,   148,
     166,   712,   164,   149,   715,   166,   717,   718,   719,   720,
     721,   768,   164,   784,   164,   166,   164,   786,    48,   164,
     159,   709,   159,   734,   712,   169,   737,   146,    48,    76,
     164,   155,   155,   695,   803,   155,   164,   748,   749,   155,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,  1239,   255,   878,   166,   878,  1084,   260,  1523,  1087,
    1259,   842,  1261,   767,   785,  1530,   787,   788,   767,   878,
     791,    10,    10,   794,    10,    10,   148,   156,   751,   147,
     801,   148,   159,  1239,   864,   166,   784,   167,   159,   148,
     811,   166,   148,   296,   159,   767,   166,   166,   877,   146,
     821,   147,   166,   166,   164,   884,   885,   886,   887,   888,
     164,   169,   164,   880,   164,   166,   165,   165,   149,  1318,
     323,   165,   164,   164,   147,   147,   150,   166,   166,   166,
     911,   159,   165,   167,    61,   148,   148,   147,   706,    10,
     167,   166,     4,   711,   842,   147,    48,   715,   869,   717,
     718,   719,   720,   721,   169,   164,   877,   164,    11,   146,
     166,   169,   883,   884,   885,   886,   887,   888,   889,   169,
     147,   892,   740,   741,   156,   743,   744,   745,   746,    10,
     901,   156,   385,   156,   156,   166,   994,   908,   166,   148,
     911,    10,   166,    10,    10,   148,   147,   164,  1025,   402,
     403,    54,   923,    56,    57,    58,   409,   879,   169,  1408,
     166,   169,   167,   911,    15,   167,   166,   166,   999,   166,
     164,   148,   164,   166,  1005,  1006,   153,   164,   155,   996,
     157,    84,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   100,  1272,   166,
     164,   166,   164,   164,   155,   155,   155,   184,   979,   155,
    1027,   188,   189,   190,   167,   146,   119,   120,   471,  1096,
    1097,   992,   166,   994,   167,    17,  1475,   166,   999,   166,
    1001,  1002,   166,   136,  1005,  1006,   166,   166,   141,   993,
      10,    33,   148,  1321,   993,    10,   148,   148,    10,  1078,
     148,   999,   166,   164,  1025,    47,   166,  1005,  1006,  1090,
    1338,  1339,  1340,    15,   517,   147,   156,   167,    60,    61,
     166,   993,   166,   156,   527,   166,   156,   895,  1095,   166,
     156,   166,    10,   901,    76,   148,    10,   148,   167,   164,
     164,   164,   269,   148,    33,   166,   164,  1095,  1069,    10,
      11,    12,    20,    21,    22,    23,   166,  1078,   166,   166,
     148,   929,   308,  1084,   106,    33,  1087,   109,   643,  1090,
     112,    10,    11,    12,    13,  1096,  1097,  1242,    17,  1313,
     879,   329,  1410,   695,  1239,   588,   128,   842,  1069,  1417,
    1206,  1273,  1090,   407,    -1,  1423,  1424,   329,   140,   602,
     108,   109,   110,    64,   112,   113,   114,    -1,    -1,   117,
      -1,    -1,   154,    -1,   122,    76,    77,    -1,    -1,   127,
     128,    60,   130,   131,   132,    -1,   134,   135,    -1,    10,
      11,    12,    13,    -1,    15,    -1,    17,   640,    -1,    -1,
    1248,    -1,    -1,    -1,    10,    11,    12,    -1,    -1,  1477,
      -1,   112,   113,    -1,   115,    10,    11,    12,  1239,   120,
     387,   122,   665,   666,   667,   668,    -1,   670,   157,   158,
     159,   160,   161,   112,   163,   164,   165,    -1,  1259,    60,
    1261,  1509,    -1,    -1,    -1,  1206,    -1,   155,   156,   157,
     158,   159,   160,   161,  1522,   163,   164,   165,    64,    -1,
    1267,   140,    -1,    -1,  1079,   166,    -1,    -1,    -1,    64,
      76,    77,    -1,    -1,    -1,   154,    -1,    -1,  1239,    -1,
     159,    76,    77,    -1,    -1,    -1,  1247,  1248,    -1,  1309,
      -1,   112,    -1,    -1,   737,    -1,    -1,  1318,  1259,    -1,
    1261,  1239,    -1,    -1,    -1,    -1,   112,   113,    -1,   115,
      -1,  1272,    -1,    -1,   120,    -1,   122,   112,   113,   140,
     115,  1259,    -1,  1261,    -1,   120,    -1,   122,    -1,    -1,
      -1,    -1,    17,   154,    -1,    -1,  1356,  1357,   159,  1359,
      -1,  1361,    -1,   164,    -1,    -1,    -1,   514,    -1,   297,
     298,   146,    -1,    -1,   521,   303,    -1,  1318,   801,   165,
    1321,    -1,    47,    -1,    -1,    -1,    -1,  1328,   811,    10,
      11,    12,   815,    -1,    -1,    60,    61,  1338,  1339,  1340,
    1318,   548,    -1,   550,  1404,   552,    -1,  1408,    -1,   832,
      -1,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     843,   844,   845,   846,   847,   848,   849,   850,   851,   852,
     853,   854,   855,   856,   857,   858,   859,   860,   861,   862,
     863,   106,   865,    64,   109,    33,    -1,   112,    -1,    -1,
      -1,    -1,    -1,    -1,  1242,    76,    77,    -1,    -1,    -1,
    1447,    -1,    -1,   128,    -1,    -1,    -1,  1408,    -1,  1410,
      -1,    -1,    -1,    -1,  1475,   140,  1417,    -1,    -1,  1420,
    1421,  1422,  1423,  1424,    -1,   908,    -1,    -1,    -1,   154,
    1408,   112,   113,    -1,   115,    -1,    -1,    -1,    -1,   120,
     923,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1304,
    1305,  1306,  1307,  1308,    -1,  1310,  1516,  1517,  1518,    -1,
    1520,    -1,   669,    -1,    -1,  1313,    22,    23,    -1,   150,
    1264,  1265,  1266,   154,  1475,    -1,  1477,    33,   159,  1304,
    1305,  1306,  1307,  1308,    -1,  1310,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   979,  1475,   981,    -1,
      -1,   489,    -1,    -1,    -1,    -1,    -1,    -1,  1509,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,    -1,    -1,
      -1,  1522,  1523,    -1,    -1,    -1,    -1,    -1,    -1,  1530,
    1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,  1393,  1394,
    1395,  1396,  1397,  1398,  1399,  1400,  1401,  1402,  1403,  1343,
    1033,  1345,    -1,  1347,    -1,    -1,  1350,  1351,  1352,    -1,
    1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,  1393,  1394,
    1395,  1396,  1397,  1398,  1399,  1400,  1401,  1402,  1403,    -1,
       3,     4,     5,     6,    -1,     8,     9,    10,    11,    12,
      -1,    -1,    -1,    -1,    -1,    -1,  1451,    -1,    -1,    -1,
      -1,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   824,   825,   826,
      -1,   828,    -1,   830,   831,   832,  1451,    50,    51,    -1,
      -1,    54,    -1,    56,    57,    58,    59,    60,    -1,    62,
      63,    -1,    -1,    66,    67,    -1,    -1,    70,    -1,    -1,
    1505,    -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
    1505,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,
      -1,   679,   680,    -1,   117,    -1,   119,   120,   121,    -1,
      -1,   124,   125,    10,    11,    12,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,    -1,   141,    -1,
       3,     4,     5,     6,    -1,     8,     9,    10,    11,    12,
      -1,   154,    15,    -1,   157,   158,   159,    -1,    -1,   162,
      -1,   164,   165,    -1,    -1,   168,    -1,    -1,    -1,  1232,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    64,    -1,    -1,
      -1,    -1,    -1,    -1,    47,    -1,    -1,    50,    51,    76,
      77,    54,    -1,    56,    57,    58,    59,    60,    -1,    62,
      63,    -1,    -1,    66,    67,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    75,    76,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    -1,  1286,    -1,   112,   113,    -1,   115,    -1,
      -1,    -1,    -1,   120,    -1,   122,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,
      -1,    -1,    -1,   116,   117,    -1,   119,   120,   121,   146,
      -1,   124,   125,    22,    23,  1328,   129,    -1,    -1,   132,
     133,   134,   135,   136,    33,    -1,   139,    -1,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1077,   154,    -1,    -1,   157,   158,    -1,    -1,    -1,   162,
      -1,   164,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,
     878,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    -1,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    -1,
      -1,    -1,  1405,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    -1,    -1,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,    -1,    -1,    -1,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    -1,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    -1,
      -1,    -1,  1309,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1370,  1371,  1372,  1373,    -1,  1375,  1376,
     100,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,    -1,    -1,    -1,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
       3,     4,     5,     6,    -1,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    33,
      -1,    54,    -1,    56,    57,    58,    59,    -1,    -1,    62,
      63,    -1,    -1,    66,    67,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,
      -1,    -1,    -1,    -1,   117,    -1,   119,   120,   121,    -1,
      -1,   124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,    -1,   141,     3,
       4,     5,     6,    -1,     8,     9,    10,    11,    -1,    -1,
      -1,   154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,
      -1,   164,   165,    -1,    -1,   168,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,    -1,    -1,    -1,   169,    50,    -1,    -1,    -1,
      54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,    -1,
      64,    65,    66,    67,    10,    11,    12,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,   120,   121,    64,    -1,
     124,    -1,    -1,    -1,    -1,   129,    -1,    -1,   132,    -1,
      76,    77,   136,     3,     4,     5,     6,   141,     8,     9,
      10,    11,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,    -1,
     164,   165,    -1,    -1,   168,    -1,   112,   113,    -1,   115,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
      50,    -1,    -1,    -1,    54,    -1,    56,    57,    58,    -1,
      -1,    -1,    62,    -1,    -1,    -1,    66,    67,    10,    11,
      12,    -1,    -1,    -1,    -1,    75,    76,    77,   154,    -1,
      -1,    81,    -1,   159,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
     110,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,
     120,   121,    64,    -1,   124,    -1,    -1,    -1,    -1,   129,
      -1,    -1,   132,    -1,    76,    77,   136,     3,     4,     5,
       6,   141,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,    -1,   164,   165,   166,    -1,   168,    -1,
     112,   113,    -1,   115,    -1,    -1,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,    50,    51,    -1,    -1,    54,    -1,
      56,    57,    58,    -1,    -1,    -1,    62,    -1,    -1,    -1,
      66,    67,    -1,    -1,    -1,    -1,    -1,   149,    -1,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,   110,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
      -1,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,
     136,     3,     4,     5,     6,   141,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,    -1,   164,   165,
      -1,    -1,   168,    -1,    -1,    -1,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,    -1,    50,    51,
      -1,    -1,    54,    33,    56,    57,    58,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,
     132,    -1,    -1,    -1,   136,     3,     4,     5,     6,   141,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,    -1,   164,   165,    -1,    -1,   168,    -1,    -1,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    50,   163,   164,   165,    54,    -1,    56,    57,
      58,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,   110,    -1,   112,    -1,    -1,    -1,    -1,   117,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,    -1,    -1,
      -1,   129,    -1,    -1,   132,    -1,    -1,    -1,   136,     3,
       4,     5,     6,   141,     8,     9,    10,    11,   146,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,   157,
     158,   159,    -1,    -1,   162,    -1,   164,   165,    -1,    -1,
     168,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,
      54,    33,    56,    57,    58,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,
      -1,    -1,    -1,   117,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,    -1,    -1,    -1,   129,    -1,    -1,   132,    -1,
      -1,    -1,   136,     3,     4,     5,     6,   141,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     154,    -1,    -1,   157,   158,   159,    -1,    -1,   162,    -1,
     164,   165,   166,    -1,   168,    -1,   148,    -1,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      50,   163,   164,   165,    54,    -1,    56,    57,    58,    -1,
      -1,    -1,    62,    -1,    -1,    -1,    66,    67,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
     110,    -1,   112,    -1,    -1,    -1,    -1,   117,    -1,   119,
     120,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,   129,
      -1,    -1,   132,    -1,    -1,    -1,   136,     3,     4,     5,
       6,   141,     8,     9,    10,    11,   146,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,    -1,    -1,   157,   158,   159,
      -1,    -1,   162,    -1,   164,   165,    -1,    -1,   168,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    54,    33,
      56,    57,    58,    -1,    -1,    -1,    62,    -1,    -1,    -1,
      66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,   110,    -1,   112,    -1,    -1,    -1,
      -1,   117,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
      -1,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,
     136,     3,     4,     5,     6,   141,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,
      -1,   157,   158,   159,    -1,    -1,   162,    -1,   164,   165,
     166,    -1,   168,   147,    -1,    -1,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    50,   163,
     164,   165,    54,    -1,    56,    57,    58,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    66,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,   110,    -1,
     112,    -1,    -1,    -1,    -1,   117,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,    -1,    -1,    -1,   129,    -1,    -1,
     132,    -1,    -1,    -1,   136,     3,     4,     5,     6,   141,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    -1,   154,    -1,    -1,   157,   158,   159,    -1,    -1,
     162,    -1,   164,   165,    -1,    -1,   168,    16,    17,    18,
      19,    20,    21,    22,    23,    -1,    -1,    -1,    -1,    47,
      -1,    -1,    50,    51,    33,    -1,    54,    -1,    56,    57,
      58,    59,    60,    -1,    62,    63,    -1,    -1,    66,    67,
      -1,    -1,    70,    -1,    -1,    -1,    -1,    75,    76,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     108,    -1,   110,    -1,   112,    -1,    -1,    -1,   116,   117,
      -1,   119,   120,   121,    -1,    -1,   124,   125,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,    -1,   141,     3,     4,     5,     6,    -1,     8,
       9,    10,    -1,    -1,    -1,    -1,   154,    -1,    -1,   157,
     158,    -1,    -1,    -1,   162,    -1,   164,    -1,    -1,    -1,
     168,    -1,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,
     169,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    67,    17,
      18,    19,    20,    21,    22,    23,    75,    76,    -1,    -1,
      -1,    -1,    81,    -1,    -1,    33,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,    -1,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,   110,    -1,   112,    -1,    -1,    -1,    -1,   117,    33,
      -1,    -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,
     129,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    56,
      57,    58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,   157,   158,
     159,     6,    -1,   162,    -1,   164,   165,    84,    -1,   168,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    33,    -1,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,   119,   120,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,    -1,   136,
      65,    -1,    -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    10,    11,    -1,    -1,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,    -1,    -1,    -1,   169,    -1,    20,    21,    22,
      23,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      33,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      58,    59,    -1,    -1,    -1,    63,    -1,    -1,    66,    -1,
      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      -1,    -1,   147,    -1,    -1,   150,    84,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,    -1,   164,
     165,    -1,   100,   168,    -1,    10,    11,    -1,    -1,    -1,
      -1,    -1,    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,   134,   135,   136,    -1,
      -1,   139,    -1,   141,    -1,    -1,    51,    -1,   146,    54,
      -1,    56,    57,    58,    59,    -1,    -1,    -1,    63,    -1,
      -1,    66,    -1,    -1,   162,    70,    -1,    -1,    -1,    -1,
      -1,    -1,    77,    -1,   157,   158,   159,   160,   161,    84,
     163,   164,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    10,    11,    -1,    -1,   100,    -1,    54,    -1,    56,
      57,    58,    -1,    -1,    -1,    -1,   111,    -1,    -1,    66,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,
     125,    -1,    -1,    -1,    -1,    -1,    -1,    84,   133,   134,
     135,   136,    51,    -1,   139,    54,   141,    56,    57,    58,
      59,    -1,    -1,   100,    63,    -1,    -1,    66,    -1,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    -1,   162,    77,    -1,
      -1,    -1,   119,   120,    -1,    84,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,   136,
      -1,   100,    -1,    33,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    54,   111,    56,    57,    58,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,   164,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,   136,    -1,    -1,
     139,    84,   141,    16,    17,    18,    19,    20,    21,    22,
      23,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      33,    -1,    -1,   162,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
      -1,    33,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,   141,    33,
      -1,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,    33,    -1,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    16,    17,    18,
      19,    20,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    33,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,    -1,    -1,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,    33,
      -1,    15,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,    -1,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,    10,    11,    12,    -1,
      64,    -1,    -1,    33,    16,    17,    18,    19,    20,    21,
      22,    23,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    47,    -1,    49,    -1,    -1,    -1,    33,
      16,    17,    18,    19,    20,    21,    22,    23,   112,   113,
      64,   115,    -1,    -1,    -1,    -1,   120,    33,   122,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    16,    17,    18,    19,    20,    21,    22,
      23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
      33,   115,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,
      -1,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   146,   163,   164,   165,    -1,    -1,    -1,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,    -1,    -1,    -1,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,    -1,   149,    -1,   151,   152,   153,   154,    -1,
      -1,   157,   158,   159,   160,   161,     0,   163,   164,   165,
      -1,    -1,    -1,    -1,    -1,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,
     153,   154,    -1,    -1,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,    47,    -1,    49,    -1,    -1,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    -1,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,    -1,   122,   123,
      11,    12,   126,   127,    15,    -1,    17,   131,    -1,    -1,
      -1,    -1,    -1,   137,   138,    -1,   140,    -1,    -1,    -1,
     152,   153,   154,    -1,   148,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,    -1,    -1,    47,    -1,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    58,    59,    60,
      -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,    70,
      18,    19,    20,    21,    22,    23,    77,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    -1,    33,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    33,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   116,    -1,    33,   119,   120,
      -1,    -1,    -1,    -1,   125,    -1,    18,    19,    20,    21,
      22,    23,   133,   134,   135,   136,    -1,    -1,   139,    -1,
     141,    33,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,    -1,   154,    -1,    -1,    -1,    33,   159,    18,
      19,    20,    21,    22,    23,    -1,    -1,    -1,    18,    19,
      20,    21,    22,    23,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,    -1,    -1,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,    -1,    -1,    -1,    -1,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,   153,   154,    -1,    -1,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,    -1,     6,    -1,    -1,     6,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
      -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,    47,    -1,    49,    47,
      -1,    49,    53,    -1,    -1,    53,    -1,    -1,    -1,    60,
      61,    -1,    60,    61,    -1,    10,    11,    12,    -1,    -1,
      71,    72,    73,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    83,    -1,    -1,    83,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,
      -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,   106,    -1,
      -1,    -1,    -1,    -1,    -1,   116,    -1,    -1,   116,    64,
      -1,   122,    -1,    -1,   122,   126,   127,    -1,    -1,   127,
      -1,    76,    77,    -1,    -1,    -1,    -1,   138,    51,   140,
     138,    54,   140,    56,    57,    58,    59,    60,    -1,    -1,
      63,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    -1,    -1,    77,    -1,    -1,   112,   113,   114,
     115,    84,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    10,    11,    12,    -1,   100,   133,    -1,
      -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
      -1,    -1,   125,    -1,    10,    11,    12,    -1,    -1,    -1,
     133,   134,   135,   136,    51,    -1,   139,    54,   141,    56,
      57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
      77,    -1,    -1,    -1,    -1,    51,    -1,    84,    54,    -1,
      56,    57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,
      66,    -1,    -1,   100,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,
      -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,
      10,    11,    12,    -1,   100,    -1,   133,   134,   135,   136,
      -1,    -1,   139,    -1,   141,    10,    11,    12,    -1,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
      54,    -1,    56,    57,    58,    -1,    -1,   133,   134,   135,
     136,    -1,    -1,   139,    54,   141,    56,    57,    58,    59,
      60,    -1,    -1,    10,    11,    12,    66,    -1,    -1,    54,
      84,    56,    57,    58,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    66,    -1,    -1,    84,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,    84,
     100,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,    -1,
      -1,    -1,    11,    12,    -1,   100,    15,    64,    -1,   119,
     120,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,    76,
      77,    -1,    -1,   133,   119,   120,   136,    -1,    -1,   139,
      -1,   141,    -1,    11,    12,    -1,    -1,    15,    47,    -1,
     164,   136,    51,    -1,   139,    54,   141,    56,    57,    58,
      59,    60,    -1,    -1,    63,   112,   113,    66,   115,    -1,
      -1,    70,    -1,   120,    -1,   122,    -1,    -1,    77,    47,
      -1,    -1,    -1,    51,    -1,    84,    54,    -1,    56,    57,
      58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    -1,
      -1,   100,    70,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    84,   116,    -1,    -1,
     119,   120,    -1,    -1,    -1,    -1,   125,    -1,    10,    11,
      12,    -1,   100,    -1,   133,   134,   135,   136,    11,    12,
     139,    -1,   141,    -1,    -1,    -1,    -1,    -1,   116,    -1,
      -1,   119,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,   134,   135,   136,    11,
      12,   139,    -1,   141,    47,    -1,    -1,    -1,    51,    -1,
      -1,    54,    64,    56,    57,    58,    59,    60,    -1,    -1,
      63,    -1,    -1,    66,    76,    77,    -1,    70,    -1,    54,
      -1,    56,    57,    58,    77,    -1,    -1,    -1,    -1,    51,
      -1,    84,    54,    -1,    56,    57,    58,    59,    60,    -1,
      -1,    63,    -1,    -1,    66,    -1,    -1,   100,    70,    84,
     112,   113,    -1,   115,    -1,    77,    -1,    -1,   120,    -1,
     122,    -1,    84,   116,    -1,   100,   119,   120,    -1,    -1,
      -1,   133,   125,    -1,    -1,    11,    12,    -1,   100,    -1,
     133,   134,   135,   136,   119,   120,   139,    -1,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    11,
      12,   136,    -1,   125,    -1,    -1,   141,    10,    11,    12,
      -1,   133,   134,   135,   136,    51,    -1,   139,    54,   141,
      56,    57,    58,    59,    -1,    -1,    -1,    63,    -1,   164,
      66,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    51,
      -1,    77,    54,    -1,    56,    57,    58,    59,    84,    -1,
      -1,    63,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,
      -1,    64,    -1,    -1,   100,    77,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    76,    77,    -1,    -1,    -1,    -1,    -1,
     116,    -1,    -1,   119,   120,    11,    -1,    -1,   100,   125,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,   135,
     136,    -1,    -1,   139,   107,   141,    -1,   119,   120,   112,
     113,    -1,   115,   125,    11,    -1,    -1,   120,    -1,   122,
      -1,   133,   134,   135,   136,    51,    -1,   139,    54,   141,
      56,    57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,
      66,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    51,    -1,    -1,    54,    84,    56,
      57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      -1,    -1,    -1,    70,   100,    -1,    -1,    -1,    -1,    -1,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,   125,
      11,    -1,    -1,   100,    -1,    -1,    -1,   133,   134,   135,
     136,    -1,    -1,   139,    -1,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,    11,    -1,    -1,    -1,   125,    -1,
      -1,    -1,    10,    11,    12,    -1,   133,   134,   135,   136,
      51,    -1,   139,    54,   141,    56,    57,    58,    59,    -1,
      -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,    70,
      -1,    -1,    -1,    -1,    51,    -1,    77,    54,    -1,    56,
      57,    58,    59,    84,    -1,    -1,    63,    -1,    -1,    66,
      -1,    -1,    -1,    70,    -1,    -1,    64,    -1,    -1,   100,
      77,    10,    11,    12,    -1,    -1,    -1,    84,    76,    77,
      -1,    -1,    -1,    -1,    -1,    10,    11,    12,   119,   120,
      -1,    -1,    -1,   100,   125,    -1,    -1,    -1,    -1,    10,
      11,    12,   133,   134,   135,   136,    -1,    -1,   139,    -1,
     141,    -1,   119,   120,   112,   113,    -1,   115,   125,    -1,
      -1,    -1,   120,    -1,   122,    64,   133,   134,   135,   136,
      -1,    -1,   139,    -1,   141,   133,    -1,    76,    77,    64,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    64,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   112,   113,    -1,
     115,    -1,    -1,    -1,   133,   120,    -1,   122,    -1,   138,
      -1,   112,   113,    -1,   115,    -1,    -1,    -1,   133,   120,
      47,   122,    49,   138,    -1,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    61,    -1,   137,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,    -1,    -1,    -1,    -1,    -1,   113,   114,   115,   116,
      -1,    -1,    47,    -1,    49,   122,   123,    52,    53,   126,
     127,    -1,    -1,    -1,   131,    60,    61,    -1,    -1,    -1,
     137,   138,    -1,   140,    69,    -1,    71,    72,    73,    74,
      -1,   148,    -1,    78,    -1,    -1,    -1,    -1,    83,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     167,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,   114,
     115,   116,    -1,    -1,    47,    -1,    49,   122,   123,    52,
      53,   126,   127,    -1,    -1,    -1,   131,    60,    61,    -1,
      -1,    -1,   137,   138,    -1,   140,    69,    -1,    71,    72,
      73,    74,    -1,   148,    -1,    78,    -1,    -1,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,
     113,   114,   115,   116,    -1,    -1,    47,    -1,    49,   122,
     123,    52,    53,   126,   127,    -1,    -1,    -1,   131,    60,
      61,    -1,    -1,    -1,   137,   138,    -1,   140,    69,    -1,
      71,    72,    73,    74,    -1,   148,    -1,    78,    -1,    -1,
      -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,    -1,    -1,    -1,
      -1,    -1,   113,   114,   115,   116,    -1,    -1,    47,    -1,
      49,   122,   123,    52,    53,   126,   127,    -1,    -1,    -1,
     131,    60,    61,    -1,    -1,    -1,   137,   138,    -1,   140,
      69,    -1,    71,    72,    73,    74,    -1,   148,    -1,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,    -1,
      -1,    -1,    -1,    -1,   113,   114,   115,   116,    -1,    -1,
      47,    -1,    49,   122,   123,    52,    53,   126,   127,    -1,
      -1,    -1,   131,    60,    61,    -1,    -1,    -1,   137,   138,
      -1,   140,    69,    -1,    71,    72,    73,    74,    -1,   148,
      -1,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,
      -1,    -1,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,    -1,    -1,    -1,    -1,    -1,   113,   114,   115,   116,
      -1,    -1,    47,    -1,    49,   122,   123,    52,    53,   126,
     127,    -1,    -1,    -1,   131,    60,    61,    -1,    -1,    -1,
     137,   138,    -1,   140,    69,    -1,    71,    72,    73,    74,
      -1,   148,    -1,    78,    -1,    10,    11,    12,    83,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    57,    58,
     167,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,   114,
     115,   116,    47,    -1,    49,    84,    -1,   122,   123,    -1,
      -1,   126,   127,    -1,    -1,    -1,   131,    -1,    -1,    64,
      -1,   100,   137,   138,    47,   140,    49,    -1,    -1,    -1,
      53,    76,    77,   148,    -1,    -1,    -1,    60,    61,    -1,
     119,   120,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,   167,    -1,    -1,    78,    -1,   136,    -1,    -1,
      83,    -1,   141,    -1,    -1,    -1,    -1,   112,   113,    -1,
     115,    -1,    -1,    -1,    -1,   120,    47,   122,    49,    -1,
      -1,    -1,    53,   106,    -1,   164,    -1,    -1,    -1,    60,
      61,    -1,    -1,   116,    -1,    -1,    -1,    -1,    -1,   122,
      71,    72,    73,    -1,   127,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    83,    -1,   137,   138,    47,   140,    49,    -1,
      -1,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      61,    -1,   155,    -1,    -1,   106,    -1,    -1,    69,    -1,
      71,    72,    73,    74,    -1,   116,    -1,    78,    -1,    -1,
      -1,   122,    83,    -1,    -1,   126,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,
      -1,   102,   103,   104,   105,   106,   107,    -1,    -1,    -1,
      -1,    -1,   113,   114,   115,   116,    -1,    -1,    47,    -1,
      49,   122,   123,    -1,    53,   126,   127,    47,    -1,    49,
     131,    60,    61,    53,    -1,    -1,   137,   138,    -1,   140,
      60,    61,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   116,    -1,    -1,
      -1,    -1,    -1,   122,    -1,    -1,   116,    -1,   127,    -1,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,   138,
      -1,   140,    -1,    -1,    -1,    -1,    -1,    -1,   138,    -1,
     140
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   143,   144,   145,   171,   172,   278,     3,     4,     5,
       6,     8,     9,    10,    11,    50,    54,    56,    57,    58,
      62,    66,    67,    75,    76,    77,    81,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   108,   110,   112,   117,   119,   120,
     121,   124,   129,   132,   136,   141,   154,   157,   158,   159,
     162,   164,   165,   168,   268,   269,   277,    11,    12,    51,
      54,    56,    57,    58,    59,    60,    63,    66,    70,    77,
      84,   100,   119,   120,   125,   133,   134,   135,   136,   139,
     141,   230,   231,   235,   237,   239,   245,   246,   250,   251,
     256,   257,   258,   259,     0,    47,    49,    52,    53,    60,
      61,    69,    71,    72,    73,    74,    78,    83,   102,   103,
     104,   105,   106,   107,   113,   114,   115,   116,   122,   123,
     126,   127,   131,   137,   138,   140,   148,   175,   177,   178,
     180,   183,   202,   252,   255,   278,   146,   164,   164,   164,
     164,   164,   164,   155,   164,   155,   164,   164,   164,   164,
     164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
     164,   164,   164,   164,   164,    11,    51,    63,   133,   134,
     233,   250,   251,   256,   155,   164,   164,    15,   164,   155,
     164,   164,   164,   268,   268,   268,   268,   268,    11,    54,
      56,    57,    58,    66,    77,    84,   100,   119,   120,   136,
     141,   235,   266,   268,    10,    11,    12,    64,    76,    77,
     112,   113,   115,   120,   122,   150,   154,   159,   272,   273,
     275,   278,   268,    16,    17,    18,    19,    20,    21,    22,
      23,    33,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   163,   164,   165,     6,     8,   230,   231,
     164,    59,   125,    66,   100,   257,   257,   257,   275,   164,
     257,    13,    15,    17,    60,   140,   154,   159,   164,   228,
     229,   278,   229,   146,    10,    11,    12,   112,   149,   276,
     236,   278,   137,   181,   182,   275,   164,    72,    83,   180,
     180,   180,   180,     6,   180,   202,   180,   149,   179,   107,
     180,   164,   164,   164,   164,   180,   146,   275,   149,   149,
     149,   180,   180,   164,   178,   180,   183,   203,   180,   180,
     187,   107,   275,   180,   180,    10,    11,    51,    63,   111,
     133,   134,   146,   162,   190,   193,   232,   234,   237,   239,
     245,   250,   251,   256,   265,   266,   278,   265,   235,   265,
     265,   265,   265,   235,   265,   235,   265,   235,   265,   235,
     235,   235,   235,   235,   235,   235,   235,   235,   235,   235,
     235,   235,   235,   235,   265,   164,   275,   164,   164,   275,
     236,   235,   265,   265,   164,    10,   235,   235,   235,   268,
     265,   265,   166,   147,   166,   275,   275,   147,   169,   150,
     218,   278,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   166,   266,   268,   229,   229,    51,   268,
     235,   159,   275,    13,    15,    17,    60,   140,   154,   159,
     228,   278,   228,   229,   228,   229,   228,   228,    15,    17,
      47,    60,   116,   154,   159,   213,   214,   223,   230,   231,
     278,   165,   248,   249,   278,    11,   247,   257,   149,    10,
      11,    12,    47,    49,   112,   146,   275,   276,   275,    48,
     147,   164,    11,   232,   268,   180,   177,   146,   275,   275,
     275,   275,   275,   172,   146,   268,   155,    10,    11,   193,
     232,   234,   275,   148,   150,   164,   164,   164,    60,   230,
     275,   164,   176,   275,   185,   146,   148,   150,   220,   148,
     184,   275,   276,   236,   167,   166,   166,   166,   166,   166,
     166,   156,   166,   156,   166,   166,   166,   166,   147,   166,
     147,   166,   147,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   268,   235,   265,   275,   156,   166,
     166,   275,   166,   166,   156,   166,   166,   166,   166,   268,
     268,    15,   154,   273,   164,   199,   278,   268,   149,   166,
     169,   166,   166,   166,   228,   159,   275,   228,   228,   228,
     228,   228,   165,   228,   181,   116,   230,   231,   223,   228,
     228,   166,    15,   147,    13,    17,    60,   140,   154,   159,
     164,   226,   276,   278,    13,    15,    17,    60,   140,   154,
     159,   164,   227,   264,   268,   278,   275,   167,   247,   181,
     164,   238,   240,   149,   180,   181,     3,     4,     5,     9,
      10,    15,    50,    62,    67,    75,    76,   108,   110,   112,
     117,   121,   124,   129,   132,   154,   157,   158,   162,   164,
     168,   215,   216,   223,   224,   270,   271,   277,   278,   166,
     166,   172,   146,   147,   147,   147,   147,   167,   253,   147,
     166,    10,    11,    12,    59,    60,   133,   204,   205,   206,
     207,   208,   256,   278,   164,   220,   188,   148,   235,   191,
      13,   159,   192,    51,   268,   230,    13,    17,    60,   140,
     154,   159,   225,   276,   278,   235,   172,   164,   146,   148,
     149,   150,   219,   260,   261,    64,    65,   146,   268,    13,
      17,    60,   111,   140,   154,   159,   164,   186,   209,   211,
     276,   149,   275,   164,   164,   235,   235,   235,   166,   166,
     166,   164,   166,   164,   218,   213,    17,    33,    47,    60,
      61,    76,   106,   109,   112,   128,   140,   154,   212,   278,
     268,   228,   264,   166,    48,   230,   231,   226,   227,   166,
     166,   199,    15,   223,   159,   226,   226,   226,   226,   226,
     226,   165,   218,   159,   275,   227,   227,   227,   227,   227,
     227,   165,   218,   169,   147,   150,    48,   232,   268,   172,
      76,   241,   278,   182,   164,   155,   155,   233,   155,    15,
     164,   155,   164,   268,   268,   268,   268,   235,   266,   268,
     166,    15,   147,    16,    17,    18,    19,    20,    21,    22,
      23,    33,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   163,   164,   165,   180,   180,   167,   254,
      10,    10,    10,    10,   172,   277,   148,   208,   156,   147,
      15,   275,    13,    17,    60,   140,   154,   159,   164,   226,
     227,   189,   211,   148,   213,   159,   209,   213,   166,   166,
     225,   159,   225,   225,   225,   225,   225,   164,   165,   166,
     167,   194,   260,   173,   174,   275,    64,    65,   167,   262,
     278,   148,   148,   146,   221,   222,   268,   278,   148,   159,
     209,   209,     6,    16,    17,    18,    19,    20,    21,    22,
      23,    33,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    65,   108,   147,   150,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   164,
     165,   168,   200,   209,   209,   209,   209,   149,   164,   165,
     212,   150,   218,   220,   247,   266,   266,   166,   166,   166,
     266,   266,   166,    60,   233,   181,   164,   146,   169,   164,
     223,   226,   227,   218,   218,   164,   164,   212,   226,   166,
     264,   227,   166,   264,   268,   166,   166,   167,   149,   242,
     243,   278,   235,   235,   235,   164,   235,   164,    10,   235,
     235,   235,   268,   166,   166,    15,   224,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   166,   266,
     268,   172,   147,   166,   147,   147,   147,   167,   166,   226,
     227,   178,   183,   201,   202,   207,   275,   150,   159,   150,
     217,   278,   218,   220,   166,   209,   166,   166,   164,   225,
     197,   264,   213,   167,   146,   147,   146,   164,   148,   148,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    70,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    82,    83,    84,   100,
     106,   107,   108,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   168,   169,   263,
     221,   167,   147,   209,    10,   166,   169,   166,     4,   210,
     264,   268,   147,   166,   166,   166,   166,   199,   233,   229,
      48,   166,   275,   260,   213,   218,   218,   213,   213,   164,
     169,   164,   169,   147,   113,   114,   115,   133,   138,   244,
     274,   275,   146,   147,   166,   156,   156,   265,   156,   275,
     166,   166,   156,   166,   166,   268,   149,   166,   169,   167,
      10,   148,    10,    10,    10,   148,   217,   235,    50,    62,
      67,   117,   121,   124,   154,   157,   158,   159,   162,   164,
     168,   267,   269,   147,   199,   166,   164,   199,   198,   213,
     169,   166,   260,   174,   265,   265,   262,   167,   146,   268,
     215,   169,   186,   212,   229,    15,   166,   167,   166,   166,
     166,   213,   213,   138,   274,   138,   274,   138,   274,   275,
     113,   114,   115,    15,   172,   244,   164,   164,   166,   164,
     166,   164,   268,   147,   166,   147,   166,   166,   147,   166,
     164,   155,   155,   155,    15,   164,   155,   267,   267,   267,
     267,   267,   235,   266,   267,    16,    17,    18,    19,    20,
      21,    22,    23,    33,   151,   152,   153,   154,   157,   158,
     159,   160,   161,   163,   164,   165,   189,   164,   195,   213,
     166,   199,   167,   167,   166,   167,   221,   166,   146,   166,
     199,   199,   199,   166,   166,   274,   274,   274,   274,   274,
     274,   167,   266,   266,   266,   266,    10,   148,    10,   148,
     148,    10,   148,   235,   235,   235,   235,   164,    10,   235,
     235,   166,   166,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   166,   266,   268,   196,   213,   166,   199,    15,
     167,   199,   260,   212,   212,   212,   199,   199,   166,   166,
     166,   166,   166,   147,   147,   166,   166,   156,   156,   156,
     275,   166,   166,   156,   267,   149,   166,   169,   213,   166,
     199,   167,   148,    10,    10,   148,   164,   164,   164,   166,
     164,   267,   166,   199,   166,   166,   266,   266,   266,   266,
     199,   212,   148,   148,   166,   166,   166,   166,   212
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   170,   171,   171,   171,   172,   172,   172,   173,   173,
     174,   174,   174,   176,   175,   177,   177,   177,   177,   177,
     177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
     177,   177,   177,   177,   177,   177,   177,   177,   179,   178,
     180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
     180,   180,   180,   180,   180,   180,   180,   180,   181,   181,
     182,   182,   182,   184,   183,   183,   185,   183,   183,   183,
     186,   186,   188,   187,   187,   189,   189,   191,   190,   192,
     190,   194,   193,   195,   193,   196,   193,   197,   193,   198,
     193,   193,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   201,   201,   201,   202,   203,
     202,   202,   202,   204,   204,   205,   205,   206,   206,   207,
     207,   207,   207,   207,   207,   207,   207,   207,   208,   208,
     208,   208,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   210,   209,   211,   211,   212,   212,   212,
     213,   213,   213,   213,   213,   214,   214,   215,   215,   215,
     215,   215,   216,   216,   217,   217,   218,   218,   219,   219,
     219,   219,   219,   220,   220,   220,   220,   220,   220,   221,
     221,   221,   222,   222,   222,   222,   223,   223,   223,   223,
     223,   223,   223,   223,   224,   224,   225,   225,   225,   225,
     225,   225,   225,   225,   225,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   227,   227,   227,   227,
     227,   227,   227,   227,   227,   227,   227,   228,   228,   228,
     228,   228,   228,   228,   228,   228,   228,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   230,   230,   230,   230,   230,   230,   230,   230,   230,
     230,   230,   230,   231,   232,   232,   232,   232,   232,   232,
     232,   232,   232,   232,   232,   232,   232,   233,   233,   233,
     233,   233,   233,   233,   233,   234,   234,   235,   235,   235,
     235,   236,   236,   236,   236,   238,   237,   240,   239,   241,
     241,   242,   242,   243,   243,   244,   244,   244,   244,   244,
     244,   244,   244,   244,   244,   245,   246,   246,   246,   246,
     247,   247,   248,   248,   248,   249,   249,   249,   250,   250,
     250,   251,   251,   251,   253,   252,   254,   252,   252,   252,
     255,   255,   255,   256,   256,   256,   257,   257,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     258,   258,   258,   259,   261,   260,   262,   262,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   264,   264,   265,
     265,   266,   266,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   272,   272,   272,   272,
     272,   273,   273,   273,   273,   274,   274,   274,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   276,
     276,   276,   276,   277,   277,   277,   277,   278
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     5,     4,     0,     5,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     2,     2,     2,     7,     9,    11,
       9,    11,    13,     9,    13,     9,     7,     5,     0,     3,
       1,     2,     2,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     4,     5,     5,     1,     3,
       1,     4,     4,     0,     4,     3,     0,     4,     3,     1,
       2,     4,     0,     4,     3,     2,     4,     0,     6,     0,
       6,     0,     7,     0,    11,     0,    12,     0,     8,     0,
       9,     1,     1,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     4,     5,     6,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     2,     0,
       6,     2,     2,     1,     1,     1,     3,     1,     1,     1,
       2,     4,     2,     3,     3,     4,     2,     3,     1,     1,
       1,     1,     1,     2,     3,     2,     2,     2,     2,     2,
       3,     4,     3,     0,     6,     2,     3,     1,     3,     4,
       1,     1,     1,     3,     2,     1,     3,     1,     1,     1,
       3,     2,     1,     3,     1,     2,     1,     2,     1,     3,
       5,     3,     3,     1,     3,     3,     3,     3,     4,     1,
       1,     2,     1,     3,     3,     5,     3,     4,     5,     3,
       4,     5,     2,     4,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     3,     4,     1,     1,     2,     2,     2,
       2,     2,     3,     4,     7,     3,     1,     2,     2,     2,
       2,     2,     2,     3,     4,     7,     3,     1,     1,     2,
       2,     2,     2,     2,     2,     3,     4,     1,     1,     2,
       2,     2,     2,     2,     2,     3,     4,     5,     9,     9,
       9,     1,     1,     2,     1,     1,     1,     3,     4,     4,
       4,     4,     1,     1,     1,     1,     2,     1,     1,     1,
       3,     4,     2,     4,     4,     4,     1,     1,     1,     2,
       3,     2,     4,     4,     1,     1,     1,     2,     3,     2,
       3,     1,     4,     5,     5,     0,     6,     0,     9,     1,
       1,     1,     1,     2,     3,     1,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     4,     3,     1,     4,     2,
       1,     1,     1,     3,     5,     1,     2,     4,     1,     2,
       2,     1,     1,     1,     0,     6,     0,     7,     4,     5,
       3,     5,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       1,     1,     2,     1,     0,     2,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     3,     1,     4,     7,     7,     7,     7,     4,
       4,     5,     4,     2,     2,     2,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     4,     4,     3,     3,
       3,     3,     1,     4,     7,     7,     7,     7,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     5,     4,     2,     5,     4,     4,
       2,     2,     2,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     5,     4,     4,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     8,    11,     4,     4,     6,     4,     4,     6,
       6,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     1,     4,     7,     7,     7,     7,     4,     4,     5,
       4,     2,     5,     4,     4,     2,     2,     2,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     5,     4,
       4,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       4,     2,     3,     1,     2,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     0
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
#line 450 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_expr = (yyvsp[0].u.expr);
}
#line 3985 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 4:
#line 454 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_type = (yyvsp[0].u.type);
}
#line 3993 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 10:
#line 472 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-1].u.expr);
}
#line 4001 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 11:
#line 476 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-2].u.expr);
}
#line 4009 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 12:
#line 480 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete (yyvsp[-1].u.expr);
}
#line 4017 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 13:
#line 492 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
#line 4026 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 14:
#line 497 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4034 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 21:
#line 510 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
#line 4051 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 22:
#line 523 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
#line 4064 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 23:
#line 532 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_published);
}
#line 4072 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 24:
#line 536 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
#line 4084 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 25:
#line 544 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_protected);
}
#line 4092 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 26:
#line 548 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_scope->set_current_vis(V_private);
}
#line 4100 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 27:
#line 552 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-4].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[-6]).file);
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-6]));
}
#line 4115 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 28:
#line 563 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));

  } else {
    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4140 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 29:
#line 584 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == (CPPDeclaration *)NULL || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      deleter = NULL;
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[-10]).file);
    if (deleter) {
      make_property->_del_function = deleter->as_function_group();
    }
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4174 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 30:
#line 614 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = NULL;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  }

  CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), getter->as_function_group(), NULL, current_scope, (yylsp[-8]).file);
  make_property->_length_function = length_getter->as_function_group();
  current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
}
#line 4195 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 31:
#line 631 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    length_getter = NULL;
  }

  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));

  } else {
    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[-10]).file);
    make_property->_length_function = length_getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4227 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 32:
#line 659 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    length_getter = NULL;
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    CPPFunctionGroup *setter_func = NULL;

    if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      setter_func = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == (CPPDeclaration *)NULL || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      deleter = NULL;
    }

    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), getter->as_function_group(),
                                                         setter_func, current_scope, (yylsp[-12]).file);
    make_property->_length_function = length_getter->as_function_group();
    if (deleter) {
      make_property->_del_function = deleter->as_function_group();
    }
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4268 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 33:
#line 696 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  }

  if (hasser && getter) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        NULL, NULL,
                                        current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4294 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 34:
#line 718 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *hasser = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (hasser == (CPPDeclaration *)NULL || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid has-function: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == (CPPDeclaration *)NULL || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
  }

  CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (setter == (CPPDeclaration *)NULL || setter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
  }

  CPPDeclaration *clearer = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (clearer == (CPPDeclaration *)NULL || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid clear-function: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  }

  if (hasser && getter && setter && clearer) {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-10].u.identifier),
                                        hasser->as_function_group(),
                                        getter->as_function_group(),
                                        setter->as_function_group(),
                                        clearer->as_function_group(),
                                        current_scope, (yylsp[-12]).file);
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4331 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 35:
#line 751 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == (CPPDeclaration *)NULL || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = NULL;
  }

  CPPDeclaration *element_getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == (CPPDeclaration *)NULL || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    element_getter = NULL;
  }

  if (length_getter != (CPPDeclaration *)NULL && element_getter != (CPPDeclaration *)NULL) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4357 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 36:
#line 773 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPExpression::Result result = (yyvsp[-4].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-4]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[-2].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[-4]));
  }
}
#line 4372 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 37:
#line 784 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-2]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[-2]));
  }
}
#line 4386 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 38:
#line 797 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
#line 4396 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 39:
#line 803 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  delete current_scope;
  pop_scope();
}
#line 4405 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 40:
#line 812 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = 0;
}
#line 4413 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 41:
#line 816 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This isn't really a storage class, but it helps with parsing.
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_const;
}
#line 4422 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 42:
#line 821 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
}
#line 4430 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 43:
#line 825 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[-1].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[-1].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[-1].str) + "\"", (yylsp[-1]));
  }
}
#line 4445 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 44:
#line 836 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_static;
}
#line 4453 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 45:
#line 840 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_inline;
}
#line 4461 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 46:
#line 844 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_virtual;
}
#line 4469 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 47:
#line 848 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
}
#line 4477 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 48:
#line 852 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_register;
}
#line 4485 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 49:
#line 856 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_volatile;
}
#line 4493 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 50:
#line 860 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_mutable;
}
#line 4501 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 51:
#line 864 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constexpr;
}
#line 4509 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 52:
#line 868 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_blocking;
}
#line 4517 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 53:
#line 872 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extension;
}
#line 4525 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 54:
#line 876 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_thread_local;
}
#line 4533 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 55:
#line 880 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Ignore attribute specifiers for now.
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4542 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 56:
#line 885 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4550 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 57:
#line 889 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4558 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 63:
#line 907 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // type_like_declaration.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4573 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 64:
#line 918 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4581 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 65:
#line 923 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
#line 4594 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 66:
#line 932 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[0].u.instance) != (CPPInstance *)NULL) {
    // Push the scope so that the initializers can make use of things defined
    // in the class body.
    push_scope((yyvsp[0].u.instance)->get_scope(current_scope, global_scope));
    (yyvsp[0].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-1].u.integer));
  }
}
#line 4607 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 67:
#line 941 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-2].u.instance) != (CPPInstance *)NULL) {
    pop_scope();
    current_scope->add_declaration((yyvsp[-2].u.instance), global_scope, current_lexer, (yylsp[-2]));
    (yyvsp[-2].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4619 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 68:
#line 949 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4631 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 70:
#line 965 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 4646 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 71:
#line 976 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 4661 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 72:
#line 991 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4676 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 73:
#line 1002 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_storage_class();
}
#line 4684 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 74:
#line 1006 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-1].u.instance) != (CPPDeclaration *)NULL) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
#line 4700 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 75:
#line 1021 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
}
#line 4713 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 76:
#line 1030 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-3]));
}
#line 4726 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 77:
#line 1044 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4734 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 78:
#line 1048 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name() ||
      (yyvsp[-5].u.identifier)->get_simple_name() == string("~") + current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[-5]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 4758 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 79:
#line 1068 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4766 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 80:
#line 1072 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 4788 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 81:
#line 1095 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 4796 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 82:
#line 1099 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  if ((yyvsp[-5].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[-5].u.identifier)->get_simple_name(), (yylsp[-5]));
    delete (yyvsp[-5].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
  }
}
#line 4819 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 83:
#line 1125 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 4827 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 84:
#line 1129 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-10].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-10]).file);
}
#line 4845 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 85:
#line 1143 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 4853 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 86:
#line 1147 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  CPPType *type = (yyvsp[-11].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-11].u.identifier)->get_fully_scoped_name(), (yylsp[-11]));
  }
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-9].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-11]).file);
}
#line 4871 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 87:
#line 1163 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-3].u.identifier) != NULL) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 4881 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 88:
#line 1169 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-7].u.identifier) != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier(name, (yylsp[-6]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 4910 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 89:
#line 1194 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-4].u.identifier) != NULL) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 4920 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 90:
#line 1200 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  if ((yyvsp[-8].u.identifier) != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-5]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 4940 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 91:
#line 1220 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *decl =
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = (CPPInstance *)NULL;
  }
}
#line 4954 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 92:
#line 1233 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = 0;
}
#line 4962 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 93:
#line 1237 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_const_method;
}
#line 4970 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 94:
#line 1241 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_volatile_method;
}
#line 4978 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 95:
#line 1245 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_noexcept;
}
#line 4986 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 96:
#line 1258 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_final;
}
#line 4994 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 97:
#line 1262 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_override;
}
#line 5002 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 98:
#line 1266 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_lvalue_method;
}
#line 5010 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 99:
#line 1270 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_rvalue_method;
}
#line 5018 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 100:
#line 1274 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5027 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 101:
#line 1279 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Used for lambdas in C++17, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5036 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 102:
#line 1284 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5044 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 103:
#line 1288 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
#line 5052 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 104:
#line 1292 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-5].u.integer);
}
#line 5060 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 105:
#line 1296 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5068 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 106:
#line 1303 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "!";
}
#line 5076 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 107:
#line 1307 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "~";
}
#line 5084 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 108:
#line 1311 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "*";
}
#line 5092 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 109:
#line 1315 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "/";
}
#line 5100 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 110:
#line 1319 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "%";
}
#line 5108 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 111:
#line 1323 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "+";
}
#line 5116 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 112:
#line 1327 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "-";
}
#line 5124 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 113:
#line 1331 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "|";
}
#line 5132 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 114:
#line 1335 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&";
}
#line 5140 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 115:
#line 1339 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "^";
}
#line 5148 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 116:
#line 1343 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "||";
}
#line 5156 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 117:
#line 1347 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&&";
}
#line 5164 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 118:
#line 1351 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "==";
}
#line 5172 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 119:
#line 1355 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "!=";
}
#line 5180 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 120:
#line 1359 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<=";
}
#line 5188 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 121:
#line 1363 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">=";
}
#line 5196 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 122:
#line 1367 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<";
}
#line 5204 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 123:
#line 1371 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">";
}
#line 5212 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 124:
#line 1375 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<<";
}
#line 5220 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 125:
#line 1379 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">>";
}
#line 5228 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 126:
#line 1383 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "=";
}
#line 5236 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 127:
#line 1387 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ",";
}
#line 5244 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 128:
#line 1391 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "++";
}
#line 5252 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 129:
#line 1395 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "--";
}
#line 5260 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 130:
#line 1399 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "*=";
}
#line 5268 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 131:
#line 1403 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "/=";
}
#line 5276 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 132:
#line 1407 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "%=";
}
#line 5284 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 133:
#line 1411 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "+=";
}
#line 5292 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 134:
#line 1415 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "-=";
}
#line 5300 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 135:
#line 1419 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "|=";
}
#line 5308 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 136:
#line 1423 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "&=";
}
#line 5316 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 137:
#line 1427 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "^=";
}
#line 5324 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 138:
#line 1431 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "<<=";
}
#line 5332 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 139:
#line 1435 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = ">>=";
}
#line 5340 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 140:
#line 1439 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "->";
}
#line 5348 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 141:
#line 1443 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "[]";
}
#line 5356 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 142:
#line 1447 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "()";
}
#line 5364 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 143:
#line 1451 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "new";
}
#line 5372 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 144:
#line 1455 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.str) = "delete";
}
#line 5380 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 149:
#line 1469 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  push_scope(new CPPTemplateScope(current_scope));
}
#line 5388 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 150:
#line 1473 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 5396 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 155:
#line 1487 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5406 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 156:
#line 1493 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5416 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 159:
#line 1507 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((CPPIdentifier *)NULL));
}
#line 5424 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 160:
#line 1511 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 5432 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 161:
#line 1515 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 5440 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 162:
#line 1519 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((CPPIdentifier *)NULL);
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5450 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 163:
#line 1525 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[0].u.identifier));
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5460 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 164:
#line 1531 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5470 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 165:
#line 1537 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5481 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 166:
#line 1544 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5490 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 167:
#line 1549 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5500 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 168:
#line 1558 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5508 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 169:
#line 1562 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 5517 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 170:
#line 1567 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 5529 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 171:
#line 1575 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 5541 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 172:
#line 1587 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 5549 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 173:
#line 1591 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-1].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+(yyvsp[0].str), (yylsp[0]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[0].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5567 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 174:
#line 1605 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A C++11 literal operator.
  if (!(yyvsp[-1].str).empty()) {
    yyerror("expected empty string", (yylsp[-1]));
  }
  CPPIdentifier *ident = (yyvsp[-2].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name(), (yylsp[0]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[0].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5586 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 175:
#line 1620 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5595 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 176:
#line 1625 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5604 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 177:
#line 1630 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 5613 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 178:
#line 1635 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 5622 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 179:
#line 1640 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 5631 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 180:
#line 1645 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 5640 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 181:
#line 1650 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 5649 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 182:
#line 1655 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 5658 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 183:
#line 1660 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Create a scope for this function (in case it is a function)
  CPPScope *scope = new CPPScope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope),
                                 CPPNameComponent(""), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5675 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 184:
#line 1673 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  if ((yyvsp[-2].u.param_list)->is_parameter_expr() && (yyvsp[0].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-2].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  }
}
#line 5693 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 185:
#line 1691 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[0].u.type) != NULL) {
    (yyvsp[-1].u.inst_ident)->add_trailing_return_type((yyvsp[0].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
}
#line 5707 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 186:
#line 1701 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Bitfield definition.
  (yyvsp[-2].u.inst_ident)->_bit_width = (yyvsp[0].u.integer);
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
#line 5717 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 187:
#line 1711 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = NULL;
}
#line 5725 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 188:
#line 1715 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5733 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 189:
#line 1719 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5742 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 190:
#line 1728 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
}
#line 5750 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 191:
#line 1732 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5759 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 192:
#line 1737 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 5767 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 193:
#line 1741 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5776 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 194:
#line 1746 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5785 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 195:
#line 1754 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5794 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 196:
#line 1759 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5803 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 197:
#line 1767 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
}
#line 5811 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 198:
#line 1771 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5820 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 199:
#line 1776 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 5828 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 200:
#line 1780 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5837 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 201:
#line 1785 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 5846 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 202:
#line 1793 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5855 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 203:
#line 1798 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 5864 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 204:
#line 1806 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5872 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 205:
#line 1810 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 5880 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 206:
#line 1817 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5888 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 207:
#line 1821 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 5896 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 208:
#line 1828 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5904 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 209:
#line 1832 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5912 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 210:
#line 1836 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5920 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 211:
#line 1840 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 5928 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 212:
#line 1844 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 5936 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 213:
#line 1851 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5944 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 214:
#line 1855 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5952 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 215:
#line 1859 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 5960 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 216:
#line 1863 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 5968 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 217:
#line 1867 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 5976 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 218:
#line 1871 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 5984 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 222:
#line 1884 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
}
#line 5991 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 226:
#line 1893 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6000 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 227:
#line 1898 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6010 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 228:
#line 1904 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6020 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 229:
#line 1910 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6029 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 230:
#line 1915 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6039 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 231:
#line 1921 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6049 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 232:
#line 1927 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6057 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 233:
#line 1931 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6065 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 234:
#line 1942 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6073 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 235:
#line 1946 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6084 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 236:
#line 1956 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6092 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 237:
#line 1960 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 6100 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 238:
#line 1964 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6109 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 239:
#line 1969 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6118 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 240:
#line 1974 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6127 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 241:
#line 1979 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6136 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 242:
#line 1984 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6145 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 243:
#line 1989 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6154 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 244:
#line 1994 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6163 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 245:
#line 2002 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6171 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 246:
#line 2006 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
#line 6179 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 247:
#line 2010 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6188 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 248:
#line 2015 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6197 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 249:
#line 2020 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6206 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 250:
#line 2025 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6215 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 251:
#line 2030 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6224 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 252:
#line 2035 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6233 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 253:
#line 2040 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6242 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 254:
#line 2045 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6252 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 255:
#line 2051 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6261 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 256:
#line 2059 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6270 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 257:
#line 2064 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6279 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 258:
#line 2069 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6288 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 259:
#line 2074 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6297 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 260:
#line 2079 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6306 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 261:
#line 2084 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6315 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 262:
#line 2089 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6324 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 263:
#line 2094 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6333 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 264:
#line 2099 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6342 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 265:
#line 2104 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6352 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 266:
#line 2110 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6361 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 267:
#line 2118 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6369 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 268:
#line 2122 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6378 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 269:
#line 2127 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6387 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 270:
#line 2132 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6396 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 271:
#line 2137 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6405 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 272:
#line 2142 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6414 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 273:
#line 2147 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6423 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 274:
#line 2152 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6432 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 275:
#line 2157 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6441 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 276:
#line 2162 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6450 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 277:
#line 2170 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
#line 6458 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 278:
#line 2174 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6467 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 279:
#line 2179 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6476 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 280:
#line 2184 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6485 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 281:
#line 2189 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6494 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 282:
#line 2194 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6503 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 283:
#line 2199 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6512 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 284:
#line 2204 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6521 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 285:
#line 2209 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
#line 6530 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 286:
#line 2214 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
#line 6539 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 287:
#line 2219 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6549 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 288:
#line 2225 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6560 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 289:
#line 2232 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6571 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 290:
#line 2239 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6582 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 291:
#line 2249 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6590 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 292:
#line 2253 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 6602 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 293:
#line 2261 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6610 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 294:
#line 2265 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6618 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 295:
#line 2269 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6626 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 296:
#line 2273 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
#line 6634 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 297:
#line 2277 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6654 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 298:
#line 2293 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6674 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 299:
#line 2309 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6687 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 300:
#line 2318 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6695 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 301:
#line 2322 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 6709 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 302:
#line 2332 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6717 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 303:
#line 2339 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 6729 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 304:
#line 2350 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6737 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 305:
#line 2354 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.decl) != NULL);
}
#line 6749 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 306:
#line 2362 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6757 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 307:
#line 2366 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6765 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 308:
#line 2370 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
#line 6773 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 309:
#line 2374 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
#line 6781 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 310:
#line 2378 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 6801 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 311:
#line 2394 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 6821 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 312:
#line 2410 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));

  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 6843 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 313:
#line 2428 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.decl) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6856 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 314:
#line 2437 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6864 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 315:
#line 2441 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.decl) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.decl) = enum_type->get_underlying_type();
  }
}
#line 6878 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 316:
#line 2451 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6886 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 317:
#line 2458 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6894 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 318:
#line 2462 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != NULL);
}
#line 6906 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 319:
#line 2470 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6914 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 320:
#line 2474 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6934 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 321:
#line 2490 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6954 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 322:
#line 2506 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == (CPPType *)NULL) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6967 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 323:
#line 2515 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == NULL) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 6981 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 324:
#line 2525 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6989 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 325:
#line 2532 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.decl) = (yyvsp[0].u.decl);
}
#line 6997 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 326:
#line 2536 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  yyerror(string("unknown type '") + (yyvsp[0].u.identifier)->get_fully_scoped_name() + "'", (yylsp[0]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 7007 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 327:
#line 2544 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7015 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 328:
#line 2548 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7024 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 329:
#line 2553 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7032 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 330:
#line 2557 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7041 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 335:
#line 2572 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), NULL, current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7059 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 336:
#line 2586 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7070 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 337:
#line 2596 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7094 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 338:
#line 2616 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7105 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 340:
#line 2627 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->_final = true;
}
#line 7113 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 345:
#line 2644 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_unknown, false);
}
#line 7121 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 346:
#line 2648 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
#line 7129 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 347:
#line 2652 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
#line 7137 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 348:
#line 2656 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
#line 7145 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 349:
#line 2660 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7153 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 350:
#line 2664 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7161 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 351:
#line 2668 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7169 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 352:
#line 2672 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7177 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 353:
#line 2676 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7185 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 354:
#line 2680 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7193 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 355:
#line 2687 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
#line 7202 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 356:
#line 2695 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType((yyvsp[-2].u.extension_enum), NULL, (yyvsp[0].u.type), current_scope, NULL, (yylsp[-2]).file);
}
#line 7210 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 357:
#line 2699 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_enum = new CPPEnumType((yyvsp[0].u.extension_enum), NULL, current_scope, NULL, (yylsp[0]).file);
}
#line 7218 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 358:
#line 2703 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[-2].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), (yyvsp[0].u.type), current_scope, new_scope, (yylsp[-3]).file);
}
#line 7227 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 359:
#line 2708 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[0].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, new_scope, (yylsp[-1]).file);
}
#line 7236 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 360:
#line 2716 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7244 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 361:
#line 2720 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
#line 7252 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 363:
#line 2728 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-1].u.identifier)->get_simple_name(), NULL, current_lexer, (yylsp[-1]));
}
#line 7261 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 364:
#line 2733 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-3].u.identifier)->get_simple_name(), (yyvsp[-1].u.expr), current_lexer, (yylsp[-3]));
}
#line 7270 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 366:
#line 2741 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[0].u.identifier)->get_simple_name(), NULL, current_lexer, (yylsp[0]));
}
#line 7279 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 367:
#line 2746 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), (yyvsp[0].u.expr), current_lexer, (yylsp[-2]));
}
#line 7288 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 368:
#line 2754 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
#line 7296 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 369:
#line 2758 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_class;
}
#line 7304 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 370:
#line 2762 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_struct;
}
#line 7312 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 371:
#line 2769 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
#line 7320 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 372:
#line 2773 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
#line 7328 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 373:
#line 2777 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
#line 7336 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 374:
#line 2784 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7358 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 375:
#line 2802 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 7366 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 376:
#line 2806 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7389 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 377:
#line 2825 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  pop_scope();
}
#line 7397 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 380:
#line 2834 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7407 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 381:
#line 2840 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[-1].u.type), (yyvsp[-3].u.identifier), current_scope);
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-4]));
}
#line 7418 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 382:
#line 2847 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), true, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7428 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 386:
#line 2862 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
#line 7436 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 387:
#line 2866 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
#line 7444 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 388:
#line 2870 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
#line 7452 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 389:
#line 2874 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
#line 7460 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 390:
#line 2878 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
#line 7468 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 391:
#line 2882 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
#line 7477 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 392:
#line 2887 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
#line 7486 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 393:
#line 2892 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
#line 7495 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 394:
#line 2897 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
#line 7504 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 395:
#line 2902 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
#line 7512 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 396:
#line 2906 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
#line 7521 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 397:
#line 2911 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
#line 7534 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 398:
#line 2920 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
#line 7543 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 399:
#line 2925 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
#line 7552 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 400:
#line 2933 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
#line 7560 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 401:
#line 2937 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
#line 7568 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 402:
#line 2941 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
#line 7577 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 403:
#line 2949 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
#line 7585 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 404:
#line 2958 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_lexer->_resolve_identifiers = false;
}
#line 7593 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 405:
#line 2962 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  current_lexer->_resolve_identifiers = true;
}
#line 7601 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 513:
#line 3006 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
}
#line 7608 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 537:
#line 3015 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 7616 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 538:
#line 3019 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7624 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 539:
#line 3026 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
#line 7632 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 540:
#line 3030 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7640 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 541:
#line 3037 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7648 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 542:
#line 3041 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7656 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 543:
#line 3048 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7664 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 544:
#line 3052 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 7672 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 545:
#line 3056 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 7680 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 546:
#line 3060 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 7688 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 547:
#line 3064 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 7696 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 548:
#line 3068 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 7704 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 549:
#line 3072 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 7712 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 550:
#line 3076 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 7728 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 551:
#line 3088 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 7736 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 552:
#line 3092 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 7744 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 553:
#line 3096 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 7752 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 554:
#line 3100 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 7760 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 555:
#line 3104 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 7768 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 556:
#line 3108 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 7776 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 557:
#line 3112 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 7784 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 558:
#line 3116 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 7792 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 559:
#line 3120 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7800 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 560:
#line 3124 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7808 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 561:
#line 3128 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7816 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 562:
#line 3132 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7824 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 563:
#line 3136 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7832 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 564:
#line 3140 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7840 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 565:
#line 3144 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7848 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 566:
#line 3148 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7856 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 567:
#line 3152 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7864 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 568:
#line 3156 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7872 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 569:
#line 3160 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7880 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 570:
#line 3164 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7888 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 571:
#line 3168 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7896 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 572:
#line 3172 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7904 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 573:
#line 3176 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7912 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 574:
#line 3180 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7920 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 575:
#line 3184 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7928 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 576:
#line 3188 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 7936 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 577:
#line 3192 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 7944 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 578:
#line 3196 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 7952 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 579:
#line 3200 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7960 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 580:
#line 3204 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7968 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 581:
#line 3208 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 7976 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 582:
#line 3216 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7984 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 583:
#line 3220 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 7992 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 584:
#line 3224 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8000 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 585:
#line 3228 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8008 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 586:
#line 3232 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8016 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 587:
#line 3236 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8024 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 588:
#line 3240 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8038 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 589:
#line 3250 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // Aggregate initialization.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == NULL) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::aggregate_init_op(type, (yyvsp[-1].u.expr)));
}
#line 8052 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 590:
#line 3260 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8062 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 591:
#line 3266 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8072 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 592:
#line 3272 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8082 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 593:
#line 3278 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8092 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 594:
#line 3284 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8102 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 595:
#line 3290 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8112 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 596:
#line 3296 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8123 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 597:
#line 3303 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8134 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 598:
#line 3310 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8145 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 599:
#line 3317 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8156 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 600:
#line 3324 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8166 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 601:
#line 3330 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8176 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 602:
#line 3336 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8184 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 603:
#line 3340 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 8200 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 604:
#line 3352 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8208 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 605:
#line 3356 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8216 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 606:
#line 3360 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8224 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 607:
#line 3364 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8232 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 608:
#line 3368 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 8247 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 609:
#line 3379 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 8262 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 610:
#line 3390 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8270 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 611:
#line 3394 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8278 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 612:
#line 3398 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8286 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 613:
#line 3402 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8294 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 614:
#line 3406 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8302 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 615:
#line 3410 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8310 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 616:
#line 3414 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8318 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 617:
#line 3418 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8326 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 618:
#line 3422 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8334 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 619:
#line 3426 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8342 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 620:
#line 3430 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8350 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 621:
#line 3434 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8358 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 622:
#line 3438 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8366 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 623:
#line 3442 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8374 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 624:
#line 3446 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8382 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 625:
#line 3450 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8390 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 626:
#line 3454 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8398 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 627:
#line 3458 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8406 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 628:
#line 3462 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8414 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 629:
#line 3466 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8422 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 630:
#line 3470 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8430 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 631:
#line 3474 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8438 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 632:
#line 3478 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8446 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 633:
#line 3482 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8454 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 634:
#line 3486 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8462 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 635:
#line 3490 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8470 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 636:
#line 3494 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8478 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 637:
#line 3498 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8486 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 638:
#line 3502 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8494 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 639:
#line 3506 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8502 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 640:
#line 3510 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8510 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 641:
#line 3517 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8518 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 642:
#line 3521 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 8526 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 643:
#line 3525 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 8534 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 644:
#line 3529 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8542 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 645:
#line 3533 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 8550 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 646:
#line 3537 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8558 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 647:
#line 3541 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8566 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 648:
#line 3545 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 8574 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 649:
#line 3549 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8584 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 650:
#line 3555 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8594 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 651:
#line 3561 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 8602 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 652:
#line 3565 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-6].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-6].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-6].u.closure_type)));
}
#line 8612 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 653:
#line 3571 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyvsp[-9].u.closure_type)->_parameters = (yyvsp[-6].u.param_list);
  (yyvsp[-9].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-9].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-9].u.closure_type)));
}
#line 8623 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 654:
#line 3578 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_HAS_VIRTUAL_DESTRUCTOR, (yyvsp[-1].u.type)));
}
#line 8631 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 655:
#line 3582 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ABSTRACT, (yyvsp[-1].u.type)));
}
#line 8639 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 656:
#line 3586 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8647 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 657:
#line 3590 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-1].u.type)));
}
#line 8655 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 658:
#line 3594 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8663 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 659:
#line 3598 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8671 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 660:
#line 3602 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONVERTIBLE_TO, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8679 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 661:
#line 3606 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_DESTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8687 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 662:
#line 3610 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_EMPTY, (yyvsp[-1].u.type)));
}
#line 8695 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 663:
#line 3614 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ENUM, (yyvsp[-1].u.type)));
}
#line 8703 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 664:
#line 3618 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FINAL, (yyvsp[-1].u.type)));
}
#line 8711 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 665:
#line 3622 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FUNDAMENTAL, (yyvsp[-1].u.type)));
}
#line 8719 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 666:
#line 3626 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POD, (yyvsp[-1].u.type)));
}
#line 8727 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 667:
#line 3630 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POLYMORPHIC, (yyvsp[-1].u.type)));
}
#line 8735 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 668:
#line 3634 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_STANDARD_LAYOUT, (yyvsp[-1].u.type)));
}
#line 8743 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 669:
#line 3638 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIAL, (yyvsp[-1].u.type)));
}
#line 8751 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 670:
#line 3642 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_UNION, (yyvsp[-1].u.type)));
}
#line 8759 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 671:
#line 3656 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8767 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 672:
#line 3660 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8775 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 673:
#line 3664 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8783 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 674:
#line 3668 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8791 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 675:
#line 3672 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8799 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 676:
#line 3676 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8807 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 677:
#line 3680 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8815 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 678:
#line 3684 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPDeclaration *arg = (yyvsp[-1].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (arg == (CPPDeclaration *)NULL) {
    yyerror("undefined sizeof argument: " + (yyvsp[-1].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));
  } else if (arg->get_subtype() == CPPDeclaration::ST_instance) {
    CPPInstance *inst = arg->as_instance();
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(inst->_type));
  } else {
    (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func(arg->as_type()));
  }
}
#line 8831 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 679:
#line 3696 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8839 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 680:
#line 3700 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8847 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 681:
#line 3704 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8855 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 682:
#line 3708 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8863 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 683:
#line 3712 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 8878 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 684:
#line 3723 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 8893 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 685:
#line 3734 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8901 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 686:
#line 3738 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8909 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 687:
#line 3742 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8917 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 688:
#line 3746 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8925 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 689:
#line 3750 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8933 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 690:
#line 3754 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8941 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 691:
#line 3758 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8949 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 692:
#line 3762 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8957 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 693:
#line 3766 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8965 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 694:
#line 3770 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8973 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 695:
#line 3774 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8981 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 696:
#line 3778 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8989 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 697:
#line 3782 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8997 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 698:
#line 3786 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9005 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 699:
#line 3790 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9013 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 700:
#line 3794 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9021 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 701:
#line 3798 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9029 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 702:
#line 3802 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9037 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 703:
#line 3806 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9045 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 704:
#line 3810 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9053 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 705:
#line 3814 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9061 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 706:
#line 3818 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9069 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 707:
#line 3822 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9077 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 708:
#line 3826 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9085 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 709:
#line 3830 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9093 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 710:
#line 3834 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9101 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 711:
#line 3838 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 9109 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 712:
#line 3842 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9117 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 713:
#line 3846 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9125 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 714:
#line 3850 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 9133 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 715:
#line 3857 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9141 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 716:
#line 3861 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(true);
}
#line 9149 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 717:
#line 3865 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(false);
}
#line 9157 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 718:
#line 3869 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9165 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 719:
#line 3873 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 9173 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 720:
#line 3877 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9181 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 721:
#line 3881 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9189 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 722:
#line 3885 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 9197 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 723:
#line 3889 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9207 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 724:
#line 3895 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9217 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 725:
#line 3901 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 9225 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 726:
#line 3909 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType();
}
#line 9233 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 727:
#line 3913 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_value);
}
#line 9241 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 728:
#line 3917 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_reference);
}
#line 9249 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 729:
#line 3921 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = new CPPClosureType();
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9260 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 730:
#line 3928 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.closure_type) = (yyvsp[-3].u.closure_type);
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9271 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 731:
#line 3938 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9281 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 732:
#line 3944 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[-1].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9291 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 733:
#line 3950 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  if ((yyval.u.capture)->_name == "this") {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
  } else {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  }
}
#line 9305 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 734:
#line 3960 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  if ((yyval.u.capture)->_name != "this") {
    yywarning("only capture name 'this' may be preceded by an asterisk", (yylsp[0]));
  }
}
#line 9318 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 735:
#line 3972 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 9330 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 736:
#line 3980 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 9338 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 737:
#line 3984 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[-1].u.identifier));
  ctp->_packed = true;
  (yyval.u.type) = CPPType::new_type(ctp);
}
#line 9348 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 738:
#line 4014 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9356 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 739:
#line 4018 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9364 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 740:
#line 4022 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9372 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 741:
#line 4026 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[0]));
}
#line 9380 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 742:
#line 4030 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9388 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 743:
#line 4034 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // This is not a keyword in Python, so it is useful to be able to use this
  // in MAKE_PROPERTY definitions, etc.
  (yyval.u.identifier) = new CPPIdentifier("signed", (yylsp[0]));
}
#line 9398 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 744:
#line 4040 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("float", (yylsp[0]));
}
#line 9406 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 745:
#line 4044 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("public", (yylsp[0]));
}
#line 9414 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 746:
#line 4048 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("private", (yylsp[0]));
}
#line 9422 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 747:
#line 4052 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("static", (yylsp[0]));
}
#line 9430 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 748:
#line 4056 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("default", (yylsp[0]));
}
#line 9438 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 749:
#line 4067 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9446 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 750:
#line 4071 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9454 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 751:
#line 4075 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9462 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 752:
#line 4079 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9470 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 753:
#line 4087 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 9478 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 754:
#line 4091 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9486 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 755:
#line 4095 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  (yyval.u.expr)->_str += (yyvsp[0].str);
}
#line 9496 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;

  case 756:
#line 4101 "dtool/src/cppparser/cppBison.yxx" /* yacc.c:1646  */
    {
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  if ((yyvsp[0].u.expr)->_type != CPPExpression::T_string && (yyvsp[0].u.expr)->_type != (yyvsp[-1].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[0].u.expr)->_str;
}
#line 9509 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
    break;


#line 9513 "built/tmp/cppBison.yxx.c" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
