#line 2 "built/tmp/dcLexer.lxx.cxx"

#line 4 "built/tmp/dcLexer.lxx.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer dcyy_create_buffer
#define yy_delete_buffer dcyy_delete_buffer
#define yy_flex_debug dcyy_flex_debug
#define yy_init_buffer dcyy_init_buffer
#define yy_flush_buffer dcyy_flush_buffer
#define yy_load_buffer_state dcyy_load_buffer_state
#define yy_switch_to_buffer dcyy_switch_to_buffer
#define yyin dcyyin
#define yyleng dcyyleng
#define yylex dcyylex
#define yylineno dcyylineno
#define yyout dcyyout
#define yyrestart dcyyrestart
#define yytext dcyytext
#define yywrap dcyywrap
#define yyalloc dcyyalloc
#define yyrealloc dcyyrealloc
#define yyfree dcyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

#if defined(__FreeBSD__)
#ifndef __STDC_LIMIT_MACROS
#define	__STDC_LIMIT_MACROS
#endif
#include <sys/cdefs.h>
#include <stdint.h>
#else
#define	__dead2
#endif

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__FreeBSD__) || \
    (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L)

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE dcyyrestart(dcyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t dcyyleng;

extern FILE *dcyyin, *dcyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up dcyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up dcyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via dcyyrestart()), so that the user can continue scanning by
	 * just pointing dcyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
#define yy_current_buffer YY_CURRENT_BUFFER

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when dcyytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t dcyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow dcyywrap()'s to do buffer switches
 * instead of setting up a fresh dcyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void dcyyrestart (FILE *input_file  );
void dcyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE dcyy_create_buffer (FILE *file,int size  );
void dcyy_delete_buffer (YY_BUFFER_STATE b  );
void dcyy_flush_buffer (YY_BUFFER_STATE b  );
void dcyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void dcyypop_buffer_state (void );

static void dcyyensure_buffer_stack (void );
static void dcyy_load_buffer_state (void );
static void dcyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER dcyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE dcyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE dcyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE dcyy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *dcyyalloc (yy_size_t  );
void *dcyyrealloc (void *,yy_size_t  );
void dcyyfree (void *  );

#define yy_new_buffer dcyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        dcyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            dcyy_create_buffer(dcyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        dcyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            dcyy_create_buffer(dcyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

typedef unsigned char YY_CHAR;

FILE *dcyyin = (FILE *) 0, *dcyyout = (FILE *) 0;

typedef int yy_state_type;

extern int dcyylineno;

int dcyylineno = 1;

extern char *dcyytext;
#define yytext_ptr dcyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  ) __dead2;

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up dcyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	dcyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 44
#define YY_END_OF_BUFFER 45
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[165] =
    {   0,
        0,    0,   45,   43,    2,    1,   39,   40,   43,   43,
       43,   35,   35,   41,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,    1,    0,   36,   38,    4,    3,
       38,   35,   37,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,    0,
        3,   37,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,    0,   38,   25,
       42,   12,   34,   42,   42,   42,    7,   42,   42,   42,
       42,   15,   42,   42,   42,   42,   42,   42,   42,   14,
       42,   42,   42,   42,   16,   17,   18,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   19,   26,    5,   42,
       42,    8,   42,   42,   42,   42,   24,    6,   11,   42,
       20,   21,   22,   42,   13,   23,   42,   42,   42,    9,
       10,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   27,   42,   42,   42,   42,   28,
       29,   42,   42,   42,   30,   31,   32,   42,   42,   42,
       42,   42,   33,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    5,    1,
        1,    6,    7,    1,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   15,   17,   15,    1,    1,   18,
        1,    1,    1,    1,   19,   19,   19,   19,   20,   19,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
        1,    1,    1,    1,   21,    1,   22,   23,   24,   25,

       26,   27,   28,   29,   30,   21,   31,   32,   33,   34,
       35,   36,   21,   37,   38,   39,   40,   21,   41,   42,
       43,   21,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    4,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    6,    6,
        7,    6,    6,    6,    6,    6,    6,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    8,    7
    } ;

static yyconst flex_int16_t yy_base[173] =
    {   0,
        0,    0,  209,  210,  210,    0,  210,  210,  200,    0,
       38,   37,   38,  210,    0,   16,   27,   26,   22,   24,
      181,   21,  163,  175,    0,    0,  196,   35,  210,    0,
        0,    0,    0,    0,  168,  176,  163,  178,  167,  171,
      162,  161,  159,  155,  150,  155,  161,  154,  155,  181,
        0,    0,  164,  164,  159,  147,  161,  160,  159,  147,
      144,   52,  137,   34,  138,  150,  136,  167,  166,  159,
      140,    0,    0,  132,  129,  129,    0,  130,  150,  153,
      150,  141,  127,  127,  136,  135,  133,   59,  145,    0,
      118,  123,  138,  114,  130,  129,    0,  113,  112,  120,

      108,  117,  119,  128,  131,  128,  119,    0,    0,  101,
      125,    0,  101,  100,   99,  110,    0,    0,    0,  107,
      111,   44,    0,   95,    0,    0,   94,   93,  107,    0,
        0,   91,   90,   96,   88,  102,  101,   79,   84,   83,
       85,   96,   74,   72,    0,   83,   76,   58,   43,    0,
        0,   40,   39,   64,    0,    0,    0,   56,   40,   36,
       49,   24,    0,  210,   84,   89,   46,   91,   95,  103,
      107,  111
    } ;

static yyconst flex_int16_t yy_def[173] =
    {   0,
      164,    1,  164,  164,  164,  165,  164,  164,  166,  167,
      164,  168,  168,  164,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  165,  167,  166,  167,  164,  170,
       28,   13,  171,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  172,
      170,  171,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  172,  172,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,    0,  164,  164,  164,  164,  164,  164,
      164,  164
    } ;

static yyconst flex_int16_t yy_nxt[254] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   15,
       15,   15,   16,   17,   18,   15,   19,   15,   15,   20,
       21,   15,   15,   15,   15,   15,   15,   22,   23,   24,
       15,   15,   15,   29,   31,   31,   30,   35,   37,   39,
       28,   40,   36,   41,   50,   38,   43,   44,   42,   46,
       50,   47,   79,   84,   80,  133,  163,   81,   82,  104,
      162,  105,  161,   85,  106,  107,  160,  159,   33,  164,
      158,  157,  156,  134,   25,  155,   25,   25,   25,   25,
       25,   25,   27,   27,   32,   32,  154,  153,   32,   34,

       34,   34,   34,   51,  152,   51,   51,   51,   51,   51,
       51,   52,   52,   69,  151,   69,  150,  149,  148,  147,
      146,  145,  144,  143,  142,  141,  140,  139,  138,  137,
      136,  135,  132,  131,  130,  129,  128,  127,  126,  125,
      124,  123,  122,  121,  120,  119,  118,  117,  116,  115,
      114,  113,  112,  111,  110,  109,  108,  103,  102,  101,
      100,   99,   98,   97,   96,   95,   94,   93,   92,   91,
       90,   89,  164,  164,   88,   87,   86,   83,   78,   77,
       76,   75,   74,   73,   72,   71,   70,   68,   67,   66,
       65,   64,   63,   62,   61,   60,   59,   58,   57,   56,

       55,   54,   53,   31,   49,   48,   45,   26,  164,    3,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164
    } ;

static yyconst flex_int16_t yy_chk[254] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   11,   12,   13,   11,   16,   17,   18,
      167,   18,   16,   19,   28,   17,   20,   20,   19,   22,
       28,   22,   62,   64,   62,  122,  162,   62,   62,   88,
      161,   88,  160,   64,   88,   88,  159,  158,   12,   13,
      154,  153,  152,  122,  165,  149,  165,  165,  165,  165,
      165,  165,  166,  166,  168,  168,  148,  147,  168,  169,

      169,  169,  169,  170,  146,  170,  170,  170,  170,  170,
      170,  171,  171,  172,  144,  172,  143,  142,  141,  140,
      139,  138,  137,  136,  135,  134,  133,  132,  129,  128,
      127,  124,  121,  120,  116,  115,  114,  113,  111,  110,
      107,  106,  105,  104,  103,  102,  101,  100,   99,   98,
       96,   95,   94,   93,   92,   91,   89,   87,   86,   85,
       84,   83,   82,   81,   80,   79,   78,   76,   75,   74,
       71,   70,   69,   68,   67,   66,   65,   63,   61,   60,
       59,   58,   57,   56,   55,   54,   53,   50,   49,   48,
       47,   46,   45,   44,   43,   42,   41,   40,   39,   38,

       37,   36,   35,   27,   24,   23,   21,    9,    3,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int dcyy_flex_debug;
int dcyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *dcyytext;
#line 1 "direct/src/dcparser/dcLexer.lxx"
/*
// Filename: dcLexer.lxx
// Created by:  drose (05Oct00)
//
////////////////////////////////////////////////////////////////////
*/
#line 9 "direct/src/dcparser/dcLexer.lxx"
#include "dcLexerDefs.h"
#include "dcParserDefs.h"
#include "dcParser.h"
#include "dcFile.h"
#include "dcindent.h"

#ifdef WITHIN_PANDA
#include "pstrtod.h"
#endif


static int yyinput(void);        // declared by flex.
extern "C" int dcyywrap();

////////////////////////////////////////////////////////////////////
// Static variables
////////////////////////////////////////////////////////////////////

// We'll increment line_number and col_number as we parse the file, so
// that we can report the position of an error.
static int line_number = 0;
static int col_number = 0;

// current_line holds as much of the current line as will fit.  Its
// only purpose is for printing it out to report an error to the user.
static const int max_error_width = 1024;
static char current_line[max_error_width + 1];

static int error_count = 0;
static int warning_count = 0;

// This is the pointer to the current input stream.
static std::istream *input_p = nullptr;

// This is the name of the dc file we're parsing.  We keep it so we
// can print it out for error messages.
static std::string dc_filename;

// This is the initial token state returned by the lexer.  It allows
// the yacc grammar to start from initial points.
static int initial_token;


////////////////////////////////////////////////////////////////////
// Defining the interface to the lexer.
////////////////////////////////////////////////////////////////////

void
dc_init_lexer(std::istream &in, const std::string &filename) {
  input_p = &in;
  dc_filename = filename;
  line_number = 0;
  col_number = 0;
  error_count = 0;
  warning_count = 0;
  initial_token = START_DC;
}

void
dc_start_parameter_value() {
  /* Set the initial state to begin parsing a parameter value, instead
     of at the beginning of the dc file. */
  initial_token = START_PARAMETER_VALUE;
}

void
dc_start_parameter_description() {
  /* Set the initial state to begin parsing a parameter description, instead
     of at the beginning of the dc file. */
  initial_token = START_PARAMETER_DESCRIPTION;
}

int
dc_error_count() {
  return error_count;
}

int
dc_warning_count() {
  return warning_count;
}


////////////////////////////////////////////////////////////////////
// Internal support functions.
////////////////////////////////////////////////////////////////////

int
dcyywrap(void) {
  return 1;
}

void
dcyyerror(const std::string &msg) {
  using std::cerr;

  cerr << "\nError";
  if (!dc_filename.empty()) {
    cerr << " in " << dc_filename;
  }
  cerr
    << " at line " << line_number << ", column " << col_number << ":\n"
    << current_line << "\n";
  indent(cerr, col_number-1)
    << "^\n" << msg << "\n\n";

  error_count++;
}

void
dcyywarning(const std::string &msg) {
  using std::cerr;

  cerr << "\nWarning";
  if (!dc_filename.empty()) {
    cerr << " in " << dc_filename;
  }
  cerr
    << " at line " << line_number << ", column " << col_number << ":\n"
    << current_line << "\n";
  indent(cerr, col_number-1)
    << "^\n" << msg << "\n\n";

  warning_count++;
}

// Now define a function to take input from an istream instead of a
// stdio FILE pointer.  This is flex-specific.
static void
input_chars(char *buffer, int &result, int max_size) {
  nassertv(input_p != nullptr);
  if (*input_p) {
    input_p->read(buffer, max_size);
    result = input_p->gcount();
    if (result >= 0 && result < max_size) {
      // Truncate at the end of the read.
      buffer[result] = '\0';
    }

    if (line_number == 0) {
      // This is a special case.  If we are reading the very first bit
      // from the stream, copy it into the current_line array.  This
      // is because the \n.* rule below, which fills current_line
      // normally, doesn't catch the first line.
      strncpy(current_line, dcyytext, max_error_width);
      current_line[max_error_width] = '\0';
      line_number++;
      col_number = 0;

      // Truncate it at the newline.
      char *end = strchr(current_line, '\n');
      if (end != nullptr) {
        *end = '\0';
      }
    }

  } else {
    // End of file or I/O error.
    result = 0;
  }
}
#undef YY_INPUT

// Define this macro carefully, since different flex versions call it
// with a different type for result.
#define YY_INPUT(buffer, result, max_size) { \
  int int_result = 0; \
  input_chars((buffer), int_result, (max_size)); \
  (result) = int_result; \
}

// read_char reads and returns a single character, incrementing the
// supplied line and column numbers as appropriate.  A convenience
// function for the scanning functions below.
static int
read_char(int &line, int &col) {
  int c = yyinput();
  if (c == '\n') {
    line++;
    col = 0;
  } else {
    col++;
  }
  return c;
}

// scan_quoted_string reads a string delimited by quotation marks and
// returns it.
static std::string
scan_quoted_string(char quote_mark) {
  std::string result;

  // We don't touch the current line number and column number during
  // scanning, so that if we detect an error while scanning the string
  // (e.g. an unterminated string), we'll report the error as
  // occurring at the start of the string, not at the end--somewhat
  // more convenient for the user.

  // Instead of adjusting the global line_number and col_number
  // variables, we'll operate on our own local variables for the
  // interim.
  int line = line_number;
  int col = col_number;

  int c;
  c = read_char(line, col);
  while (c != quote_mark && c != EOF) {
    // A newline is not allowed within a string unless it is escaped.
    if (c == '\n') {
      c = EOF;
      break;

    } else if (c == '\\') {
      // Backslash escapes the following character.  We also respect
      // some C conventions.
      c = read_char(line, col);
      switch (c) {
      case 'a':
        result += '\a';
        c = read_char(line, col);
        break;

      case 'n':
        result += '\n';
        c = read_char(line, col);
        break;

      case 'r':
        result += '\r';
        c = read_char(line, col);
        break;

      case 't':
        result += '\t';
        c = read_char(line, col);
        break;

      case 'x':
        {
          int hex = 0;
          c = read_char(line, col);
          for (int i = 0; i < 2 && isxdigit(c); i++) {
            hex = hex * 16 + (isdigit(c) ? c - '0' : tolower(c) - 'a' + 10);
            c = read_char(line, col);
          }

          result += hex;
        }
        break;

      case '0':
        {
          int oct = 0;
          c = read_char(line, col);
          for (int i = 0; i < 3 && (c >= '0' && c < '7'); i++) {
            oct = oct * 8 + (c - '0');
            c = read_char(line, col);
          }

          result += oct;
        }
        break;

      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          int dec = 0;
          c = read_char(line, col);
          for (int i = 0; i < 3 && isdigit(c); i++) {
            dec = dec * 10 + (c - '0');
            c = read_char(line, col);
          }

          result += dec;
        }
        break;

      case EOF:
        break;

      default:
        result += c;
        c = read_char(line, col);
      }

    } else {
      result += c;
      c = read_char(line, col);
    }
  }

  if (c == EOF) {
    dcyyerror("This quotation mark is unterminated.");
  }

  line_number = line;
  col_number = col;

  return result;
}

// scan_hex_string reads a string of hexadecimal digits delimited by
// angle brackets and returns the representative string.
static vector_uchar
scan_hex_string() {
  vector_uchar result;

  // We don't touch the current line number and column number during
  // scanning, so that if we detect an error while scanning the string
  // (e.g. an unterminated string), we'll report the error as
  // occurring at the start of the string, not at the end--somewhat
  // more convenient for the user.

  // Instead of adjusting the global line_number and col_number
  // variables, we'll operate on our own local variables for the
  // interim.
  int line = line_number;
  int col = col_number;

  bool odd = false;
  int last = 0;
  int c;
  c = read_char(line, col);
  while (c != '>' && c != EOF) {
    int value;
    if (c >= '0' && c <= '9') {
      value = c - '0';
    } else if (c >= 'a' && c <= 'f') {
      value = c - 'a' + 10;
    } else if (c >= 'A' && c <= 'F') {
      value = c - 'A' + 10;
    } else {
      line_number = line;
      col_number = col;
      dcyyerror("Invalid hex digit.");
      return vector_uchar();
    }

    odd = !odd;
    if (odd) {
      last = value;
    } else {
      result.push_back((unsigned char)((last << 4) | value));
    }
    c = read_char(line, col);
  }

  if (c == EOF) {
    dcyyerror("This hex string is unterminated.");
    return vector_uchar();
  } else if (odd) {
    dcyyerror("Odd number of hex digits.");
    return vector_uchar();
  }

  line_number = line;
  col_number = col;

  return result;
}

// eat_c_comment scans past all characters up until the first */
// encountered.
static void
eat_c_comment() {
  // As above, we'll operate on our own local copies of line_number
  // and col_number within this function.

  int line = line_number;
  int col = col_number;

  int c, last_c;

  last_c = '\0';
  c = read_char(line, col);
  while (c != EOF && !(last_c == '*' && c == '/')) {
    if (last_c == '/' && c == '*') {
      dcyywarning("This comment contains a nested /* symbol--possibly unclosed?");
    }
    last_c = c;
    c = read_char(line, col);
  }

  if (c == EOF) {
    dcyyerror("This comment marker is unclosed.");
  }

  line_number = line;
  col_number = col;
}



// accept() is called below as each piece is pulled off and
// accepted by the lexer; it increments the current column number.
inline void accept() {
  col_number += dcyyleng;
}

#line 1001 "built/tmp/dcLexer.lxx.cxx"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int dcyylex_destroy (void );

int dcyyget_debug (void );

void dcyyset_debug (int debug_flag  );

YY_EXTRA_TYPE dcyyget_extra (void );

void dcyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *dcyyget_in (void );

void dcyyset_in  (FILE * in_str  );

FILE *dcyyget_out (void );

void dcyyset_out  (FILE * out_str  );

yy_size_t dcyyget_leng (void );

char *dcyyget_text (void );

int dcyyget_lineno (void );

void dcyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int dcyywrap (void );
#else
extern int dcyywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    static void yyunput (int c,char *buf_ptr  );
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( dcyytext, dcyyleng, 1, dcyyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( dcyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( dcyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, dcyyin))==0 && ferror(dcyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(dcyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int dcyylex (void);

#define YY_DECL int dcyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after dcyytext and dcyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;

#line 419 "direct/src/dcparser/dcLexer.lxx"



  if (initial_token != 0) {
    int t = initial_token;
    initial_token = 0;
    return t;
  }


#line 1196 "built/tmp/dcLexer.lxx.cxx"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! dcyyin )
			dcyyin = stdin;

		if ( ! dcyyout )
			dcyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			dcyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				dcyy_create_buffer(dcyyin,YY_BUF_SIZE );
		}

		dcyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of dcyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 165 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 210 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 429 "direct/src/dcparser/dcLexer.lxx"
{
  // New line.  Save a copy of the line so we can print it out for the
  // benefit of the user in case we get an error.

  strncpy(current_line, dcyytext+1, max_error_width);
  current_line[max_error_width] = '\0';
  line_number++;
  col_number=0;

  // Return the whole line to the lexer, except the newline character,
  // which we eat.
  yyless(1);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 443 "direct/src/dcparser/dcLexer.lxx"
{
  // Eat whitespace.
  accept();
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 448 "direct/src/dcparser/dcLexer.lxx"
{
  // Eat C++-style comments.
  accept();
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 453 "direct/src/dcparser/dcLexer.lxx"
{
  // Eat C-style comments.
  accept();
  eat_c_comment();
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 460 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_DCLASS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 465 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_STRUCT;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 470 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_FROM;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 475 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_IMPORT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 480 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_KEYWORD;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 485 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_TYPEDEF;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 490 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_SWITCH;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 495 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_CASE;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 500 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_DEFAULT;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 505 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_BREAK;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 510 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_INT8;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 515 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_INT16;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 520 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_INT32;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 525 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_INT64;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 530 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_UINT8;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 535 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_UINT16;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 540 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_UINT32;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 545 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_UINT64;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 550 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_FLOAT64;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 555 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_STRING;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 560 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_BLOB;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 565 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_BLOB32;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 570 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_INT8ARRAY;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 575 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_INT16ARRAY;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 580 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_INT32ARRAY;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 585 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_UINT8ARRAY;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 590 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_UINT16ARRAY;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 595 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_UINT32ARRAY;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 600 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_UINT32UINT8ARRAY;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 605 "direct/src/dcparser/dcLexer.lxx"
{
  accept();
  return KW_CHAR;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 610 "direct/src/dcparser/dcLexer.lxx"
{
  // An unsigned integer number.
  accept();

  // atoll isn't fully portable, so we'll decode the integer by hand.
  dcyylval.str = dcyytext;
  dcyylval.u.uint64 = 0;
  const char *p = dcyytext;
  while (*p != '\0') {
    uint64_t next_value = dcyylval.u.uint64 * 10;
    if (next_value < dcyylval.u.uint64) {
      dcyyerror("Number out of range.");
      dcyylval.u.uint64 = 1;
      return UNSIGNED_INTEGER;
    }

    dcyylval.u.uint64 = next_value + (*p - '0');
    ++p;
  }

  return UNSIGNED_INTEGER;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 633 "direct/src/dcparser/dcLexer.lxx"
{
  // A signed integer number.
  accept();

  // atoll isn't fully portable, so we'll decode the integer by hand.
  dcyylval.str = dcyytext;

  bool neg = false;
  const char *p = dcyytext;
  if (*p == '-') {
    neg = true;
    ++p;
  } else if (*p == '+') {
    ++p;
  }

  uint64_t value = 0;
  while (*p != '\0') {
    uint64_t next_value = value * 10;
    if (next_value < value) {
      dcyyerror("Number out of range.");
      dcyylval.u.int64 = 1;
      return SIGNED_INTEGER;
    }

    value = next_value + (*p - '0');
    ++p;
  }

  if (neg) {
    dcyylval.u.int64 = -(int64_t)value;
    if (dcyylval.u.int64 > 0) {
      dcyyerror("Number out of range.");
      dcyylval.u.int64 = 1;
    }
  } else {
    dcyylval.u.int64 = (int64_t)value;
    if (dcyylval.u.int64 < 0) {
      dcyyerror("Number out of range.");
      dcyylval.u.int64 = 1;
    }
  }

  return SIGNED_INTEGER;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 679 "direct/src/dcparser/dcLexer.lxx"
{
  // A hexadecimal integer number.
  accept();

  // As above, we'll decode the hex string by hand.
  dcyylval.str = dcyytext;
  dcyylval.u.uint64 = 0;
  const char *p = dcyytext + 2;
  while (*p != '\0') {
    uint64_t next_value = dcyylval.u.uint64 * 16;
    if (next_value < dcyylval.u.uint64) {
      dcyyerror("Number out of range.");
      dcyylval.u.uint64 = 1;
      return UNSIGNED_INTEGER;
    }

    if (isalpha(*p)) {
      dcyylval.u.uint64 = next_value + (tolower(*p) - 'a' + 10);
    } else {
      dcyylval.u.uint64 = next_value + (*p - '0');
    }
    ++p;
  }

  return UNSIGNED_INTEGER;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 706 "direct/src/dcparser/dcLexer.lxx"
{
  // A floating-point number.
  accept();
  dcyylval.u.real = patof(dcyytext);
  dcyylval.str = dcyytext;
  return REAL;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 714 "direct/src/dcparser/dcLexer.lxx"
{
  // Quoted string.
  accept();
  dcyylval.str = scan_quoted_string('"');
  return STRING;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 721 "direct/src/dcparser/dcLexer.lxx"
{
  // Single-quoted string.
  accept();
  dcyylval.str = scan_quoted_string('\'');
  return STRING;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 728 "direct/src/dcparser/dcLexer.lxx"
{
  // Long hex string.
  accept();
  dcyylval.bytes = scan_hex_string();
  return HEX_STRING;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 735 "direct/src/dcparser/dcLexer.lxx"
{
  // Identifier or keyword.
  accept();
  dcyylval.str = dcyytext;

  if (dc_file != nullptr) {
    const DCKeyword *keyword = dc_file->get_keyword_by_name(dcyylval.str);
    if (keyword != nullptr) {
      dcyylval.u.keyword = keyword;
      return KEYWORD;
    }
  }
  return IDENTIFIER;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 751 "direct/src/dcparser/dcLexer.lxx"
{
  // Send any other printable character as itself.
  accept();
  return dcyytext[0];
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 757 "direct/src/dcparser/dcLexer.lxx"
ECHO;
	YY_BREAK
#line 1740 "built/tmp/dcLexer.lxx.cxx"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed dcyyin at a new source and called
			 * dcyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = dcyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( dcyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * dcyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of dcyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					dcyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			dcyyrestart(dcyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) dcyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;

	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 165 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 165 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 164);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;

    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up dcyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif	/* ifndef YY_NO_UNPUT */

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;

	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					dcyyrestart(dcyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( dcyywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve dcyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void dcyyrestart  (FILE * input_file )
{

	if ( ! YY_CURRENT_BUFFER ){
        dcyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            dcyy_create_buffer(dcyyin,YY_BUF_SIZE );
	}

	dcyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	dcyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
    void dcyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		dcyypop_buffer_state();
	 *		dcyypush_buffer_state(new_buffer);
     */
	dcyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	dcyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (dcyywrap()) processing, but the only time this flag
	 * is looked at is after dcyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void dcyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	dcyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE dcyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) dcyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in dcyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) dcyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in dcyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	dcyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with dcyy_create_buffer()
 *
 */
    void dcyy_delete_buffer (YY_BUFFER_STATE  b )
{

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		dcyyfree((void *) b->yy_ch_buf  );

	dcyyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a dcyyrestart() or at EOF.
 */
    static void dcyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;

	dcyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then dcyy_init_buffer was _probably_
     * called from dcyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
    void dcyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		dcyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void dcyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	dcyyensure_buffer_stack();

	/* This block is copied from dcyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from dcyy_switch_to_buffer. */
	dcyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void dcyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	dcyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		dcyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void dcyyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;

	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)dcyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in dcyyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)dcyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in dcyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE dcyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) dcyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in dcyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	dcyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to dcyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       dcyy_scan_bytes() instead.
 */
YY_BUFFER_STATE dcyy_scan_string (yyconst char * yystr )
{

	return dcyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to dcyylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE dcyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) dcyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in dcyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = dcyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in dcyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up dcyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		dcyytext[dcyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = dcyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		dcyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int dcyyget_lineno  (void)
{

    return dcyylineno;
}

/** Get the input stream.
 *
 */
FILE *dcyyget_in  (void)
{
        return dcyyin;
}

/** Get the output stream.
 *
 */
FILE *dcyyget_out  (void)
{
        return dcyyout;
}

/** Get the length of the current token.
 *
 */
yy_size_t dcyyget_leng  (void)
{
        return dcyyleng;
}

/** Get the current token.
 *
 */

char *dcyyget_text  (void)
{
        return dcyytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void dcyyset_lineno (int  line_number )
{

    dcyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see dcyy_switch_to_buffer
 */
void dcyyset_in (FILE *  in_str )
{
        dcyyin = in_str ;
}

void dcyyset_out (FILE *  out_str )
{
        dcyyout = out_str ;
}

int dcyyget_debug  (void)
{
        return dcyy_flex_debug;
}

void dcyyset_debug (int  bdebug )
{
        dcyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from dcyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    dcyyin = stdin;
    dcyyout = stdout;
#else
    dcyyin = (FILE *) 0;
    dcyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * dcyylex_init()
     */
    return 0;
}

/* dcyylex_destroy is for both reentrant and non-reentrant scanners. */
int dcyylex_destroy  (void)
{

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		dcyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		dcyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	dcyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * dcyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *dcyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *dcyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void dcyyfree (void * ptr )
{
	free( (char *) ptr );	/* see dcyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 757 "direct/src/dcparser/dcLexer.lxx"
